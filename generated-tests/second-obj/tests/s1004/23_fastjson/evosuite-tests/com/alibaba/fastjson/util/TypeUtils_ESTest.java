/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:27:33 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.ObjectArrayCodec;
import com.alibaba.fastjson.serializer.ReferenceCodec;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.geom.Dimension2D;
import java.awt.geom.Point2D;
import java.io.File;
import java.io.PrintStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Currency;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.UUID;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.Function;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils typeUtils0 = new TypeUtils();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.fnv1a_64("BrowserCompatible");
      HashMap<MockThaiBuddhistDate, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<MockThaiBuddhistDate, SQLInvalidAuthorizationSpecException>();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Class<NumberFormat> class1 = NumberFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) mockDateFormat0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.NumberFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TypeUtils.clearClassMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass(",OsubUC2ia3-fwV", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.getRawClass(class0);
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      TypeUtils.isPath(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TypeUtils.isTransient((Method) null);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("w<m`9,E_*ZHp", "Ljava.awt.Point");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(hashMap0);
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeUtils.isKotlin(class0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      mockMinguoDate0.getMockedClassName();
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      Random.setNextRandom((-3523));
      TypeUtils.toLocale("json-path can not be null or empty");
      Class<Float> class1 = Float.TYPE;
      TypeUtils.getCollectionItemClass(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class1, hashMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.Byte
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      java.util.IdentityHashMap<SQLTransactionRollbackException, SQLNonTransientConnectionException> identityHashMap0 = new java.util.IdentityHashMap<SQLTransactionRollbackException, SQLNonTransientConnectionException>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeSupport");
      Locale locale0 = Locale.UK;
      NumberFormat.getCurrencyInstance(locale0);
      Class<Float> class0 = Float.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      Class<Date> class1 = Date.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader1, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : sun.misc.Launcher$ExtClassLoader@28feb3fa
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer integer0 = new Integer(46);
      TypeUtils.castToBoolean(integer0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      Map<String, Field> map0 = null;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) weakHashMap0, (Map<String, Field>) null, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[0]);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      classLoader0.setPackageAssertionStatus("fastjson.parser.autoTypeAccept", false);
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      classLoader0.getParent();
      classLoader0.setDefaultAssertionStatus(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      ReferenceCodec referenceCodec0 = new ReferenceCodec();
      parserConfig1.putDeserializer(parameterizedTypeImpl0, referenceCodec0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackTraceElementDeserializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseInt error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.IntegerCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.isProxy(class0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      TypeUtils.loadClass("qpmmY", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getCollectionItemType(type0);
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.isProxy(class0);
      JSON.DEFFAULT_DATE_FORMAT = "i%Gbd#+QR3xE;>";
      Class<Time> class1 = Time.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(type0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TypeUtils.castToBoolean((Object) null);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = type0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = type0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[1]);
      ParameterizedTypeImpl parameterizedTypeImpl1 = TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNull(parameterizedTypeImpl1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      TypeUtils.isPath(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(serializeBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constructor<SQLNonTransientException>[] constructorArray0 = (Constructor<SQLNonTransientException>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      TypeUtils.isPath(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class0, propertyNamingStrategy0, false, true);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig1 = new ParserConfig(aSMClassLoader0);
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals(16793600L, uUID0.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.addAccept("'E");
      parserConfig0.addDeny("list");
      Class<Character> class0 = Character.class;
      TypeUtils.isPath(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = ParserConfig.global;
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockJapaneseDate0, (Type) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"mockedClassName\":\"java.time.chrono.JapaneseDate\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ljava.awt.Rectangle");
      TypeUtils typeUtils0 = new TypeUtils();
      Locale locale0 = TypeUtils.toLocale("Ljava.awt.Rectangle");
      assertEquals("ljava.awt.rectangle", locale0.toString());
      
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      TypeUtils.isKotlin(class0);
      String string0 = TypeUtils.decapitalize("getMetaClass");
      assertEquals("getMetaClass", string0);
      
      Class<TimeUnit> class1 = TimeUnit.class;
      boolean boolean0 = TypeUtils.isKotlin(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Q1Ti(BH6C8R", "Q1Ti(BH6C8R", 1585, (Map<String, ClientInfoStatus>) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) treeMap1, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      String string0 = File.separator;
      TypeUtils.unwrapOptional(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<Point> class1 = Point.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Integer integer0 = new Integer(46);
      TypeUtils.castToBoolean(integer0);
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Integer integer0 = new Integer(26);
      int[] intArray0 = new int[2];
      intArray0[0] = 36;
      intArray0[1] = 26;
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      timeUnit0.convert(26, timeUnit1);
      TypeUtils.decapitalize("*Q)ZhdIDu1WOt");
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) timeUnit0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : MINUTES
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, weakHashMap0);
      Class<FieldInfo> class1 = FieldInfo.class;
      TypeUtils.isPath(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<IllegalStateException> class0 = IllegalStateException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) treeMap0, true, propertyNamingStrategy0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SimpleTimeZone> class1 = SimpleTimeZone.class;
      JavaBeanDeserializer javaBeanDeserializer0 = null;
      try {
        javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.util.SimpleTimeZone
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      String string0 = ParserConfig.DENY_PROPERTY;
      Vector<FieldInfo> vector0 = new Stack<FieldInfo>();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("N396Qzd7D1P^nU/{wR");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"N396Qzd7D1P^nU/{wR\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils.loadClass("istoString");
      Short short0 = new Short((short)3059);
      TypeUtils.castToSqlTime(short0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(short0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListMap", classLoader1, true);
      TypeUtils.castToByte((Object) null);
      ParserConfig parserConfig0 = new ParserConfig(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeAccept");
      WeakHashMap<MockHijrahDate, NumberDeserializer> weakHashMap0 = new WeakHashMap<MockHijrahDate, NumberDeserializer>();
      DateFormatSymbols.getInstance();
      TypeUtils.castToSqlTime((Object) null);
      Class<?> class0 = TypeUtils.getClassFromMapping("fastjson.parser.autoTypeSupport");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("");
      assertEquals((-3750763034362895579L), long0);
      
      TypeUtils.castToSqlDate("");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.isPath(class0);
      TypeUtils.castToByte((Object) null);
      Integer integer0 = new Integer(46);
      Boolean boolean0 = TypeUtils.castToBoolean(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TypeUtils.loadClass("istoString");
      ParserConfig parserConfig0 = new ParserConfig();
      Map<String, String> map0 = null;
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Float> class0 = Float.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("Ljava.awt.Rectangle", "Ljava.awt.Rectangle");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      TypeUtils.castToBytes(";Y\u0000o{X");
      linkedHashMap0.put("boi/6lFm", ";Y\u0000o{X");
      TypeUtils.getKoltinConstructorParameters(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("boi/6lFm");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TypeUtils.isNumber("BUK(Lkv");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("BUK(Lkv");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Integer integer0 = new Integer(26);
      Boolean boolean0 = TypeUtils.castToBoolean(integer0);
      assertFalse(boolean0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "notifyAll");
      WeakHashMap<MockHijrahDate, NumberDeserializer> weakHashMap0 = new WeakHashMap<MockHijrahDate, NumberDeserializer>();
      Class<Long> class0 = Long.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      Locale locale0 = TypeUtils.toLocale("notifyAll");
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("can not cast oracle.sql.TIMESTAMP to Date");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : can not cast oracle.sql.TIMESTAMP to Date
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "kotlin.reflect.KFunction");
      TypeUtils.getClassFromMapping("y4ELY8B}.h<WtFYU");
      TypeUtils.isGenericParamType((Type) null);
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      TypeUtils.toLocale("Ljava.util.concurrent.ConcurrentSkipListMap");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("Ljava.util.concurrent.ConcurrentSkipListMap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : Ljava.util.concurrent.ConcurrentSkipListMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(33);
      jSONArray0.getComponentType();
      TypeUtils.getCollectionItemClass((Type) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      boolean boolean0 = TypeUtils.isHibernateInitialized(mockSimpleDateFormat0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Q1TiR(BH6C8R", "Lorg.springframework.util.LinkedMultiValueMap", 1611, (Map<String, ClientInfoStatus>) null);
      DataTruncation dataTruncation0 = new DataTruncation(1611, true, false, 1611, 1611, sQLClientInfoException0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) dataTruncation0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)58;
      byteArray0[2] = (byte)58;
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("`.M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : `.M
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"*`kd9%5I,|nmO";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      TypeUtils.getGenericParamType(class2);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class2);
      ThreadGroup threadGroup0 = new ThreadGroup("writer not null");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, " $}N1Hp2^I?");
      MockThread mockThread0 = new MockThread(threadGroup1, (Runnable) null, "\"*`kd9%5I,|nmO");
      mockThread0.getStackTrace();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      TypeUtils.getClassFromMapping("!JZiNH7gYn'i9R]-do");
      TypeUtils.isGenericParamType(class1);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(threadGroup1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.ThreadGroup[name= $}N1Hp2^I?,maxpri=10]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TypeUtils.loadClass((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.setBit(47);
      BigInteger bigInteger2 = bigInteger1.shiftRight((-272));
      BigInteger.valueOf(98L);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger2);
      bigDecimal0.scaleByPowerOfTen(1480);
      TypeUtils.castToBoolean(bigInteger1);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1503), "x1");
      TypeUtils.castToShort((Object) null);
      Class<DecimalFormat> class0 = DecimalFormat.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, true);
      AtomicLong atomicLong0 = new AtomicLong(98L);
      TypeUtils.castToByte(atomicLong0);
      Class<ClassLoader> class1 = ClassLoader.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class1, map0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Integer integer0 = new Integer(26);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<Long> class0 = Long.TYPE;
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class1, identityHashMap0, false, propertyNamingStrategy0);
      List<FieldInfo> list1 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0);
      assertTrue(list1.equals((Object)list0));
      
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      TypeUtils.isPath(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but string, pos 16, json : \"java.util.List\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "float", fieldArray0);
      TypeUtils.unwrapOptional((Type) null);
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SQLTransientConnectionException sQLTransientConnectionException0 = TypeUtils.cast((Object) null, class1, parserConfig0);
      assertNull(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TypeUtils.fnv1a_64("dd/MM/yyyy");
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("dd/MM/yyyy");
      Type[] typeArray0 = new Type[0];
      mockIllegalAccessException0.getCause();
      Class<Double> class0 = Double.TYPE;
      MockFile mockFile0 = new MockFile("dd/MM/yyyy", "dd/MM/yyyy");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.printf("dd/MM/yyyy", (Object[]) typeArray0);
      mockIllegalAccessException0.printStackTrace(printStream0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      parameterizedTypeImpl0.getTypeName();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalAccessException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. org.evosuite.runtime.mock.java.lang.MockIllegalAccessException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      Character.isBmpCodePoint((-1942));
      Class<Calendar> class0 = Calendar.class;
      TimeZone.getAvailableIDs();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.isNumber("fastjson.parser.autoTypeAccept");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      BigDecimal bigDecimal0 = new BigDecimal(121);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      try { 
        aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getCollectionItemType(type0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TypeUtils.getCollectionItemType((Type) null);
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      Byte byte0 = new Byte((byte)37);
      TypeUtils.castToByte(byte0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      TypeUtils.fnv1a_64_lower("Kq;rp");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer integer0 = new Integer(46);
      Boolean boolean0 = Boolean.FALSE;
      TypeUtils.castToSqlTime(integer0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("dK-e~@<S,LZ%^)Dj>)");
      Class<Character> class0 = Character.class;
      System.setCurrentTimeMillis(33238344207745342L);
      TypeUtils.getParserFeatures(class0);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      illegalMonitorStateException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(illegalMonitorStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.IllegalMonitorStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockThread mockThread0 = new MockThread("java.lang.String@0000000001");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("", (ClassLoader) aSMClassLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.instrumentation.InstrumentingClassLoader@692026d0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Integer integer0 = new Integer(26);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) integer0, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TypeUtils.isTransient((Method) null);
      UUID uUID0 = MockUUID.randomUUID();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(uUID0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : 00000000-0100-4000-8200-000003000000
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      String string0 = File.separator;
      TypeUtils.toLocale("2Z");
      TypeUtils.unwrapOptional(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("2Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : 2Z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer integer0 = new Integer(26);
      TypeUtils.loadClass("parserFeatures", (ClassLoader) null, true);
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.getGenericParamType(class0);
      Point point0 = new Point((-5473), 743);
      Class<Long> class1 = Long.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Time> class0 = Time.class;
      TypeUtils.castToBigDecimal((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.sql.Time
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Q1TiR(BH6C8R", "Lorg.springframework.util.LinkedMultiValueMap", 1611, (Map<String, ClientInfoStatus>) null);
      DataTruncation dataTruncation0 = new DataTruncation(1611, true, false, 1611, 1611, sQLClientInfoException0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      Type[] typeArray0 = new Type[2];
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[0]);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      classLoader0.setPackageAssertionStatus("fastjson.parser.autoTypeAccept", false);
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      classLoader0.getParent();
      classLoader0.setDefaultAssertionStatus(false);
      Boolean boolean0 = Boolean.TRUE;
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackTraceElementDeserializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@210a2288
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TypeUtils.fnv1a_64("x1");
      TypeUtils.castToSqlDate((Object) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.addDeny("x1");
      parserConfig0.clearDeserializers();
      Random.setNextRandom((-2058367914));
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "j");
      TypeUtils.castToLong((Object) null);
      Class<Long> class0 = Long.TYPE;
      TypeUtils.getSerializeFeatures(class0);
      System.setCurrentTimeMillis(0L);
      TypeUtils.unwrapOptional(class0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = new Integer(26);
      TypeUtils.castToBoolean(integer0);
      String string0 = "notifyAll";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "notifyAll");
      WeakHashMap<MockHijrahDate, NumberDeserializer> weakHashMap0 = new WeakHashMap<MockHijrahDate, NumberDeserializer>();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      weakHashMap0.put(mockHijrahDate0, numberDeserializer0);
      Class<Long> class0 = Long.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) weakHashMap0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "BUKphkv";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("BUKphkv");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      ParseContext parseContext0 = new ParseContext((ParseContext) null, jSONReaderScanner0, mockDateFormat0);
      ConcurrentHashMap<NumberDeserializer, JavaBeanDeserializer> concurrentHashMap0 = new ConcurrentHashMap<NumberDeserializer, JavaBeanDeserializer>();
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) parserConfig0, (Object) concurrentHashMap0);
      Type type0 = parseContext1.type;
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.createCollection(class0);
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(mapDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.MapDeserializer@5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Q1Ti(BH6C8R", "Q1Ti(BH6C8R", 1585, (Map<String, ClientInfoStatus>) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("Q1Ti(BH6C8R").when(genericArrayType0).toString();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Q1Ti(BH6C8R", (Type) genericArrayType0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : Q1Ti(BH6C8R
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      MockMinguoDate mockMinguoDate0 = TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap0, class0, parserConfig0);
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.decapitalize("Vi(,,)Aks");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(mockMinguoDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@28c8db1a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Long long0 = new Long(804L);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      TypeUtils.castToChar((Object) null);
      TypeUtils.fnv1a_64_lower("M29,&?K/4xgvdAJXMv");
      TypeUtils.unwrapOptional(class0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      String string0 = "list";
      parserConfig0.addDeny("list");
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "list", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Q1Ti(BH6C8R", "Q1Ti(BH6C8R", 1585, (Map<String, ClientInfoStatus>) null);
      ClassLoader.getSystemClassLoader();
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.castToBoolean((Object) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils typeUtils0 = new TypeUtils();
      Random.setNextRandom(2);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn(genericArrayType0).when(genericArrayType1).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType1);
      TypeUtils.isNumber("y_8");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer integer0 = new Integer(26);
      TypeUtils.castToBoolean(integer0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "notifyAll");
      WeakHashMap<MockHijrahDate, NumberDeserializer> weakHashMap0 = new WeakHashMap<MockHijrahDate, NumberDeserializer>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TypeUtils.castToInt((Object) null);
      TypeUtils.loadClass((String) null);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException((-38489319));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "L", 306, stringIndexOutOfBoundsException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer integer0 = new Integer(26);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<SQLWarning> class0 = SQLWarning.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = new Integer(26);
      TypeUtils.castToBoolean(integer0);
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("Ljava.awt.Point");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(noClassDefFoundError0);
      int int0 = 122;
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("Ljava.awt.Point");
      mockIllegalAccessException0.getCause();
      DataTruncation dataTruncation0 = new DataTruncation((-1974), false, true, (-1974), 122, (Throwable) null);
      Class<Integer> class0 = Integer.TYPE;
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.setAutoTypeSupport(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) dataTruncation0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.DataTruncation: Data truncation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      String string0 = File.separator;
      TypeUtils.toLocale("#h^+-_!7");
      Class<Short> class0 = Short.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("/", "/");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      String string1 = ParserConfig.AUTOTYPE_ACCEPT;
      byte[] byteArray0 = TypeUtils.castToBytes("fastjson.parser.autoTypeAccept");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("boi/6lFm", "fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : [B@8c9e3c6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      int[] intArray0 = new int[18];
      intArray0[0] = 21;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("4*AL)%w", "59/l 14J(QHp]v<}h", 21, intArray0);
      String string0 = "DGt@}!DL$Z<z\"f-";
      String string1 = " not found";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("DGt@}!DL$Z<z\"f-", " not found", batchUpdateException0);
      batchUpdateException0.initCause(sQLIntegrityConstraintViolationException0);
      Class<DataTruncation> class1 = DataTruncation.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "?o";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "?o", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.addDeny("list");
      Class<Character> class0 = Character.class;
      TypeUtils.isPath(class0);
      ClassLoader.getSystemClassLoader();
      Class<Date> class1 = Date.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "list", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : list
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Q1Ti(BH6CR", (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("toS", mockRuntimeException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransactionRollbackException0);
      sQLFeatureNotSupportedException0.getStackTrace();
      sQLFeatureNotSupportedException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.sql.SQLFeatureNotSupportedException: java.sql.SQLTransactionRollbackException: toS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = new Integer(26);
      int[] intArray0 = new int[5];
      intArray0[0] = 26;
      byte[] byteArray0 = new byte[2];
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      timeUnit0.toDays(0);
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      timeUnit0.convert(0, timeUnit1);
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.unwrapOptional((Type) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C");
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      TypeUtils.getSerializeFeatures(class0);
      ThreadGroup threadGroup0 = new ThreadGroup("fl");
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "lo");
      mockThread0.getStackTrace();
      MockThread mockThread1 = new MockThread(mockThread0, "lo");
      mockThread1.getContextClassLoader();
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      TypeUtils.loadClass("lo", classLoader0, false);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.isNumber("");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      mockMinguoDate0.getMockedClassName();
      TypeUtils.castToString(mockMinguoDate0);
      TypeUtils.toLocale("2Z");
      TypeUtils.unwrapOptional(class0);
      MockThread.currentThread();
      String string0 = "AllowArbitraryCommas";
      TypeUtils.isNumber("org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@0000000001");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@0000000001");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@0000000001\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      mockMinguoDate0.getMockedClassName();
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TypeUtils.fnv1a_64("L(nL'7G%WZ0");
      Long long0 = new Long(7336703907865232676L);
      String string0 = "*'nLKbr?80I(-BD#&]n";
      TypeUtils.isNumber("*'nLKbr?80I(-BD#&]n");
      Class<MessageFormat> class0 = MessageFormat.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.text.DateFormatSymbols@eae8aecc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      mockMinguoDate0.getMockedClassName();
      TypeUtils.toLocale("java.time.chrono.MinguoDate");
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      Class<FieldInfo> class1 = FieldInfo.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1);
      InstantiationException instantiationException0 = new InstantiationException("6C");
      MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("java.time.chrono.MinguoDate");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.time.chrono.MinguoDate\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TypeUtils.loadClass("istoString");
      Short short0 = new Short((short)3059);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.castToSqlTime(short0);
      TypeUtils.castToLong(short0);
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      Class<Object> class0 = Object.class;
      EnumDeserializer enumDeserializer0 = null;
      try {
        enumDeserializer0 = new EnumDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeUtils.getParserFeatures(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      System.setCurrentTimeMillis(0);
      Class<Rectangle> class1 = Rectangle.class;
      TypeUtils.getSerializeFeatures(class1);
      TypeUtils.loadClass("expect ':' at ", (ClassLoader) null);
      Class<IllegalThreadStateException> class2 = IllegalThreadStateException.class;
      Class<NoClassDefFoundError> class3 = NoClassDefFoundError.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("true", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("expect ':' at ", class3, class1, class0, (Field) null, 0, 1305, 2310);
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<IllegalAccessException> class1 = IllegalAccessException.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.fnv1a_64("Ljava.awt.Font");
      TypeUtils.toLocale("");
      HashMap<MockThaiBuddhistDate, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<MockThaiBuddhistDate, SQLInvalidAuthorizationSpecException>();
      TypeUtils.castToLong("");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer integer0 = new Integer(46);
      TypeUtils.castToBoolean(integer0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(909, "x1");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(simpleTimeZone0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.util.SimpleTimeZone[id=x1,offset=909,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      TypeUtils.isNumber("");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      mockMinguoDate0.getMockedClassName();
      TypeUtils.castToString(mockMinguoDate0);
      ThreadGroup threadGroup0 = new ThreadGroup("o");
      MockThread mockThread0 = new MockThread();
      String string0 = File.pathSeparator;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put((String) null, "<ZIgx80(h");
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, weakHashMap0);
      javaBeanSerializer0.getType();
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.util.concurrent.atomic.AtomicInteger
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      Class<Integer> class0 = Integer.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>(871);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Fr$RC^MCq@:");
      ThreadGroup threadGroup0 = new ThreadGroup("intValue");
      MockThread mockThread0 = new MockThread("Fr$RC^MCq@:");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "[I");
      MockThread mockThread2 = new MockThread(mockThread1);
      mockThread2.run();
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "");
      MockThread mockThread3 = new MockThread(threadGroup1, mockThread2, "BlxxpfLNB(Nx*]vm*D", 0L);
      ClassLoader classLoader0 = mockThread3.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig1 = ParserConfig.global;
      NumberDeserializer numberDeserializer1 = NumberDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockThread3, (Type) class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : Thread[BlxxpfLNB(Nx*]vm*D,5,]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      Class<Integer> class0 = Integer.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>(871);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.addDeny((String) null);
      parserConfig0.clearDeserializers();
      Class<StackOverflowError> class1 = StackOverflowError.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class1);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.isNumber("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@e4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeUtils.isKotlin(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      mockMinguoDate0.getMockedClassName();
      TypeUtils.castToString(mockMinguoDate0);
      TypeUtils.toLocale("2Z");
      Thread thread0 = MockThread.currentThread();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)92;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockThread mockThread0 = new MockThread(thread0);
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0, "l- &$L6RH^G=");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isNumber("ha");
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.decapitalize((String) null);
      TypeUtils.getKoltinConstructorParameters(class0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)92;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      TypeUtils.castToBoolean(bigInteger0);
      String string0 = "notifyAll";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "N396Qzd7D1P^nU/{wR");
      WeakHashMap<MockHijrahDate, NumberDeserializer> weakHashMap0 = new WeakHashMap<MockHijrahDate, NumberDeserializer>();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      weakHashMap0.put(mockHijrahDate0, numberDeserializer0);
      Class<Long> class0 = Long.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberDeserializer0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.parser.deserializer.NumberDeserializer@96
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.addDeny("list");
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<Character> class0 = Character.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "list", (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Integer integer0 = new Integer(46);
      TypeUtils.isHibernateInitialized(integer0);
      TypeUtils.toLocale(".claPs");
      TypeUtils.isNumber("can not cast oracle.sql.TIMESTAMP to Date");
      Dimension dimension0 = new Dimension();
      AtomicInteger atomicInteger0 = new AtomicInteger(52429);
      TypeUtils.castToDouble(atomicInteger0);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-89);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      TypeUtils.castToBoolean(bigDecimal0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((byte) (-6), "UjMBxj9.PVJ");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("UjMBxj9.PVJ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"UjMBxj9.PVJ\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"*`kd89%5I:,|nmVO";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      TypeUtils.getGenericParamType(class2);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class2);
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>(162);
      JSONObject jSONObject0 = new JSONObject(weakHashMap0);
      JSONObject jSONObject1 = jSONObject0.fluentPut("\"*`kd89%5I:,|nmVO", simplePropertyPreFilter0);
      AtomicInteger atomicInteger0 = new AtomicInteger(95);
      ParserConfig parserConfig0 = new ParserConfig();
      DecimalFormatSymbols.getInstance(jSONObject1.defaultLocale);
      Byte byte0 = Byte.valueOf((byte) (-28));
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -28
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.isNumber("");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      String string0 = File.separator;
      String string1 = "2Z";
      TypeUtils.toLocale("2Z");
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.isNumber("2Z");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = null;
      try {
        concurrentHashMap0 = new ConcurrentHashMap<String, Field>((-2093), (-2093), 644);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isProxy(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      ArrayList<Method> arrayList0 = new ArrayList<Method>();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-89);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.intValue();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      AtomicInteger atomicInteger0 = new AtomicInteger((byte) (-89));
      Boolean.valueOf("short");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((byte) (-89), "short");
      TypeUtils.castToShort(atomicInteger0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)45;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.setBit((byte)68);
      TypeUtils.castToDate(bigInteger0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-427L));
      Time time0 = new Time((-83L));
      TypeUtils.castToDate(time0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("fillInStackTrace", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. fillInStackTrace
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.isNumber("");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      String string0 = File.separator;
      TypeUtils.toLocale("2Z");
      TypeUtils.unwrapOptional(class0);
      ThreadGroup threadGroup0 = new ThreadGroup("org.springframework.aop.");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "2Z");
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0);
      MockThread mockThread2 = new MockThread(threadGroup1, mockThread1, "2Z");
      MockThread mockThread3 = new MockThread(threadGroup0, mockThread2, "[ek{0L", 1201L);
      mockThread3.getStackTrace();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      AtomicLong atomicLong0 = new AtomicLong(2147483647L);
      TypeUtils.castToInt(atomicLong0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(mockHijrahDate0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.e\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"*`kd89%5I:,|nmVO";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      TypeUtils.getGenericParamType(class2);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class2);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      classLoader0.getParent();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7p(~/^");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("\"*`kd89%5I:,|nmVO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : \"*`kd89%5I:,|nmVO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"*`kd89%5I:,|nmVO";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class2);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      classLoader1.clearAssertionStatus();
      classLoader0.clearAssertionStatus();
      Class<Byte> class3 = Byte.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class2, (Type) class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.getParent();
      boolean boolean0 = true;
      String string0 = "['T$?NyS0q";
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("['T$?NyS0q", (ClassLoader) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\"*`kd89%5I:,|nmVO";
      stringArray0[1] = "a0)Ky}](GQ[o}me(";
      stringArray0[2] = "\"*`kd89%5I:,|nmVO";
      stringArray0[3] = "\"*`kd89%5I:,|nmVO";
      stringArray0[4] = "\"*`kd89%5I:,|nmVO";
      stringArray0[5] = "\"*`kd89%5I:,|nmVO";
      stringArray0[6] = "\"*`kd89%5I:,|nmVO";
      stringArray0[7] = "\"*`kd89%5I:,|nmVO";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class2;
      Class<Long> class3 = Long.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[2]);
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class1, class3);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      classLoader0.getParent();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.springframework.util.LinkedMultiValueMap");
      InstantiationException instantiationException0 = new InstantiationException("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(instantiationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.InstantiationException: fastjson.parser.autoTypeSupport
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.isNumber("");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      String string0 = File.separator;
      TypeUtils.toLocale("2Z");
      ThreadGroup threadGroup0 = new ThreadGroup("org.springframework.aop.");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "2Z");
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0);
      MockThread mockThread2 = new MockThread(threadGroup0, "");
      MockThread mockThread3 = new MockThread(threadGroup0, mockThread2, "[ek{0L", 1201L);
      mockThread3.setUncaughtExceptionHandler(threadGroup0);
      mockThread3.getStackTrace();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(67, "");
      TypeUtils.castToShort("");
      TypeUtils.fnv1a_64_lower("fied_ser");
      TypeUtils.isNumber("");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      TypeUtils.castToBoolean("");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(mockThread0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : Thread[MockThread-0,5,Test_Execution_Group]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<InstantiationError> class0 = InstantiationError.class;
      TypeUtils.getSerializeFeatures(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      TypeUtils.getParserFeatures(class1);
      TypeUtils.getClass((Type) class1);
      String string0 = "o";
      TypeUtils.toLocale("o");
      InstantiationException instantiationException0 = new InstantiationException("net.sf.cglib.proxy.Factory");
      instantiationException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        instantiationException0.addSuppressed((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot suppress a null exception.
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.castToFloat((Object) null);
      Class<Object> class1 = Object.class;
      Class<ChoiceFormat> class2 = ChoiceFormat.class;
      FieldInfo fieldInfo0 = new FieldInfo("Vi(,,)Aks", class0, class2, class1, (Field) null, 1881, (-366), 1881);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.castToDouble((Object) null);
      TypeUtils.isTransient((Method) null);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Q1Ti(BH6C8R", "Q1Ti(BH6C8R", 1585, (Map<String, ClientInfoStatus>) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader.getSystemClassLoader();
      int[] intArray0 = new int[8];
      intArray0[0] = 2988;
      intArray0[1] = 2988;
      intArray0[2] = 1585;
      intArray0[3] = 1585;
      intArray0[4] = 1585;
      intArray0[5] = 1585;
      intArray0[6] = 2988;
      intArray0[7] = 2988;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Q1Ti(BH6C8R", "java.", 2988, intArray0);
      TypeUtils.castToShort((Object) null);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.isHibernateInitialized(map0);
      String string0 = "j";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-2416);
      intArray0[1] = 90;
      intArray0[2] = 93;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("j", "j", 93, intArray0);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      java.util.IdentityHashMap<String, ClientInfoStatus> identityHashMap0 = new java.util.IdentityHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(identityHashMap0, mockIllegalAccessException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Y", "HyVn#vx^>", sQLClientInfoException0);
      Class<SQLDataException> class0 = SQLDataException.class;
      Class<ImageCapabilities> class1 = ImageCapabilities.class;
      TypeUtils.computeGetters(class1, (Map<String, String>) null);
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader2);
      BigDecimal bigDecimal0 = new BigDecimal(90);
      Class<Boolean> class2 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) aSMDeserializerFactory0, (Type) class2, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      java.util.IdentityHashMap<SQLTransactionRollbackException, SQLNonTransientConnectionException> identityHashMap0 = new java.util.IdentityHashMap<SQLTransactionRollbackException, SQLNonTransientConnectionException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Function<SQLException, SQLNonTransientConnectionException> function0 = (Function<SQLException, SQLNonTransientConnectionException>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.sql.SQLException.class));
      identityHashMap0.computeIfAbsent(sQLTransactionRollbackException0, function0);
      TypeUtils.isHibernateInitialized(identityHashMap0);
      Locale locale0 = Locale.CHINESE;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("]b/[HOd#61T");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("T'u}si", "");
      linkedHashMap0.put("javax.xml.datatype.XMLGregorianCalendar", "getObjectWriter");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getObjectWriter");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      linkedHashMap0.entrySet();
      Class<Point> class0 = Point.class;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {T'u}si=, javax.xml.datatype.XMLGregorianCalendar=getObjectWriter}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Character> class0 = Character.class;
      TypeUtils.isPath(class0);
      ClassLoader.getSystemClassLoader();
      Class<Date> class1 = Date.class;
      TypeUtils.cast((Object) null, class1, parserConfig0);
      Boolean.logicalXor(false, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Character
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "writeEnum");
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("writeEnum", "andDecrement", 41, (Map<String, ClientInfoStatus>) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Character character0 = Character.valueOf('s');
      TypeUtils.castToChar(character0);
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(mockMinguoDate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@30eae284
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      java.util.IdentityHashMap<SQLTransactionRollbackException, SQLNonTransientConnectionException> identityHashMap0 = new java.util.IdentityHashMap<SQLTransactionRollbackException, SQLNonTransientConnectionException>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Type type1 = TypeUtils.unwrapOptional(type0);
      TypeUtils.unwrapOptional(type1);
      ThreadGroup threadGroup0 = new ThreadGroup("fastjson.parser.deny");
      ThreadGroup threadGroup1 = new ThreadGroup((String) null);
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup1, ".WTOa]?VNOw");
      ThreadGroup[] threadGroupArray0 = new ThreadGroup[5];
      threadGroupArray0[0] = threadGroup1;
      threadGroupArray0[1] = threadGroup1;
      threadGroupArray0[2] = threadGroup2;
      threadGroupArray0[3] = threadGroup2;
      threadGroupArray0[4] = threadGroup2;
      threadGroup1.enumerate(threadGroupArray0);
      MockThread mockThread0 = new MockThread(threadGroup1, ".WTOa]?VNOw");
      mockThread0.getStackTrace();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(threadGroup1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.ThreadGroup[name=null,maxpri=10]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader2);
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, (Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) renderingHints0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.awt.RenderingHints$Key
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      int[] intArray0 = new int[7];
      intArray0[0] = (-3407);
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      Class<JSONPDeserializer> class2 = JSONPDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader1);
      aSMClassLoader0.getParent();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Locale locale0 = Locale.UK;
      NumberFormat.getCurrencyInstance(locale0);
      Class<SqlDateDeserializer> class3 = SqlDateDeserializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class3);
      javaBeanSerializer0.getType();
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class2, class1);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("fastjson.parser.autoTypeSupport");
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, class3);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalAccessError0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.lang.IllegalAccessError -> com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\"*`kd89%5I:,|nmVO";
      String string0 = "o{$g^*.rFl0";
      stringArray0[1] = "o{$g^*.rFl0";
      Class<Character> class0 = Character.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMDeserializerFactory0.classLoader.getParent();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.parser.ParserConfig@5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      Character.isBmpCodePoint((-1942));
      Class<Calendar> class0 = Calendar.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.isNumber("fastjson.parser.autoTypeAccept");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      BigDecimal bigDecimal0 = new BigDecimal(121);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockJapaneseDate0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@35af3b3a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "";
      TypeUtils.decapitalize("");
      Locale locale0 = Locale.CHINA;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      ParsePosition parsePosition0 = new ParsePosition((-613));
      parsePosition0.setIndex((-613));
      DateFormat.getDateTimeInstance();
      mockSimpleDateFormat0.parseObject("", parsePosition0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      timeZone0.getOffset(1099511628211L);
      Boolean boolean0 = new Boolean("");
      Class<Dimension> class0 = Dimension.class;
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.cast((Object) "", class0, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(timeZone0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      Class<Long> class0 = Long.TYPE;
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      Class<SQLException> class1 = SQLException.class;
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.getCollectionItemClass(class1);
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class2, class2);
      InstantiationException instantiationException0 = new InstantiationException("getFastMatchToken");
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      InterruptedException interruptedException0 = new InterruptedException();
      boolean boolean0 = true;
      DataTruncation dataTruncation0 = new DataTruncation(5, true, true, 0, 31);
      HashSet<RuleBasedCollator> hashSet0 = new HashSet<RuleBasedCollator>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(hashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^O- Ua4i7b:5Kta?1)c");
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      parameterizedTypeImpl0.getTypeName();
      TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      Point point0 = new Point(832, 832);
      Rectangle rectangle0 = new Rectangle(point0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Rectangle rectangle1 = new Rectangle(rectangle0);
      rectangle1.translate(832, (-886));
      AffineTransform affineTransform0 = new AffineTransform();
      affineTransform0.isIdentity();
      rectangle0.getPathIterator(affineTransform0, (double) 1664);
      Dimension dimension0 = null;
      try {
        dimension0 = new Dimension((Dimension) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Dimension", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TypeUtils.loadClass("istoString");
      Short short0 = new Short((short)3059);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.castToSqlTime(short0);
      ThreadGroup threadGroup0 = new ThreadGroup("istoString");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "istoString");
      String string0 = ">-i)@B`3NA;:N";
      MockThread mockThread0 = new MockThread(threadGroup0, ">-i)@B`3NA;:N");
      MockThread mockThread1 = new MockThread(threadGroup1, mockThread0, "istoString");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      classLoader0.getParent();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(">-i)@B`3NA;:N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : >-i)@B`3NA;:N
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      Class<PropertyNamingStrategy> class2 = PropertyNamingStrategy.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class2, "TMYsCcuU", fieldArray0);
      FieldInfo fieldInfo0 = new FieldInfo("cs+Th:HJsC(8(S./", class1, class1, class1, (Field) null, (-3046), (-4367), (-3046));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isTransient((Method) null);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TypeUtils.fnv1a_64("L(nL'7G%WZ0");
      Long long0 = new Long(7336703907865232676L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.isHibernateInitialized((Object) null);
      Locale locale0 = Locale.CHINESE;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("not support awt class : ", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'n'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      String string0 = "'E";
      parserConfig0.addAccept("'E");
      parserConfig0.addDeny("fastjson.parser.autoTypeAccept");
      Class<Short> class0 = Short.class;
      TypeUtils.isPath(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = ParserConfig.global;
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      ParserConfig parserConfig2 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockJapaneseDate0, (Type) class0, parserConfig2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@5cc225df
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Double> class0 = Double.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) fileSystemHandling0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : org.evosuite.runtime.testdata.FileSystemHandling@165dafd2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constructor<SQLNonTransientException>[] constructorArray0 = (Constructor<SQLNonTransientException>[]) Array.newInstance(Constructor.class, 1);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("T'u}si", "");
      linkedHashMap0.put("javax.xml.datatype.XMLGregorianCalendar", "getObjectWriter");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getObjectWriter");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      linkedHashMap0.entrySet();
      Class<Point> class0 = Point.class;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      classLoader0.setPackageAssertionStatus("o_n68'U,O*Hp", true);
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.setDefaultAssertionStatus(true);
      boolean boolean0 = true;
      classLoader0.setPackageAssertionStatus("fastjson.parser.autoTypeSupport", true);
      Boolean boolean1 = new Boolean(true);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      Type[] typeArray0 = new Type[16];
      typeArray0[0] = (Type) class0;
      Class<Double> class1 = Double.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) jSONPDeserializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("T'u}si", "");
      linkedHashMap0.put("javax.xml.datatype.XMLGregorianCalendar", "getObjectWriter");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getObjectWriter");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      linkedHashMap0.entrySet();
      Class<Point> class0 = Point.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      ThreadGroup threadGroup0 = new ThreadGroup("getObjectWriter");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader2 = classLoader1.getParent();
      classLoader0.getParent();
      classLoader2.getParent();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      ParserConfig parserConfig1 = new ParserConfig();
      InstantiationError instantiationError0 = new InstantiationError((String) null);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Hashtable<String, Field> hashtable1 = new Hashtable<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) hashtable1, false, propertyNamingStrategy0);
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) serializeBeanInfo0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)50;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.setBit(1855);
      bigInteger0.shiftRight(16384);
      BigInteger.valueOf(1855);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BigDecimal bigDecimal1 = new BigDecimal((int) (byte)50);
      bigDecimal0.precision();
      bigDecimal0.compareTo(bigDecimal1);
      TypeUtils.castToBoolean(bigDecimal1);
      Boolean.logicalXor(false, true);
      TypeUtils.castToSqlDate(bigDecimal0);
  }
}
