/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:52:35 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMindApplet;
import freemind.view.mindmapview.MapView;
import java.awt.AWTEventMulticaster;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.GridLayout;
import java.awt.HeadlessException;
import java.awt.PopupMenu;
import java.awt.RenderingHints;
import java.awt.SystemColor;
import java.awt.color.ICC_Profile;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.awt.image.DirectColorModel;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import java.time.DayOfWeek;
import java.util.Date;
import java.util.Locale;
import javax.swing.Icon;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicPanelUI;
import javax.swing.plaf.basic.BasicSplitPaneDivider;
import javax.swing.plaf.synth.SynthComboBoxUI;
import javax.swing.plaf.synth.SynthSplitPaneUI;
import javax.swing.text.DefaultCaret;
import javax.swing.text.StyleContext;
import org.apache.crimson.tree.XmlDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xpath.compiler.FunctionTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Tile;
import org.openstreetmap.gui.jmapviewer.interfaces.TileSource;
import org.openstreetmap.gui.jmapviewer.tilesources.OsmTileSource;
import org.w3c.dom.Node;
import sun.awt.SunHints;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ComponentOrientation componentOrientation0 = jDayChooser0.getComponentOrientation();
      Locale locale0 = Locale.FRENCH;
      ComponentOrientation.getOrientation(locale0);
      jDayChooser0.applyComponentOrientation(componentOrientation0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.isDayBordersVisible();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.defaultMaxSelectableDate = date0;
      jDayChooser0.getY();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser0.getMouseListeners();
      jDayChooser0.setFocus();
      jDayChooser0.getWeekdayForeground();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2458), false);
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SynthComboBoxUI synthComboBoxUI0 = new SynthComboBoxUI();
      jDayChooser0.removePropertyChangeListener((PropertyChangeListener) synthComboBoxUI0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.firePropertyChange("7>adYE#qsCX4sLw", (short)75, (short)10);
      jDayChooser0.repaint(0, 0, (-437), 0);
      jDayChooser0.addMouseMotionListener(defaultCaret0);
      jDayChooser0.getVetoableChangeListeners();
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Date date1 = jDayChooser0.defaultMinSelectableDate;
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertNotNull(date1);
      assertNotSame(date1, date0);
      assertTrue(date1.equals((Object)date0));
      
      jDayChooser0.setSelectableDateRange(date0, date1);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertNotSame(date0, date1);
      assertNotSame(date1, date0);
      assertTrue(date0.equals((Object)date1));
      assertTrue(date1.equals((Object)date0));
      
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(boolean0);
      
      boolean boolean1 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      DayOfWeek dayOfWeek0 = DayOfWeek.SUNDAY;
      assertEquals(DayOfWeek.SUNDAY, dayOfWeek0);
      
      JYearChooser jYearChooser0 = new JYearChooser();
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(2014, jYearChooser0.getValue());
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertNotNull(jYearChooser0);
      
      jYearChooser0.setValue((-1585));
      assertEquals(1, jYearChooser0.getYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertEquals(1, jYearChooser0.getValue());
      
      jDayChooser0.setYearChooser(jYearChooser0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jYearChooser0.getYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertEquals(1, jYearChooser0.getValue());
      
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getGreen());
      assertNotNull(systemColor0);
      
      jDayChooser0.setWeekdayForeground(systemColor0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getGreen());
      
      jDayChooser0.setBounds((-4329), (-4329), (-1585), 46);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      ActionEvent actionEvent0 = new ActionEvent(dayOfWeek0, (-4329), "day");
      assertEquals(0, actionEvent0.getModifiers());
      assertEquals(0L, actionEvent0.getWhen());
      assertEquals("day", actionEvent0.getActionCommand());
      assertEquals((-4329), actionEvent0.getID());
      assertNotNull(actionEvent0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.time.DayOfWeek cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      boolean boolean0 = jDayChooser0.hasFocus();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean0);
      
      boolean boolean1 = jDayChooser0.getVerifyInputWhenFocusTarget();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent((Component) null, 0, 711L, 90, 90, 'U');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertNotNull(jDayChooser0);
      
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      assertNull(jYearChooser0);
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ";Ceter");
      assertFalse(boolean0);
      
      jDayChooser0.setMaxDayCharacters(3);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 3, 3, 3, 3, 3);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=3,MONTH=3,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=3,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=3,SECOND=3,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 3);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(3, focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      assertNotNull(focusEvent0);
      
      jDayChooser0.focusGained(focusEvent0);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(3, focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals((-2956050), color0.getRGB());
      assertEquals(210, color0.getRed());
      assertEquals(228, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(238, color0.getBlue());
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      assertEquals((-2039584), systemColor0.getRGB());
      assertEquals(224, systemColor0.getBlue());
      assertEquals(224, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(224, systemColor0.getRed());
      assertNotNull(systemColor0);
      
      Color color0 = Color.BLACK;
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertNotNull(color0);
      
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      assertNotNull(menuSelectionManager0);
      
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 1088, 1088, 1088, 1088, 'Y', (MenuElement[]) null, menuSelectionManager0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(17, menuKeyEvent0.getModifiers());
      assertEquals(1088, menuKeyEvent0.getID());
      assertFalse(menuKeyEvent0.isConsumed());
      assertTrue(menuKeyEvent0.isShiftDown());
      assertEquals(1088, menuKeyEvent0.getKeyCode());
      assertFalse(menuKeyEvent0.isAltDown());
      assertFalse(menuKeyEvent0.isAltGraphDown());
      assertEquals('Y', menuKeyEvent0.getKeyChar());
      assertFalse(menuKeyEvent0.isActionKey());
      assertFalse(menuKeyEvent0.isMetaDown());
      assertEquals(1088, menuKeyEvent0.getModifiersEx());
      assertEquals(0, menuKeyEvent0.getKeyLocation());
      assertFalse(menuKeyEvent0.isControlDown());
      assertEquals(1088L, menuKeyEvent0.getWhen());
      assertNotNull(menuKeyEvent0);
      
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(17, menuKeyEvent0.getModifiers());
      assertEquals(1088, menuKeyEvent0.getID());
      assertFalse(menuKeyEvent0.isConsumed());
      assertTrue(menuKeyEvent0.isShiftDown());
      assertEquals(1088, menuKeyEvent0.getKeyCode());
      assertFalse(menuKeyEvent0.isAltDown());
      assertFalse(menuKeyEvent0.isAltGraphDown());
      assertEquals('Y', menuKeyEvent0.getKeyChar());
      assertFalse(menuKeyEvent0.isActionKey());
      assertFalse(menuKeyEvent0.isMetaDown());
      assertEquals(1088, menuKeyEvent0.getModifiersEx());
      assertEquals(0, menuKeyEvent0.getKeyLocation());
      assertFalse(menuKeyEvent0.isControlDown());
      assertEquals(1088L, menuKeyEvent0.getWhen());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertNotNull(jDayChooser0);
      
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertNotNull(date1);
      assertSame(date0, date1);
      assertSame(date1, date0);
      
      int int0 = ICC_Profile.icSigAToB1Tag;
      assertEquals(1093812785, int0);
      
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      MockDate mockDate0 = new MockDate((-4227), (-4227), 681);
      assertEquals("Tue Aug 12 00:00:00 GMT 2679", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Date date0 = jDayChooser0.setMaxSelectableDate(mockDate0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("Tue Aug 12 00:00:00 GMT 2679", mockDate0.toString());
      assertEquals("Tue Aug 12 00:00:00 GMT 2679", date0.toString());
      assertNotNull(date0);
      assertSame(mockDate0, date0);
      assertSame(date0, mockDate0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-4227));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4227
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "1");
      assertFalse(boolean0);
      
      boolean boolean1 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "hy-AM");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JYearChooser jYearChooser0 = new JYearChooser();
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertNotNull(jYearChooser0);
      
      int int0 = jYearChooser0.getX();
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals(0, int0);
      
      boolean boolean2 = jYearChooser0.isPaintingTile();
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Color color0 = jYearChooser0.getBackground();
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals((-1118482), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(238, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(238, color0.getBlue());
      assertEquals(238, color0.getGreen());
      assertNotNull(color0);
      
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      boolean boolean3 = jDayChooser_DecoratorButton0.isFocusable();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = ">|.CUoOX@scr b1ZCJ";
      stringArray0[2] = "Center";
      stringArray0[3] = " not defined";
      stringArray0[4] = "spot";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 166, 166, 166, 1329, 'U');
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(166, keyEvent0.getID());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(128, keyEvent0.getModifiersEx());
      assertEquals('U', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(166L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(38, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(1329, keyEvent0.getKeyCode());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(166, keyEvent0.getID());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(128, keyEvent0.getModifiersEx());
      assertEquals('U', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(166L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(38, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(1329, keyEvent0.getKeyCode());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      assertNull(jYearChooser0);
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser0.setRequestFocusEnabled(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser0.firePropertyChange("22", 'R', '?');
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "22");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getGreen());
      assertEquals((-4144960), systemColor0.getRGB());
      assertNotNull(systemColor0);
      
      jDayChooser0.setSundayForeground(systemColor0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getGreen());
      assertEquals((-4144960), systemColor0.getRGB());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4227), (-4227), 681);
      assertEquals("Tue Aug 12 00:00:00 GMT 2679", mockDate0.toString());
      assertNotNull(mockDate0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setYear(11);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setDay((-2196));
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      Color color0 = Color.BLACK;
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertNotNull(color0);
      
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      jDayChooser0.grabFocus();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      GraphicsConfiguration graphicsConfiguration0 = jDayChooser0.getGraphicsConfiguration();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNull(graphicsConfiguration0);
      
      JDialog jDialog0 = null;
      try {
        jDialog0 = new JDialog((Frame) null, "day", false, (GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      GridLayout gridLayout0 = new GridLayout((-1297), 2388, 1597, (-2097));
      assertEquals((-1297), gridLayout0.getRows());
      assertEquals(1597, gridLayout0.getHgap());
      assertEquals((-2097), gridLayout0.getVgap());
      assertEquals(2388, gridLayout0.getColumns());
      assertNotNull(gridLayout0);
      
      JDayChooser jDayChooser1 = (JDayChooser)jDayChooser_DecoratorButton0.add("J/JW3y8k$- |", (Component) jDayChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertNotNull(jDayChooser1);
      assertSame(jDayChooser0, jDayChooser1);
      assertSame(jDayChooser1, jDayChooser0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Icon icon0 = jDayChooser_DecoratorButton0.getRolloverSelectedIcon();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertNull(icon0);
      assertSame(jDayChooser0, jDayChooser1);
      
      PDFInfo pDFInfo0 = new PDFInfo();
      assertFalse(pDFInfo0.hasObjectNumber());
      assertEquals(0, pDFInfo0.getGeneration());
      assertNull(pDFInfo0.getTitle());
      assertNotNull(pDFInfo0);
      
      Date date0 = pDFInfo0.getCreationDate();
      assertFalse(pDFInfo0.hasObjectNumber());
      assertEquals(0, pDFInfo0.getGeneration());
      assertNull(pDFInfo0.getTitle());
      assertNull(date0);
      
      Date date1 = jDayChooser0.setMaxSelectableDate((Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertNotNull(date1);
      assertSame(jDayChooser0, jDayChooser1);
      
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(2388);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2388
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.addVetoableChangeListener((VetoableChangeListener) null);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertNotNull(jPanel0);
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.grabFocus();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-748), 3513L, (-748), 36, '?');
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-768), keyEvent0.getModifiersEx());
      assertEquals('?', keyEvent0.getKeyChar());
      assertEquals((-748), keyEvent0.getID());
      assertEquals(36, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(3513L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals((-2147483628), keyEvent0.getModifiers());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyTyped(keyEvent0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-768), keyEvent0.getModifiersEx());
      assertEquals('?', keyEvent0.getKeyChar());
      assertEquals((-748), keyEvent0.getID());
      assertEquals(36, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(3513L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals((-2147483628), keyEvent0.getModifiers());
      
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(boolean0);
      
      boolean boolean1 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "hy-AM");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JYearChooser jYearChooser0 = new JYearChooser();
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(2014, jYearChooser0.getYear());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(1, jYearChooser0.getMinimum());
      assertNotNull(jYearChooser0);
      
      jYearChooser0.removeAll();
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(2014, jYearChooser0.getYear());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(1, jYearChooser0.getMinimum());
      
      int int0 = jYearChooser0.getX();
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(2014, jYearChooser0.getYear());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(1, jYearChooser0.getMinimum());
      assertEquals(0, int0);
      
      boolean boolean2 = jDayChooser0.isOpaque();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = jYearChooser0.isPaintingTile();
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(2014, jYearChooser0.getYear());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(1, jYearChooser0.getMinimum());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      Color color0 = jYearChooser0.getBackground();
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(2014, jYearChooser0.getYear());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(1, jYearChooser0.getMinimum());
      assertEquals(1, color0.getTransparency());
      assertEquals(238, color0.getGreen());
      assertEquals(238, color0.getRed());
      assertEquals(238, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-1118482), color0.getRGB());
      assertNotNull(color0);
      
      jDayChooser0.setYearChooser(jYearChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(2014, jYearChooser0.getYear());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(1, jYearChooser0.getMinimum());
      
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertNotNull(jPanel0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      Locale locale0 = jDayChooser0.getLocale();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      Color color0 = jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(164, color0.getRed());
      assertNotNull(color0);
      
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 6, 6, (-1058), 48, 'r', 48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMaxDayCharacters((-16));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      PopupMenu popupMenu0 = null;
      try {
        popupMenu0 = new PopupMenu(":`qV@^3gA3Ib~WC");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertNotNull(jDayChooser0);
      
      VetoableChangeListener[] vetoableChangeListenerArray0 = jDayChooser0.getVetoableChangeListeners();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertNotNull(vetoableChangeListenerArray0);
      
      Locale locale0 = jDayChooser0.getLocale();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      jDayChooser0.setMaxDayCharacters(4304);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      int int0 = jDayChooser0.getDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = jDayChooser0.contains(9999, 9999);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(boolean0);
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, int0);
      
      SunHints.Value sunHints_Value0 = (SunHints.Value)RenderingHints.VALUE_ANTIALIAS_DEFAULT;
      assertNotNull(sunHints_Value0);
      
      ActionEvent actionEvent0 = new ActionEvent(sunHints_Value0, 9999, "day");
      assertEquals("day", actionEvent0.getActionCommand());
      assertEquals(9999, actionEvent0.getID());
      assertEquals(0L, actionEvent0.getWhen());
      assertEquals(0, actionEvent0.getModifiers());
      assertNotNull(actionEvent0);
      
      String string0 = actionEvent0.paramString();
      assertEquals("day", actionEvent0.getActionCommand());
      assertEquals(9999, actionEvent0.getID());
      assertEquals(0L, actionEvent0.getWhen());
      assertEquals(0, actionEvent0.getModifiers());
      assertNotNull(string0);
      assertEquals("unknown type,cmd=day,when=0,modifiers=", string0);
      
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.setDay(1033);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // sun.awt.SunHints$Value cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      jDayChooser0.setSelectableDateRange(mockDate0, (Date) null);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser_DecoratorButton0, (-2097), false, jDayChooser0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertEquals((-2097), focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      assertNotNull(focusEvent0);
      
      focusEvent0.setSource(jDayChooser_DecoratorButton0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertEquals((-2097), focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      
      jDayChooser0.focusLost(focusEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertEquals((-2097), focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      
      MockDate mockDate1 = new MockDate(697, 697, 697, 697, 697);
      assertEquals("Mon Jan 26 12:37:00 GMT 2657", mockDate1.toString());
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      jDayChooser0.setMonth(697);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      JSpinner jSpinner0 = new JSpinner();
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertNotNull(jSpinner0);
      
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      assertNotNull(styleContext0);
      
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      assertNotNull(styleContext_NamedStyle0);
      
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      assertNotNull(basicPanelUI0);
      
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle(styleContext_NamedStyle0);
      assertNotNull(styleContext_NamedStyle1);
      assertFalse(styleContext_NamedStyle1.equals((Object)styleContext_NamedStyle0));
      
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jMonthChooser0.hasSpinner());
      assertEquals(1, jMonthChooser0.getMonth());
      assertNotNull(jMonthChooser0);
      
      JMonthChooser jMonthChooser1 = new JMonthChooser();
      assertFalse(jMonthChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser1.getIgnoreRepaint());
      assertFalse(jMonthChooser1.isFocusTraversalPolicySet());
      assertEquals(1, jMonthChooser1.getMonth());
      assertTrue(jMonthChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jMonthChooser1.hasSpinner());
      assertFalse(jMonthChooser1.isFocusCycleRoot());
      assertNotNull(jMonthChooser1);
      assertFalse(jMonthChooser1.equals((Object)jMonthChooser0));
      
      JMonthChooser jMonthChooser2 = jDayChooser0.monthChooser;
      assertNull(jMonthChooser2);
      
      jDayChooser0.setMonthChooser(jMonthChooser1);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser1.getIgnoreRepaint());
      assertFalse(jMonthChooser1.isFocusTraversalPolicySet());
      assertEquals(1, jMonthChooser1.getMonth());
      assertTrue(jMonthChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jMonthChooser1.hasSpinner());
      assertFalse(jMonthChooser1.isFocusCycleRoot());
      assertNotSame(jMonthChooser1, jMonthChooser0);
      assertFalse(jMonthChooser1.equals((Object)jMonthChooser0));
      
      Locale locale0 = jDayChooser0.getLocale();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
      
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, int0);
      
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      assertSame(date0, mockDate0);
      assertNotSame(date0, mockDate1);
      assertFalse(date0.equals((Object)mockDate1));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertNotNull(jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      Date date0 = jDayChooser1.getMaxSelectableDate();
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      int int0 = jDayChooser1.getY();
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(0, int0);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      boolean boolean0 = jDayChooser1.isDecorationBordersVisible();
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(boolean0);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      MouseListener[] mouseListenerArray0 = jDayChooser1.getMouseListeners();
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertNotNull(mouseListenerArray0);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      Color color0 = Color.blue;
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser1, 5, false);
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(focusEvent0.isTemporary());
      assertEquals(5, focusEvent0.getID());
      assertNotNull(focusEvent0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      boolean boolean1 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "day");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      Color color0 = Color.DARK_GRAY;
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(64, color0.getBlue());
      assertEquals(64, color0.getGreen());
      assertEquals((-12566464), color0.getRGB());
      assertEquals(64, color0.getRed());
      assertNotNull(color0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      jDayChooser0.grabFocus();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      jDayChooser0.setMaxDayCharacters(3);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      float float0 = jDayChooser0.getAlignmentX();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0.5F, float0, 0.01F);
      
      Boolean boolean4 = new Boolean(true);
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      boolean boolean5 = jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3, 3, 554, 2221, 'v');
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(512, keyEvent0.getModifiersEx());
      assertEquals(3L, keyEvent0.getWhen());
      assertEquals(2221, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(42, keyEvent0.getModifiers());
      assertEquals(3, keyEvent0.getID());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals('v', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isActionKey());
      assertNotNull(keyEvent0);
      
      keyEvent0.setKeyCode(554);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(512, keyEvent0.getModifiersEx());
      assertEquals(3L, keyEvent0.getWhen());
      assertEquals(554, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(42, keyEvent0.getModifiers());
      assertEquals(3, keyEvent0.getID());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals('v', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isActionKey());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(512, keyEvent0.getModifiersEx());
      assertEquals(3L, keyEvent0.getWhen());
      assertEquals(554, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(42, keyEvent0.getModifiers());
      assertEquals(3, keyEvent0.getID());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals('v', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isActionKey());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      MockDate mockDate0 = new MockDate(15, (-16), (-16));
      assertEquals("Fri Aug 15 00:00:00 GMT 1913", mockDate0.toString());
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, long0);
      
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      InputMethodListener inputMethodListener0 = AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener0);
      
      jDayChooser0.setMonth((-432));
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      boolean boolean0 = true;
      jDayChooser0.setEnabled(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      
      jDayChooser0.setMonth((-432));
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      MockDate mockDate0 = new MockDate((-1378), (-1378), (-1378));
      assertEquals("Fri May 22 00:00:00 GMT 403", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Object object0 = mockDate0.clone();
      assertEquals("Fri May 22 00:00:00 GMT 403", mockDate0.toString());
      assertEquals("Fri May 22 00:00:00 GMT 403", object0.toString());
      assertNotNull(object0);
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertTrue(object0.equals((Object)mockDate0));
      
      long long0 = mockDate0.getTime();
      assertEquals("Fri May 22 00:00:00 GMT 403", mockDate0.toString());
      assertEquals((-49437475200000L), long0);
      assertNotSame(mockDate0, object0);
      assertTrue(mockDate0.equals((Object)object0));
      
      Date date0 = jDayChooser0.setMinSelectableDate(mockDate0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals("Fri May 22 00:00:00 GMT 403", mockDate0.toString());
      assertEquals("Fri May 22 00:00:00 GMT 403", date0.toString());
      assertNotNull(date0);
      assertNotSame(mockDate0, object0);
      assertSame(mockDate0, date0);
      assertSame(date0, mockDate0);
      assertNotSame(date0, object0);
      assertTrue(mockDate0.equals((Object)object0));
      assertTrue(date0.equals((Object)object0));
      
      int int0 = jDayChooser0.getDaysInMonth();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(28, int0);
      
      Date date1 = jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertNotNull(date1);
      
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      JDayChooser jDayChooser1 = new JDayChooser();
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      
      JMenuItem jMenuItem0 = new JMenuItem("day");
      assertTrue(jMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jMenuItem0.getIgnoreRepaint());
      assertFalse(jMenuItem0.isFocusTraversalPolicySet());
      assertFalse(jMenuItem0.isFocusCycleRoot());
      assertFalse(jMenuItem0.isFocusTraversalPolicyProvider());
      assertNotNull(jMenuItem0);
      
      KeyEvent keyEvent0 = new KeyEvent(jMenuItem0, 278, 28, (-1378), (-1378), 'e');
      assertTrue(jMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jMenuItem0.getIgnoreRepaint());
      assertFalse(jMenuItem0.isFocusTraversalPolicySet());
      assertFalse(jMenuItem0.isFocusCycleRoot());
      assertFalse(jMenuItem0.isFocusTraversalPolicyProvider());
      assertTrue(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(28L, keyEvent0.getWhen());
      assertEquals('e', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-1408), keyEvent0.getModifiersEx());
      assertEquals(278, keyEvent0.getID());
      assertEquals((-1378), keyEvent0.getKeyCode());
      assertEquals((-2147483618), keyEvent0.getModifiers());
      assertFalse(keyEvent0.isActionKey());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jMenuItem0.getIgnoreRepaint());
      assertFalse(jMenuItem0.isFocusTraversalPolicySet());
      assertFalse(jMenuItem0.isFocusCycleRoot());
      assertFalse(jMenuItem0.isFocusTraversalPolicyProvider());
      assertTrue(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(28L, keyEvent0.getWhen());
      assertEquals('e', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-1408), keyEvent0.getModifiersEx());
      assertEquals(278, keyEvent0.getID());
      assertEquals((-1378), keyEvent0.getKeyCode());
      assertEquals((-2147483618), keyEvent0.getModifiers());
      assertFalse(keyEvent0.isActionKey());
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      
      XmlDocument xmlDocument0 = new XmlDocument();
      assertEquals((short)9, xmlDocument0.getNodeType());
      assertEquals(0, xmlDocument0.getLength());
      assertEquals("#document", xmlDocument0.getNodeName());
      assertFalse(xmlDocument0.hasChildNodes());
      assertFalse(xmlDocument0.hasAttributes());
      assertNull(xmlDocument0.getNamespaceURI());
      assertFalse(xmlDocument0.isReadonly());
      assertNull(xmlDocument0.getSystemId());
      assertNotNull(xmlDocument0);
      
      Node node0 = xmlDocument0.getNextSibling();
      assertEquals((short)9, xmlDocument0.getNodeType());
      assertEquals(0, xmlDocument0.getLength());
      assertEquals("#document", xmlDocument0.getNodeName());
      assertFalse(xmlDocument0.hasChildNodes());
      assertFalse(xmlDocument0.hasAttributes());
      assertNull(xmlDocument0.getNamespaceURI());
      assertFalse(xmlDocument0.isReadonly());
      assertNull(xmlDocument0.getSystemId());
      assertNull(node0);
      
      Locale locale1 = xmlDocument0.chooseLocale(stringArray0);
      assertEquals((short)9, xmlDocument0.getNodeType());
      assertEquals(0, xmlDocument0.getLength());
      assertEquals("#document", xmlDocument0.getNodeName());
      assertFalse(xmlDocument0.hasChildNodes());
      assertFalse(xmlDocument0.hasAttributes());
      assertNull(xmlDocument0.getNamespaceURI());
      assertFalse(xmlDocument0.isReadonly());
      assertNull(xmlDocument0.getSystemId());
      assertNull(locale1);
      
      Date date2 = jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date2.toString());
      assertNotNull(date2);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertSame(date2, date1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      
      Date date3 = jDayChooser0.defaultMinSelectableDate;
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date3.toString());
      assertNotNull(date3);
      assertNotSame(date3, date1);
      assertNotSame(date3, date2);
      assertTrue(date3.equals((Object)date2));
      assertTrue(date3.equals((Object)date1));
      
      jDayChooser1.setAlwaysFireDayProperty(true);
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertTrue(jMonthChooser0.hasSpinner());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jMonthChooser0.getMonth());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertNotNull(jMonthChooser0);
      
      jDayChooser0.setSelectableDateRange(date2, mockDate0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals("Fri May 22 00:00:00 GMT 403", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date2.toString());
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(mockDate0, object0);
      assertSame(mockDate0, date0);
      assertNotSame(date2, date3);
      assertSame(date2, date1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertTrue(mockDate0.equals((Object)object0));
      assertTrue(date2.equals((Object)date3));
      
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-1810));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1810
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      assertNull(jYearChooser0);
      
      OsmTileSource.TilesAtHome osmTileSource_TilesAtHome0 = new OsmTileSource.TilesAtHome();
      assertEquals(17, osmTileSource_TilesAtHome0.getMaxZoom());
      assertEquals("png", osmTileSource_TilesAtHome0.getTileType());
      assertEquals(TileSource.TileUpdate.IfModifiedSince, osmTileSource_TilesAtHome0.getTileUpdate());
      assertEquals(256, osmTileSource_TilesAtHome0.getTileSize());
      assertEquals("png", osmTileSource_TilesAtHome0.getExtension());
      assertEquals(0, osmTileSource_TilesAtHome0.getMinZoom());
      assertTrue(osmTileSource_TilesAtHome0.requiresAttribution());
      assertNull(osmTileSource_TilesAtHome0.getAttributionImageURL());
      assertEquals("http://www.openstreetmap.org/copyright", osmTileSource_TilesAtHome0.getTermsOfUseURL());
      assertEquals("TilesAtHome", osmTileSource_TilesAtHome0.toString());
      assertEquals("http://openstreetmap.org/", osmTileSource_TilesAtHome0.getAttributionLinkURL());
      assertEquals("TilesAtHome", osmTileSource_TilesAtHome0.getName());
      assertNull(osmTileSource_TilesAtHome0.getTermsOfUseText());
      assertNotNull(osmTileSource_TilesAtHome0);
      
      osmTileSource_TilesAtHome0.setTermsOfUseText("r4oRd;Zd>");
      assertEquals(17, osmTileSource_TilesAtHome0.getMaxZoom());
      assertEquals("png", osmTileSource_TilesAtHome0.getTileType());
      assertEquals(TileSource.TileUpdate.IfModifiedSince, osmTileSource_TilesAtHome0.getTileUpdate());
      assertEquals(256, osmTileSource_TilesAtHome0.getTileSize());
      assertEquals("png", osmTileSource_TilesAtHome0.getExtension());
      assertEquals(0, osmTileSource_TilesAtHome0.getMinZoom());
      assertTrue(osmTileSource_TilesAtHome0.requiresAttribution());
      assertNull(osmTileSource_TilesAtHome0.getAttributionImageURL());
      assertEquals("http://www.openstreetmap.org/copyright", osmTileSource_TilesAtHome0.getTermsOfUseURL());
      assertEquals("TilesAtHome", osmTileSource_TilesAtHome0.toString());
      assertEquals("http://openstreetmap.org/", osmTileSource_TilesAtHome0.getAttributionLinkURL());
      assertEquals("TilesAtHome", osmTileSource_TilesAtHome0.getName());
      assertNull(osmTileSource_TilesAtHome0.getTermsOfUseText());
      
      String string0 = jDayChooser0.getUIClassID();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(string0);
      assertEquals("PanelUI", string0);
      
      Tile tile0 = new Tile(osmTileSource_TilesAtHome0, (-3071), (-3071), (-841));
      assertEquals(17, osmTileSource_TilesAtHome0.getMaxZoom());
      assertEquals("png", osmTileSource_TilesAtHome0.getTileType());
      assertEquals(TileSource.TileUpdate.IfModifiedSince, osmTileSource_TilesAtHome0.getTileUpdate());
      assertEquals(256, osmTileSource_TilesAtHome0.getTileSize());
      assertEquals("png", osmTileSource_TilesAtHome0.getExtension());
      assertEquals(0, osmTileSource_TilesAtHome0.getMinZoom());
      assertTrue(osmTileSource_TilesAtHome0.requiresAttribution());
      assertNull(osmTileSource_TilesAtHome0.getAttributionImageURL());
      assertEquals("http://www.openstreetmap.org/copyright", osmTileSource_TilesAtHome0.getTermsOfUseURL());
      assertEquals("TilesAtHome", osmTileSource_TilesAtHome0.toString());
      assertEquals("http://openstreetmap.org/", osmTileSource_TilesAtHome0.getAttributionLinkURL());
      assertEquals("TilesAtHome", osmTileSource_TilesAtHome0.getName());
      assertNull(osmTileSource_TilesAtHome0.getTermsOfUseText());
      assertEquals((-841), tile0.getZoom());
      assertFalse(tile0.hasError());
      assertEquals((-3071), tile0.getYtile());
      assertFalse(tile0.isLoading());
      assertEquals("-841/-3071/-3071@TilesAtHome", tile0.getKey());
      assertEquals("new", tile0.getStatus());
      assertFalse(tile0.isLoaded());
      assertEquals((-3071), tile0.getXtile());
      assertNull(tile0.getErrorMessage());
      assertNotNull(tile0);
      
      BufferedImage bufferedImage0 = tile0.getImage();
      assertEquals(17, osmTileSource_TilesAtHome0.getMaxZoom());
      assertEquals("png", osmTileSource_TilesAtHome0.getTileType());
      assertEquals(TileSource.TileUpdate.IfModifiedSince, osmTileSource_TilesAtHome0.getTileUpdate());
      assertEquals(256, osmTileSource_TilesAtHome0.getTileSize());
      assertEquals("png", osmTileSource_TilesAtHome0.getExtension());
      assertEquals(0, osmTileSource_TilesAtHome0.getMinZoom());
      assertTrue(osmTileSource_TilesAtHome0.requiresAttribution());
      assertNull(osmTileSource_TilesAtHome0.getAttributionImageURL());
      assertEquals("http://www.openstreetmap.org/copyright", osmTileSource_TilesAtHome0.getTermsOfUseURL());
      assertEquals("TilesAtHome", osmTileSource_TilesAtHome0.toString());
      assertEquals("http://openstreetmap.org/", osmTileSource_TilesAtHome0.getAttributionLinkURL());
      assertEquals("TilesAtHome", osmTileSource_TilesAtHome0.getName());
      assertNull(osmTileSource_TilesAtHome0.getTermsOfUseText());
      assertEquals((-841), tile0.getZoom());
      assertFalse(tile0.hasError());
      assertEquals((-3071), tile0.getYtile());
      assertFalse(tile0.isLoading());
      assertEquals("-841/-3071/-3071@TilesAtHome", tile0.getKey());
      assertEquals("new", tile0.getStatus());
      assertFalse(tile0.isLoaded());
      assertEquals((-3071), tile0.getXtile());
      assertNull(tile0.getErrorMessage());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(255, bufferedImage0.getWidth());
      assertEquals(255, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(255, bufferedImage0.getTileWidth());
      assertEquals(255, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(6, bufferedImage0.getType());
      assertNotNull(bufferedImage0);
      
      int int0 = FunctionTable.FUNC_STARTS_WITH;
      assertEquals(21, int0);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.getGraphics();
      assertEquals(17, osmTileSource_TilesAtHome0.getMaxZoom());
      assertEquals("png", osmTileSource_TilesAtHome0.getTileType());
      assertEquals(TileSource.TileUpdate.IfModifiedSince, osmTileSource_TilesAtHome0.getTileUpdate());
      assertEquals(256, osmTileSource_TilesAtHome0.getTileSize());
      assertEquals("png", osmTileSource_TilesAtHome0.getExtension());
      assertEquals(0, osmTileSource_TilesAtHome0.getMinZoom());
      assertTrue(osmTileSource_TilesAtHome0.requiresAttribution());
      assertNull(osmTileSource_TilesAtHome0.getAttributionImageURL());
      assertEquals("http://www.openstreetmap.org/copyright", osmTileSource_TilesAtHome0.getTermsOfUseURL());
      assertEquals("TilesAtHome", osmTileSource_TilesAtHome0.toString());
      assertEquals("http://openstreetmap.org/", osmTileSource_TilesAtHome0.getAttributionLinkURL());
      assertEquals("TilesAtHome", osmTileSource_TilesAtHome0.getName());
      assertNull(osmTileSource_TilesAtHome0.getTermsOfUseText());
      assertEquals((-841), tile0.getZoom());
      assertFalse(tile0.hasError());
      assertEquals((-3071), tile0.getYtile());
      assertFalse(tile0.isLoading());
      assertEquals("-841/-3071/-3071@TilesAtHome", tile0.getKey());
      assertEquals("new", tile0.getStatus());
      assertFalse(tile0.isLoaded());
      assertEquals((-3071), tile0.getXtile());
      assertNull(tile0.getErrorMessage());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(255, bufferedImage0.getWidth());
      assertEquals(255, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(255, bufferedImage0.getTileWidth());
      assertEquals(255, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(6, bufferedImage0.getType());
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.transY);
      assertNotNull(sunGraphics2D0);
      
      jDayChooser0.paint(sunGraphics2D0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(17, osmTileSource_TilesAtHome0.getMaxZoom());
      assertEquals("png", osmTileSource_TilesAtHome0.getTileType());
      assertEquals(TileSource.TileUpdate.IfModifiedSince, osmTileSource_TilesAtHome0.getTileUpdate());
      assertEquals(256, osmTileSource_TilesAtHome0.getTileSize());
      assertEquals("png", osmTileSource_TilesAtHome0.getExtension());
      assertEquals(0, osmTileSource_TilesAtHome0.getMinZoom());
      assertTrue(osmTileSource_TilesAtHome0.requiresAttribution());
      assertNull(osmTileSource_TilesAtHome0.getAttributionImageURL());
      assertEquals("http://www.openstreetmap.org/copyright", osmTileSource_TilesAtHome0.getTermsOfUseURL());
      assertEquals("TilesAtHome", osmTileSource_TilesAtHome0.toString());
      assertEquals("http://openstreetmap.org/", osmTileSource_TilesAtHome0.getAttributionLinkURL());
      assertEquals("TilesAtHome", osmTileSource_TilesAtHome0.getName());
      assertNull(osmTileSource_TilesAtHome0.getTermsOfUseText());
      assertEquals((-841), tile0.getZoom());
      assertFalse(tile0.hasError());
      assertEquals((-3071), tile0.getYtile());
      assertFalse(tile0.isLoading());
      assertEquals("-841/-3071/-3071@TilesAtHome", tile0.getKey());
      assertEquals("new", tile0.getStatus());
      assertFalse(tile0.isLoaded());
      assertEquals((-3071), tile0.getXtile());
      assertNull(tile0.getErrorMessage());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(255, bufferedImage0.getWidth());
      assertEquals(255, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(255, bufferedImage0.getTileWidth());
      assertEquals(255, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(6, bufferedImage0.getType());
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.transY);
      
      jDayChooser0.setDecorationBackgroundColor(sunGraphics2D0.foregroundColor);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(17, osmTileSource_TilesAtHome0.getMaxZoom());
      assertEquals("png", osmTileSource_TilesAtHome0.getTileType());
      assertEquals(TileSource.TileUpdate.IfModifiedSince, osmTileSource_TilesAtHome0.getTileUpdate());
      assertEquals(256, osmTileSource_TilesAtHome0.getTileSize());
      assertEquals("png", osmTileSource_TilesAtHome0.getExtension());
      assertEquals(0, osmTileSource_TilesAtHome0.getMinZoom());
      assertTrue(osmTileSource_TilesAtHome0.requiresAttribution());
      assertNull(osmTileSource_TilesAtHome0.getAttributionImageURL());
      assertEquals("http://www.openstreetmap.org/copyright", osmTileSource_TilesAtHome0.getTermsOfUseURL());
      assertEquals("TilesAtHome", osmTileSource_TilesAtHome0.toString());
      assertEquals("http://openstreetmap.org/", osmTileSource_TilesAtHome0.getAttributionLinkURL());
      assertEquals("TilesAtHome", osmTileSource_TilesAtHome0.getName());
      assertNull(osmTileSource_TilesAtHome0.getTermsOfUseText());
      assertEquals((-841), tile0.getZoom());
      assertFalse(tile0.hasError());
      assertEquals((-3071), tile0.getYtile());
      assertFalse(tile0.isLoading());
      assertEquals("-841/-3071/-3071@TilesAtHome", tile0.getKey());
      assertEquals("new", tile0.getStatus());
      assertFalse(tile0.isLoaded());
      assertEquals((-3071), tile0.getXtile());
      assertNull(tile0.getErrorMessage());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(255, bufferedImage0.getWidth());
      assertEquals(255, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(255, bufferedImage0.getTileWidth());
      assertEquals(255, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(6, bufferedImage0.getType());
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.transY);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3071), 1, 0, 39, ')');
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(1L, keyEvent0.getWhen());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-3071), keyEvent0.getID());
      assertEquals(39, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(')', keyEvent0.getKeyChar());
      assertEquals(0, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isActionKey());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(15, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(1L, keyEvent0.getWhen());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-3071), keyEvent0.getID());
      assertEquals(39, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(')', keyEvent0.getKeyChar());
      assertEquals(0, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isActionKey());
      
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(15, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      KeyEvent keyEvent1 = null;
      try {
        keyEvent1 = new KeyEvent((Component) null, 0, (-3071), (-1979), 3046, 'D');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertNotNull(jDayChooser0);
      
      Color color0 = Color.BLACK;
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertNotNull(color0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      Date date0 = jDayChooser0.setMinSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      int int0 = jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(28, int0);
      
      Date date1 = jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertNotNull(date1);
      assertNotSame(date1, date0);
      assertTrue(date1.equals((Object)date0));
      
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      assertNotNull(menuSelectionManager0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int1 = SwingConstants.EAST;
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser_DecoratorButton0, 63705, (-380L), 2042, 63705, 'G', menuElementArray0, menuSelectionManager0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertEquals(0, menuKeyEvent0.getKeyLocation());
      assertFalse(menuKeyEvent0.isMetaDown());
      assertEquals((-380L), menuKeyEvent0.getWhen());
      assertEquals(1984, menuKeyEvent0.getModifiersEx());
      assertEquals('G', menuKeyEvent0.getKeyChar());
      assertFalse(menuKeyEvent0.isShiftDown());
      assertTrue(menuKeyEvent0.isControlDown());
      assertTrue(menuKeyEvent0.isAltGraphDown());
      assertFalse(menuKeyEvent0.isConsumed());
      assertTrue(menuKeyEvent0.isAltDown());
      assertEquals(63705, menuKeyEvent0.getKeyCode());
      assertEquals(63705, menuKeyEvent0.getID());
      assertEquals(58, menuKeyEvent0.getModifiers());
      assertFalse(menuKeyEvent0.isActionKey());
      assertNotNull(menuKeyEvent0);
      
      jDayChooser_DecoratorButton0.setMultiClickThreshhold(63705);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      
      Color color1 = Color.DARK_GRAY;
      assertEquals(64, color1.getBlue());
      assertEquals((-12566464), color1.getRGB());
      assertEquals(64, color1.getRed());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(64, color1.getGreen());
      assertNotNull(color1);
      assertNotSame(color1, color0);
      assertFalse(color1.equals((Object)color0));
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertNotNull(jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      jDayChooser1.keyPressed(menuKeyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertEquals(0, menuKeyEvent0.getKeyLocation());
      assertFalse(menuKeyEvent0.isMetaDown());
      assertEquals((-380L), menuKeyEvent0.getWhen());
      assertEquals(1984, menuKeyEvent0.getModifiersEx());
      assertEquals('G', menuKeyEvent0.getKeyChar());
      assertFalse(menuKeyEvent0.isShiftDown());
      assertTrue(menuKeyEvent0.isControlDown());
      assertTrue(menuKeyEvent0.isAltGraphDown());
      assertFalse(menuKeyEvent0.isConsumed());
      assertTrue(menuKeyEvent0.isAltDown());
      assertEquals(63705, menuKeyEvent0.getKeyCode());
      assertEquals(63705, menuKeyEvent0.getID());
      assertEquals(58, menuKeyEvent0.getModifiers());
      assertFalse(menuKeyEvent0.isActionKey());
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      Button button0 = null;
      try {
        button0 = new Button("day");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      Cursor cursor0 = jDayChooser0.getCursor();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals("Default Cursor", cursor0.getName());
      assertEquals(0, cursor0.getType());
      assertNotNull(cursor0);
      
      Boolean boolean0 = Boolean.valueOf("day");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      JDayChooser jDayChooser1 = new JDayChooser();
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertNotNull(jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      JDayChooser jDayChooser2 = new JDayChooser();
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertEquals(14, jDayChooser2.getDay());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertNotNull(jDayChooser2);
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      
      int int0 = SwingConstants.VERTICAL;
      assertEquals(1, int0);
      
      Cursor cursor1 = jDayChooser0.getCursor();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, cursor1.getType());
      assertEquals("Default Cursor", cursor1.getName());
      assertNotNull(cursor1);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser0, jDayChooser2);
      assertSame(cursor1, cursor0);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.equals((Object)jDayChooser2));
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      JDayChooser jDayChooser3 = new JDayChooser(true);
      assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser3.isWeekOfYearVisible());
      assertTrue(jDayChooser3.isDayBordersVisible());
      assertFalse(jDayChooser3.isDecorationBordersVisible());
      assertFalse(jDayChooser3.isFocusTraversalPolicySet());
      assertFalse(jDayChooser3.isFocusCycleRoot());
      assertTrue(jDayChooser3.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser3.getMaxDayCharacters());
      assertEquals(14, jDayChooser3.getDay());
      assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser3.getIgnoreRepaint());
      assertNotNull(jDayChooser3);
      assertFalse(jDayChooser3.equals((Object)jDayChooser1));
      assertFalse(jDayChooser3.equals((Object)jDayChooser0));
      assertFalse(jDayChooser3.equals((Object)jDayChooser2));
      
      jDayChooser3.setAlwaysFireDayProperty(true);
      assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser3.isWeekOfYearVisible());
      assertTrue(jDayChooser3.isDayBordersVisible());
      assertFalse(jDayChooser3.isDecorationBordersVisible());
      assertFalse(jDayChooser3.isFocusTraversalPolicySet());
      assertFalse(jDayChooser3.isFocusCycleRoot());
      assertTrue(jDayChooser3.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser3.getMaxDayCharacters());
      assertEquals(14, jDayChooser3.getDay());
      assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser3.getIgnoreRepaint());
      assertNotSame(jDayChooser3, jDayChooser1);
      assertNotSame(jDayChooser3, jDayChooser0);
      assertNotSame(jDayChooser3, jDayChooser2);
      assertFalse(jDayChooser3.equals((Object)jDayChooser1));
      assertFalse(jDayChooser3.equals((Object)jDayChooser0));
      assertFalse(jDayChooser3.equals((Object)jDayChooser2));
      
      jDayChooser3.revalidate();
      assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser3.isWeekOfYearVisible());
      assertTrue(jDayChooser3.isDayBordersVisible());
      assertFalse(jDayChooser3.isDecorationBordersVisible());
      assertFalse(jDayChooser3.isFocusTraversalPolicySet());
      assertFalse(jDayChooser3.isFocusCycleRoot());
      assertTrue(jDayChooser3.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser3.getMaxDayCharacters());
      assertEquals(14, jDayChooser3.getDay());
      assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser3.getIgnoreRepaint());
      assertNotSame(jDayChooser3, jDayChooser1);
      assertNotSame(jDayChooser3, jDayChooser0);
      assertNotSame(jDayChooser3, jDayChooser2);
      assertFalse(jDayChooser3.equals((Object)jDayChooser1));
      assertFalse(jDayChooser3.equals((Object)jDayChooser0));
      assertFalse(jDayChooser3.equals((Object)jDayChooser2));
      
      JDayChooser jDayChooser4 = new JDayChooser();
      assertTrue(jDayChooser4.isDecorationBackgroundVisible());
      assertFalse(jDayChooser4.isFocusTraversalPolicySet());
      assertFalse(jDayChooser4.isFocusCycleRoot());
      assertFalse(jDayChooser4.isWeekOfYearVisible());
      assertFalse(jDayChooser4.isDecorationBordersVisible());
      assertFalse(jDayChooser4.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser4.getIgnoreRepaint());
      assertTrue(jDayChooser4.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser4.getMaxDayCharacters());
      assertTrue(jDayChooser4.isDayBordersVisible());
      assertEquals(14, jDayChooser4.getDay());
      assertNotNull(jDayChooser4);
      assertFalse(jDayChooser4.equals((Object)jDayChooser3));
      assertFalse(jDayChooser4.equals((Object)jDayChooser2));
      assertFalse(jDayChooser4.equals((Object)jDayChooser0));
      assertFalse(jDayChooser4.equals((Object)jDayChooser1));
      
      jDayChooser3.setBounds(1, 894, 3, 40);
      assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser3.isWeekOfYearVisible());
      assertTrue(jDayChooser3.isDayBordersVisible());
      assertFalse(jDayChooser3.isDecorationBordersVisible());
      assertFalse(jDayChooser3.isFocusTraversalPolicySet());
      assertFalse(jDayChooser3.isFocusCycleRoot());
      assertTrue(jDayChooser3.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser3.getMaxDayCharacters());
      assertEquals(14, jDayChooser3.getDay());
      assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser3.getIgnoreRepaint());
      assertNotSame(jDayChooser3, jDayChooser1);
      assertNotSame(jDayChooser3, jDayChooser4);
      assertNotSame(jDayChooser3, jDayChooser0);
      assertNotSame(jDayChooser3, jDayChooser2);
      assertFalse(jDayChooser3.equals((Object)jDayChooser1));
      assertFalse(jDayChooser3.equals((Object)jDayChooser4));
      assertFalse(jDayChooser3.equals((Object)jDayChooser0));
      assertFalse(jDayChooser3.equals((Object)jDayChooser2));
      
      jDayChooser3.setAlwaysFireDayProperty(false);
      assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser3.isWeekOfYearVisible());
      assertTrue(jDayChooser3.isDayBordersVisible());
      assertFalse(jDayChooser3.isDecorationBordersVisible());
      assertFalse(jDayChooser3.isFocusTraversalPolicySet());
      assertFalse(jDayChooser3.isFocusCycleRoot());
      assertTrue(jDayChooser3.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser3.getMaxDayCharacters());
      assertEquals(14, jDayChooser3.getDay());
      assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser3.getIgnoreRepaint());
      assertNotSame(jDayChooser3, jDayChooser1);
      assertNotSame(jDayChooser3, jDayChooser4);
      assertNotSame(jDayChooser3, jDayChooser0);
      assertNotSame(jDayChooser3, jDayChooser2);
      assertFalse(jDayChooser3.equals((Object)jDayChooser1));
      assertFalse(jDayChooser3.equals((Object)jDayChooser4));
      assertFalse(jDayChooser3.equals((Object)jDayChooser0));
      assertFalse(jDayChooser3.equals((Object)jDayChooser2));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser3, 1, (-474L), 32768, 40, '_');
      assertFalse(keyEvent0.isConsumed());
      assertFalse(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(1, keyEvent0.getID());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(32768, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(0, keyEvent0.getModifiers());
      assertEquals(40, keyEvent0.getKeyCode());
      assertEquals('_', keyEvent0.getKeyChar());
      assertEquals((-474L), keyEvent0.getWhen());
      assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser3.isWeekOfYearVisible());
      assertTrue(jDayChooser3.isDayBordersVisible());
      assertFalse(jDayChooser3.isDecorationBordersVisible());
      assertFalse(jDayChooser3.isFocusTraversalPolicySet());
      assertFalse(jDayChooser3.isFocusCycleRoot());
      assertTrue(jDayChooser3.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser3.getMaxDayCharacters());
      assertEquals(14, jDayChooser3.getDay());
      assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser3.getIgnoreRepaint());
      assertNotNull(keyEvent0);
      assertFalse(jDayChooser3.equals((Object)jDayChooser1));
      assertFalse(jDayChooser3.equals((Object)jDayChooser4));
      assertFalse(jDayChooser3.equals((Object)jDayChooser0));
      assertFalse(jDayChooser3.equals((Object)jDayChooser2));
      
      jDayChooser2.keyPressed(keyEvent0);
      assertFalse(keyEvent0.isConsumed());
      assertFalse(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(1, keyEvent0.getID());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(32768, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(0, keyEvent0.getModifiers());
      assertEquals(40, keyEvent0.getKeyCode());
      assertEquals('_', keyEvent0.getKeyChar());
      assertEquals((-474L), keyEvent0.getWhen());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertEquals(21, jDayChooser2.getDay());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser3.isWeekOfYearVisible());
      assertTrue(jDayChooser3.isDayBordersVisible());
      assertFalse(jDayChooser3.isDecorationBordersVisible());
      assertFalse(jDayChooser3.isFocusTraversalPolicySet());
      assertFalse(jDayChooser3.isFocusCycleRoot());
      assertTrue(jDayChooser3.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser3.getMaxDayCharacters());
      assertEquals(14, jDayChooser3.getDay());
      assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser3.getIgnoreRepaint());
      assertNotSame(jDayChooser2, jDayChooser3);
      assertNotSame(jDayChooser2, jDayChooser4);
      assertNotSame(jDayChooser2, jDayChooser0);
      assertNotSame(jDayChooser2, jDayChooser1);
      assertNotSame(jDayChooser3, jDayChooser1);
      assertNotSame(jDayChooser3, jDayChooser4);
      assertNotSame(jDayChooser3, jDayChooser0);
      assertNotSame(jDayChooser3, jDayChooser2);
      assertFalse(jDayChooser2.equals((Object)jDayChooser3));
      assertFalse(jDayChooser2.equals((Object)jDayChooser4));
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertFalse(jDayChooser3.equals((Object)jDayChooser1));
      assertFalse(jDayChooser3.equals((Object)jDayChooser4));
      assertFalse(jDayChooser3.equals((Object)jDayChooser0));
      assertFalse(jDayChooser3.equals((Object)jDayChooser2));
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertNotNull(jDayChooser_DecoratorButton0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(jDayChooser1.equals((Object)jDayChooser2));
      assertFalse(jDayChooser1.equals((Object)jDayChooser4));
      assertFalse(jDayChooser1.equals((Object)jDayChooser3));
      
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      assertEquals("", pDFDocumentGraphics2D0.getString());
      assertNotNull(pDFDocumentGraphics2D0);
      
      // Undeclared exception!
      try { 
        pDFDocumentGraphics2D0.create();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      JDayChooser jDayChooser1 = new JDayChooser();
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      int int0 = SwingConstants.VERTICAL;
      assertEquals(1, int0);
      
      jDayChooser0.setDay(894);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      
      Cursor cursor0 = jDayChooser1.getCursor();
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(0, cursor0.getType());
      assertEquals("Default Cursor", cursor0.getName());
      assertNotNull(cursor0);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      
      JDayChooser jDayChooser2 = new JDayChooser();
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser2.getDay());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertNotNull(jDayChooser2);
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      
      jDayChooser2.setAlwaysFireDayProperty(false);
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser2.getDay());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertNotSame(jDayChooser2, jDayChooser1);
      assertNotSame(jDayChooser2, jDayChooser0);
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      
      jDayChooser0.firePropertyChange("2", (long) 1, 3158L);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser0, jDayChooser2);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.equals((Object)jDayChooser2));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser2, 13, 3158L, 514, 33, 'C');
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser2.getDay());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals('C', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(13, keyEvent0.getID());
      assertEquals(3158L, keyEvent0.getWhen());
      assertEquals(2, keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(512, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(33, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertNotNull(keyEvent0);
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      JDayChooser jDayChooser1 = new JDayChooser();
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertNotNull(jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      JDayChooser jDayChooser2 = new JDayChooser();
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertEquals(14, jDayChooser2.getDay());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser2);
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      
      jDayChooser2.setBounds((-2166), 33, 12300, 12300);
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertEquals(14, jDayChooser2.getDay());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertNotSame(jDayChooser2, jDayChooser1);
      assertNotSame(jDayChooser2, jDayChooser0);
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      
      jDayChooser1.setAlwaysFireDayProperty(false);
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertNotSame(jDayChooser1, jDayChooser2);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser2));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      DirectColorModel directColorModel0 = (DirectColorModel)jDayChooser2.getColorModel();
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertEquals(14, jDayChooser2.getDay());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertEquals(4, directColorModel0.getNumComponents());
      assertEquals(16711680, directColorModel0.getRedMask());
      assertFalse(directColorModel0.isAlphaPremultiplied());
      assertEquals(255, directColorModel0.getBlueMask());
      assertEquals(3, directColorModel0.getTransparency());
      assertTrue(directColorModel0.hasAlpha());
      assertEquals(3, directColorModel0.getNumColorComponents());
      assertEquals(3, directColorModel0.getTransferType());
      assertEquals(65280, directColorModel0.getGreenMask());
      assertEquals(32, directColorModel0.getPixelSize());
      assertEquals((-16777216), directColorModel0.getAlphaMask());
      assertNotNull(directColorModel0);
      assertNotSame(jDayChooser2, jDayChooser1);
      assertNotSame(jDayChooser2, jDayChooser0);
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      
      jDayChooser0.firePropertyChange(":`qV@^3gA3Ib~WC", 0L, 141L);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser0, jDayChooser2);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.equals((Object)jDayChooser2));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, (-2166), 0L, 14, 4176, '2');
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(0L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(4176, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(14, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isActionKey());
      assertEquals((-2166), keyEvent0.getID());
      assertEquals(896, keyEvent0.getModifiersEx());
      assertEquals('2', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltDown());
      assertNotNull(keyEvent0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser2));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      jDayChooser2.keyPressed(keyEvent0);
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertEquals(14, jDayChooser2.getDay());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(0L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(4176, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(14, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isActionKey());
      assertEquals((-2166), keyEvent0.getID());
      assertEquals(896, keyEvent0.getModifiersEx());
      assertEquals('2', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltDown());
      assertNotSame(jDayChooser1, jDayChooser2);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertNotSame(jDayChooser2, jDayChooser1);
      assertNotSame(jDayChooser2, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser2));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      
      Color color0 = jDayChooser2.selectedColor;
      assertEquals((-6250336), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(160, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(160, color0.getGreen());
      assertEquals(160, color0.getRed());
      assertNotNull(color0);
      
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser2, 33, 3158L, (-82), 38, 'A');
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertEquals(14, jDayChooser2.getDay());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertFalse(keyEvent1.isConsumed());
      assertEquals((-2147483602), keyEvent1.getModifiers());
      assertTrue(keyEvent1.isActionKey());
      assertEquals(33, keyEvent1.getID());
      assertTrue(keyEvent1.isAltGraphDown());
      assertTrue(keyEvent1.isControlDown());
      assertTrue(keyEvent1.isAltDown());
      assertTrue(keyEvent1.isMetaDown());
      assertEquals((-128), keyEvent1.getModifiersEx());
      assertFalse(keyEvent1.isShiftDown());
      assertEquals('A', keyEvent1.getKeyChar());
      assertEquals(38, keyEvent1.getKeyCode());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertEquals(3158L, keyEvent1.getWhen());
      assertNotNull(keyEvent1);
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      
      jDayChooser0.keyPressed(keyEvent1);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(7, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertEquals(14, jDayChooser2.getDay());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertFalse(keyEvent1.isConsumed());
      assertEquals((-2147483602), keyEvent1.getModifiers());
      assertTrue(keyEvent1.isActionKey());
      assertEquals(33, keyEvent1.getID());
      assertTrue(keyEvent1.isAltGraphDown());
      assertTrue(keyEvent1.isControlDown());
      assertTrue(keyEvent1.isAltDown());
      assertTrue(keyEvent1.isMetaDown());
      assertEquals((-128), keyEvent1.getModifiersEx());
      assertFalse(keyEvent1.isShiftDown());
      assertEquals('A', keyEvent1.getKeyChar());
      assertEquals(38, keyEvent1.getKeyCode());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertEquals(3158L, keyEvent1.getWhen());
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser0, jDayChooser2);
      assertNotSame(jDayChooser2, jDayChooser1);
      assertNotSame(jDayChooser2, jDayChooser0);
      assertNotSame(keyEvent1, keyEvent0);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.equals((Object)jDayChooser2));
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(keyEvent1.equals((Object)keyEvent0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      Cursor cursor0 = jDayChooser0.getCursor();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals("Default Cursor", cursor0.getName());
      assertEquals(0, cursor0.getType());
      assertNotNull(cursor0);
      
      Boolean boolean0 = Boolean.valueOf("day");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      JDayChooser jDayChooser1 = new JDayChooser();
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertNotNull(jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      JDayChooser jDayChooser2 = new JDayChooser();
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertNotNull(jDayChooser2);
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      
      int int0 = SwingConstants.VERTICAL;
      assertEquals(1, int0);
      
      jDayChooser1.setDay(1);
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(1, jDayChooser1.getDay());
      assertNotSame(jDayChooser1, jDayChooser0);
      assertNotSame(jDayChooser1, jDayChooser2);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(jDayChooser1.equals((Object)jDayChooser2));
      
      Cursor cursor1 = jDayChooser2.getCursor();
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertEquals("Default Cursor", cursor1.getName());
      assertEquals(0, cursor1.getType());
      assertNotNull(cursor1);
      assertNotSame(jDayChooser2, jDayChooser0);
      assertNotSame(jDayChooser2, jDayChooser1);
      assertSame(cursor1, cursor0);
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      jDayChooser1.setAlwaysFireDayProperty(true);
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(1, jDayChooser1.getDay());
      assertNotSame(jDayChooser1, jDayChooser0);
      assertNotSame(jDayChooser1, jDayChooser2);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(jDayChooser1.equals((Object)jDayChooser2));
      
      JDayChooser jDayChooser3 = new JDayChooser();
      assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser3.getIgnoreRepaint());
      assertFalse(jDayChooser3.isFocusTraversalPolicySet());
      assertFalse(jDayChooser3.isWeekOfYearVisible());
      assertEquals(0, jDayChooser3.getMaxDayCharacters());
      assertEquals(14, jDayChooser3.getDay());
      assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser3.isDecorationBackgroundVisible());
      assertFalse(jDayChooser3.isFocusCycleRoot());
      assertTrue(jDayChooser3.isDayBordersVisible());
      assertFalse(jDayChooser3.isDecorationBordersVisible());
      assertNotNull(jDayChooser3);
      assertFalse(jDayChooser3.equals((Object)jDayChooser2));
      assertFalse(jDayChooser3.equals((Object)jDayChooser1));
      assertFalse(jDayChooser3.equals((Object)jDayChooser0));
      
      jDayChooser2.setBounds(33, 33, 33, 33);
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertNotSame(jDayChooser2, jDayChooser3);
      assertNotSame(jDayChooser2, jDayChooser0);
      assertNotSame(jDayChooser2, jDayChooser1);
      assertFalse(jDayChooser2.equals((Object)jDayChooser3));
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      
      jDayChooser3.setAlwaysFireDayProperty(false);
      assertTrue(jDayChooser3.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser3.getIgnoreRepaint());
      assertFalse(jDayChooser3.isFocusTraversalPolicySet());
      assertFalse(jDayChooser3.isWeekOfYearVisible());
      assertEquals(0, jDayChooser3.getMaxDayCharacters());
      assertEquals(14, jDayChooser3.getDay());
      assertFalse(jDayChooser3.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser3.isDecorationBackgroundVisible());
      assertFalse(jDayChooser3.isFocusCycleRoot());
      assertTrue(jDayChooser3.isDayBordersVisible());
      assertFalse(jDayChooser3.isDecorationBordersVisible());
      assertNotSame(jDayChooser3, jDayChooser2);
      assertNotSame(jDayChooser3, jDayChooser1);
      assertNotSame(jDayChooser3, jDayChooser0);
      assertFalse(jDayChooser3.equals((Object)jDayChooser2));
      assertFalse(jDayChooser3.equals((Object)jDayChooser1));
      assertFalse(jDayChooser3.equals((Object)jDayChooser0));
      
      jDayChooser1.firePropertyChange("2", (long) 1, 3158L);
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(1, jDayChooser1.getDay());
      assertNotSame(jDayChooser1, jDayChooser0);
      assertNotSame(jDayChooser1, jDayChooser3);
      assertNotSame(jDayChooser1, jDayChooser2);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(jDayChooser1.equals((Object)jDayChooser3));
      assertFalse(jDayChooser1.equals((Object)jDayChooser2));
      
      Container container0 = jDayChooser1.getTopLevelAncestor();
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(1, jDayChooser1.getDay());
      assertNull(container0);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertNotSame(jDayChooser1, jDayChooser3);
      assertNotSame(jDayChooser1, jDayChooser2);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(jDayChooser1.equals((Object)jDayChooser3));
      assertFalse(jDayChooser1.equals((Object)jDayChooser2));
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean1);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 103, 400L, 33, 38, 'C');
      assertEquals(33, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(103, keyEvent0.getID());
      assertEquals(38, keyEvent0.getKeyCode());
      assertEquals(8256, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(400L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals('C', keyEvent0.getKeyChar());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(keyEvent0);
      assertFalse(jDayChooser0.equals((Object)jDayChooser2));
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.equals((Object)jDayChooser3));
      
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(33, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(103, keyEvent0.getID());
      assertEquals(38, keyEvent0.getKeyCode());
      assertEquals(8256, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(400L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals('C', keyEvent0.getKeyChar());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(1, jDayChooser1.getDay());
      assertNotSame(jDayChooser0, jDayChooser2);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser0, jDayChooser3);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertNotSame(jDayChooser1, jDayChooser3);
      assertNotSame(jDayChooser1, jDayChooser2);
      assertFalse(jDayChooser0.equals((Object)jDayChooser2));
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.equals((Object)jDayChooser3));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(jDayChooser1.equals((Object)jDayChooser3));
      assertFalse(jDayChooser1.equals((Object)jDayChooser2));
      
      Color color0 = jDayChooser2.getForeground();
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(51, color0.getGreen());
      assertEquals(51, color0.getBlue());
      assertEquals((-13421773), color0.getRGB());
      assertEquals(51, color0.getRed());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertNotNull(color0);
      assertNotSame(jDayChooser2, jDayChooser3);
      assertNotSame(jDayChooser2, jDayChooser0);
      assertNotSame(jDayChooser2, jDayChooser1);
      assertFalse(jDayChooser2.equals((Object)jDayChooser3));
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      
      jDayChooser1.setWeekdayForeground(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(51, color0.getGreen());
      assertEquals(51, color0.getBlue());
      assertEquals((-13421773), color0.getRGB());
      assertEquals(51, color0.getRed());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(1, jDayChooser1.getDay());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertNotSame(jDayChooser1, jDayChooser0);
      assertNotSame(jDayChooser1, jDayChooser3);
      assertNotSame(jDayChooser1, jDayChooser2);
      assertNotSame(jDayChooser2, jDayChooser3);
      assertNotSame(jDayChooser2, jDayChooser0);
      assertNotSame(jDayChooser2, jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(jDayChooser1.equals((Object)jDayChooser3));
      assertFalse(jDayChooser1.equals((Object)jDayChooser2));
      assertFalse(jDayChooser2.equals((Object)jDayChooser3));
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      
      jDayChooser2.setEnabled(true);
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertNotSame(jDayChooser2, jDayChooser3);
      assertNotSame(jDayChooser2, jDayChooser0);
      assertNotSame(jDayChooser2, jDayChooser1);
      assertFalse(jDayChooser2.equals((Object)jDayChooser3));
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      assertTrue(jMonthChooser0.hasSpinner());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertEquals(1, jMonthChooser0.getMonth());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jMonthChooser0);
      
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jMonthChooser0.hasSpinner());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertEquals(1, jMonthChooser0.getMonth());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertNotSame(jDayChooser0, jDayChooser2);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser0, jDayChooser3);
      assertFalse(jDayChooser0.equals((Object)jDayChooser2));
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.equals((Object)jDayChooser3));
  }
}
