/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:03:37 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff.write;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Canvas;
import java.awt.Component;
import java.awt.image.BufferedImage;
import java.awt.image.TileObserver;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.nio.ByteOrder;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.swing.text.AttributeSet;
import javax.swing.text.StyleConstants;
import org.apache.commons.imaging.common.BinaryOutputStream;
import org.apache.commons.imaging.common.ImageBuilder;
import org.apache.commons.imaging.formats.tiff.constants.TiffDirectoryType;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfoByte;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfoShort;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossless;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossy;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputField;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSummary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffImageWriterBase_ESTest extends TiffImageWriterBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(byteOrder0);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No directories.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(byteOrder0);
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.writeImageFileHeader(binaryOutputStream0, (-1616L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addExifDirectory();
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing root directory.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addInteroperabilityDirectory();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      tiffOutputSet0.getGPSDirectory();
      MockPrintStream mockPrintStream0 = new MockPrintStream("0111");
      TiffOutputSummary tiffOutputSummary1 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      assertFalse(tiffOutputSummary1.equals((Object)tiffOutputSummary0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(byteOrder0, (byte[]) null);
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.setGPSInDegrees((byte)37, (byte)37);
      tiffOutputSet0.getExifDirectory();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      TiffOutputSummary tiffOutputSummary1 = tiffImageWriterLossless0.validateDirectories(tiffOutputSet0);
      assertFalse(tiffOutputSummary1.equals((Object)tiffOutputSummary0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addInteroperabilityDirectory();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffOutputSet tiffOutputSet1 = new TiffOutputSet();
      ByteOrder.nativeOrder();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.addGPSDirectory();
      tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.TIFF_DIRECTORY_IFD3;
      TagInfoByte tagInfoByte0 = new TagInfoByte("{nqFF4)0", (-4), tiffDirectoryType0);
      tiffOutputDirectory0.add(tagInfoByte0, (byte)127);
      TagInfoShort tagInfoShort0 = new TagInfoShort("OVBc`qJ{e%&lnr6rxH08", (-4), tagInfoByte0.directoryType);
      tiffOutputDirectory0.add(tagInfoShort0, (short) (byte)127);
      ByteOrder.nativeOrder();
      tiffOutputSet1.toString();
      try { 
        tiffImageWriterLossy0.write((OutputStream) null, tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Tag (-4 (0xfffffffc: OVBc`qJ{e%&lnr6rxH08): ) appears twice in directory.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ImageBuilder imageBuilder0 = new ImageBuilder(39, 39, false);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      bufferedImage0.coerceData(true);
      imageBuilder0.getBufferedImage();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      tiffImageWriterLossy0.writeImage(bufferedImage0, byteArrayOutputStream0, hashMap0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      byteArrayOutputStream0.close();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ImageBuilder imageBuilder0 = new ImageBuilder(267, 267, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      tiffImageWriterLossy0.writeImage(bufferedImage0, byteArrayOutputStream0, hashMap0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImageBuilder imageBuilder0 = new ImageBuilder(1130, 1130, false);
      assertNotNull(imageBuilder0);
      assertEquals(1130, imageBuilder0.getWidth());
      assertEquals(1130, imageBuilder0.getHeight());
      
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage0);
      assertEquals(1130, imageBuilder0.getWidth());
      assertEquals(1130, imageBuilder0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1130, bufferedImage0.getTileHeight());
      assertEquals(1130, bufferedImage0.getTileWidth());
      assertEquals(1130, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1130, bufferedImage0.getWidth());
      
      bufferedImage0.coerceData(true);
      assertEquals(1130, imageBuilder0.getWidth());
      assertEquals(1130, imageBuilder0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1130, bufferedImage0.getTileHeight());
      assertEquals(1130, bufferedImage0.getTileWidth());
      assertEquals(1130, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1130, bufferedImage0.getWidth());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(610);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      BufferedImage bufferedImage1 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage1);
      assertFalse(bufferedImage1.equals((Object)bufferedImage0));
      assertEquals(1130, imageBuilder0.getWidth());
      assertEquals(1130, imageBuilder0.getHeight());
      assertEquals(0, bufferedImage1.getMinX());
      assertEquals(0, bufferedImage1.getMinY());
      assertEquals(1, bufferedImage1.getNumXTiles());
      assertEquals(0, bufferedImage1.getTileGridXOffset());
      assertEquals(1130, bufferedImage1.getWidth());
      assertEquals(1, bufferedImage1.getType());
      assertEquals(1130, bufferedImage1.getHeight());
      assertEquals(0, bufferedImage1.getMinTileY());
      assertEquals(0, bufferedImage1.getMinTileX());
      assertEquals(1130, bufferedImage1.getTileWidth());
      assertEquals(1, bufferedImage1.getNumYTiles());
      assertEquals(1, bufferedImage1.getTransparency());
      assertEquals(0, bufferedImage1.getTileGridYOffset());
      assertFalse(bufferedImage1.isAlphaPremultiplied());
      assertEquals(1130, bufferedImage1.getTileHeight());
      assertTrue(bufferedImage1.hasTileWriters());
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
      assertNotSame(bufferedImage1, bufferedImage0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      BufferedImage bufferedImage2 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage2);
      assertFalse(bufferedImage2.equals((Object)bufferedImage0));
      assertFalse(bufferedImage2.equals((Object)bufferedImage1));
      assertEquals(1130, imageBuilder0.getWidth());
      assertEquals(1130, imageBuilder0.getHeight());
      assertEquals(0, bufferedImage2.getTileGridXOffset());
      assertEquals(0, bufferedImage2.getMinY());
      assertEquals(0, bufferedImage2.getMinX());
      assertEquals(1, bufferedImage2.getNumXTiles());
      assertFalse(bufferedImage2.isAlphaPremultiplied());
      assertTrue(bufferedImage2.hasTileWriters());
      assertEquals(0.5F, bufferedImage2.getAccelerationPriority(), 0.01F);
      assertEquals(1130, bufferedImage2.getTileHeight());
      assertEquals(1, bufferedImage2.getTransparency());
      assertEquals(0, bufferedImage2.getMinTileX());
      assertEquals(0, bufferedImage2.getMinTileY());
      assertEquals(0, bufferedImage2.getTileGridYOffset());
      assertEquals(1130, bufferedImage2.getWidth());
      assertEquals(1, bufferedImage2.getType());
      assertEquals(1130, bufferedImage2.getTileWidth());
      assertEquals(1130, bufferedImage2.getHeight());
      assertEquals(1, bufferedImage2.getNumYTiles());
      assertNotSame(bufferedImage2, bufferedImage0);
      assertNotSame(bufferedImage2, bufferedImage1);
      
      Object object0 = hashMap0.put("XPTitle", "XPTitle");
      assertNull(object0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      BufferedImage bufferedImage3 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage3);
      assertFalse(bufferedImage3.equals((Object)bufferedImage2));
      assertFalse(bufferedImage3.equals((Object)bufferedImage1));
      assertFalse(bufferedImage3.equals((Object)bufferedImage0));
      assertEquals(1130, imageBuilder0.getWidth());
      assertEquals(1130, imageBuilder0.getHeight());
      assertEquals(0, bufferedImage3.getTileGridYOffset());
      assertEquals(1130, bufferedImage3.getTileHeight());
      assertEquals(1, bufferedImage3.getTransparency());
      assertFalse(bufferedImage3.isAlphaPremultiplied());
      assertEquals(1, bufferedImage3.getNumYTiles());
      assertEquals(1130, bufferedImage3.getTileWidth());
      assertEquals(0, bufferedImage3.getMinY());
      assertEquals(1, bufferedImage3.getNumXTiles());
      assertEquals(0, bufferedImage3.getTileGridXOffset());
      assertEquals(0, bufferedImage3.getMinX());
      assertEquals(1130, bufferedImage3.getHeight());
      assertEquals(0, bufferedImage3.getMinTileY());
      assertEquals(0.5F, bufferedImage3.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage3.hasTileWriters());
      assertEquals(0, bufferedImage3.getMinTileX());
      assertEquals(1, bufferedImage3.getType());
      assertEquals(1130, bufferedImage3.getWidth());
      assertNotSame(bufferedImage3, bufferedImage2);
      assertNotSame(bufferedImage3, bufferedImage1);
      assertNotSame(bufferedImage3, bufferedImage0);
      
      BufferedImage bufferedImage4 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage4);
      assertFalse(bufferedImage4.equals((Object)bufferedImage0));
      assertFalse(bufferedImage4.equals((Object)bufferedImage2));
      assertFalse(bufferedImage4.equals((Object)bufferedImage1));
      assertFalse(bufferedImage4.equals((Object)bufferedImage3));
      assertEquals(1130, imageBuilder0.getWidth());
      assertEquals(1130, imageBuilder0.getHeight());
      assertEquals(1130, bufferedImage4.getTileHeight());
      assertEquals(1, bufferedImage4.getTransparency());
      assertEquals(1130, bufferedImage4.getHeight());
      assertEquals(1130, bufferedImage4.getTileWidth());
      assertFalse(bufferedImage4.isAlphaPremultiplied());
      assertEquals(1, bufferedImage4.getNumYTiles());
      assertEquals(1, bufferedImage4.getNumXTiles());
      assertEquals(0, bufferedImage4.getTileGridXOffset());
      assertEquals(0, bufferedImage4.getMinX());
      assertEquals(0, bufferedImage4.getMinY());
      assertTrue(bufferedImage4.hasTileWriters());
      assertEquals(0.5F, bufferedImage4.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage4.getType());
      assertEquals(0, bufferedImage4.getMinTileX());
      assertEquals(0, bufferedImage4.getTileGridYOffset());
      assertEquals(0, bufferedImage4.getMinTileY());
      assertEquals(1130, bufferedImage4.getWidth());
      assertNotSame(bufferedImage4, bufferedImage0);
      assertNotSame(bufferedImage4, bufferedImage2);
      assertNotSame(bufferedImage4, bufferedImage1);
      assertNotSame(bufferedImage4, bufferedImage3);
      
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      assertNotNull(tiffImageWriterLossy0);
      
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage3, byteArrayOutputStream0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: XPTitle
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      assertNotNull(tiffImageWriterLossy0);
      
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      assertNotNull(tiffOutputSet0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      byteArrayOutputStream0.close();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getInteroperabilityDirectory();
      assertNull(tiffOutputDirectory0);
      
      ImageBuilder imageBuilder0 = new ImageBuilder(10, 10, true);
      assertNotNull(imageBuilder0);
      assertEquals(10, imageBuilder0.getHeight());
      assertEquals(10, imageBuilder0.getWidth());
      
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage0);
      assertEquals(10, imageBuilder0.getHeight());
      assertEquals(10, imageBuilder0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getWidth());
      
      bufferedImage0.coerceData(true);
      assertEquals(10, imageBuilder0.getHeight());
      assertEquals(10, imageBuilder0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getWidth());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      tiffImageWriterLossy0.writeImage(bufferedImage0, byteArrayOutputStream0, hashMap0);
      assertEquals(216, byteArrayOutputStream0.size());
      assertEquals("II*\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0001\u0004\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0001\u0004\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0002\u0001\u0003\u0000\u0003\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0003\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0006\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0011\u0001\u0004\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0015\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0016\u0001\u0004\u0000\u0001\u0000\u0000\u0000\n\u0001\u0000\u0000\u0017\u0001\u0004\u0000\u0001\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u001A\u0001\u0005\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u001B\u0001\u0005\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000(\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\b\u0000\b\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000 P8$\u0016\r\u0007\uFFFDBaP\uFFFDd6\u001D\u000F\uFFFDDbQ8\uFFFDV-\u0017\uFFFD@@\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(10, imageBuilder0.getHeight());
      assertEquals(10, imageBuilder0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getWidth());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No directories.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      assertNotNull(tiffImageWriterLossy0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      byteArrayOutputStream0.close();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ImageBuilder imageBuilder0 = new ImageBuilder(39, 39, false);
      assertNotNull(imageBuilder0);
      assertEquals(39, imageBuilder0.getHeight());
      assertEquals(39, imageBuilder0.getWidth());
      
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage0);
      assertEquals(39, imageBuilder0.getHeight());
      assertEquals(39, imageBuilder0.getWidth());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(39, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(39, bufferedImage0.getTileHeight());
      assertEquals(39, bufferedImage0.getHeight());
      assertEquals(39, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      
      bufferedImage0.coerceData(true);
      assertEquals(39, imageBuilder0.getHeight());
      assertEquals(39, imageBuilder0.getWidth());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(39, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(39, bufferedImage0.getTileHeight());
      assertEquals(39, bufferedImage0.getHeight());
      assertEquals(39, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      
      BufferedImage bufferedImage1 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage1);
      assertFalse(bufferedImage1.equals((Object)bufferedImage0));
      assertEquals(39, imageBuilder0.getHeight());
      assertEquals(39, imageBuilder0.getWidth());
      assertEquals(1, bufferedImage1.getNumXTiles());
      assertEquals(0, bufferedImage1.getMinX());
      assertEquals(39, bufferedImage1.getWidth());
      assertEquals(0, bufferedImage1.getMinY());
      assertEquals(39, bufferedImage1.getHeight());
      assertEquals(39, bufferedImage1.getTileWidth());
      assertEquals(0, bufferedImage1.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage1.hasTileWriters());
      assertEquals(0, bufferedImage1.getMinTileX());
      assertEquals(0, bufferedImage1.getMinTileY());
      assertEquals(1, bufferedImage1.getType());
      assertEquals(39, bufferedImage1.getTileHeight());
      assertEquals(0, bufferedImage1.getTileGridYOffset());
      assertEquals(1, bufferedImage1.getTransparency());
      assertFalse(bufferedImage1.isAlphaPremultiplied());
      assertEquals(1, bufferedImage1.getNumYTiles());
      assertNotSame(bufferedImage1, bufferedImage0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Object object0 = hashMap0.put("COMPRESSION", tiffImageWriterLossy0);
      assertNull(object0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, byteArrayOutputStream0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid compression parameter, must be numeric: org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossy@1
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      assertNotNull(tiffImageWriterLossy0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      byteArrayOutputStream0.close();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      ImageBuilder imageBuilder0 = new ImageBuilder(39, 39, false);
      assertNotNull(imageBuilder0);
      assertEquals(39, imageBuilder0.getHeight());
      assertEquals(39, imageBuilder0.getWidth());
      
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage0);
      assertEquals(39, imageBuilder0.getHeight());
      assertEquals(39, imageBuilder0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(39, bufferedImage0.getWidth());
      assertEquals(39, bufferedImage0.getHeight());
      assertEquals(39, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(39, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      
      bufferedImage0.coerceData(true);
      assertEquals(39, imageBuilder0.getHeight());
      assertEquals(39, imageBuilder0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(39, bufferedImage0.getWidth());
      assertEquals(39, bufferedImage0.getHeight());
      assertEquals(39, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(39, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      
      BufferedImage bufferedImage1 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage1);
      assertFalse(bufferedImage1.equals((Object)bufferedImage0));
      assertEquals(39, imageBuilder0.getHeight());
      assertEquals(39, imageBuilder0.getWidth());
      assertEquals(39, bufferedImage1.getTileWidth());
      assertEquals(39, bufferedImage1.getWidth());
      assertEquals(0, bufferedImage1.getMinTileY());
      assertEquals(0, bufferedImage1.getMinTileX());
      assertEquals(1, bufferedImage1.getTransparency());
      assertFalse(bufferedImage1.isAlphaPremultiplied());
      assertEquals(0, bufferedImage1.getTileGridYOffset());
      assertEquals(39, bufferedImage1.getTileHeight());
      assertEquals(1, bufferedImage1.getType());
      assertTrue(bufferedImage1.hasTileWriters());
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage1.getNumYTiles());
      assertEquals(0, bufferedImage1.getMinX());
      assertEquals(0, bufferedImage1.getMinY());
      assertEquals(1, bufferedImage1.getNumXTiles());
      assertEquals(0, bufferedImage1.getTileGridXOffset());
      assertEquals(39, bufferedImage1.getHeight());
      assertNotSame(bufferedImage1, bufferedImage0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      BufferedImage bufferedImage2 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage2);
      assertFalse(bufferedImage2.equals((Object)bufferedImage0));
      assertFalse(bufferedImage2.equals((Object)bufferedImage1));
      assertEquals(39, imageBuilder0.getHeight());
      assertEquals(39, imageBuilder0.getWidth());
      assertEquals(1, bufferedImage2.getType());
      assertTrue(bufferedImage2.hasTileWriters());
      assertEquals(1, bufferedImage2.getNumYTiles());
      assertEquals(0.5F, bufferedImage2.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage2.getMinY());
      assertEquals(1, bufferedImage2.getNumXTiles());
      assertEquals(0, bufferedImage2.getMinX());
      assertEquals(0, bufferedImage2.getTileGridXOffset());
      assertEquals(0, bufferedImage2.getMinTileX());
      assertEquals(39, bufferedImage2.getTileHeight());
      assertEquals(0, bufferedImage2.getMinTileY());
      assertEquals(39, bufferedImage2.getTileWidth());
      assertEquals(39, bufferedImage2.getHeight());
      assertEquals(39, bufferedImage2.getWidth());
      assertEquals(1, bufferedImage2.getTransparency());
      assertFalse(bufferedImage2.isAlphaPremultiplied());
      assertEquals(0, bufferedImage2.getTileGridYOffset());
      assertNotSame(bufferedImage2, bufferedImage0);
      assertNotSame(bufferedImage2, bufferedImage1);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      BufferedImage bufferedImage3 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage3);
      assertFalse(bufferedImage3.equals((Object)bufferedImage1));
      assertFalse(bufferedImage3.equals((Object)bufferedImage0));
      assertFalse(bufferedImage3.equals((Object)bufferedImage2));
      assertEquals(39, imageBuilder0.getHeight());
      assertEquals(39, imageBuilder0.getWidth());
      assertEquals(1, bufferedImage3.getTransparency());
      assertEquals(0, bufferedImage3.getTileGridYOffset());
      assertFalse(bufferedImage3.isAlphaPremultiplied());
      assertEquals(1, bufferedImage3.getNumYTiles());
      assertEquals(0, bufferedImage3.getMinTileX());
      assertEquals(39, bufferedImage3.getTileHeight());
      assertEquals(1, bufferedImage3.getType());
      assertEquals(39, bufferedImage3.getWidth());
      assertEquals(0, bufferedImage3.getMinTileY());
      assertEquals(0, bufferedImage3.getMinX());
      assertEquals(0, bufferedImage3.getTileGridXOffset());
      assertEquals(0, bufferedImage3.getMinY());
      assertEquals(1, bufferedImage3.getNumXTiles());
      assertEquals(0.5F, bufferedImage3.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage3.hasTileWriters());
      assertEquals(39, bufferedImage3.getTileWidth());
      assertEquals(39, bufferedImage3.getHeight());
      assertNotSame(bufferedImage3, bufferedImage1);
      assertNotSame(bufferedImage3, bufferedImage0);
      assertNotSame(bufferedImage3, bufferedImage2);
      
      TileObserver tileObserver0 = mock(TileObserver.class, new ViolatedAssumptionAnswer());
      bufferedImage3.addTileObserver(tileObserver0);
      assertFalse(bufferedImage3.equals((Object)bufferedImage1));
      assertFalse(bufferedImage3.equals((Object)bufferedImage0));
      assertFalse(bufferedImage3.equals((Object)bufferedImage2));
      assertEquals(39, imageBuilder0.getHeight());
      assertEquals(39, imageBuilder0.getWidth());
      assertEquals(1, bufferedImage3.getTransparency());
      assertEquals(0, bufferedImage3.getTileGridYOffset());
      assertFalse(bufferedImage3.isAlphaPremultiplied());
      assertEquals(1, bufferedImage3.getNumYTiles());
      assertEquals(0, bufferedImage3.getMinTileX());
      assertEquals(39, bufferedImage3.getTileHeight());
      assertEquals(1, bufferedImage3.getType());
      assertEquals(39, bufferedImage3.getWidth());
      assertEquals(0, bufferedImage3.getMinTileY());
      assertEquals(0, bufferedImage3.getMinX());
      assertEquals(0, bufferedImage3.getTileGridXOffset());
      assertEquals(0, bufferedImage3.getMinY());
      assertEquals(1, bufferedImage3.getNumXTiles());
      assertEquals(0.5F, bufferedImage3.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage3.hasTileWriters());
      assertEquals(39, bufferedImage3.getTileWidth());
      assertEquals(39, bufferedImage3.getHeight());
      assertNotSame(bufferedImage3, bufferedImage1);
      assertNotSame(bufferedImage3, bufferedImage0);
      assertNotSame(bufferedImage3, bufferedImage2);
      
      Canvas canvas0 = new Canvas();
      assertNotNull(canvas0);
      assertEquals(0, canvas0.getWidth());
      assertEquals(0, canvas0.getHeight());
      assertFalse(canvas0.isOpaque());
      assertEquals(0.5F, canvas0.getAlignmentX(), 0.01F);
      assertFalse(canvas0.isDoubleBuffered());
      assertEquals(0.5F, canvas0.getAlignmentY(), 0.01F);
      assertFalse(canvas0.getIgnoreRepaint());
      assertEquals(0, canvas0.getY());
      assertEquals(0, canvas0.getX());
      assertTrue(canvas0.getFocusTraversalKeysEnabled());
      assertEquals(Component.BaselineResizeBehavior.OTHER, canvas0.getBaselineResizeBehavior());
      
      Object object0 = hashMap0.put("XMP_XML", canvas0);
      assertNull(object0);
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, canvas0.getWidth());
      assertEquals(0, canvas0.getHeight());
      assertFalse(canvas0.isOpaque());
      assertEquals(0.5F, canvas0.getAlignmentX(), 0.01F);
      assertFalse(canvas0.isDoubleBuffered());
      assertEquals(0.5F, canvas0.getAlignmentY(), 0.01F);
      assertFalse(canvas0.getIgnoreRepaint());
      assertEquals(0, canvas0.getY());
      assertEquals(0, canvas0.getX());
      assertTrue(canvas0.getFocusTraversalKeysEnabled());
      assertEquals(Component.BaselineResizeBehavior.OTHER, canvas0.getBaselineResizeBehavior());
      assertNotSame(hashMap0, hashMap1);
      
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, byteArrayOutputStream0, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.Canvas cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      assertNotNull(tiffImageWriterLossy0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      byteArrayOutputStream0.close();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ImageBuilder imageBuilder0 = new ImageBuilder(10, 10, false);
      assertNotNull(imageBuilder0);
      assertEquals(10, imageBuilder0.getWidth());
      assertEquals(10, imageBuilder0.getHeight());
      
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage0);
      assertEquals(10, imageBuilder0.getWidth());
      assertEquals(10, imageBuilder0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(10, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      
      bufferedImage0.coerceData(true);
      assertEquals(10, imageBuilder0.getWidth());
      assertEquals(10, imageBuilder0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(10, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      
      byteArrayOutputStream0.write((-3592));
      assertEquals("\uFFFD", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
      
      BufferedImage bufferedImage1 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage1);
      assertFalse(bufferedImage1.equals((Object)bufferedImage0));
      assertEquals(10, imageBuilder0.getWidth());
      assertEquals(10, imageBuilder0.getHeight());
      assertEquals(1, bufferedImage1.getType());
      assertEquals(0, bufferedImage1.getTileGridYOffset());
      assertEquals(0, bufferedImage1.getMinX());
      assertEquals(0, bufferedImage1.getMinY());
      assertTrue(bufferedImage1.hasTileWriters());
      assertEquals(10, bufferedImage1.getTileHeight());
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage1.isAlphaPremultiplied());
      assertEquals(0, bufferedImage1.getMinTileX());
      assertEquals(0, bufferedImage1.getMinTileY());
      assertEquals(1, bufferedImage1.getNumXTiles());
      assertEquals(10, bufferedImage1.getWidth());
      assertEquals(1, bufferedImage1.getTransparency());
      assertEquals(0, bufferedImage1.getTileGridXOffset());
      assertEquals(10, bufferedImage1.getTileWidth());
      assertEquals(10, bufferedImage1.getHeight());
      assertEquals(1, bufferedImage1.getNumYTiles());
      assertNotSame(bufferedImage1, bufferedImage0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      BufferedImage bufferedImage2 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage2);
      assertFalse(bufferedImage2.equals((Object)bufferedImage1));
      assertFalse(bufferedImage2.equals((Object)bufferedImage0));
      assertEquals(10, imageBuilder0.getWidth());
      assertEquals(10, imageBuilder0.getHeight());
      assertEquals(0, bufferedImage2.getTileGridYOffset());
      assertEquals(1, bufferedImage2.getTransparency());
      assertEquals(10, bufferedImage2.getTileHeight());
      assertEquals(10, bufferedImage2.getTileWidth());
      assertFalse(bufferedImage2.isAlphaPremultiplied());
      assertEquals(1, bufferedImage2.getNumYTiles());
      assertEquals(0, bufferedImage2.getMinX());
      assertEquals(1, bufferedImage2.getNumXTiles());
      assertEquals(0, bufferedImage2.getTileGridXOffset());
      assertEquals(0, bufferedImage2.getMinY());
      assertTrue(bufferedImage2.hasTileWriters());
      assertEquals(0.5F, bufferedImage2.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage2.getType());
      assertEquals(10, bufferedImage2.getHeight());
      assertEquals(0, bufferedImage2.getMinTileX());
      assertEquals(0, bufferedImage2.getMinTileY());
      assertEquals(10, bufferedImage2.getWidth());
      assertNotSame(bufferedImage2, bufferedImage1);
      assertNotSame(bufferedImage2, bufferedImage0);
      
      Object object0 = hashMap0.put("COMPRESSION", (Object) null);
      assertNull(object0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      BufferedImage bufferedImage3 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage3);
      assertFalse(bufferedImage3.equals((Object)bufferedImage2));
      assertFalse(bufferedImage3.equals((Object)bufferedImage0));
      assertFalse(bufferedImage3.equals((Object)bufferedImage1));
      assertEquals(10, imageBuilder0.getWidth());
      assertEquals(10, imageBuilder0.getHeight());
      assertEquals(10, bufferedImage3.getWidth());
      assertEquals(10, bufferedImage3.getHeight());
      assertEquals(0, bufferedImage3.getMinTileY());
      assertEquals(0, bufferedImage3.getMinTileX());
      assertEquals(1, bufferedImage3.getNumXTiles());
      assertEquals(0, bufferedImage3.getMinY());
      assertEquals(0, bufferedImage3.getMinX());
      assertEquals(0.5F, bufferedImage3.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage3.isAlphaPremultiplied());
      assertTrue(bufferedImage3.hasTileWriters());
      assertEquals(10, bufferedImage3.getTileHeight());
      assertEquals(1, bufferedImage3.getType());
      assertEquals(0, bufferedImage3.getTileGridYOffset());
      assertEquals(0, bufferedImage3.getTileGridXOffset());
      assertEquals(1, bufferedImage3.getTransparency());
      assertEquals(10, bufferedImage3.getTileWidth());
      assertEquals(1, bufferedImage3.getNumYTiles());
      assertNotSame(bufferedImage3, bufferedImage2);
      assertNotSame(bufferedImage3, bufferedImage0);
      assertNotSame(bufferedImage3, bufferedImage1);
      
      Object object1 = hashMap0.put("&%nu>{O!PrP}tw", byteArrayOutputStream0);
      assertNull(object1);
      assertEquals("\uFFFD", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage2, byteArrayOutputStream0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: &%nu>{O!PrP}tw
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      assertNotNull(tiffImageWriterLossy0);
      
      ImageBuilder imageBuilder0 = new ImageBuilder(10, 10, true);
      assertNotNull(imageBuilder0);
      assertEquals(10, imageBuilder0.getWidth());
      assertEquals(10, imageBuilder0.getHeight());
      
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage0);
      assertEquals(10, imageBuilder0.getWidth());
      assertEquals(10, imageBuilder0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getTileHeight());
      
      bufferedImage0.coerceData(true);
      assertEquals(10, imageBuilder0.getWidth());
      assertEquals(10, imageBuilder0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(10, bufferedImage0.getTileHeight());
      
      BufferedImage bufferedImage1 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage1);
      assertFalse(bufferedImage1.equals((Object)bufferedImage0));
      assertEquals(10, imageBuilder0.getWidth());
      assertEquals(10, imageBuilder0.getHeight());
      assertEquals(0, bufferedImage1.getMinTileY());
      assertEquals(0, bufferedImage1.getMinTileX());
      assertEquals(10, bufferedImage1.getWidth());
      assertEquals(0, bufferedImage1.getTileGridYOffset());
      assertEquals(3, bufferedImage1.getTransparency());
      assertEquals(0, bufferedImage1.getTileGridXOffset());
      assertEquals(1, bufferedImage1.getNumYTiles());
      assertEquals(10, bufferedImage1.getHeight());
      assertEquals(10, bufferedImage1.getTileWidth());
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage1.hasTileWriters());
      assertEquals(2, bufferedImage1.getType());
      assertEquals(0, bufferedImage1.getMinY());
      assertEquals(1, bufferedImage1.getNumXTiles());
      assertEquals(10, bufferedImage1.getTileHeight());
      assertEquals(0, bufferedImage1.getMinX());
      assertFalse(bufferedImage1.isAlphaPremultiplied());
      assertNotSame(bufferedImage1, bufferedImage0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      BufferedImage bufferedImage2 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage2);
      assertFalse(bufferedImage2.equals((Object)bufferedImage0));
      assertFalse(bufferedImage2.equals((Object)bufferedImage1));
      assertEquals(10, imageBuilder0.getWidth());
      assertEquals(10, imageBuilder0.getHeight());
      assertFalse(bufferedImage2.isAlphaPremultiplied());
      assertEquals(0, bufferedImage2.getTileGridYOffset());
      assertEquals(3, bufferedImage2.getTransparency());
      assertEquals(10, bufferedImage2.getTileHeight());
      assertEquals(1, bufferedImage2.getNumYTiles());
      assertEquals(2, bufferedImage2.getType());
      assertEquals(0, bufferedImage2.getMinTileX());
      assertEquals(0, bufferedImage2.getMinTileY());
      assertEquals(0.5F, bufferedImage2.getAccelerationPriority(), 0.01F);
      assertEquals(10, bufferedImage2.getWidth());
      assertTrue(bufferedImage2.hasTileWriters());
      assertEquals(0, bufferedImage2.getMinY());
      assertEquals(1, bufferedImage2.getNumXTiles());
      assertEquals(0, bufferedImage2.getTileGridXOffset());
      assertEquals(0, bufferedImage2.getMinX());
      assertEquals(10, bufferedImage2.getHeight());
      assertEquals(10, bufferedImage2.getTileWidth());
      assertNotSame(bufferedImage2, bufferedImage0);
      assertNotSame(bufferedImage2, bufferedImage1);
      
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)hashMap0.entrySet();
      assertNotNull(set0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Object object0 = hashMap0.put("Missing directory: ", "COMPRESSION");
      assertNull(object0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Object object1 = hashMap0.put("FORMAT", (Object) null);
      assertNull(object1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy(byteOrder0);
      assertNotNull(tiffImageWriterLossy1);
      assertFalse(tiffImageWriterLossy1.equals((Object)tiffImageWriterLossy0));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet(byteOrder0);
      assertNotNull(tiffOutputSet0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      try { 
        tiffImageWriterLossy1.writeImage(bufferedImage1, byteArrayOutputStream0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: Missing directory: 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      assertNotNull(tiffImageWriterLossy0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      assertNotNull(styleConstants0);
      
      byteArrayOutputStream0.close();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      System.setCurrentTimeMillis((-40L));
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      assertNotNull(tiffOutputSet0);
      
      byte[] byteArray0 = new byte[14];
      TiffOutputField tiffOutputField0 = tiffOutputSet0.findField(10);
      assertNull(tiffOutputField0);
      
      byteArray0[0] = (byte)88;
      byteArrayOutputStream0.write(byteArray0);
      assertEquals("X\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(14, byteArrayOutputStream0.size());
      
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.addRootDirectory();
      assertNotNull(tiffOutputDirectory0);
      assertEquals(6, tiffOutputDirectory0.getItemLength());
      assertEquals(0, tiffOutputDirectory0.type);
      
      Object object0 = hashMap0.put("COMPRESSION", (byte)88);
      assertNull(object0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, byteArrayOutputStream0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid compression parameter (Only CCITT 1D/Group 3/Group 4, LZW, Packbits and uncompressed supported).
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      assertNotNull(tiffImageWriterLossy0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      ImageBuilder imageBuilder0 = new ImageBuilder(10, 10, true);
      assertNotNull(imageBuilder0);
      assertEquals(10, imageBuilder0.getHeight());
      assertEquals(10, imageBuilder0.getWidth());
      
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage0);
      assertEquals(10, imageBuilder0.getHeight());
      assertEquals(10, imageBuilder0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      
      BufferedImage bufferedImage1 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage1);
      assertFalse(bufferedImage1.equals((Object)bufferedImage0));
      assertEquals(10, imageBuilder0.getHeight());
      assertEquals(10, imageBuilder0.getWidth());
      assertEquals(0, bufferedImage1.getMinX());
      assertEquals(0, bufferedImage1.getMinY());
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage1.hasTileWriters());
      assertEquals(0, bufferedImage1.getTileGridXOffset());
      assertEquals(10, bufferedImage1.getWidth());
      assertEquals(10, bufferedImage1.getHeight());
      assertEquals(0, bufferedImage1.getMinTileY());
      assertEquals(0, bufferedImage1.getMinTileX());
      assertEquals(2, bufferedImage1.getType());
      assertEquals(0, bufferedImage1.getTileGridYOffset());
      assertEquals(3, bufferedImage1.getTransparency());
      assertEquals(10, bufferedImage1.getTileWidth());
      assertEquals(1, bufferedImage1.getNumYTiles());
      assertEquals(10, bufferedImage1.getTileHeight());
      assertFalse(bufferedImage1.isAlphaPremultiplied());
      assertEquals(1, bufferedImage1.getNumXTiles());
      assertNotSame(bufferedImage1, bufferedImage0);
      
      bufferedImage0.coerceData(true);
      assertFalse(bufferedImage0.equals((Object)bufferedImage1));
      assertEquals(10, imageBuilder0.getHeight());
      assertEquals(10, imageBuilder0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertNotSame(bufferedImage0, bufferedImage1);
      
      byteArrayOutputStream0.write(65095);
      assertEquals("G", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
      
      BufferedImage bufferedImage2 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage2);
      assertFalse(bufferedImage2.equals((Object)bufferedImage1));
      assertFalse(bufferedImage2.equals((Object)bufferedImage0));
      assertEquals(10, imageBuilder0.getHeight());
      assertEquals(10, imageBuilder0.getWidth());
      assertEquals(0, bufferedImage2.getTileGridYOffset());
      assertTrue(bufferedImage2.hasTileWriters());
      assertEquals(10, bufferedImage2.getTileHeight());
      assertEquals(0.5F, bufferedImage2.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage2.isAlphaPremultiplied());
      assertEquals(1, bufferedImage2.getNumYTiles());
      assertEquals(0, bufferedImage2.getMinTileY());
      assertEquals(0, bufferedImage2.getMinTileX());
      assertEquals(3, bufferedImage2.getTransparency());
      assertEquals(2, bufferedImage2.getType());
      assertEquals(10, bufferedImage2.getWidth());
      assertEquals(0, bufferedImage2.getMinY());
      assertEquals(0, bufferedImage2.getMinX());
      assertEquals(10, bufferedImage2.getHeight());
      assertEquals(0, bufferedImage2.getTileGridXOffset());
      assertEquals(10, bufferedImage2.getTileWidth());
      assertEquals(1, bufferedImage2.getNumXTiles());
      assertNotSame(bufferedImage2, bufferedImage1);
      assertNotSame(bufferedImage2, bufferedImage0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      BufferedImage bufferedImage3 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage3);
      assertFalse(bufferedImage3.equals((Object)bufferedImage0));
      assertFalse(bufferedImage3.equals((Object)bufferedImage1));
      assertFalse(bufferedImage3.equals((Object)bufferedImage2));
      assertEquals(10, imageBuilder0.getHeight());
      assertEquals(10, imageBuilder0.getWidth());
      assertEquals(1, bufferedImage3.getNumXTiles());
      assertEquals(0, bufferedImage3.getTileGridXOffset());
      assertTrue(bufferedImage3.hasTileWriters());
      assertEquals(0.5F, bufferedImage3.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage3.getMinX());
      assertEquals(0, bufferedImage3.getMinY());
      assertEquals(0, bufferedImage3.getTileGridYOffset());
      assertFalse(bufferedImage3.isAlphaPremultiplied());
      assertEquals(1, bufferedImage3.getNumYTiles());
      assertEquals(10, bufferedImage3.getTileHeight());
      assertEquals(0, bufferedImage3.getMinTileX());
      assertEquals(10, bufferedImage3.getTileWidth());
      assertEquals(0, bufferedImage3.getMinTileY());
      assertEquals(2, bufferedImage3.getType());
      assertEquals(10, bufferedImage3.getHeight());
      assertEquals(10, bufferedImage3.getWidth());
      assertEquals(3, bufferedImage3.getTransparency());
      assertNotSame(bufferedImage3, bufferedImage0);
      assertNotSame(bufferedImage3, bufferedImage1);
      assertNotSame(bufferedImage3, bufferedImage2);
      
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      assertNotNull(styleConstants0);
      
      System.setCurrentTimeMillis(0L);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      assertNotNull(tiffOutputSet0);
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = hashMap0.put("COMPRESSION", byte0);
      assertNull(object0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      tiffImageWriterLossy0.writeImage(bufferedImage0, byteArrayOutputStream0, hashMap0);
      assertFalse(bufferedImage0.equals((Object)bufferedImage2));
      assertFalse(bufferedImage0.equals((Object)bufferedImage1));
      assertFalse(bufferedImage0.equals((Object)bufferedImage3));
      assertEquals("GII*\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0001\u0004\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0001\u0004\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0002\u0001\u0003\u0000\u0003\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0003\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0011\u0001\u0004\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0015\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0016\u0001\u0004\u0000\u0001\u0000\u0000\u0000\n\u0001\u0000\u0000\u0017\u0001\u0004\u0000\u0001\u0000\u0000\u0000,\u0001\u0000\u0000\u001A\u0001\u0005\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u001B\u0001\u0005\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000(\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\b\u0000\b\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(485, byteArrayOutputStream0.size());
      assertEquals(10, imageBuilder0.getHeight());
      assertEquals(10, imageBuilder0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(bufferedImage0, bufferedImage2);
      assertNotSame(bufferedImage0, bufferedImage1);
      assertNotSame(bufferedImage0, bufferedImage3);
      
      byteArrayOutputStream0.close();
      assertEquals("GII*\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0001\u0004\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0001\u0001\u0004\u0000\u0001\u0000\u0000\u0000\n\u0000\u0000\u0000\u0002\u0001\u0003\u0000\u0003\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0003\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0011\u0001\u0004\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0015\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0016\u0001\u0004\u0000\u0001\u0000\u0000\u0000\n\u0001\u0000\u0000\u0017\u0001\u0004\u0000\u0001\u0000\u0000\u0000,\u0001\u0000\u0000\u001A\u0001\u0005\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u001B\u0001\u0005\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000(\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\b\u0000\b\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(485, byteArrayOutputStream0.size());
      
      TiffOutputSet tiffOutputSet1 = new TiffOutputSet(tiffOutputSet0.byteOrder);
      assertNotNull(tiffOutputSet1);
      assertFalse(tiffOutputSet1.equals((Object)tiffOutputSet0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      assertNotNull(tiffImageWriterLossy0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      assertNotNull(styleConstants0);
      
      byteArrayOutputStream0.close();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      System.setCurrentTimeMillis((-40L));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)88;
      byteArrayOutputStream0.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)88}, byteArray0);
      assertEquals(7, byteArrayOutputStream0.size());
      assertEquals("XXXXXXX", byteArrayOutputStream0.toString());
      
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      assertNotNull(tiffOutputSet0);
      
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.addRootDirectory();
      assertNotNull(tiffOutputDirectory0);
      assertEquals(6, tiffOutputDirectory0.getItemLength());
      assertEquals(0, tiffOutputDirectory0.type);
      
      tiffImageWriterLossy0.write(byteArrayOutputStream0, tiffOutputSet0);
      assertEquals(23, byteArrayOutputStream0.size());
      assertEquals("XXXXXXXII*\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      
      Byte byte0 = new Byte((byte)88);
      assertEquals((byte)88, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = Byte.toUnsignedInt((byte)31);
      assertEquals(31, int0);
      
      Double double0 = new Double((byte)30);
      assertEquals(30.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = hashMap0.put("EXIF", double0);
      assertNull(object0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Random.setNextRandom(81);
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, byteArrayOutputStream0, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.apache.commons.imaging.formats.tiff.write.TiffOutputSet
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }
}
