/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:12:22 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-883));
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.at();
      Token token0 = xPathLexer0.rightBracket();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")FmK=ku");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(2, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("FmK=ku", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer("");
      assertEquals("", xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("B|L&a");
      xPathLexer1.nextToken();
      xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer1.slashes();
      assertEquals(11, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("):[E&,z/GmA");
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals(":", token1.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("E", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("&,z/GmA", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("VJe($\"={n]Y(h");
      xPathLexer1.nextToken();
      xPathLexer0.minus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.hasMoreChars();
      Token token0 = xPathLexer0.slashes();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".6Yr3xWRR%i`+");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(".6", token0.getTokenText());
      assertEquals(31, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Yr3xWRR%i`+", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token2 = xPathLexer1.rightParen();
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("Yr", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      xPathLexer0.and();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('&');
      assertFalse(boolean0);
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("3x", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("):[E&,z/GmA");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      assertEquals("):", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(3, token1.getTokenType());
      assertEquals("[", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ArbM?PVYtdH");
      xPathLexer0.doubleColon();
      xPathLexer0.and();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("a.DGp}D'6X4!|+nft|");
      xPathLexer0.dots();
      XPathLexer xPathLexer2 = new XPathLexer("a.DGp}D'6X4!|+nft|");
      xPathLexer2.dots();
      XPathLexer xPathLexer3 = new XPathLexer("ArbM?PVYtdH");
      xPathLexer2.div();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.getXPath();
      xPathLexer3.leftParen();
      XPathLexer xPathLexer5 = new XPathLexer("Nk^");
      char char0 = '\\';
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dSA");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("d", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("SA", token1.getTokenText());
      
      xPathLexer0.number();
      Token token2 = xPathLexer0.number();
      assertEquals("", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('m');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jQpXc~e)f");
      xPathLexer0.operatorName();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.whitespace();
      xPathLexer0.endPosition();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("acpFu;g");
      xPathLexer0.not();
      xPathLexer0.setXPath("h3s~'ff*o*J");
      Token token0 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.number();
      token0.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LpNt\"2'");
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftBracket();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("LpNt\"2'");
      assertEquals("LpNt\"2'", xPathLexer2.getXPath());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L[)$aLkaC=");
      xPathLexer0.doubleColon();
      xPathLexer0.or();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.getXPath();
      xPathLexer0.consume(15);
      assertEquals("L[)$aLkaC=", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      xPathLexer0.setXPath("djt hr^{F7");
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token1);
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "!k9&G#m2:-<";
      XPathLexer xPathLexer1 = new XPathLexer("!k9&G#m2:-<");
      xPathLexer1.pipe();
      Token token0 = xPathLexer0.minus();
      xPathLexer1.dots();
      xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q!pv'rkyYg3aw'De8,");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("q!", token0.getTokenText());
      
      Token token1 = xPathLexer1.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("pv", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-@#?1;&JxA&3&K+");
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.mod();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("):[E&,z/GmA");
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.leftParen();
      assertEquals("[", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("E", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("):[E&,z/GmA");
      xPathLexer0.and();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.currentPosition();
      xPathLexer0.setXPath("0Xdw[A_y?^*tCWR*H");
      xPathLexer0.leftBracket();
      xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("):[E&,z/GmA");
      xPathLexer1.pipe();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("JJol`");
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.doubleColon();
      xPathLexer0.setXPath("JJol`");
      assertEquals("JJol`", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q!pv'rkyYg3aw'De8,");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.notEquals();
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer1.colon();
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("q", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s ");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("s", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("", token1.getTokenText());
      assertEquals((-1), token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "%NRP2K\"?RKb";
      XPathLexer xPathLexer0 = new XPathLexer("%NRP2K\"?RKb");
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      String string1 = "";
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token1 = xPathLexer1.comma();
      xPathLexer0.nextToken();
      token0.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "gL%9hiu6v{,";
      XPathLexer xPathLexer0 = new XPathLexer("gL%9hiu6v{,");
      String string1 = "";
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token0 = xPathLexer1.rightBracket();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")o(");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals(")o", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("(", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "j([2]~E";
      XPathLexer xPathLexer0 = new XPathLexer("j([2]~E");
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b$");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("b", token0.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('-');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("cf4%NJx");
      xPathLexer0.and();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("cf4", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume();
      int int0 = xPathLexer1.currentPosition();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ArbM?PVYtdH");
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.currentPosition();
      Token token0 = xPathLexer0.plus();
      assertEquals("A", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("bM", token1.getTokenText());
      
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("?", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-@#?1;&JxA&3&K+");
      xPathLexer0.leftBracket();
      xPathLexer0.star();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.mod();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<|>zuu");
      XPathLexer xPathLexer1 = new XPathLexer("<|>zuu");
      Token token0 = xPathLexer1.minus();
      assertEquals("<", token0.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertNotNull(token1);
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("<", token2.getTokenText());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals(17, token3.getTokenType());
      assertEquals("|", token3.getTokenText());
      
      Token token4 = xPathLexer3.minus();
      assertEquals(6, token4.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('q');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("!9&G#m2:-<");
      Token token0 = xPathLexer1.rightBracket();
      Token token1 = xPathLexer1.nextToken();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer1.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("&", token2.getTokenText());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals("G#m2:-<", token4.getTokenText());
      
      xPathLexer0.number();
      xPathLexer0.equals();
      String string0 = token0.toString();
      assertEquals("[ (4) (!)", string0);
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer0.setXPath("SDMN&>f%Zg`l.(ow");
      xPathLexer0.currentPosition();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("S", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertNotSame(token3, token1);
      assertEquals("DMN&>f%Zg`l.(ow", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("):[E&,z/GmA");
      XPathLexer xPathLexer1 = new XPathLexer("xT2x");
      Token token0 = xPathLexer1.plus();
      assertEquals("x", token0.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.setXPath("");
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token3 = xPathLexer1.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("T2x", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("JJol`");
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("JJol`");
      assertEquals("JJol`", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("aeEF0j;");
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("eEF0j", token1.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (-2) ()", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q!pv'rkyYg3aw'De8,");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("q!", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("p", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("v", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^^1O9IeX");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("^^1O9IeX", token0.getTokenText());
      
      Token token1 = xPathLexer0.literal();
      assertEquals(27, token1.getTokenType());
      assertNotNull(token1);
      
      Token token2 = xPathLexer0.dots();
      assertEquals("", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("1", token3.getTokenText());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("O", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.consume();
      Token token5 = xPathLexer0.comma();
      assertEquals("I", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals("", token6.getTokenText());
      assertEquals((-2), token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ouf;8imm:");
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer2.doubleColon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("Z47C~'9FQ");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer1.nextToken();
      assertEquals("Z47C", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer1.rightBracket();
      assertEquals("~", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("a.DGp}D'6X4!|+nft|");
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume((-4320));
      assertEquals("a.DGp}D'6X4!|+nft|", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer3.at();
      assertEquals(16, token0.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("{n%m;.0V^d8Z8o<8");
      Token token1 = xPathLexer4.nextToken();
      assertEquals("{n%m;.0V^d8Z8o<8", token1.getTokenText());
      
      Token token2 = xPathLexer3.leftParen();
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer4.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("{", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.operatorName();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.literal();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.whitespace();
      xPathLexer1.rightBracket();
      xPathLexer1.and();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gL%9hiu6v{,");
      Token token0 = xPathLexer0.leftBracket();
      String string0 = token0.toString();
      assertEquals("[ (3) (g)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.mod();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("L", token1.getTokenText());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("la{g?;q`!Fo;FYCO");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("la", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.not();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("g", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals("?", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(";", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">}");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#G>'I(");
      xPathLexer0.and();
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("#", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("G", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.dots();
      assertEquals(">", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dSA");
      Token token0 = xPathLexer0.dots();
      assertEquals("d", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals("S", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("A", token2.getTokenText());
      
      xPathLexer0.number();
      Token token3 = xPathLexer0.number();
      assertEquals("", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('m');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("):[E&,z/GmA");
      XPathLexer xPathLexer1 = new XPathLexer("q!pv'rkyYg3aw'De8,");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("):", token0.getTokenText());
      
      Token token1 = xPathLexer1.plus();
      assertEquals("q", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      xPathLexer1.currentPosition();
      xPathLexer2.setXPath("0Xdw[A_y?^*tCWR*H");
      Token token2 = xPathLexer2.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("0", token2.getTokenText());
      
      Token token3 = xPathLexer2.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("X", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer3.consume();
      Token token4 = xPathLexer1.dots();
      assertEquals("!", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("0Xdw[A_y?^*tCWR*H");
      Token token5 = xPathLexer4.nextToken();
      assertEquals(30, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".6Yr3xWRR%i`+");
      xPathLexer0.setXPath("70k%NJx");
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("aH(8q#+OiCUaj]4]k\"");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume();
      assertNull(xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".6Y+3xW_%`+");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(31, token0.getTokenType());
      assertEquals(".6", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (1) (Y)", string0);
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("+", token2.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.and();
      Token token3 = xPathLexer0.colon();
      assertEquals("x", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("W_%`+", token4.getTokenText());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals("W", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2Omq?");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.doubleColon();
      String string0 = token0.toString();
      assertEquals("[ (19) (2O)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("R,S49`Qw>4a%E");
      xPathLexer1.setXPath("s+,vjr:mk");
      xPathLexer1.and();
      Token token1 = xPathLexer1.nextToken();
      assertEquals("s", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer1.setXPath("");
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("m", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q!pv'rkyYg3aw'De8,");
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("q", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(23, token1.getTokenType());
      assertEquals("!", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("M%3>:U*en ");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer1.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "!k9&G#m2:-<";
      XPathLexer xPathLexer1 = new XPathLexer("!k9&G#m2:-<");
      xPathLexer1.relationalOperator();
      Token token0 = xPathLexer0.minus();
      xPathLexer1.nextToken();
      xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1=||g%2RLpeZ+9T");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.leftParen();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftBracket();
      xPathLexer0.dots();
      xPathLexer0.consume((-1386));
      xPathLexer0.comma();
      // Undeclared exception!
      try { 
        xPathLexer0.whitespace();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(".6Yr3xWRR%i`+");
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[#6s");
      xPathLexer0.relationalOperator();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")FmK=ku");
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(")", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("FmK", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("=", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gL%9hiu6v{,");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("g", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("L", token1.getTokenText());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      assertNotNull(token2);
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("%9hiu6v{,", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5,");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("5", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (30) ()", string0);
      
      xPathLexer0.mod();
      xPathLexer0.consume();
      xPathLexer0.and();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer1.not();
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.identifier();
      Token token2 = xPathLexer1.notEquals();
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.consume(120);
      Token token4 = xPathLexer1.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#G>'I(");
      xPathLexer0.and();
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("#", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("G", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.dots();
      assertEquals("'", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("I", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y;2&5IW1?V");
      Token token0 = xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(";2&5IW1?V", token1.getTokenText());
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals(";2", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      String string0 = token0.toString();
      assertEquals("[ (3) (y)", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gL%9hiu6v{,");
      Token token0 = xPathLexer0.dollar();
      assertEquals("g", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("L", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.leftBracket();
      String string0 = token2.toString();
      assertEquals("[ (3) (%)", string0);
      
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.mod();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("h", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("iu6v{,", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.slashes();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("<+sv':Jk/");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(7, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
      
      xPathLexer1.consume();
      XPathLexer xPathLexer2 = new XPathLexer("gFftSI8nhu!ebo8");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token1 = xPathLexer1.at();
      assertEquals("s", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token2 = xPathLexer4.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("_)8Z~aUe0qV)");
      Token token3 = xPathLexer5.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("_", token3.getTokenText());
      
      xPathLexer2.operatorName();
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token4 = xPathLexer1.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("v", token4.getTokenText());
      
      int int0 = xPathLexer2.endPosition();
      assertEquals(15, int0);
      
      xPathLexer1.div();
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.or();
      boolean boolean0 = xPathLexer1.hasMoreChars();
      Token token1 = xPathLexer5.star();
      assertEquals(20, token1.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      boolean boolean1 = xPathLexer0.isIdentifierStartChar('_');
      assertFalse(boolean1 == boolean0);
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".t6Yr3xWRR%f`+");
      xPathLexer0.and();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("a.DGp}D'6X4!|+nft|");
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume((-4320));
      assertEquals("a.DGp}D'6X4!|+nft|", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("x");
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer0.mod();
      Token token2 = xPathLexer1.nextToken();
      assertEquals("x", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("a.DGp}D'6X4!|+nft|");
      XPathLexer xPathLexer1 = new XPathLexer("a.DGp}D'6X4!|+nft|");
      Token token0 = xPathLexer1.dots();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.whitespace();
      token1.toString();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer2.div();
      xPathLexer2.star();
      XPathLexer xPathLexer3 = new XPathLexer("a.DGp}D'6X4!|+nft|");
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.plus();
      xPathLexer2.doubleColon();
      xPathLexer2.getXPath();
      xPathLexer0.nextToken();
      xPathLexer1.comma();
      xPathLexer2.leftParen();
      XPathLexer xPathLexer5 = new XPathLexer(" ?A&_]P");
      xPathLexer4.consume();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.rightBracket();
      xPathLexer2.at();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer3.pipe();
      xPathLexer2.or();
      xPathLexer1.operatorName();
      // Undeclared exception!
      try { 
        xPathLexer6.LA((-783));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-@#?1Q&xA&3&+");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      token0.toString();
      xPathLexer0.at();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.number();
      xPathLexer1.and();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]k>#AY{\t");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("GYt.");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(4, token1.getTokenType());
      assertEquals("]", token1.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token2 = xPathLexer4.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('n');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.at();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2Omq?");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (19) (2O)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("R,S49`Qw>4a%E");
      xPathLexer1.setXPath("s+,vjr:mk");
      xPathLexer1.and();
      Token token1 = xPathLexer1.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("s", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(5, token2.getTokenType());
      assertEquals("+", token2.getTokenText());
      
      xPathLexer1.setXPath("");
      Token token3 = xPathLexer0.comma();
      assertEquals("m", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      xPathLexer1.operatorName();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token4);
      assertEquals("q", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<5sv':Jk/");
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.at();
      token0.toString();
      token0.toString();
      xPathLexer0.dots();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.minus();
      xPathLexer0.or();
      xPathLexer0.endPosition();
      xPathLexer0.minus();
      xPathLexer0.endPosition();
      Token token2 = xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      token2.toString();
      token1.toString();
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.not();
      token3.toString();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<<*>*AniO");
      Token token0 = xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken(token0);
      token0.toString();
      xPathLexer0.doubleColon();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.consume();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("zLKhw,IVb8yq");
      Token token2 = xPathLexer3.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("zL", token2.getTokenText());
      
      Token token3 = xPathLexer3.nextToken();
      assertEquals("Khw", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer2.consume((-519));
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer1.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer3.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer3.leftParen();
      assertEquals("I", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">>>,(P3RjH{V");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals(">", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(">", token1.getTokenText());
      assertEquals(9, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token2);
      assertEquals(">", token2.getTokenText());
      
      Token token3 = xPathLexer0.comma();
      assertEquals("(", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer(">>>,(P3RjH{V");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer2.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer4.consume();
      Token token5 = xPathLexer1.slashes();
      assertEquals(11, token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer(">>>,(P3RjH{V");
      xPathLexer5.setXPath("::eSu#VQL$1Z1pQVKh");
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer4.mod();
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer0.or();
      Token token6 = xPathLexer5.nextToken();
      assertEquals("::", token6.getTokenText());
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer5.nextToken();
      assertEquals("eSu", token7.getTokenText());
      
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer9 = new XPathLexer(">>>,(P3RjH{V");
      Token token8 = xPathLexer8.identifier();
      assertEquals(15, token8.getTokenType());
      
      XPathLexer xPathLexer10 = new XPathLexer("::eSu#VQL$1Z1pQVKh");
      Token token9 = xPathLexer6.colon();
      assertEquals(18, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">=\"}w>uCmX$P");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.notEquals();
      xPathLexer1.slashes();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer(">=\"}w>uCmX$P");
      xPathLexer0.consume(1);
      Token token1 = xPathLexer2.plus();
      XPathLexer xPathLexer4 = new XPathLexer(">=\"}w>uCmX$P");
      xPathLexer4.nextToken();
      xPathLexer3.leftBracket();
      xPathLexer3.pipe();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.pipe();
      xPathLexer4.dollar();
      xPathLexer6.identifierOrOperatorName();
      xPathLexer4.relationalOperator();
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer(".qd`w8N");
      xPathLexer8.mod();
      xPathLexer0.identifier();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r|-.28");
      xPathLexer0.comma();
      Token token0 = xPathLexer0.whitespace();
      token0.toString();
      xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      String string0 = null;
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
