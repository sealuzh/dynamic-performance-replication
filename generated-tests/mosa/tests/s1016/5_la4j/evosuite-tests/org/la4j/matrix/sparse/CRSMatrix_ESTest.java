/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:54:28 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toMatrixMarket();
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertEquals(0, cRSMatrix1.cardinality());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 17;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(17, 8, 2.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        CRSMatrix.random(2212, (int) (byte) (-51), (double) (byte) (-51), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1513);
      cRSMatrix0.copyOfShape(1513, 1441);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1513);
      Matrix matrix0 = cRSMatrix0.shuffle();
      CRSMatrix.block(matrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.rotate();
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, matrix0, cRSMatrix0, cRSMatrix0);
      assertEquals(0, cRSMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1513, 1513, 1513);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      
      CRSMatrix cRSMatrix1 = new CRSMatrix(0, 0);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1513, 1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.forEach(consumer0);
      CRSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 1103);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1103, (double)2, 2.0, (double)1103, (double)2).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      cRSMatrix0.minInRow(2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertEquals(0, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.euclideanNorm();
      int int0 = 3613;
      double[] doubleArray0 = new double[0];
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(3613, 3613, doubleArray0);
      cRSMatrix1.minInRow(int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 1513;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 1513;
      doubleArray0[2] = (double) 1513;
      CRSMatrix.from1DArray(1513, 1513, doubleArray0);
      double double0 = new Double(int0);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int1 = 388;
      MockRandom mockRandom0 = new MockRandom(int0);
      CRSMatrix.random(int1, int0, (double) int0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1513;
      doubleArray0[1] = (double) 1513;
      doubleArray0[2] = (double) 1513;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(1513, 1513, doubleArray0);
      cRSMatrix0.euclideanNorm();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(940);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 940
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(18);
      assertNotNull(integer0);
      assertEquals(18, (int)integer0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(18);
      assertNotNull(cRSMatrix0);
      assertEquals(18, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.05555555555555555, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(18, cRSMatrix0.rows());
      assertEquals(18, cRSMatrix0.cardinality());
      
      double double0 = cRSMatrix0.max();
      assertEquals(18, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.05555555555555555, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(18, cRSMatrix0.rows());
      assertEquals(18, cRSMatrix0.cardinality());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 9;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(9);
      assertNotNull(cRSMatrix0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.cardinality());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfRows(9);
      assertNotNull(cRSMatrix1);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(9, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(9, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix1.divide(9);
      assertNotNull(cRSMatrix2);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(9, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(9, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.density(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(9, cRSMatrix2.columns());
      assertEquals(9, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow((-3545));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3544
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1513);
      cRSMatrix0.euclideanNorm();
      cRSMatrix0.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(9, 9);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.columns());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(9, 9, 9);
      assertNotNull(cRSMatrix1);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(9, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(9, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      
      SparseMatrix sparseMatrix0 = cRSMatrix1.toSparseMatrix();
      assertNotNull(sparseMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertSame(cRSMatrix1, sparseMatrix0);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertSame(sparseMatrix0, cRSMatrix1);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(9, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(9, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(9, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(9, sparseMatrix0.rows());
      
      cRSMatrix1.blankOfColumns(213);
      cRSMatrix1.divide(9);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1077;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(2, 0, doubleArray0);
      assertNotNull(cRSMatrix0);
      assertArrayEquals(new double[] {1077.0}, doubleArray0, 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2634;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 1077;
      intArray0[6] = 0;
      intArray0[7] = 2;
      intArray0[8] = 0;
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      double double0 = cRSMatrix0.euclideanNorm();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, double0, 0.01);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertNotNull(cRSMatrix1);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 1447);
      assertNotNull(cRSMatrix0);
      assertEquals(2, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1447, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      cRSMatrix0.removeLastColumn();
      cRSMatrix0.euclideanNorm();
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[1];
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray((byte)0, (byte)0, doubleArray0);
      cRSMatrix0.eachNonZero((MatrixProcedure) null);
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1513, 1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ((CRSMatrix) rowMajorSparseMatrix0).maxInRow(968);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(968);
      denseMatrix0.blankOfShape(963, 1);
      // Undeclared exception!
      try { 
        CRSMatrix.block(rowMajorSparseMatrix0, denseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1513);
      cRSMatrix0.nonZeroColumnMajorIterator();
      cRSMatrix0.copyOfShape(16, 16);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RowMajorSparseMatrix.zero(1513, 1);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1513, 968, 743);
      cRSMatrix0.copyOfShape(13, 1162);
      cRSMatrix0.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1523, 1523);
      Matrix matrix0 = cRSMatrix0.rotate();
      cRSMatrix0.minInRow(2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      CRSMatrix.block(matrix0, cRSMatrix0, cRSMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1513);
      int int0 = 13;
      cRSMatrix0.removeFirstColumn();
      int int1 = (-1);
      cRSMatrix0.maxInRow(int1);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(int0);
      denseMatrix0.transpose();
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1485);
      cRSMatrix0.nonZeroIteratorOfRow(1485);
      cRSMatrix0.toMatrixMarket();
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 18;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(18, 18);
      Integer integer0 = new Integer(1197);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix0, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(37);
      Matrix matrix0 = cRSMatrix0.rotate();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(5727, 1513);
      CRSMatrix.block(matrix0, matrix0, matrix0, sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1513);
      cRSMatrix0.minInRow(13);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(1494, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 1513;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1513);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed((-835L));
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(2727);
      Matrix.fromMatrixMarket("KJKrLBy7mY+X)j,1#7");
      cRSMatrix1.minInRow(int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(13, 2);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(13);
      cRSMatrix1.getColumn(1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(1, vectorProcedure0);
      cRSMatrix0.minInRow(1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-1.0), (-1.0), (double)2).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      mockRandom0.setSeed(2);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(447);
      cRSMatrix1.getColumn(447);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachInRow(272, vectorProcedure0);
      cRSMatrix1.minInRow(4089);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1513);
      cRSMatrix0.rowMajorIterator();
      int[] intArray0 = new int[0];
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = (double) 1513;
      doubleArray1[1] = (double) 1513;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray0);
      CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix1.setAll((-1.0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1000, 7);
      ((CRSMatrix) rowMajorSparseMatrix0).toBinary();
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 1513;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1513);
      cRSMatrix0.determinant();
      int int1 = 1441;
      Matrix matrix0 = cRSMatrix0.copyOfShape(int0, int1);
      int int2 = 943;
      matrix0.minInRow(int2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1513);
      int[] intArray0 = new int[4];
      cRSMatrix0.select(intArray0, intArray0);
      CRSMatrix cRSMatrix1 = new CRSMatrix(1513, 1513);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1513);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate0);
      cRSMatrix0.minInRow(13);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.setAll(0.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1513, 1513);
      int[] intArray0 = new int[8];
      intArray0[0] = 1489;
      intArray0[1] = 1489;
      intArray0[2] = 1513;
      intArray0[3] = 1513;
      intArray0[4] = 1513;
      intArray0[5] = (-1040);
      intArray0[6] = 1513;
      intArray0[7] = 1513;
      cRSMatrix0.select(intArray0, intArray0);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 1513;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1513);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      mockRandom0.setSeed(int0);
      cRSMatrix0.blankOfRows(int0);
      cRSMatrix0.min();
      cRSMatrix0.minInRow(int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1513);
      CRSMatrix cRSMatrix1 = new CRSMatrix(1539, 17);
      cRSMatrix0.min();
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix2 = new CRSMatrix();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 13;
      CRSMatrix cRSMatrix0 = new CRSMatrix(13, 2);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 13;
      intArray0[2] = 13;
      intArray0[3] = 13;
      intArray0[4] = 2;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3641, 3641);
      byte[] byteArray0 = new byte[1];
      cRSMatrix0.nonZeroIteratorOfColumn(3641);
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3641).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow((byte)2, vectorFunction0);
      cRSMatrix0.updateAt(121, (byte)2, matrixFunction0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      CRSMatrix.block(cRSMatrix0, cRSMatrix1, cRSMatrix1, cRSMatrix0);
      cRSMatrix1.setAll(byte0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3641, 3641);
      byte[] byteArray0 = new byte[1];
      cRSMatrix0.nonZeroIteratorOfColumn(3641);
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      int int0 = 121;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1664.1571673, (double)(byte)2, (double)(byte)2, (-3830.65)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow((byte)2, vectorFunction0);
      cRSMatrix0.updateAt(int0, byteArray0[0], matrixFunction0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      CRSMatrix.block(cRSMatrix0, cRSMatrix1, cRSMatrix1, cRSMatrix0);
      cRSMatrix1.setAll(byte0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 1103;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 1103);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-3745.989717352525), (-1.0), (double)2, 459.6869).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom(2);
      mockRandom0.nextBoolean();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      mockRandom0.setSeed(2);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(471);
      cRSMatrix1.getColumn(471);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachInRow(272, vectorProcedure0);
      Matrix matrix0 = cRSMatrix1.copyOfShape((byte)121, 471);
      int int1 = 2;
      cRSMatrix1.setAll(2);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformColumn(int1, vectorFunction0);
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(int0, int0);
      int int2 = 2110;
      cRSMatrix2.minInRow(int2);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[4];
      intArray0[3] = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      cRSMatrix0.maxInRow(0);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      CRSMatrix.block(denseMatrix0, cRSMatrix0, denseMatrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(4, 1477.608383988576);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1477.608383988576, 608.34817370406, 608.34817370406, 0.367732567523684, 0.367732567523684).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix1.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix1, (RowMajorSparseMatrix) cRSMatrix1);
      cRSMatrix0.equals(matrix0, 608.34817370406);
      Integer integer0 = new Integer(961);
      cRSMatrix0.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)32;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        CRSMatrix.random(0, 0, (double) 0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 1481;
      int[] intArray0 = new int[7];
      intArray0[0] = 3395;
      intArray0[1] = (-653);
      intArray0[2] = 1484;
      intArray0[3] = 426;
      intArray0[4] = 5;
      intArray0[5] = 5;
      intArray0[6] = 1481;
      CRSMatrix cRSMatrix0 = new CRSMatrix(5, 1481, 426, doubleArray0, intArray0, intArray0);
      Matrix matrix0 = cRSMatrix0.removeFirstColumn();
      matrix0.toColumnVector();
      CRSMatrix cRSMatrix1 = CRSMatrix.block(matrix0, matrix0, matrix0, cRSMatrix0);
      double[][] doubleArray1 = new double[5][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      SparseMatrix.from2DArray(doubleArray1);
      cRSMatrix0.getColumn(intArray0[0]);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(intArray0[1], vectorProcedure0);
      cRSMatrix0.max();
      cRSMatrix1.max();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-1.0), (-1.0), (double)2).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      mockRandom0.setSeed(2);
      cRSMatrix0.min();
      cRSMatrix0.minInRow(1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1513);
      cRSMatrix0.maxInRow(1493);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1494);
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(37, 1506, mockRandom0);
      CRSMatrix.block(cRSMatrix0, denseMatrix0, matrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2, (double)2, (-1.0), (double)2).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      int[] intArray0 = new int[3];
      intArray0[1] = 2;
      intArray0[2] = 2;
      CRSMatrix cRSMatrix1 = new CRSMatrix(2, 2, 2, (double[]) null, intArray0, intArray0);
      cRSMatrix0.maxInRow(0);
      // Undeclared exception!
      try { 
        DenseMatrix.identity((-1061));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MockRandom mockRandom0 = new MockRandom(2025L);
      // Undeclared exception!
      CRSMatrix.randomSymmetric(964, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-1.0), (-1.0), (double)2).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
      cRSMatrix0.toDenseMatrix();
      matrix0.toBinary();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
