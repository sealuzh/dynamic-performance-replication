/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:44:29 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+5as*&_j24J!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      jSTerm0.toArray(objectArray0);
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.greaterT = 1721;
      JSJshopVars.rightPar = 1721;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)108;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      byteArrayInputStream0.markSupported();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(inputStreamReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      assertTrue(jSSubstitution0.fail());
      
      jSTerm1.standarizerPredicateForm();
      assertFalse(jSTerm1.isEval());
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.makeEval(false);
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.greaterT = 1721;
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'T';
      charArray0[2] = 'W';
      charArray0[3] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      jSTerm0.removeElement(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      jSTerm1.equals(jSTerm0);
      jSTerm1.call();
      System.setCurrentTimeMillis(255L);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h*");
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      jSTerm0.add((Object) "h*");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isFunction();
      jSTerm0.equals(jSTerm1);
      jSTerm1.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.minus = (-2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.setSize(3269);
      boolean boolean0 = jSTerm1.isGround();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.colon = (-474);
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      JSJshopVars.greaterT = 1;
      jSTerm0.toStr();
      jSTerm0.parallelStream();
      jSTerm0.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      jSTerm0.add(object0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.toStr();
      jSTerm1.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      jSTerm0.toStr();
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = '(';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[4] = '(';
      charArray0[3] = '(';
      charArray0[4] = '(';
      jSTerm0.toStr();
      jSTerm0.trimToSize();
      jSTerm0.cloneT();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jSTerm0.add(object0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add(object0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]");
      jSTerm1.toStr();
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      charArray0[1] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0, 964);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.makeEval(false);
      jSTerm1.addElement("");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f$Sj-");
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add((Object) "f$Sj-");
      jSTerm0.isGround();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.makeEval(true);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.matches(jSTerm1);
      jSTerm0.equals(jSTerm1);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+$Sj-");
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = '+';
      charArray0[2] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "f$Sj-");
      jSTerm0.isGround();
      jSTerm0.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTerm jSTerm0 = new JSTerm();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      jSTerm0.add((Object) "f$Sj-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.makeEval(true);
      jSTerm0.ensureCapacity((-36857012));
      JSJshopVars.leftBrac = 1785;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.rightPar = 247;
      jSTerm0.matches(jSTerm1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        pipedReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // reset() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f$Sj-");
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      jSTerm0.add((Object) "f$Sj-");
      jSTerm0.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.isFunction();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      jSTerm0.toStr();
      JSTerm jSTerm2 = jSTerm1.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      jSTerm1.standardizerTerm();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f$Sj-");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "f$Sj-");
      jSTerm0.isGround();
      Object object0 = new Object();
      jSTerm0.add((Object) null);
      jSTerm0.add((Object) jSTerm0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSTerm0.isConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAll(jSTerm0);
      jSSubstitution0.add((Object) "f$Sj-");
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[4];
      charArray0[0] = '^';
      charArray0[1] = 'j';
      charArray0[2] = '^';
      charArray0[3] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "f$Sj-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.isFunction();
      jSTerm0.print();
      jSTerm0.equals(jSTerm1);
      jSTerm1.makeConstant();
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = jSTerm0.isConstant();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      jSTerm0.add((Object) dataInputStream0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.DataInputStream cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[3] = '\u0000';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      streamTokenizer0.sval = "BN4OP";
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = '\"';
      charArray0[2] = '?';
      charArray0[3] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll((Collection) jSSubstitution0);
      jSTerm0.print();
      StringReader stringReader0 = new StringReader("%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSSubstitution0.add((Object) jSTerm0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSSubstitution0.add((Object) "%");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.sort(comparator0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.setSize(1027);
      jSTerm0.add(object0);
      JSJshopVars.rightPar = 40;
      char char0 = '(';
      JSJshopVars.greaterT = 1;
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f$Sj-");
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add((Object) "f$Sj-");
      jSTerm0.isGround();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.isFunction();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      jSTerm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm1);
      jSTerm1.matches(jSTerm1, jSSubstitution0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      jSTerm1.makeEval(true);
      Integer integer0 = new Integer(47);
      jSTerm0.addElement(integer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.equals(jSTerm0);
      jSTerm1.print();
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      LineNumberReader lineNumberReader1 = new LineNumberReader(lineNumberReader0, 42);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      PushbackReader pushbackReader0 = new PushbackReader(lineNumberReader1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pushbackReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(4, stringBuffer0.length());
      
      jSTerm0.makeConstant();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h*");
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      jSTerm0.add((Object) "h*");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isFunction();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f$Sj-");
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add((Object) "f$Sj-");
      jSTerm0.isGround();
      jSTerm0.isVariable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      jSTerm0.makeEval(false);
      Integer integer0 = new Integer(47);
      jSTerm0.addElement(integer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "f$Sj-";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f$Sj-");
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.spliterator();
      jSTerm0.add((Object) "f$Sj-");
      jSTerm0.isGround();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.call();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      jSTerm0.toStr();
      JSTerm jSTerm2 = jSTerm1.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm1);
      jSTerm2.ensureCapacity((-14));
      jSTerm2.call();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.dot = (-14);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.makeEval(true);
      jSTerm3.addElement("");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm3.equals(jSTerm1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-1170));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.parallelStream();
      jSTerm0.matches(jSTerm1);
      jSTerm0.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.call();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      jSTerm0.toStr();
      jSTerm1.call();
      charArrayReader0.markSupported();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm1.makeEval(true);
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      PipedReader pipedReader0 = new PipedReader();
      PipedReader pipedReader1 = new PipedReader(91);
      jSSubstitution2.add((Object) ":,?N4=^0*");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      jSTerm1.makeVariable();
      jSTerm4.makeFunction();
      assertTrue(jSTerm1.isVariable());
      
      JSTerm jSTerm5 = jSTerm1.call();
      jSTerm3.toStr();
      assertFalse(jSTerm3.equals((Object)jSTerm5));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader1);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeVariable();
      Object[] objectArray0 = new Object[0];
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.toArray(objectArray0);
      streamTokenizer0.commentChar((-4));
      jSTerm0.isEval();
      jSTerm1.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.colon = (-34);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isFunction();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.greaterT = 1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KCs");
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(28, stringBuffer0.length());
      
      char[] charArray0 = new char[7];
      jSTerm0.listIterator(1);
      charArray0[0] = 'l';
      charArray0[1] = ' ';
      charArray0[5] = '(';
      charArray0[3] = 'd';
      charArray0[4] = 'l';
      charArray0[5] = 'l';
      charArray0[0] = 'd';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0, 964);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.containsAll(jSTerm0);
      jSSubstitution0.add((Object) null);
      boolean boolean0 = jSTerm1.isGround();
      boolean boolean1 = jSTerm1.isEval();
      assertFalse(boolean1 == boolean0);
      assertTrue(jSTerm1.isFunction());
      
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.isVariable();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm3);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm3.isEval());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = '*';
      charArray0[2] = '?';
      charArray0[3] = '*';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightPar = 71;
      jSTerm0.makeVariable();
      jSTerm0.addElement((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.greaterT = 1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KCs");
      jSTerm0.toStr();
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'd';
      charArray0[4] = 'd';
      charArray0[5] = '%';
      charArray0[6] = 'd';
      charArray0[7] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      jSTerm1.isGround();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightPar = 40;
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = 'd';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(bufferedReader0);
      jSTerm0.parseList(streamTokenizer1);
      bufferedReader0.read();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.flagLevel = (-2094);
      Object object0 = new Object();
      jSTerm0.add(object0);
      JSJshopVars.rightPar = 40;
      JSJshopVars.greaterT = (-16);
      jSTerm0.toStr();
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[5] = '(';
      charArray0[6] = 'd';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      jSTerm0.print();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSTerm0.makeFunction();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSTerm1.isGround();
      jSTerm1.makeVariable();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm2, jSSubstitution0);
      jSTerm0.isEval();
      jSTerm1.matches(jSTerm2, jSSubstitution1);
      jSTerm1.standardizerTerm();
      jSTerm1.toStr();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      assertEquals(1, jSTerm0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[5];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '?';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
