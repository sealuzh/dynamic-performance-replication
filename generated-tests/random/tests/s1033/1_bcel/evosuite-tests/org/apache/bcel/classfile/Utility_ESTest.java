/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 15:24:38 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.UnknownFormatConversionException;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "monitorenter";
      Utility.compactClassName("monitorenter");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-41);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "monitorenter");
      byteArray0[6] = (byte) (-8);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1999), 187);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = ":";
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)66;
      byteArray0[8] = (byte) (-68);
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong(2391L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(76, (-325));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-14), (int) (byte) (-14));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_acmpeq\t\t#6398
         // 3:    <illegal opcode>
         // 4:    iconst_4
         // 5:    <illegal opcode>
         // 6:    pop2
         // 7:    lstore_3
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.clearBit(2376, 2376);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("'NqP-kC^wK1'Hs,]", "H/RrfYqH8F%xD", true);
      Utility.methodTypeToSignature("org.apache.bcel.classfile.ConstantInteger", (String[]) null);
      Utility.methodSignatureToString("()Lorg/apache/bcel/classfile/ConstantInteger;", "'NqP-kC^wK1'Hs,]", "org.apache.bcel.classfile.ConstantInteger");
      Utility.compactClassName("org.apache.bcel.classfile.ConstantInteger");
      Utility.getSignature("");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("'NqP-kC^wK1'Hs,]", "ireturn", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'NqP-kC^wK1'Hs,]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byte byte0 = (byte) (-7);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)41;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "2iW\\a=whBM8H";
      try { 
        Utility.typeOfSignature("2iWa=whBM8H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2iWa=whBM8H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-103);
      Utility.toHexString(byteArray0);
      Utility.accessToString(22);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.decode("x.F$d`j:", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"d`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utility.convertString("fconst_1");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)16;
      byteArray0[8] = (byte) (-67);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)68, 334, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = (-1764);
      Utility.classOrInterface((-1764));
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)122;
      byteArray0[0] = (byte)122;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("9Mg2S8L~'@/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9Mg2S8L~'@/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        Utility.typeOfSignature("N>f3v&1lLu[o/C Rcs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N>f3v&1lLu[o/C Rcs
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "interface");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-99);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "interface");
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-125), (-3228), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lshr
         // 1:    ifgt\t\t#-31963
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.compactClassName("aload_2");
      Utility.accessToString(1568);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)81, (int) (byte) (-57), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)78;
      ConstantPool constantPool0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1528), (int) (byte) (-106), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fcmpg
         // 1:    bastore
         // 2:    <illegal opcode>
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.close();
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.fillup("V", (byte) (-40), true, '5');
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 476, 1562);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-994), 9972, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    saload
         // 1:    impdep2
         // 2:    dload_3
         // 3:    iconst_3
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3730, 47, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("java.lang.Object@21c1ebc7, java.lang.Object@faea534, java.lang.Object@57a0b32a, java.lang.Object@46823b97");
      PrintStream printStream0 = mockPrintStream0.append('.');
      Utility.printArray(printStream0, objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte) (-64);
      byteArray0[8] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)123, 165, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-106);
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte) (-36);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.convertString("\n     Method Arguments:");
      assertEquals("\\n     Method Arguments:", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.accessToString((-2761), false);
      Utility.accessToString(71, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)125;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)125, 128, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.typeOfSignature("S{8RItsF;$$FFC<w{");
      Utility.isJavaIdentifierPart('T');
      Utility.format(91, 1421, true, 'T');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("S{8RItsF;$$FFC<w{", "S{8RItsF;$$FFC<w{", "S{8RItsF;$$FFC<w{", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: S{8RItsF;$$FFC<w{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-10);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 481, (int) (byte)120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.fillup("java.lang.", 1861, true, 'w');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)102;
      byteArray0[2] = (byte) (-84);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte)120;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-1081), false);
      assertEquals("0:    istore_0\n1:    fneg\n2:    ireturn\n3:    fsub\n4:    nop\n5:    freturn\n6:    <illegal opcode>\n7:    ishl\n", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utility.compactClassName("&X@#EAfVK?pS");
      Utility.replace("Og", "&X@#EAfVK?pS", "&X@#EAfVK?pS");
      try { 
        Utility.typeOfSignature("&X@#EAfVK?pS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &X@#EAfVK?pS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = true;
      Utility.format(31, 31, true, 'E');
      Utility.replace("31EEEEEEEEEEEEEEEEEEEEEEEEEEEEE", "31EEEEEEEEEEEEEEEEEEEEEEEEEEEEE", "31EEEEEEEEEEEEEEEEEEEEEEEEEEEEE");
      try { 
        Utility.typeOfSignature("31EEEEEEEEEEEEEEEEEEEEEEEEEEEEE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 31EEEEEEEEEEEEEEEEEEEEEEEEEEEEE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.isJavaIdentifierPart('$');
      Utility.compactClassName("org.apache.commons.io.filefilter.AndFileFilter", "v8\"&A%..", false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "v8\"&A%..";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "org.apache.commons.io.filefilter.AndFileFilter";
      objectArray0[5] = (Object) "v8\"&A%..";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "org.apache.commons.io.filefilter.AndFileFilter";
      objectArray0[8] = (Object) "org.apache.commons.io.filefilter.AndFileFilter";
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-620), (int) (byte) (-113), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.clearBit(81, (-1041));
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("q", stringArray0);
      Utility.format(76, 63, true, 'n');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 189, 78, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte) (-119);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)88, 6, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      try { 
        Utility.methodSignatureReturnType("L<y!01FCzK9~^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<y!01FCzK9~^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.fillup("java.lang.", 1861, true, 'w');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-84), (-1081), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.clearBit(118, (-712));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte) (-65);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 50, 1108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.searchOpcode("\t<");
      Utility.getSignature("o!\u0003u:VQE(v/(");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "\t<";
      objectArray0[1] = (Object) "\t<";
      objectArray0[2] = (Object) "\t<";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)126;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 696, 697, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)118;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-107), 2048);
      assertEquals("0:    d2f\n1:    fload\t\t%225\n3:    fcmpl\n4:    fneg\n", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("TFIEPCY;i");
      assertEquals("FIEPCY", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = Utility.isSet(2415, 2415);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("", string1);
      
      int int0 = Utility.clearBit(2415, (-387));
      assertEquals(2415, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.compactClassName("n|$o");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte)16;
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(81);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)45, (int) (byte) (-32));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-103);
      Utility.toHexString(byteArray0);
      Utility.accessToString(22);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.decode("x.F$fd`j:", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("LAz^ss' zdo=EC3", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('N');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) "LAz^ss' zdo=EC3";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) printWriter0;
      objectArray0[4] = (Object) printWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter1;
      objectArray0[7] = (Object) mockFileOutputStream0;
      objectArray0[8] = (Object) mockFileOutputStream0;
      Utility.printArray((PrintWriter) mockPrintWriter1, objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 13907. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "O!VZ&c!zu\"");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)63;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1320), (int) (byte)78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.signatureToString("ZWi'9=^|(3m7");
      String string0 = "|ecAi/:R~[7fI@_*aW";
      try { 
        Utility.typeOfMethodSignature("|ecAi/:R~[7fI@_*aW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |ecAi/:R~[7fI@_*aW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte) (-68);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4300, 256, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = Utility.replace("?VCdLk@", "dCJ<B}+z#qaf6wT|~a", "unknown");
      assertEquals("?VCdLk@", string0);
      
      String string1 = Utility.compactClassName(")!vXMv_T3", "?VCdLk@", false);
      assertEquals(")!vXMv_T3", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)27;
      byteArray0[8] = (byte)77;
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 20);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    nop\n3:    istore\t\t%16\n5:    return\n6:    dmul\n7:    iload_1\n8:    astore_2\n", string2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-83);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)117;
      byteArray1[1] = (byte) (-84);
      byteArray1[2] = (byte) (-83);
      byteArray1[3] = (byte) (-83);
      byteArray1[4] = (byte) (-83);
      byteArray1[5] = (byte) (-84);
      byteArray1[6] = (byte) (-84);
      byteArray1[7] = (byte) (-84);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-83), (int) (byte) (-84), true);
      assertEquals("0:    lneg\n1:    ireturn\n2:    lreturn\n3:    lreturn\n4:    lreturn\n5:    ireturn\n6:    ireturn\n7:    ireturn\n", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("goto\t\t#-19332", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 48, (int) (byte) (-112));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)40;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Null");
      byteArray0[4] = (byte) (-34);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-52), (int) (byte) (-34));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("", "org.apache.bcel.classfile.ConstantDouble", "Nh1!F=Qu&HBkU");
      Utility.accessToString((int) (byte) (-65), false);
      Utility.replace("", " arg", "Unexpected element value kind in annotation: ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte) (-65);
      objectArray0[1] = (Object) "0:    iaload\n1:    athrow\n2:    <illegal opcode>\n3:    dload_2\n4:    <illegal opcode>\n";
      objectArray0[2] = (Object) null;
      Utility.printArray(objectArray0, true, false);
      Utility.methodTypeToSignature("{iz8_Jmx3PQ", (String[]) null);
      byte[] byteArray1 = Utility.decode("Xv+p3*[<?", false);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.typeOfSignature("BQ.y7U");
      Utility.fillup("double", (byte)8, true, 'h');
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      String string0 = "Double";
      String string1 = "double";
      String string2 = ">vtCG)<mlo8QYViX0";
      boolean boolean0 = true;
      int int0 = (-603);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("doublehh", "Double");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Double\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("{ 1$!AA&(sc5yz|", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "{ 1$!AA&(sc5yz|";
      stringArray0[1] = "{ 1$!AA&(sc5yz|";
      stringArray0[2] = "{ 1$!AA&(sc5yz|";
      stringArray0[3] = "{ 1$!AA&(sc5yz|";
      stringArray0[4] = "{ 1$!AA&(sc5yz|";
      stringArray0[5] = "{ 1$!AA&(sc5yz|";
      stringArray0[6] = "{ 1$!AA&(sc5yz|";
      stringArray0[7] = "{ 1$!AA&(sc5yz|";
      Utility.methodTypeToSignature("{ 1$!AA&(sc5yz|", stringArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true);
      short short0 = Utility.searchOpcode(", npairs = ");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.fillup(", npairs = ", (short) (-1), false, 'v');
      assertEquals(", npairs = ", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-9);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, 0, (int) (short) (-1), false);
      assertEquals("0:    astore_2\n1:    dup_x1\n2:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)71;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        byteSequence0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-68);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 161, (-902), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iconst_1");
      Utility.getSignature("iconst_1");
      Utility.decode("iconst_1", false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Liconst_1;";
      Utility.printArray(objectArray0, true, false);
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-68);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte) (-29);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 649, 236);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "<1,`:l~SF1\\";
      try { 
        Utility.typeOfSignature("<1,`:l~SF1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <1,`:l~SF1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(185, 171);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantInteger constantInteger0 = new ConstantInteger(33);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = "ifnonnull";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = "double";
      MockFile mockFile0 = new MockFile("double", "\tdefault = ");
      File file0 = MockFile.createTempFile("ifnonnull", "@()+7Ur(4", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "\tdefault = ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      constantPool0.dump(dataOutputStream0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-55);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 61, (int) (byte) (-55), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("][^", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1356), (-1356));
      assertEquals("0:    dup2_x1\n1:    dup_x2\n2:    dup2_x2\n", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte) (-121);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 9, (-2295));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iconst_1");
      Utility.getSignature("iconst_1");
      Utility.decode("iconst_1", false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Liconst_1;";
      Utility.printArray(objectArray0, true, false);
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte) (-29);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 649, 236);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)122;
      byteArray0[8] = (byte)10;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1475), 1299, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)50;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)48, (byte)60);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2440, 42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 42, (int) (byte)80, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 13;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "goto_w");
      char char0 = 'e';
      Utility.format(13, 13, false, 'e');
      String string0 = "V";
      Utility.typeOfSignature("V");
      byte[] byteArray0 = Utility.decode("eeeeeeeeeee13", false);
      String string1 = "FY1(\".+wT[0gyQsi`Zt";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("eeeeeeeeeee13", "FY1(\".+wT[0gyQsi`Zt", "eeeeeeeeeee13", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: eeeeeeeeeee13
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getstatic");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3i'hq[o!J]xR");
      FileSystemHandling.shouldAllThrowIOExceptions();
      short short0 = Utility.searchOpcode("3i'hq[o!J]xR");
      assertEquals((short) (-1), short0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "getstatic";
      stringArray0[1] = "3i'hq[o!J]xR";
      stringArray0[2] = "getstatic";
      stringArray0[3] = "3i'hq[o!J]xR";
      stringArray0[4] = "getstatic";
      String string0 = Utility.methodTypeToSignature("3i'hq[o!J]xR", stringArray0);
      assertEquals("(Lgetstatic;[L3i'hq;Lgetstatic;[L3i'hq;Lgetstatic;)[L3i'hq;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte)2;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("5b 9b 63 db cd 4e 87 02", string1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString((-80));
      byte[] byteArray0 = Utility.decode("final synchronized transient native interface abstract strictfp synthetic annotation enum", false);
      Utility.classOrInterface(158);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-987), (-80));
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) fileSystemHandling0;
      objectArray0[5] = (Object) fileSystemHandling0;
      objectArray0[6] = (Object) "final synchronized transient native interface abstract strictfp synthetic annotation enum";
      objectArray0[7] = (Object) fileSystemHandling0;
      objectArray0[8] = (Object) string0;
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0, false, true);
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(string0, "long", "(anonymous)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    fsub
         // 1:    lmul
         // 2:    fdiv
         // 3:    ladd
         // 4:    idiv
         // 5:    lload_2
         // 6:    drem
         // 7:    lshl
         // 8:    fdiv
         // 9:    dadd
         // 10:   imul
         // 11:   frem
         // 12:   ddiv
         // 13:   fdiv
         // 14:   lmul
         // 15:   ishr
         // 16:   lsub
         // 17:   isub
         // 18:   lload_2
         // 19:   ineg
         // 20:   frem
         // 21:   ladd
         // 22:   fdiv
         // 23:   drem
         // 24:   lmul
         // 25:   lsub
         // 26:   fdiv
         // 27:   ineg
         // 28:   lload_2
         // 29:   fdiv
         // 30:   ladd
         // 31:   ineg
         // 32:   lmul
         // 33:   fneg
         // 34:   lsub
         // 35:   lload_2
         // 36:   lmul
         // 37:   fdiv
         // 38:   ineg
         // 39:   lsub
         // 40:   frem
         // 41:   fsub
         // 42:   ladd
         // 43:   dadd
         // 44:   lsub
         // 45:   lload_2
         // 46:   ladd
         // 47:   fadd
         // 48:   drem
         // 49:   ineg
         // 50:   frem
         // 51:   ladd
         // 52:   dadd
         // 53:   ineg
         // 54:   lload_2
         // 55:   drem
         // 56:   ineg
         // 57:   frem
         // 58:   lmul
         // 59:   dadd
         // 60:   ineg
         // 61:   fsub
         // 62:   irem
         // 63:   lload_2
         // 64:   drem
         // 65:   lshl
         // 66:   fdiv
         // 67:   ineg
         // 68:   imul
         // 69:   lsub
         // 70:   ineg
         // 71:   lmul
         // 72:   dadd
         // 73:   lload_2
         // 74:   ladd
         // 75:   fdiv
         // 76:   fdiv
         // 77:   ddiv
         // 78:   ineg
         // 79:   ladd
         // 80:   ineg
         // 81:   lmul
         // 82:   ddiv
         // 83:   fdiv
         // 84:   lload_2
         // 85:   lsub
         // 86:   fdiv
         // 87:   lneg
         // 88:   ldiv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-810), (-2167));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-79);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 641, (-2707), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("java.lang.Short", "dastore", "dastore", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "Q&|jr<{1SJmtE=";
      try { 
        Utility.typeOfSignature("Q&|jr<{1SJmtE=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q&|jr<{1SJmtE=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)121;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)66;
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString((-1175));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 210, (int) (byte)121);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)50;
      byte byte0 = (byte)97;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)47;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.";
      stringArray0[1] = "$A2a$_";
      String string0 = "[ {NT";
      stringArray0[2] = "[ {NT";
      stringArray0[3] = "$A2a$_";
      stringArray0[4] = "$A2a$_";
      stringArray0[5] = "java.lang.";
      stringArray0[6] = "$A2a$_";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("java.lang.", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [ {NT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-127);
      byteArray0[0] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      int int0 = 246;
      int int1 = 100;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(246, 100);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("lor", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lor'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 241, (int) (byte)7, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString(1897, true);
      Utility.clearBit(1897, 1897);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 20, 229);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utility.replace("JmatiZ;]py2Q.'&", "JmatiZ;]py2Q.'&", "JmatiZ;]py2Q.'&");
      Utility.typeOfSignature("JmatiZ;]py2Q.'&");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = Utility.isSet(62, 62);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-42));
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType((byte)0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dsub", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      try { 
        Utility.typeOfSignature("A-c`3h%!']*]\"T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A-c`3h%!']*]\"T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("aaload", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("int", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)57;
      byteArray0[3] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3, 1346, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = ">";
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.compactClassName("invokedynamic");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)68;
      byteArray1[1] = (byte) (-79);
      byteArray1[2] = (byte) (-79);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.readUnsignedByte();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "dW 70BV+8>q2K\u0001)H>=";
      stringArray0[1] = "dW 70BV+8>q2K\u0001)H>=";
      Utility.methodTypeToSignature("dW 70BV+8>q2K\u0001)H>=", stringArray0);
      Utility.encode(byteArray0, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.decode("&Dzd>@},sSvK.SW`", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal opcode>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "QeO5C|";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QeO5C|");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "QeO5C|";
      stringArray0[1] = "QeO5C|";
      stringArray0[2] = "QeO5C|";
      Utility.methodTypeToSignature("jsr_w", stringArray0);
      Utility.methodSignatureToString("(LQeO5C|;LQeO5C|;LQeO5C|;)Ljsr_w;", "QeO5C|", "InnerClass(");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "wide", "QeO5C|", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "File ";
      Utility.methodSignatureReturnType("File ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `float'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = Utility.getSignature("X-W_&63");
      assertEquals("LX-W_&63;", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("X-W_&63");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)65);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("if_acmpne\t\t#-11196", string1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object2;
      Utility.printArray(objectArray0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("java.lang.Object@527308d, java.lang.Object@621802a8, java.lang.Object@498bed3a, java.lang.Object@498bed3a");
      PrintStream printStream0 = mockPrintStream0.append('.');
      Utility.printArray(printStream0, objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)123;
      byteArray0[2] = (byte)54;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte) (-64);
      byteArray0[8] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)54, 165, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utility.compactClassName("instanceof");
      boolean boolean0 = true;
      Utility.fillup("HOE7LO2}ck,CTUl", 3483, true, '~');
      Utility.printArray((Object[]) null, true, true);
      try { 
        Utility.typeOfSignature("HbUD6jSY\"&A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HbUD6jSY\"&A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)66;
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString((-1175));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifgt\t\t#10946", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Y6M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y6M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "bastore";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bastore");
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-9);
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-67);
      Utility.encode(byteArray0, true);
      Utility.format((byte) (-67), 170, true, 'd');
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-680), (int) (byte)106);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    fmul
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = Utility.compactClassName("BKl_56\"qZEX#?\"iiFX");
      assertEquals("BKl_56\"qZEX#?\"iiFX", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fsub", string1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 40;
      Utility.setBit(40, 40);
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)86;
      byte byte0 = (byte)78;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, 43, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("XUI*O\u0000`*JDJDflNj", "public", "l@H");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "l@H";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)34;
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-63));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-84), (-305));
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-533), (byte)34);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-305), 170, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 44066. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("monitorenter", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3, 1346, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte) (-125);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.printf("\r", (Object[]) constantArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      constantPool0.dump(dataOutputStream0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)103, (-1327));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Utility.accessToString((-2089));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte) (-108);
      byteArray0[7] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfSignature("*W|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.clearBit(176, 176);
      Utility.replace("\"", "\"", "\"");
      try { 
        Utility.typeOfSignature("+?9{3tQek,F`vn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?9{3tQek,F`vn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "4_r/nRY{f";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.typeOfSignature("4_r/nRY{f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4_r/nRY{f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)25;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 10, 39, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "(!y=qf2f";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(!y=qf2f", "(!y=qf2f", "(!y=qf2f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!y=qf2f'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) fileSystemHandling0;
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) fileSystemHandling0;
      objectArray0[3] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) fileSystemHandling0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) fileSystemHandling0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      Utility.printArray(objectArray0);
      Utility.format((-1842659351), (-1620056689), true, 'D');
      Utility.getSignature("-1842659351");
      Utility.replace("{org.evosuite.runtime.testdata.FileSystemHandling@21865c82, org.evosuite.runtime.testdata.FileSystemHandling@21865c82, org.evosuite.runtime.testdata.FileSystemHandling@21865c82, org.evosuite.runtime.testdata.FileSystemHandling@21865c82, org.evosuite.runtime.testdata.FileSystemHandling@21865c82, java.lang.Object@389e5dce, org.evosuite.runtime.testdata.FileSystemHandling@21865c82, java.lang.Object@598106a7}", "{org.evosuite.runtime.testdata.FileSystemHandling@21865c82, org.evosuite.runtime.testdata.FileSystemHandling@21865c82, org.evosuite.runtime.testdata.FileSystemHandling@21865c82, org.evosuite.runtime.testdata.FileSystemHandling@21865c82, org.evosuite.runtime.testdata.FileSystemHandling@21865c82, java.lang.Object@389e5dce, org.evosuite.runtime.testdata.FileSystemHandling@21865c82, java.lang.Object@598106a7}", "L-1842659351;");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte) (-52);
      byteArray0[8] = (byte)85;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, (int) (byte) (-52));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        Utility.typeOfSignature("MoE\"/t;k)YrS;O_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MoE\"/t;k)YrS;O_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "byte";
      stringArray0[1] = "byte";
      stringArray0[2] = "byte";
      stringArray0[3] = "byte";
      String string0 = Utility.methodTypeToSignature("byte", stringArray0);
      assertEquals("(BBBB)B", string0);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(BBBB)B", true);
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("java.lang.Object@6e203623, java.lang.Object@6e7b7d15, java.lang.Object@41c0d34a, java.lang.Object@16676014");
      PrintStream printStream0 = mockPrintStream0.append('.');
      Utility.printArray(printStream0, objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte) (-64);
      byteArray0[8] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)123, 165, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)83;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-34), 718, false);
      String string0 = Utility.printArray((Object[]) null, false, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)119;
      byteArray0[8] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)51;
      byteArray0[8] = (byte) (-3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "Ki@><0H3";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-6);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ki@><0H3");
      byteArray0[3] = (byte)95;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("Ki@><0H3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ki@><0H3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byte byte0 = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)61;
      byte byte1 = (byte)39;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte) (-63);
      byteArray0[8] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1034), (byte)55);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(3, (byte)39);
      byteSequence0.readByte();
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantClass constantClass0 = new ConstantClass((-1946));
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = "fq\\$mo5nYqkJ5";
      int int0 = (-798);
      LocalVariable[] localVariableArray0 = new LocalVariable[4];
      LocalVariable localVariable0 = null;
      try {
        localVariable0 = new LocalVariable(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Utility.decode("RuntimeVisibleParameterAnnotations", false);
      Utility.fillup("'Me", 981, false, 'v');
      Utility.replace("]", "'Me", "{pD");
      Utility.replace(" fields:\n", " fields:\n", "Invalid method signature: ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "]";
      objectArray0[1] = (Object) "vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'Me";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wide");
      objectArray0[2] = (Object) "RuntimeVisibleParameterAnnotations";
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("RuntimeVisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeVisibleParameterAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 3129;
      Utility.fillup("Wm", 3129, false, 'y');
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Utility.clearBit(90, 90);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)16;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = 2112;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 242, 2112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dload\t\t%170", string0);
      
      String string1 = Utility.accessToString((int) (byte) (-86));
      assertEquals("private static synchronized transient native interface abstract strictfp synthetic annotation enum", string1);
      
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, false, false);
      Utility.accessToString(242, false);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)86;
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)103;
      byte byte1 = (byte)25;
      byteArray0[2] = (byte)25;
      byte byte2 = (byte) (-57);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.Object@5ebdc19b, java.lang.Object@5953cba3, java.lang.Object@36809c58, java.lang.Object@3df74321");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@5ebdc19b, java.lang.Object@5953cba3, java.lang.Object@36809c58, java.lang.Object@3df74321
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "freturn";
      boolean boolean0 = true;
      Utility.compactClassName("freturn", "freturn", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-89);
      byteArray0[7] = (byte) (-63);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("iload_2", "", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)108, (int) (byte)108, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 167. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("int", stringArray0);
      assertEquals("()I", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)20;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, 3, 1346, true);
      assertEquals("3:    dstore\t\t%20\n", string1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Utility.isJavaIdentifierPart(',');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("e7q<HpA b_=F");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("k");
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 23272. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "-]oTvUTlS,r2`";
      try { 
        Utility.typeOfSignature("-]oTvUTlS,r2`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -]oTvUTlS,r2`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "YD)zC:5H$";
      boolean boolean0 = true;
      try { 
        Utility.decode("YD)zC:5H$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-32);
      String string0 = Utility.encode(byteArray0, false);
      Utility.isJavaIdentifierPart('G');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = Utility.clearBit((-1334), 203);
      assertEquals((-3382), int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)64;
      byteArray0[8] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)5);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lsub", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-126));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("F<t]Dje#");
      PrintStream printStream0 = mockPrintStream0.format("dq{v(", (Object[]) constantArray0);
      Utility.printArray(printStream0, (Object[]) constantArray0);
      assertEquals(1, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = Utility.isSet(1080, 31);
      assertFalse(boolean0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("java.lang.", ",", false);
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string1);
      assertNotNull(string1);
      
      Utility.compactClassName("getfield", false);
      String string2 = Utility.convertString("java.lang.");
      assertTrue(string2.equals((Object)string0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iadd", string3);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)38;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-88), (int) (byte)38, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)11;
      byte byte1 = (byte)115;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 1296);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    fconst_0
         // 2:    drem
         // 3:    dstore\t\t%209
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "cO<3%N";
      stringArray0[1] = " (";
      stringArray0[2] = "iload_1";
      stringArray0[3] = "iload_1";
      stringArray0[4] = "iload_1";
      stringArray0[5] = "iload_1";
      stringArray0[6] = "iload_1";
      stringArray0[7] = "iload_1";
      Utility.methodTypeToSignature("iload_1", stringArray0);
      Utility.clearBit(48, (-1807));
      Utility.classOrInterface(48);
      Utility.typeOfSignature("Ltransient;transient");
      boolean boolean0 = true;
      Utility.compactClassName("<9<N*?c", "iload_1", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "Qtj-#_e lBQ`XI#$";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Qtj-#_e lBQ`XI#$", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qtj-#_e lBQ`XI#$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("fload_2", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2392, 2392);
      Constant constant0 = constantNameAndType0.copy();
      constantArray0[0] = constant0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertArrayEquals(new byte[] {(byte)102, (byte)108, (byte)111, (byte)97, (byte)100, (byte)95, (byte)50}, byteArray0);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte) (-63);
      byteArray0[8] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1034), (byte)55);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(3, (byte)39);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantClass constantClass0 = new ConstantClass((-1946));
      constantArray0[3] = (Constant) constantClass0;
      ConstantClass constantClass1 = new ConstantClass(byteSequence0);
      constantArray0[4] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "0*e<CG!]2r,0g__\"ZX";
      try { 
        Utility.typeOfSignature("0*e<CG!]2r,0g__\"ZX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0*e<CG!]2r,0g__\"ZX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('2');
      String[] stringArray0 = new String[5];
      stringArray0[0] = "31QMtc&Yn-";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      stringArray0[4] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "z)NuT#<.(ZW8Tgf,]";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "z)NuT#<.(ZW8Tgf,]");
      Utility.signatureToString("CV", false);
      byte[] byteArray0 = new byte[0];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("z)NuT#<.(ZW8Tgf,]", "char");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"char\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 3209;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface(3209);
      boolean boolean0 = true;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("H?jxzei#xu,JW7", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H?jxzei#xu,JW7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)105;
      byte byte0 = (byte)44;
      byteArray0[1] = (byte)44;
      byte byte1 = (byte)36;
      byteArray0[2] = (byte)36;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)44, (int) (byte)105, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("M27v?rD`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M27v?rD`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Utility.replace("ecZ^", "ecZ^", "ecZ^");
      int int0 = 1047;
      Utility.classOrInterface(1047);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "ecZ^";
      Utility.printArray(objectArray0);
      Utility.getSignature("ecZ^");
      Utility.signatureToString("Jy");
      String string0 = "\\r";
      String string1 = null;
      boolean boolean0 = true;
      int int1 = 13;
      int int2 = 885;
      int int3 = (-2101);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)125;
      byteArray0[0] = (byte)125;
      CodeException[] codeExceptionArray0 = new CodeException[9];
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("y-yJE@gn!-Pe");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "dup", (int) (byte)89, 28);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@B&)+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @B&)+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("KdX", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KdX'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.util.MemorySensitiveClassPathRepository");
      Utility.accessToString(1359);
      Utility.getSignature("=2d,K1/,zsAb");
      try { 
        Utility.typeOfSignature("=2d,K1/,zsAb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =2d,K1/,zsAb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Utility.fillup("Wm", 3129, false, 'y');
      byte byte0 = Utility.typeOfSignature("Tv?N]{<V0`*-XU");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format(8, 8, true, ')');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8)))))))");
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)125;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("ifnonnull\t\t#10480");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnonnull\t\t#10480
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.clearBit(3335, 758);
      boolean boolean0 = true;
      Utility.compactClassName("D<;{_Uw/|eWSw", true);
      Utility.typeOfSignature("D<;{_Uw.|eWSw");
      String string0 = "s)='PD98";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("s)='PD98");
      String string1 = "%-/I^!IIl";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "D<;{_Uw.|eWSw";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "s)='PD98";
      objectArray0[3] = (Object) "D<;{_Uw.|eWSw";
      objectArray0[4] = (Object) "s)='PD98";
      // Undeclared exception!
      try { 
        mockPrintWriter0.printf("%-/I^!IIl", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '-'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Utility.signatureToString("SpwU GdXY%^F\u0003WP` 1", false);
      Utility.searchOpcode("iushr");
      Utility.compactClassName("short");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("iushr", "short", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "private");
      Utility.convertString("private");
      Utility.convertString("org.apache.bcel.classfile.ConstantMethodType");
      Utility.isJavaIdentifierPart('h');
      Utility.replace("private", "org.apache.bcel.classfile.ConstantMethodType", "private");
      int int0 = 16;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "putfield");
      int int1 = 122;
      Utility.isSet(16, 122);
      Utility.setBit(122, 122);
      String string0 = "(QIFO+`b";
      try { 
        Utility.typeOfMethodSignature("(QIFO+`b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (QIFO+`b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("D>RoYfy?7n}RLj", false);
      assertEquals("double", string0);
      
      String string1 = Utility.format(91, (-528), false, 'K');
      assertEquals("91", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte) (-33);
      byteArray0[8] = (byte)92;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("e1 43 a2 31 41 92 0d df 5c", string2);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Utility.fillup("Y\"W*?[LW_[", 322, true, '!');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string0 = "|HfWBgEYuRXj7W";
      Utility.fillup("|HfWBgEYuRXj7W", (-2384), true, '!');
      Utility.accessToString((-2351));
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "public final volatile transient interface abstract synthetic annotation enum";
      objectArray0[2] = (Object) "|HfWBgEYuRXj7W";
      objectArray0[3] = (Object) "public final volatile transient interface abstract synthetic annotation enum";
      objectArray0[4] = (Object) null;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "Y\"W*?[LW_[!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
      objectArray0[7] = (Object) "Y\"W*?[LW_[!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0);
      Utility.isSet((-2384), (-2384));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Y\"W*?[LW_[";
      stringArray0[1] = "|HfWBgEYuRXj7W";
      stringArray0[2] = "Illegally nested brackets:";
      stringArray0[3] = "|HfWBgEYuRXj7W";
      stringArray0[4] = "|HfWBgEYuRXj7W";
      stringArray0[5] = "Y\"W*?[LW_[!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
      stringArray0[6] = "public final volatile transient interface abstract synthetic annotation enum";
      stringArray0[7] = "Y\"W*?[LW_[!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("Illegally nested brackets:", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[LW_[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.setBit(178, 178);
      Utility.isSet(1629, 47);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (-1545));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-82);
      Constant[] constantArray0 = new Constant[6];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)87);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1158), 2311);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(521, (byte)117);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic((-246), (-385));
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("V");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[4] = (Constant) constantUtf8_1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-385), (byte)13);
      constantArray0[5] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 521, 1030);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = Utility.accessToString(1438, true);
      Utility.searchOpcode("'8)&?])cln3a}O");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(222, (byte) (-5));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantLong constantLong0 = new ConstantLong((-2286L));
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "R:s$!`#!JYhM";
      try { 
        Utility.typeOfSignature("R:s$!`#!JYhM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R:s$!`#!JYhM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Utility.replace("dreturn", "dreturn", "invokedynamic");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "Z2;'2xi";
      Utility.typeOfSignature("Z2;'2xi");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("G0-(;fPVC^nENq`D=[", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G0-(;fPVC^nENq`D=['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "8@+av";
      String[] stringArray0 = new String[0];
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Utility.methodTypeToSignature("8@+av", stringArray0);
      try { 
        Utility.typeOfSignature("?FaBGC(eex<O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?FaBGC(eex<O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)66;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString((-1175));
      assertEquals("public static synchronized volatile native interface strictfp synthetic annotation enum", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lrem", string1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "/^p;=-OmTc";
      try { 
        Utility.typeOfSignature("/^p;=-OmTc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /^p;=-OmTc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "\"2#}nY2anuK-.04 ";
      try { 
        Utility.typeOfSignature("\"2#}nY2anuK-.04 ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"2#}nY2anuK-.04 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "Bl[PJx!\"4Wq+RHt78";
      Utility.methodSignatureReturnType("Bl[PJx!\"4Wq+RHt78");
      try { 
        Utility.methodSignatureArgumentTypes("Z/#\"#-S\"\"", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Z/#\"#-S\"\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("XLKq>4J$#Zh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XLKq>4J$#Zh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = Utility.format((-1485), (-1784), false, '2');
      assertEquals("-1485", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      byte[] byteArray0 = Utility.decode("JQ/3|b'", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("-1485");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1784), 64);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantString constantString0 = new ConstantString((-1485));
      constantArray0[2] = (Constant) constantString0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[3] = (Constant) constantFloat0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(64, 64);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[4] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dstore_3", string1);
      assertArrayEquals(new byte[] {(byte)74, (byte)81, (byte)47, (byte)51, (byte)124, (byte)98, (byte)39}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "Type of ConstValue invalid: ";
      try { 
        Utility.methodSignatureReturnType("Type of ConstValue invalid: ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Type of ConstValue invalid: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.convertString("`\"06^FJ\"/zObh3xQ&");
      assertEquals("`\\\"06^FJ\\\"/zObh3xQ&", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "`\"06^FJ\"/zObh3xQ&";
      stringArray0[1] = "`\"06^FJ\"/zObh3xQ&";
      String string1 = Utility.methodTypeToSignature("`\"06^FJ\"/zObh3xQ&", stringArray0);
      assertEquals("(L`\"06^FJ\"/zObh3xQ&;L`\"06^FJ\"/zObh3xQ&;)L`\"06^FJ\"/zObh3xQ&;", string1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("`\"06^FJ\"/zObh3xQ&");
      mockPrintStream0.flush();
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) stringArray0);
      int int0 = Utility.setBit(9, (-3956));
      assertEquals(4105, int0);
      
      String string2 = Utility.classOrInterface(1970);
      assertEquals("interface", string2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("(L`\"06^FJ\"/zObh3xQ&;L`\"06^FJ\"/zObh3xQ&;)L`\"06^FJ\"/zObh3xQ&;");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string3 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("lstore_3", string3);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "$z8s_<";
      try { 
        Utility.typeOfSignature("$z8s_<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $z8s_<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = Utility.accessToString((-91), true);
      assertEquals("public protected transient native abstract strictfp synthetic annotation enum", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "public protected transient native abstract strictfp synthetic annotation enum";
      objectArray0[1] = (Object) "public protected transient native abstract strictfp synthetic annotation enum";
      objectArray0[2] = (Object) "public protected transient native abstract strictfp synthetic annotation enum";
      objectArray0[3] = (Object) "public protected transient native abstract strictfp synthetic annotation enum";
      objectArray0[4] = (Object) "public protected transient native abstract strictfp synthetic annotation enum";
      objectArray0[5] = (Object) "public protected transient native abstract strictfp synthetic annotation enum";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{public protected transient native abstract strictfp synthetic annotation enum, public protected transient native abstract strictfp synthetic annotation enum, public protected transient native abstract strictfp synthetic annotation enum, public protected transient native abstract strictfp synthetic annotation enum, public protected transient native abstract strictfp synthetic annotation enum, public protected transient native abstract strictfp synthetic annotation enum}", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("f2l", string2);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "anewarray");
      String string0 = Utility.classOrInterface((-2088));
      assertEquals("interface", string0);
      
      String string1 = Utility.accessToString(280, false);
      assertEquals("static final native", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)97;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string2 = Utility.replace("V4T\"c#i:uwbI|QH?P1w", "static final native", "9Nw{");
      assertEquals("V4T\"c#i:uwbI|QH?P1w", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantClass constantClass0 = new ConstantClass(4096);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(32, 32);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref(19, 171);
      constantArray0[3] = (Constant) constantInterfaceMethodref2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string3 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("bastore", string3);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.accessToString(1);
      Utility.format(1, 1, true, 'W');
      try { 
        Utility.typeOfSignature("1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = null;
      Utility.replace("LocalVariableTable", "{^@Dx2", (String) null);
      int int0 = 807;
      Utility.accessToString(807, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)56;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = "\\.r-q^P$bWz$|F;WN'A";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(".r-q^P$bWz$|F;WN'A");
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      constantUtf8_0.clone();
      constantPool0.constantToString((Constant) constantUtf8_0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-97), 136, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iconst_1
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Utility.setBit(2210, 2210);
      String string0 = "PW;Q]mV*^WG\\jKP=id";
      try { 
        Utility.methodSignatureReturnType("PW;Q]mV*^WGjKP=id");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PW;Q]mV*^WGjKP=id'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte) (-59);
      byteArray0[8] = (byte)75;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)75, 157, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "VD ";
      Utility.methodSignatureReturnType("VD ", false);
      String string1 = "zZJ(C\"J";
      try { 
        Utility.methodSignatureArgumentTypes("zZJ(C\"J", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: zZJ(C\"J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!CX|fnL!eBI)O:/ag7");
      byte byte0 = Utility.typeOfSignature("!CX|fnL!eBI)O:/ag7");
      assertEquals((byte)5, byte0);
      
      Utility.compactClassName(">5,r]F", false);
      Utility.getSignature(">5,r]F");
      int int0 = Utility.setBit((-1773), (-1773));
      assertEquals((-1773), int0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L>5,r]F;");
      String string0 = Utility.convertString("L>5,r]F;");
      assertEquals("L>5,r]F;", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "!CX|fnL!eBI)O:/ag7";
      stringArray0[1] = "L>5,r]F;";
      String string1 = Utility.methodTypeToSignature("L>5,r]F;", stringArray0);
      assertEquals("(L!CX|fnL!eBI)O:/ag7;LL>5,r]F;;)LL>5,r]F;;", string1);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L>5,r]F;");
      String string2 = Utility.replace("!CX|fnL!eBI)O:/ag7", "i2b", "L>5,r]F;");
      assertEquals("!CX|fnL!eBI)O:/ag7", string2);
      
      Utility.format((-1773), 2008, true, '(');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      short short0 = Utility.searchOpcode("dstore_3");
      assertEquals((short)74, short0);
      
      Utility.accessToString((-949));
      String string3 = Utility.accessToString((-3032), false);
      assertEquals("static synchronized abstract synthetic annotation enum", string3);
      
      Utility.compactClassName("L>5,r]F;");
      int int1 = Utility.clearBit(4864, (-1773));
      assertEquals(4864, int1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "X6YQR]<4ZdFiAnKcH";
      try { 
        Utility.typeOfSignature("X6YQR]<4ZdFiAnKcH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X6YQR]<4ZdFiAnKcH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Ck;P~>PF[VsI.", false);
      assertEquals(13, byteArray0.length);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-81);
      byteArray1[1] = (byte) (-118);
      byteArray1[2] = (byte) (-31);
      byteArray1[3] = (byte) (-87);
      byteArray1[4] = (byte) (-99);
      byteArray1[5] = (byte) (-121);
      byteArray1[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "EjC7";
      Utility.compactClassName("EjC7");
      try { 
        Utility.typeOfSignature("EjC7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EjC7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.compactClassName("e__(Vxz");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)7;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)7, 66);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.compactClassName("ZzaC# ");
      Utility.compactClassName("<Unknown>");
      Utility.replace("ZzaC# ", "ZzaC# ", "A`'h*");
      Utility.searchOpcode("invokespecial");
      Utility.isJavaIdentifierPart('g');
      Utility.isJavaIdentifierPart('g');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte)5;
      Utility.equals(byteArray0, byteArray0);
      Utility.convertString("A`'h*");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)13, (int) (byte) (-102), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = "P@G";
      try { 
        Utility.typeOfSignature("P@G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P@G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("=I{xg%[b'%Wq");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString((-1432));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface(1661);
      Utility.isJavaIdentifierPart('q');
      Utility.accessToString(1661, false);
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "checkcast";
      Utility.compactClassName("checkcast", false);
      String string1 = "return";
      Utility.searchOpcode("return");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("checkcast", "checkcast");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // checkcast
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F]y_*%~.");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Y\",oJ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y\",oJ");
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("Y\",oJ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y\",oJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "OjA7N&4H";
      try { 
        Utility.methodSignatureReturnType("OjA7N&4H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OjA7N&4H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.setBit(80, 5);
      Utility.classOrInterface((-2173));
      Utility.searchOpcode("interface");
      Utility.isSet(5, 8);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "interface";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.convertString("ret");
      String string0 = "ifrFd";
      String string1 = null;
      Utility.replace("ifrFd", "ifrFd", (String) null);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-7);
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte) (-7);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)2, (-329));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 2:    iconst_0
         // 3:    l2i
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";-U9/$pv*}]+j$[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;-U9/$pv*}]+j$[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("iload_1", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = Utility.setBit(78, 1477);
      assertEquals(110, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)91;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("39 6c 7f 5b", string0);
      
      String string1 = Utility.getSignature("u 6uLk#Kj^-`od`");
      assertEquals("Lu;", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('4');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Utility.fillup("b9TL_", 95, true, '=');
      Utility.format(990, 125, true, '@');
      Utility.compactClassName("multianewarray");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "multianewarray";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "b9TL_==========================================================================================";
      objectArray0[3] = (Object) "b9TL_==========================================================================================";
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-94);
      byteArray0[0] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 90, (int) (byte) (-94));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = "\t\t";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\t\t";
      stringArray0[1] = "\t\t";
      stringArray0[2] = "\t\t";
      Utility.methodTypeToSignature("\t\t", stringArray0);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "OjWA7N&4H";
      try { 
        Utility.typeOfSignature("OjWA7N&4H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OjWA7N&4H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte) (-58);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("$40$G$ffd$DS$c6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$40$G$ffd$DS$c6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = Utility.compactClassName("MjkxeId/EI9c", "_<]vntND%Wnw Ugv+%", false);
      assertEquals("MjkxeId.EI9c", string0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart('p');
      String string1 = Utility.replace("_<]vntND%Wnw Ugv+%", "multianewarray", "ifnonnull");
      assertEquals("_<]vntND%Wnw Ugv+%", string1);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "U.LzOmB[r]c>`r";
      try { 
        Utility.typeOfSignature("U.LzOmB[r]c>`r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U.LzOmB[r]c>`r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("ifle\t\t#-16281", string1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.decode("3eHT=hWC5Bg<kH+p", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-52);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-52), (int) (byte) (-52));
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-52);
      byteArray1[1] = (byte)100;
      byteArray1[2] = (byte) (-52);
      Utility.toHexString(byteArray1);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("getstatic", "", "C+>^GP", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)76;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)120;
      byteArray1[1] = (byte) (-112);
      byteArray1[2] = (byte)76;
      byteArray1[3] = (byte)79;
      byteArray1[4] = (byte)120;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L&JwpF4WvN!9}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L&JwpF4WvN!9}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-122);
      byte byte0 = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)72;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)72;
      byteArray1[1] = (byte) (-122);
      byteArray1[2] = (byte)72;
      byteArray1[3] = (byte)72;
      Utility.equals(byteArray0, byteArray1);
      try { 
        Utility.typeOfSignature("aI=f;#,zW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aI=f;#,zW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string0 = "8vj!|&+sUex";
      try { 
        Utility.typeOfSignature("8vj!|&+sUex");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8vj!|&+sUex
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Utility.compactClassName(", high = ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)121;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("GcC5pS1pGM5?X,Lzx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GcC5pS1pGM5?X,Lzx
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Illegal type: ");
      Utility.decode("Illegal type: ", false);
      Utility.compactClassName("Illegal type: ", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Illegal type: ";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray0[1] = "Illegal type: ";
      stringArray0[2] = "P@e[$";
      stringArray0[3] = "Illegal type: ";
      stringArray0[4] = "Illegal type: ";
      stringArray0[5] = "Illegal type: ";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(";", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true, false);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      String string1 = Utility.fillup("{}", 218, true, ']');
      assertEquals("{}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte)19;
      byteArray0[8] = (byte)6;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("c3 fe 63 c5 ee 00 f3 13 06", string2);
      
      boolean boolean0 = Utility.isJavaIdentifierPart(']');
      assertFalse(boolean0);
      
      int int0 = Utility.clearBit((byte) (-18), 85);
      assertEquals((-2097170), int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = "U.7Lz+ODB[r]c>`r";
      // Undeclared exception!
      try { 
        Utility.signatureToString("U.7Lz+ODB[r]c>`r", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U.7Lz+ODB[r]c>`r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.methodSignatureReturnType("Illegal type: ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format(2124, 2124, true, '5');
      Utility.searchOpcode("int");
      Utility.fillup("int", 2124, true, '');
      Utility.isJavaIdentifierPart(' ');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-29);
      Utility.encode(byteArray0, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short) (-1), (int) (byte)14);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    land\n1:    dconst_0\n2:    dstore_2\n3:    lastore\n4:    iconst_m1\n5:    <illegal opcode>\n", (String) null, "areturn", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    land
         // 1:    dconst_0
         // 2:    dstore_2
         // 3:    lastore
         // 4:    iconst_m1
         // 5:    <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.fillup("invokestatic", 82, true, 'i');
      Utility.accessToString(82, true);
      Utility.setBit(82, (-2196));
      Utility.setBit(82, 46);
      try { 
        Utility.methodSignatureReturnType("N(2%trU&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N(2%trU&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      
      String string1 = Utility.replace("SMHgMfo*m9T1J}aX", "m@~bNEU)Ihd19sT;,", "java.lang.Object@3ec1531d");
      assertEquals("SMHgMfo*m9T1J}aX", string1);
      
      String string2 = Utility.accessToString((-3042), true);
      assertEquals("private protected static final abstract synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "Br\\";
      String string1 = Utility.fillup("Br", 2334, false, 'E');
      String string2 = Utility.compactClassName(string1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Br";
      objectArray0[1] = (Object) string2;
      objectArray0[2] = (Object) "Br";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "Br";
      objectArray0[5] = (Object) string2;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, string1);
      objectArray0[6] = (Object) string2;
      objectArray0[7] = (Object) string2;
      objectArray0[8] = (Object) "Br";
      Utility.printArray(objectArray0);
      try { 
        Utility.methodSignatureReturnType(string1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte) (-121);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 9, (-2295));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.setBit(1000, 93);
      Utility.format(17, 3, false, 'D');
      Utility.isJavaIdentifierPart('M');
      Utility.replace("D17", "D17", "D17");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("D17", "Dont call getValueChar() on a non CHAR ElementValue", "D17");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: D17
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte) (-57);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet((-981), (-981));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)17;
      byte byte0 = (byte) (-70);
      byteArray0[2] = (byte) (-70);
      Utility.equals(byteArray0, byteArray0);
      Utility.methodSignatureReturnType("Invalid method signature: ");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("monitorexit", "int");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"int\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Utility.isJavaIdentifierPart('B');
      String string0 = "K*:am}#+8";
      try { 
        Utility.methodSignatureArgumentTypes("K*:am}#+8", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K*:am}#+8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = (-2255);
      Utility.format((-2255), (-2255), false, 'n');
      Utility.compactClassName("java.lang.vW#Xc'", "-2255", false);
      String string0 = "()LTAR#,n";
      Utility.searchOpcode("()LTAR#,n");
      Utility.decode("V", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte byte0 = (byte)12;
      try { 
        constantPool0.getConstantString((-2255), (byte)12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -2255. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[tp?7f");
      Utility.isSet(50, 818);
      String[] stringArray0 = Utility.methodSignatureArgumentTypes("()LTAR#,n", true);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.compactClassName("\\", "\\", false);
      Utility.decode("rVjWjoDQTO", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\\");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\\";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "\\";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "\\";
      objectArray0[5] = (Object) "rVjWjoDQTO";
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) "\\";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Utility.replace(", high = ", "s,o8rG", ", high = ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)43;
      byte byte0 = (byte) (-64);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantString constantString0 = new ConstantString((byte)115);
      constantArray0[0] = (Constant) constantString0;
      int int0 = 3516;
      int int1 = (-681);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 115
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = ", ";
      try { 
        Utility.typeOfSignature(", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "TAR#,nGm.";
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("TAR#,nGm.", (String[]) null);
      Utility.isSet(2039, 32);
      Utility.compactClassName("()LTAR#,nGm/;", "TAR#,nGm.", true);
      Utility.accessToString(2039);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("char");
      Utility.setBit(71, 11);
      Utility.methodSignatureReturnType("LuR{mxG&P9;V", true);
      Utility.accessToString(71, true);
      Utility.accessToString(11);
      Utility.compactClassName("public private protected volatile", false);
      Utility.isSet(71, 2119);
      // Undeclared exception!
      try { 
        Utility.signatureToString("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `char'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("`\"06^FJ\"/zObh3xQ&");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "`\"06^FJ\"/zObh3xQ&";
      stringArray0[1] = "`\"06^FJ\"/zObh3xQ&";
      Utility.methodTypeToSignature("`\"06^FJ\"/zObh3xQ&", stringArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("`\"06^FJ\"/zObh3xQ&");
      mockPrintStream0.flush();
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) stringArray0);
      Utility.setBit(9, (-3956));
      Utility.classOrInterface(1970);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = null;
      try {
        constantMethodType0 = new ConstantMethodType((ConstantMethodType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Utility.setBit(3049, 3061);
      MockPrintStream mockPrintStream0 = new MockPrintStream("? extends ");
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "? extends ";
      objectArray0[1] = (Object) "? extends ";
      objectArray0[2] = (Object) "? extends ";
      objectArray0[3] = (Object) "? extends ";
      objectArray0[4] = (Object) locale0;
      Locale locale1 = Locale.ROOT;
      locale0.getDisplayName(locale1);
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "? extends ", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      Utility.accessToString(2100201);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("public static synchronized volatile transient native interface strictfp", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public static synchronized volatile transient native interface strictfp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-70);
      Utility.encode(byteArray0, false);
      Utility.accessToString((-432), false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "final volatile interface abstract strictfp synthetic annotation enum";
      stringArray0[1] = "{}";
      stringArray0[2] = "{}";
      stringArray0[3] = "=2 fKh}9#I8PYHW<>[";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("(}Q2f:B;{NcG3!E*Gc", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.clearBit(5, 5);
      try { 
        Utility.methodSignatureReturnType("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-47);
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)72;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      int int0 = 213;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 72
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.compactClassName("java.lang.Void");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("8V+?", "void", "~rG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8V+?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.isSet(99, 4486);
      boolean boolean0 = false;
      Utility.compactClassName("LuR{mxG&P9;V", "Invalid StackMap frame_type", false);
      Utility.accessToString(72, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("LuR{mxG&P9;V", "LuR{mxG&P9;V", "static volatile", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LuR{mxG&P9;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.getSignature("TQkwEE%g1?");
      int int0 = 1075;
      Utility.classOrInterface(1075);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'");
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      String string0 = "W*s~,g4l-@";
      // Undeclared exception!
      try { 
        Utility.signatureToString("W*s~,g4l-@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W*s~,g4l-@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      int int0 = (-1395);
      Utility.accessToString((-1395), true);
      String string0 = "]OA#[OeM=";
      MockFile mockFile0 = new MockFile("public protected static transient strictfp synthetic annotation enum", "]OA#[OeM=");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockPrintStream0;
      mockFile0.setWritable(true, true);
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) "public protected static transient strictfp synthetic annotation enum";
      objectArray0[6] = (Object) "public protected static transient strictfp synthetic annotation enum";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String string1 = "fKJ`I>BWz0(u41/Vz?&";
      try { 
        Utility.decode("fKJ`I>BWz0(u41/Vz?&", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.convertString("p\u0001s&sMH6vpV.wz");
      Utility.classOrInterface(43);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)55;
      byte byte0 = (byte)88;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)18;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.typeOfSignature("Invalid type: ");
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = "vW#Xc'";
      // Undeclared exception!
      try { 
        Utility.signatureToString("vW#Xc'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `vW#Xc''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)98;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "";
      Utility.compactClassName("");
      String string1 = "\\\"";
      // Undeclared exception!
      try { 
        Utility.signatureToString("\"", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = Utility.accessToString((-2715), true);
      String string1 = Utility.compactClassName("public protected volatile native abstract synthetic annotation enum", "", false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      Utility.compactClassName("llqI/Nx_gj", "", true);
      Utility.isJavaIdentifierPart(' ');
      Utility.isSet(221, 0);
      String string1 = "rb]R^dK";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("rb]R^dK", "rb]R^dK", "iconst_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: rb]R^dK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = "iastore";
      try { 
        Utility.decode("iastore", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = Utility.compactClassName("vW#Xc'");
      assertEquals("vW#Xc'", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = "v:3B9Wqyq";
      try { 
        Utility.methodSignatureReturnType("v:3B9Wqyq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `v:3B9Wqyq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Utility.accessToString(103, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)0;
      byte byte0 = (byte) (-32);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfMethodSignature("l(uG[qhV|X*z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: l(uG[qhV|X*z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)114;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-95));
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)60, 91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Constant$1";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Constant$1");
      Utility.decode("org.apache.bcel.classfile.Constant$1", false);
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      int int0 = Utility.clearBit(31, 570);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte byte0 = (byte)56;
      byteArray0[0] = (byte)56;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hfRMuwSjZ8\"M(>U>");
      byte byte1 = (byte)90;
      byteArray0[1] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.format((byte)90, (byte)90, true, '=');
      Utility.format(2241, 2241, false, '=');
      try { 
        Utility.typeOfSignature("fstore\t\t%90");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fstore\t\t%90
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.fillup("$/TI", 14, false, '8');
      Utility.compactClassName("5e h\\b&BuG9p=aP|.H", false);
      Utility.accessToString(14, true);
      Utility.accessToString(14, false);
      Utility.isJavaIdentifierPart(';');
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null, false);
      Utility.accessToString(14);
      try { 
        Utility.typeOfSignature("5e h\\b&BuG9p=aP|.H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5e h\\b&BuG9p=aP|.H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.read(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = true;
      Utility.accessToString(8);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-612), (int) (byte) (-66), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ineg
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-46);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.encode(byteArray0, true);
      Utility.toHexString(byteArray0);
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte) (-46), false);
      Utility.accessToString((int) (byte) (-46), true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 0;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-46), 0, true);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.classOrInterface(85);
      Utility.accessToString((-399), false);
      String string0 = "z";
      // Undeclared exception!
      try { 
        Utility.signatureToString("z", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.lang.U1!=QlY0@xF8%Yl)";
      stringArray0[1] = "java.lang.U1!=QlY0@xF8%Yl)";
      stringArray0[2] = "java.lang.U1!=QlY0@xF8%Yl)";
      String string0 = "WP,#QV";
      stringArray0[3] = "WP,#QV";
      stringArray0[4] = "java.lang.U1!=QlY0@xF8%Yl)";
      Utility.methodTypeToSignature("java.lang.U1!=QlY0@xF8%Yl)", stringArray0);
      int int0 = (-796);
      Utility.accessToString((-796));
      Utility.getSignature("(Ljava/lang/U1!=QlY0@xF8%Yl);Ljava/lang/U1!=QlY0@xF8%Yl);Ljava/lang/U1!=QlY0@xF8%Yl);LWP,#QV;Ljava/lang/U1!=QlY0@xF8%Yl);)Ljava/lang/U1!=QlY0@xF8%Yl);");
      Utility.searchOpcode("&i(bk.Xus/p~<1[v/");
      // Undeclared exception!
      try { 
        Utility.signatureToString("WP,#QV", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WP,#QV'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
