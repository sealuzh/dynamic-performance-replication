/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 13:05:50 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream0.close();
      // Undeclared exception!
      try { 
        ByteString.read(mockFileInputStream0, (-5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -5
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.utf8();
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 49, 46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=49 byteCount=46
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "Bnexpected h|x digit: ";
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.sha256();
      byteString0.hashCode();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("boEwO04na6");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "Bnexpeted h|x digit: ";
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Bnexpeted h|x digit: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: Bnexpeted h|x digit: 
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        byteString0.startsWith((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("HmacSHA256");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: H
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.readAll(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.toString();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource.hmacSha1(hashingSource0, byteString0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString1.asByteBuffer();
      // Undeclared exception!
      try { 
        byteString0.hmacSha1(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-126);
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=81]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0);
      byteString0.startsWith(byteArray0);
      byteString0.toByteArray();
      String string0 = byteString0.utf8;
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-118);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      Buffer buffer0 = new Buffer();
      BufferedSink bufferedSink0 = buffer0.emit();
      HashingSink hashingSink0 = HashingSink.sha256(bufferedSink0);
      hashingSink0.timeout();
      ByteString byteString1 = hashingSink0.hash();
      boolean boolean0 = byteString1.startsWith(byteString0);
      assertFalse(boolean0);
      
      ByteString byteString2 = byteString0.hmacSha256(byteString1);
      byteString2.EMPTY.rangeEquals(99, byteArray0, (int) (byte) (-118), 469);
      byteString1.md5();
      ByteString byteString3 = ByteString.of(byteArray0);
      assertTrue(byteString3.equals((Object)byteString0));
      
      byteString2.toByteArray();
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      byteString0.rangeEquals((-870), (byte[]) null, 3131, (-870));
      // Undeclared exception!
      try { 
        byteString0.utf8();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("hbi0hzV:\"JX");
      byteString0.equals("hbi0hzV:\"JX");
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)46);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)0;
      byte byte0 = (byte) (-42);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.of(byteArray0);
      byteString0.hmacSha1(byteString1);
      byteString0.endsWith(byteArray0);
      // Undeclared exception!
      try { 
        byteString1.substring(0, (-947));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((-532));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)78;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString2 = ByteString.of(byteBuffer0);
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      byteString2.EMPTY.write(buffer1);
      byteString0.hmacSha512(byteString1);
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("size < 4: ", charset0);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-1797), (int) (byte) (-24));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=-1797 byteCount=-24
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byte byte0 = (byte)4;
      byteArray0[1] = (byte)4;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      Buffer buffer0 = new Buffer();
      BufferedSink bufferedSink0 = buffer0.emit();
      HashingSink hashingSink0 = HashingSink.sha256(bufferedSink0);
      hashingSink0.timeout();
      ByteString byteString1 = hashingSink0.hash();
      byteString0.startsWith(byteString1);
      byteString0.hmacSha256(byteString1);
      // Undeclared exception!
      try { 
        byteString0.substring(99);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      Buffer buffer0 = new Buffer();
      buffer0.emit();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      hashingSink0.timeout();
      ByteString byteString1 = hashingSink0.hash();
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertFalse(boolean0);
      
      byteString0.hmacSha256(byteString1);
      byteString0.rangeEquals((-1116), byteArray0, 469, (-1));
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      ByteString byteString2 = hashingSource0.hash();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString2.md5();
      ByteString byteString3 = ByteString.of(byteArray0);
      byteString3.toByteArray();
      byteString3.base64Url();
      assertTrue(byteString3.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte) (-80);
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte)4;
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.encodeUtf8("{~u]#");
      assertEquals(5, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(realBufferedSource0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      boolean boolean0 = byteString0.EMPTY.startsWith(byteString1);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)93;
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[4] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0);
      byteString0.substring(0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream0.close();
      ByteString byteString0 = ByteString.read(mockFileInputStream0, 0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-25);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-25);
      byteString0.EMPTY.toAsciiUppercase();
      byteArray1[1] = (byte) (-89);
      int int0 = byteString0.indexOf(byteArray1, (int) (byte) (-25));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.decodeBase64("");
      assertNotNull(byteString0);
      
      byteString0.toAsciiUppercase();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)52;
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(0L);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.hmacSha1(realBufferedSink0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      byteString0.startsWith(byteString1);
      HashingSink.hmacSha1(buffer0, byteString0);
      byteString0.endsWith(byteString1);
      byteString0.indexOf(byteString1);
      ByteString.codePointIndexToCharIndex(" > ", 85);
      ByteString byteString2 = ByteString.encodeUtf8(" > ");
      byteString2.hmacSha1(byteString0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)51;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (int) (byte)51, (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=51 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte) (-80);
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte) (-5);
      byteArray1[3] = (byte) (-102);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArray1[4] = (byte) (-102);
      byteArray1[5] = (byte) (-80);
      ByteString byteString1 = new ByteString(byteArray1);
      byteString0.lastIndexOf(byteString1, 98);
      byteString0.indexOf(byteArray1);
      byteString0.substring((int) (byte)4);
      byteString0.toAsciiUppercase();
      // Undeclared exception!
      try { 
        ByteString.of(byteArray1, (-1), (-6942));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=-1 byteCount=-6942
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      int int1 = byteString0.compareTo(byteString1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)43;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[5] = (byte)66;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(0, int0);
      
      ByteString byteString2 = byteString1.hmacSha1(byteString0);
      byteString1.hmacSha256(byteString0);
      byteString0.rangeEquals(2349, byteArray0, (-279), (int) (byte)66);
      ByteString byteString3 = byteString2.hmacSha512(byteString0);
      boolean boolean0 = byteString0.startsWith(byteString3);
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("{~u]#");
      byteString0.EMPTY.equals("{~u]#");
      byte[] byteArray0 = new byte[1];
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString1.indexOf(byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString2 = byteString0.substring(0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      String string0 = byteString1.toString();
      assertEquals("[hex=88]", string0);
      
      int int1 = byteString1.compareTo(byteString0);
      assertEquals((-1), int1);
      assertSame(byteString0, byteString2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.encodeUtf8("{~ut#");
      HashingSource hashingSource0 = HashingSource.hmacSha1(realBufferedSource0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      boolean boolean0 = byteString0.EMPTY.startsWith(byteString1);
      assertFalse(boolean0);
      
      ByteString byteString2 = byteString1.toAsciiUppercase();
      byte[] byteArray0 = new byte[0];
      int int0 = byteString1.indexOf(byteArray0, (int) (byte)65);
      assertNotSame(byteString1, byteString2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.encodeUtf8("EkuExH?27z0\"vbu");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte) (-4);
      byteArray0[8] = (byte) (-118);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteString0.equals(byteArrayInputStream0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString0, byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.equals(byteString0);
      byte[] byteArray0 = new byte[0];
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString1 = byteString0.substring(0);
      String string0 = byteString1.toString();
      assertEquals("[hex=18118b188888d188d8888888db8881fd]", string0);
      
      ByteString byteString2 = byteString1.toAsciiUppercase();
      assertSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString(": ", charset0);
      buffer1.readAll(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.toString();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource.hmacSha1(hashingSource0, byteString0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        byteString0.write(filterOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteString.decodeHex("");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      String string0 = byteString0.utf8();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.encodeUtf8("{~u]#");
      byteString0.EMPTY.equals("{~u]#");
      HashingSource hashingSource0 = HashingSource.hmacSha1(realBufferedSource0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      byteString0.EMPTY.startsWith(byteString1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte) (-80);
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)16;
      byteString0.toString();
      Sink sink0 = null;
      RealBufferedSink realBufferedSink0 = null;
      try {
        realBufferedSink0 = new RealBufferedSink((Sink) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "Bnexpected h|x digit: ";
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Bnexpected h|x digit: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: n
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Bnexpected h|x digit: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: n
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("\r");
      String string0 = byteString0.toString();
      assertEquals("[text=\\r]", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.encodeUtf8("{~u]#");
      byteString0.EMPTY.equals("{~u]#");
      byte byte0 = (byte) (-10);
      byte byte1 = (byte) (-80);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-80);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.toString();
      RealBufferedSink realBufferedSink0 = null;
      try {
        realBufferedSink0 = new RealBufferedSink((Sink) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = true;
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)17;
      byteArray0[0] = (byte)17;
      byte byte1 = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)81;
      byte byte2 = (byte)110;
      byteArray0[4] = (byte)110;
      byte byte3 = (byte)10;
      byteArray0[5] = (byte)10;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(inflaterSource0, byteString0);
      HashingSource hashingSource1 = HashingSource.hmacSha256(hashingSource0, byteString0);
      ByteString byteString1 = hashingSource1.hash();
      byteString1.sha1();
      byteString1.utf8();
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("{~u]#");
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      byteString0.lastIndexOf(byteString1);
      byteString0.EMPTY.equals("{~u]#");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[12];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte) (-41);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      ByteString byteString0 = new ByteString(byteArray1);
      ByteString byteString1 = new ByteString(byteArray1);
      ByteString byteString2 = new ByteString(byteArray1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString3 = realBufferedSource0.readByteString();
      byteString2.compareTo(byteString3);
      // Undeclared exception!
      try { 
        byteString2.hmacSha1(byteString3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      HashingSink.md5(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.readAll(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{.=");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-5);
      int int0 = ObjectStreamConstants.baseWireHandle;
      byteString0.base64();
      // Undeclared exception!
      try { 
        byteString0.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.encodeUtf8("{~u]");
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSource0);
      hashingSource0.hash();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)34;
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("{~u]#");
      byteString0.EMPTY.equals("{~u]#");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byteString0.sha512();
      try { 
        ByteString.read(pipedInputStream0, 2194);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.encodeUtf8("{~u]");
      HashingSource.md5(realBufferedSource0);
      byteString0.EMPTY.startsWith(byteString0);
      byte[] byteArray0 = new byte[1];
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.toString();
      byteString1.startsWith(byteArray0);
      ByteString byteString2 = ByteString.encodeUtf8("[text={\\~u]]");
      assertEquals(12, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("{~u]#");
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      byteString0.equals(byteString1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)92;
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.indexOf(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        ByteString.decodeHex(",><l.q/j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: ,
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("{~u]#");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte)14;
      byteString0.indexOf(byteArray0);
      byteString0.EMPTY.equals("{~u]#");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)46;
      ByteString byteString1 = new ByteString(byteArray1);
      Charset charset0 = Charset.defaultCharset();
      byteString1.EMPTY.string(charset0);
      byteString1.indexOf(byteArray1);
      byteString0.substring(0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("{~u]#");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-23);
      byteString0.EMPTY.rangeEquals(2, byteArray0, (int) (byte) (-23), (-1272));
      byteString0.EMPTY.equals("{~u]#");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)46;
      ByteString byteString1 = new ByteString(byteArray1);
      byteString1.indexOf(byteArray1);
      byteString0.substring(0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte)29;
      byteArray0[8] = (byte)10;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = byteString1.toAsciiLowercase();
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("{~u]#");
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      byteString0.equals(byteString1);
      byte[] byteArray0 = new byte[7];
      ByteString byteString2 = byteString0.toAsciiLowercase();
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      ByteString byteString3 = new ByteString(byteArray0);
      ByteString byteString4 = byteString1.toAsciiLowercase();
      assertNotSame(byteString4, byteString1);
      assertFalse(byteString4.equals((Object)byteString1));
      assertSame(byteString0, byteString2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("{~u]#");
      byteString0.EMPTY.equals("{~u]#");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)96;
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString1.indexOf(byteArray0);
      byteString0.substring(0);
      byteString1.toAsciiLowercase();
      ByteString byteString2 = new ByteString(byteArray0);
      byteString0.toAsciiLowercase();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      try { 
        ByteString.read(byteArrayInputStream0, 46);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[4] = (byte)10;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = byteString0.toString();
      assertEquals("[hex=1811111118111111]", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = ByteString.encodeUtf8("{~u]#");
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      byteString0.equals(byteString1);
      ByteString byteString2 = byteString0.hmacSha256(byteString1);
      byteString2.EMPTY.indexOf(byteString1, 12);
      byteString0.toString();
      byteString0.hmacSha512(byteString1);
      // Undeclared exception!
      try { 
        byteString0.substring(9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.md5(buffer0);
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = hashingSink0.hash();
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      ByteString byteString2 = new ByteString(byteArray0);
      int int0 = byteString2.indexOf(byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString3 = byteString1.substring(0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteString byteString4 = byteString2.hmacSha512(byteString1);
      String string0 = byteString4.toString();
      assertEquals("[hex=111181111811881181b11818bb181811111811888b11b81881111181188818111111181b81811118111181b81111811b81118818118811111111811118188811]", string0);
      
      byteString1.substring(0, 0);
      assertSame(byteString1, byteString3);
  }
}
