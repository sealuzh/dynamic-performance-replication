/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:46:31 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.Sink;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      asyncTimeout0.deadline(1096L, timeUnit0);
      asyncTimeout0.newTimeoutException((IOException) null);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException("");
      mockIOException0.getCause();
      mockIOException0.fillInStackTrace();
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      assertEquals("timeout", iOException0.getMessage());
      
      asyncTimeout0.timedOut();
      asyncTimeout0.enter();
      boolean boolean0 = asyncTimeout0.exit();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      asyncTimeout0.timeout(60L, timeUnit0);
      MockIOException mockIOException0 = new MockIOException("Unbalanced enter/exit");
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadline(769L, timeUnit0);
      asyncTimeout0.timedOut();
      asyncTimeout0.throwIfReached();
      asyncTimeout0.throwIfReached();
      asyncTimeout1.exit(true);
      asyncTimeout1.enter();
      asyncTimeout1.timedOut();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.clearDeadline();
      asyncTimeout0.throwIfReached();
      asyncTimeout0.sink((Sink) null);
      asyncTimeout0.exit();
      MockIOException mockIOException0 = new MockIOException("Okio Watchdog");
      MockThrowable mockThrowable0 = new MockThrowable(mockIOException0);
      MockIOException mockIOException1 = new MockIOException("Okio Watchdog", mockThrowable0);
      asyncTimeout0.newTimeoutException(mockIOException1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(true);
      asyncTimeout0.timedOut();
      asyncTimeout0.exit();
      asyncTimeout0.exit(false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadline(100000000000000000L, timeUnit0);
      asyncTimeout1.enter();
      MockThrowable mockThrowable0 = new MockThrowable(",)7Kb|oQu~9,");
      MockIOException mockIOException0 = new MockIOException();
      MockThrowable mockThrowable1 = new MockThrowable(",)7Kb|oQu~9,");
      MockIOException mockIOException1 = new MockIOException("size < ", mockIOException0);
      asyncTimeout0.exit((IOException) mockIOException1);
      System.setCurrentTimeMillis(2104L);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(true);
      asyncTimeout0.timedOut();
      asyncTimeout0.exit(false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      asyncTimeout0.deadline(851L, timeUnit0);
      AsyncTimeout.head = asyncTimeout0;
      MockThrowable mockThrowable0 = new MockThrowable("okio.AsyncTimeout");
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      asyncTimeout0.newTimeoutException(mockIOException0);
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.timedOut();
      asyncTimeout0.exit();
      boolean boolean0 = false;
      asyncTimeout0.exit(false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      asyncTimeout0.deadline(100000000000000000L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable(",)7Kb|oQu~9,");
      MockIOException mockIOException0 = new MockIOException();
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      asyncTimeout0.enter();
      MockThrowable.replacement_getStackTrace(mockThrowable0);
      // Undeclared exception!
      try { 
        asyncTimeout0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }
}
