/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 04 21:13:01 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputTextLog;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("alter tablemi_kj");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      reader0.ready();
      streamTokenizer0.nval = (double) (-4);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 4", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(45);
      stringBuilder0.append(10.0);
      SQLUtil.addOptionalCondition("h2.consoleStream", stringBuilder0);
      assertEquals("10.0 or h2.consoleStream", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.substituteMarkers("#w2Bz7w}3w;)~N@P*$t", "#w2Bz7w}3w;)~N@P*$t", stringBuilder0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, (-2607), "");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, (-2607), "");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 525, "");
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, 12, "drop mater");
      String string0 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("exec80000042-00d0-fd77-3ed8-000a0a0b1900");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("updatedelete");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop indexleft", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"drop indexleft\" UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "E?bmZ1R{4]U80S3", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.substituteMarkers("", "", object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DROP ALIAS IF EXISTS SYSTEM_COMBINE_CLOB");
      DBDataType dBDataType0 = DBDataType.getInstance((-601), "call");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(", ", defaultDBTable0, dBDataType0, integer0, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[20];
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".null, .null, .null, .null, .null, .null, .null, .null, .null, .null, .null, .null, .null, .null, .null, .null, .null, .null, .null, .null", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\"JKmQ#em^Z8781%=m]X", defaultDBTable0, 25, "sync");
      defaultDBColumn0.setVersionColumn(true);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("\"JKmQ#em^Z8781%=m]X SYNC NULL", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-2239), "0VPe8}~");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT * FROM null WHERE null = null AND null = null AND null = null", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("SELECT * FROM null WHERE null = null AND null = null AND null = null 0VPE8}~(3,3) NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized view");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create table", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("%)vq", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("%)vq", dBSchema0);
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "table %)vq", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"table %)vq\" PRIMARY KEY (, , , )", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "DATE", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT DATE PRIMARY KEY (, , )", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.leftJoin("5K69", stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("left join null as null on 5K69.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.leftJoin("j;w%]B5w", stringArray0, "", (String) null, stringArray0);
      assertEquals("left join  as null on j;w%]B5w.null = null.null and j;w%]B5w.null = null.null and j;w%]B5w.null = null.null and j;w%]B5w.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("setString(", stringArray0, "sync", "-tcpSSL", stringArray0);
      assertEquals("left join sync as -tcpSSL on ", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.leftJoin((String) null, stringArray0, "vzfC,TQN?O'Ff{U", (String) null, stringArray0);
      assertEquals("left join vzfC,TQN?O'Ff{U as null on null.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("", (String[]) null, "gK=)KOdvvdMBz1~0D%)", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.join("", ",", stringArray0, "yyyy-MM-dd'T'HH:mm:ss.SSSSSS", "", stringArray0);
      assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSSSS as  on ,.null = .null and ,.null = .null and ,.null = .null and ,.null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.join("q", "", stringArray0, "", "q", stringArray0);
      assertEquals("q join  as q on .null = q.null and .null = q.null and .null = q.null and .null = q.null", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("!i", stringArray0, "!i", "~KJYHB;", stringArray0);
      assertEquals("!i as ~KJYHB; on ", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, "*/", stringArray0[0], stringArray0);
      assertEquals("*/ as null on null.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.innerJoin("", stringArray0, "", "8<", stringArray0);
      assertEquals(" as 8< on .null = 8<.null and .null = 8<.null and .null = 8<.null and .null = 8<.null", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("eo_<ea/hR", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, (NameSpec) null);
      assertEquals("FOREIGN KEY () REFERENCES null()", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("80000042-00d0-fd77-3ed8-000a0a0b1900", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("4wt", true, "o<>mo-,Tu", "I6CCE_");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT  ", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(47);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 432, "CLOB");
      // Undeclared exception!
      try { 
        SQLUtil.renderValue(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Integer integer0 = RawTransaction.ABORT;
      genericDescriptorList0.add((Object) integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("g'_seZ9PEk", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("Menamep&f <f(gev");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: Menamep&f <f(gev
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("INSERT INTO IZFORMATIONSCHEMA.LOBS(ID, BYTE_COUNT, TABLE) SELECT ?, BYTE_COUNT, ? ROM INFORMATION_SCHEMA.LOBS WHERE ID = ?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ID\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("left join null = null as  on null = null.null = .null", stringArray0, "left join null = null as  on null = null.null = .null", "", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join("alter tableinsertoavo * > / h", "u_5G<!^G`", stringArray0, "alter tableinsertoavo * > / h", "alter tableinsertoavo * > / h", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("selectseect * from null where", (String[]) null, "selectseect * from null where", "selectseect * from null where", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("lwu.null, lwu.null", stringArray0, "rename", "lwu.null, lwu.null", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      VersionNumber.valueOf("delete");
      jdbcClob jdbcClob0 = new jdbcClob("alter tablemi_kj");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("CLOB", (DBSchema) null);
      SQLUtil.typeAndName(dBSequence0);
      Integer integer0 = Integer.getInteger("select into", 246);
      assertEquals(246, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "]f}}z";
      String[] stringArray0 = new String[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("]f}}z");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ">V&mlu9", false, stringArray0);
      String string1 = "";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "?)p= join /* as ]f}}z on  NOT NULL.]f}}z = ]f}}z.]f}}z and  NOT NULL.null = ]f}}z.null");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("?)p= join /* as ]f}}z on  NOT NULL.]f}}z = ]f}}z.]f}}z and  NOT NULL.null = ]f}}z.nullCONSTRAINT >V&mlu9 ", stringBuilder0.toString());
      
      boolean boolean0 = SQLUtil.isProcedureCall(string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("_z1C 6jj3)ob;SQTP");
      String[] stringArray0 = new String[4];
      stringArray0[2] = "d+y+#Y[";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("9y.*");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("9y.*", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("alter tablemi_kj");
      String[] stringArray0 = new String[1];
      SQLUtil.join("]f}}z", "alter tablemi_kj", stringArray0, "?)p=", "]f}}z", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter tablemi_kj");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter tablemi_kj", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      char[] charArray0 = new char[8];
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000CONSTRAINT \"alter tablemi_kj\" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      VersionNumber.valueOf("delete");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("delete", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder(286);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "~kd?c)x:t-wff7duys", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("%)vq", dBCatalog0);
      dBSchema0.getTable((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("%)vq", dBSchema0);
      dBCatalog0.getSequences();
      SQLUtil.ownerDotComponent(defaultDBTable0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("EgryX", "EgryX", (String[]) null, "EgryX", "EgryX", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("Y'Q~!({pN}9");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("oAo*>/H5FI[olwZ`cvQ", false);
      assertEquals("oAo * > / H5FI [ olwZ ` cvQ", string0);
      
      String[] stringArray0 = new String[5];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter materialized view;q%!rmkvl'yh", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , ) REFERENCES null(, , , , )", string1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("SELECT * FROM null WHERE  = ''");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("exec");
      Boolean boolean1 = SQLUtil.mutatesStructure("XwG&ZvyW");
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("create materialized view),in");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("=$N5QM|g%{3s|U-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      SQLUtil.mutatesStructure("drop table");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("select");
      NameSpec nameSpec0 = NameSpec.NEVER;
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall(">d&?[");
      assertFalse(boolean0);
      
      Character character0 = new Character('t');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'t'", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLUtil.renderValue("updatedelete");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      String[] stringArray0 = new String[10];
      stringArray0[1] = "].*O}BQQ";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBDataType dBDataType0 = DBDataType.getInstance((-2015815607), "<EOR>");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("<EOR>", (DBTable) null, dBDataType0, integer0, (Integer) null);
      String string0 = defaultDBColumn0.toString();
      assertEquals("<EOR> : <EOR>(3)", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("\"JKmQ#em^Z8781%=m]X");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance((-452463814), "CLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\"JKmQ#em^Z8781%=m]X", defaultDBTable0, dBDataType0, integer0);
      String string0 = defaultDBColumn0.toString();
      assertEquals("\"JKmQ#em^Z8781%=m]X : CLOB", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(40, "DECLARE");
      Integer integer0 = new Integer((-395));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insert", (DBTable) null, dBDataType0, integer0, integer0);
      defaultDBColumn0.toString();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("constraint");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "@kYGQ";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("@kYGQ", (DBTable) null, (-2415), "@kYGQ");
      String string1 = "Srz<ule]_;Z";
      StringBuilder stringBuilder0 = new StringBuilder(45);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("MINVALUE", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-2415), (Object) defaultDBColumn0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2415
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-395), "t'?dS");
      Integer integer0 = new Integer((-395));
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("rename", (DBTable) null, dBDataType0, integer0, integer1);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.offerLast(defaultDBColumn0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("rename, rename", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object object0 = new Object();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DBDataType dBDataType0 = DBDataType.getInstance(23001, "org.firebirdsql.jdbc.fie");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(",", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("--", defaultDBTable0, dBDataType0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("Illegal column type format: ", defaultDBTable0, 23001, "CONTAINERID");
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(",, --, Illegal column type format: ", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, (-2002), "char (not supported)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"not supported\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("z)oPlau");
      Integer.getInteger("table null", 246);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("INSERT INTO INFORMATION_SCHEMA.LOBS(ID, BYTE_COUNT, TABLE) SELECT ?, BYTE_COUNT, ? FROM INFORMATION_SCHEMA.LOBS WHERE ID = ?", defaultDBTable0, 1311, "(.38'G_{k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (.38'G_{k
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer.getInteger("select into", 246);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.sql.execute.WriteCursorConstantAction", defaultDBTable0, 45, "INSERT INTO INFORMATION_SCHEMA.LOBS(ID, BYTE_COUNT, TABLE) SELECT ?, BYTE_COUNT, ? FROM INFORMATION_SCHEMA.LOBS WHERE ID = ?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ID\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLUtil.removeComments("");
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.innerJoin("2h!O:o]v,3", stringArray0, (String) null, "", stringArray0);
      assertEquals("null as  on 2h!O:o]v,3.null = .null and 2h!O:o]v,3.null = .null and 2h!O:o]v,3.null = .null and 2h!O:o]v,3.null = .null and 2h!O:o]v,3.null = .null and 2h!O:o]v,3.null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, )", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-1054.8674947374204);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 1054.8674947374204", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 114.0;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("114", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 132.7316396262104;
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, "132.7316396262104", (VersionNumber) null);
      assertNull(defaultDatabase0.getName());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = SQLUtil.normalize("\"jkmq#", false);
      assertEquals("\"jkmq#\"", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "k'-|");
      String string0 = SQLUtil.normalize("\n/* direct lookup */", false);
      assertEquals("/* direct lookup */", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String string0 = SQLUtil.normalize("ee>tx--K", false);
      assertEquals("ee > tx -- K", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("ee > tx -- K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = SQLUtil.normalize("tx,-D7`X 9c", true);
      assertEquals("tx, - D7 ` X 9c", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = SQLUtil.normalize("INSERT INTO IZFORMATIONSCHEMA.LOBS(ID, BYTE_COUNT, TABLE) SELECT ?, BYTE_COUNT, ? ROM INFORMATION_SCHEMA.LOBS WHERE ID = ?", false);
      assertEquals("INSERT INTO IZFORMATIONSCHEMA.LOBS (ID, BYTE_COUNT, TABLE) SELECT ?, BYTE_COUNT, ? ROM INFORMATION_SCHEMA.LOBS WHERE ID = ?", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = SQLUtil.normalize("!Z&RON]LrjPT|O'v4", true);
      assertEquals("! Z & RON ] LrjPT | O 'v4'", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = SQLUtil.normalize("jiaz>~{MvdATP*/7's", false);
      assertEquals("jiaz > ~ { MvdAT  P */ 7 's'", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLUtil.removeComments("org.h2.result.SimpleRow");
      boolean boolean0 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[1] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint constraint", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("selecsIc ", false, "selecsIc ", "selecsIc ");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"selecsIc \" ", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, "drop materialized viewselecsic", "_SYSTEM");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.null, null.null, null.null", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("?f!");
      SQLUtil.addRequiredCondition("?f!", stringBuilder0);
      assertEquals("?f! and ?f!", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("indexOf7ess{onTableNamessSavdObjects", stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.join("inner", (String) null, stringArray0, "select into", "XJ015.M", stringArray0);
      assertEquals("select into as XJ015.M on null.null = XJ015.M.null and null.null = XJ015.M.null", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("null as null on ", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "~kd?c)x:t-wff7duys", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String[] stringArray0 = new String[1];
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("R.z");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "cQ", true, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT cQ PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("executedeletoelqsp4-");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop materialized viewselecsic");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session&e(:gh3vu[tb");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("CBLl*");
      assertFalse(boolean0);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-2392), "CBLl*");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CBLl*", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CBLL*(0)", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("45z:&NY+bU", (DBTable) null, 22, "45z:&NY+bU");
      String string0 = "N)C6C%J5!";
      defaultDBColumn0.setDefaultValue("N)C6C%J5!");
      defaultDBColumn0.setVersionColumn(false);
      SQLUtil.renderColumn(defaultDBColumn0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize(string0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      VersionNumber.valueOf(" NOT NQL");
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("wr");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" NOT NQL", false, defaultDBTable0, " NOT NQL");
      String string0 = "dA':'|PCpj";
      File file0 = MockFile.createTempFile("create table9npt 2d3q)h5", "dA':'|PCpj");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      int int0 = (-1936173604);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      File file0 = FileUtil.canonicalFile(" ADD ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" ADD ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[8];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "~kd?c)x:t-wff7duys", true, stringArray0);
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputTextLog0, true);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals(76, rowOutputTextLog0.size());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputTextLog0, false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("JQ");
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "vr-7Sr)*ipDHpq", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter tacleinsertoav * > /fh", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertSame(defaultDBTable0, dBTable0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer0, integer0);
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputTextLog0, false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "inXer", "inXer");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK inXer", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("create unique index");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputTextLog0, false);
      SQLUtil.mutatesDataOrStructure("CLOB");
      String[] stringArray0 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("a86?2ZpIr?C\"s", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertFalse(dBForeignKeyConstraint0.isNameDeterministic());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean0 = SQLUtil.isQuery("u vZtIPC~AjY-kF+yrq");
      assertFalse(boolean0);
  }
}
