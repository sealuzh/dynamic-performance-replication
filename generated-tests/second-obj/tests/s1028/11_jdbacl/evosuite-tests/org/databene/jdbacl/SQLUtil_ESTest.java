/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:33:11 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.nio.ByteBuffer;
import java.util.List;
import org.apache.derby.catalog.AliasInfo;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.execute.NoPutResultSet;
import org.apache.derby.iapi.store.raw.Page;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.data.DataFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.store.raw.xact.TransactionFactory;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.sql.compile.JoinNode;
import org.apache.derby.impl.store.raw.log.LogCounter;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBBlob;
import org.firebirdsql.jdbc.FBClob;
import org.firebirdsql.jdbc.FBDriverNotCapableException;
import org.h2.engine.DbObject;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("org.apache.derby.impl.store.access.btree.BTreeController", "org.apache.derby.impl.store.access.btree.BTreeController", "org.apache.derby.impl.store.access.btree.BTreeController");
      assertEquals("'org.apache.derby.impl.store.access.btree.BTreeController'", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      String string1 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string1);
      
      boolean boolean0 = SQLUtil.isQuery("org.apache.derby.impl.store.access.btree.BTreeController");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("alter materialized view");
      assertTrue(boolean0);
      
      DBSchema dBSchema0 = new DBSchema("alter materialized view");
      String string0 = SQLUtil.renderValue(dBSchema0);
      assertEquals("alter materialized view", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = Boolean.FALSE;
      String string0 = SQLUtil.normalize("create unique indexb^/foumbf:`7kmyp)mh", true);
      assertEquals("create unique indexb ^ / foumbf : ` 7kmyp) mh", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "G/52n\"]qI|[!Y-.\")K";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "G/52n\"]qI|[!Y-.\")K", true, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = NoPutResultSet.FIRST;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("%`\"JM~h", true, "%`\"JM~h", "first");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT %`\"JM~h CHECK first", string1);
      
      boolean boolean0 = SQLUtil.isDML("Hx:#nF*1T(4/NpZ9.P");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = NoPutResultSet.FIRST;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("org.databene.jdbacl.SQLUtil", true, "%`\"JM~h", "first");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "first");
      String string1 = SQLUtil.typeAndName(dBCheckConstraint0);
      assertEquals("check constraint org.databene.jdbacl.SQLUtil", string1);
      assertNotNull(string1);
      
      dBCheckConstraint0.setDoc("%`\"JM~h");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT org.databene.jdbacl.SQLUtil ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery(",y^Mb%F]b`G'}Mog1");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = ",y^Mb%F]b`G'}Mog1";
      stringArray0[1] = ",y^Mb%F]b`G'}Mog1";
      String string0 = SQLUtil.join(",y^Mb%F]b`G'}Mog1", ",y^Mb%F]b`G'}Mog1", stringArray0, ",y^Mb%F]b`G'}Mog1", " or ", stringArray0);
      assertEquals(",y^Mb%F]b`G'}Mog1 join ,y^Mb%F]b`G'}Mog1 as  or  on ,y^Mb%F]b`G'}Mog1.,y^Mb%F]b`G'}Mog1 =  or .,y^Mb%F]b`G'}Mog1 and ,y^Mb%F]b`G'}Mog1.,y^Mb%F]b`G'}Mog1 =  or .,y^Mb%F]b`G'}Mog1", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, " NOT", "#_=;:F)i3&YzuL", stringArray0);
      assertEquals(" NOT as #_=;:F)i3&YzuL on ", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      DBDataType.getInstance((-106), "O");
      Integer integer0 = new Integer((-843));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character character0 = new Character(']');
      SQLUtil.substituteMarkers("O", "O", character0);
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      SQLUtil.isQuery("O");
      FBClob fBClob0 = new FBClob();
      try { 
        fBClob0.truncate(1L);
        fail("Expecting exception: FBDriverNotCapableException");
      
      } catch(FBDriverNotCapableException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.firebirdsql.jdbc.FBClob", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("--", (DBTable) null, (-1982463803), "insert");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("-- INSERT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("^I<weHb<g");
      Boolean boolean0 = SQLUtil.mutatesStructure("^I<weHb<g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("drop table");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "drop table";
      String string0 = SQLUtil.leftJoin("drop index", stringArray0, "drop index", "drop index", stringArray0);
      assertEquals("left join drop index as drop index on drop index.drop table = drop index.drop table", string0);
      
      String string1 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.drop table", string1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("LWaP#`#OEf$aWu^r%Y");
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM LWaP#`#OEf$aWu^r%Y WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      System.setCurrentTimeMillis((-61441L));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = SchemaDescriptor.STD_DEFAULT_SCHEMA_NAME;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getCheckConstraints();
      SQLUtil.typeAndName((DBObject) null);
      Random.setNextRandom((-557));
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      dBCatalog0.getSchema("drop table");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.normalize("%`\"JM~h", false);
      SQLUtil.parseColumnTypeAndSize("%`\"JM~h");
      DBCatalog dBCatalog0 = new DBCatalog("[:8kdA`O");
      DBTable dBTable0 = dBCatalog0.getTable((String) null, false);
      assertNull(dBTable0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.isQuery("f<FaV$8.w(W]hmt");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "]H^?";
      stringArray0[2] = "]H^?";
      stringArray0[3] = "]H^?";
      stringArray0[4] = "]H^?";
      stringArray0[5] = "]H^?";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("]H^?", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("CREATE TABLE IF NOT EXISTS INFORMATION_SCHEMA.LOBS(ID BIGINT PRIMARY KEY, BYTE_COUNT BIGINT, TABLE INT) HIDDEN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(">jH\"=-<=!(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: >jH\"=-<=!(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("SG&?CosXE>X8ZAJQG~");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "SG&?CosXE>X8ZAJQG~";
      stringArray0[1] = "SG&?CosXE>X8ZAJQG~";
      stringArray0[2] = "execute77il\"%";
      stringArray0[3] = "SG&?CosXE>X8ZAJQG~";
      String string0 = SQLUtil.renderColumnListWithTableName("execute77il\"%", stringArray0);
      assertEquals("execute77il\"%.SG&?CosXE>X8ZAJQG~, execute77il\"%.SG&?CosXE>X8ZAJQG~, execute77il\"%.execute77il\"%, execute77il\"%.SG&?CosXE>X8ZAJQG~", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ";U-";
      stringArray0[1] = "zwp2*I?qP";
      String string0 = SQLUtil.innerJoin(";U-", stringArray0, "", "", stringArray0);
      assertEquals(" as  on ;U-.;U- = .;U- and ;U-.zwp2*I?qP = .zwp2*I?qP", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("WP", defaultDBTable0, 0, "WP");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "WP";
      stringArray0[3] = "";
      stringArray0[4] = "WP";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '' has no foreign key with the columns (, , WP, , WP)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("uea73b#;m/m<");
      Integer integer0 = RawTransaction.COMMIT;
      TableContainer tableContainer0 = new TableContainer("uea73b#;m/m<");
      tableContainer0.getSchema();
      DBTrigger dBTrigger0 = new DBTrigger("uea73b#;m/m<", (DBSchema) null);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("uea73b#;m/m<", defaultDBTable1, 951, "org.apache.derby.impl.sql.compile.BitTypeCompiler");
      defaultDBColumn0.getNotNullConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("", stringBuilder0);
      StringBuilder stringBuilder1 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder1.insert(951, (CharSequence) stringBuilder0, 951, 1195);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 951
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "Error in url: ";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isQuery("create materialized vieww{,fg=w");
      boolean boolean0 = SQLUtil.isQuery("6(uwUQ[1");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create tableenb=!epit4";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create tableenb=!epit4", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create tableenb=!epit4\" FOREIGN KEY (create tableenb=!epit4) REFERENCES null(create tableenb=!epit4)", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = NoPutResultSet.FIRST;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("org.databene.jdbacl.SQLUtil", false, "%`\"JM~h", "first");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "first");
      SQLUtil.typeAndName(dBCheckConstraint0);
      dBCheckConstraint0.setDoc("%`\"JM~h");
      dBCheckConstraint0.setDoc("X=|OsH7~/9o?i");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.constraintName(dBCheckConstraint0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "uea73b#;m/m<";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("uea73b#;m/m<");
      Integer integer0 = RawTransaction.COMMIT;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "uea73b#;m/m<", false, (String[]) null);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec1);
      String string1 = "_";
      // Undeclared exception!
      try { 
        SQLUtil.join("", "inner", (String[]) null, "_", "km", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("alter sessionerror in url:");
      String string0 = Page.DIAG_MINIMUM_REC_SIZE;
      Random.setNextRandom((-651));
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("rename");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-106), "2");
      dBDataType0.isNumber();
      SQLUtil.normalize("-O Vr", false);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "insert''*<]-";
      stringArray0[1] = "insert''*<]-";
      stringArray0[2] = "insert''*<]-";
      stringArray0[3] = "5phvvuz";
      boolean boolean0 = SQLUtil.isDML("insert''*<]-");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance((-106), "2");
      DBDataType.getInstance((-106), "2");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "2";
      stringArray0[3] = "2";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType.getInstance((-106), " WHERE ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.removeComments("truncate");
      String string0 = SQLUtil.normalize("MLHv/H ~6/", false);
      assertEquals("MLHv / H ~ 6 /", string0);
      
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      DBSchema dBSchema0 = new DBSchema("MLHv / H ~ 6 /");
      DefaultDBTable defaultDBTable2 = new DefaultDBTable("truncate", dBSchema0);
      SQLUtil.ownerDotComponent(defaultDBTable2);
      String string1 = SQLUtil.typeAndName(dBSchema0);
      assertNotNull(string1);
      assertEquals("schema MLHv / H ~ 6 /", string1);
      
      String string2 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("2 = '2' AND null = null AND null = null AND 2 = '2'", string2);
      
      String string3 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(2, , , 2)", string3);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "5phvvuz";
      stringArray0[0] = "5phvvuz";
      stringArray0[4] = stringArray0[2];
      SQLUtil.renderColumnNames(stringArray0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(stringArray0[3], true, "#owuFkdX/", "CACHE_TYPE");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append((-33.60818));
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CACHE_TYPE");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, stringArray0[1], true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(stringArray0[5], true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String[] stringArray1 = new String[9];
      stringArray1[2] = "(5phvvuz, , , , , , )";
      stringArray1[4] = "#owuFkdX/";
      stringArray1[6] = "#owuFkdX/";
      stringArray1[7] = "sUH0Q_)";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("sUH0Q_)", true, dBTable0, stringArray0, dBTable0, stringArray1);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "QW\"<oXI(sNSIE";
      stringArray0[2] = "calldelete";
      stringArray0[3] = null;
      stringArray0[4] = null;
      SQLUtil.join("QW\"<oXI(sNSIE", "alter session", stringArray0, "Not yet implemented.", (String) null, stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, "QW\"<oXI(sNSIE", "calldelete");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-2145), (-2145));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2145
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("exec");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "derby.language.maxMemoryPerTable";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      defaultDBTable0.getForeignKeyConstraints();
      defaultDBTable0.getColumns();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("GW0#l", false, "derby.language.maxMemoryPerTable", " failed");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition(",dT:AcK[0MIC`4T|", stringBuilder0);
      assertEquals(",dT:AcK[0MIC`4T|", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String string0 = AliasInfo.ALIAS_NAME_SPACE_SYNONYM_AS_STRING;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "S");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("S", stringBuilder0);
      SQLUtil.addRequiredCondition("S", stringBuilder1);
      assertEquals("S or S and S", stringBuilder1.toString());
      assertEquals("S or S and S", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.removeComments("nA[k.;f_");
      SQLUtil.normalize("nA[k.;f_", true);
      DBSchema dBSchema0 = new DBSchema("nA[k.;f_");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("PRIMARY KEY ", dBSchema0);
      defaultDBTable0.getUniqueConstraint((String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("2");
      DBDataType dBDataType0 = DBDataType.getInstance(1270, "2");
      defaultDBTable0.getReferrers();
      dBDataType0.isNumber();
      SQLUtil.normalize("OW}2]@?s!c*2?>n", false);
      String string0 = "23513";
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("closed", false, "23513", "select into");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      VersionNumber versionNumber0 = VersionNumber.valueOf("HqtIF:)Ge");
      versionNumber0.toString();
      int int0 = DbObject.USER_DATATYPE;
      TableContainer tableContainer0 = new TableContainer("OW}2]@?s!c*2?>n");
      Boolean.valueOf("OW}2]@?s!c*2?>n");
      SQLUtil.removeComments("OW}2]@?s!c*2?>n");
      SQLUtil.isDML("OW}2]@?s!c*2?>n");
      TableContainer tableContainer1 = new TableContainer("H^b");
      tableContainer1.getSchema();
      SQLUtil.parseColumnTypeAndSize("aO\u0007fe`/z");
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "The type to bind String parameters as (usually 'varchar'; 'unspecified' allows implicit casting to other types)";
      boolean boolean0 = true;
      SQLUtil.normalize("The type to bind String parameters as (usually 'varchar'; 'unspecified' allows implicit casting to other types)", true);
      String string1 = "HqtIF:)Ge";
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("The type to bind String parameters as (usually 'varchar'; 'unspecified' allows implicit casting to other types)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"usually 'varchar'; 'unspecified' allows implicit casting to other types\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance((-103), "2");
      DBDataType.getInstance((-103), "2");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "2";
      stringArray0[1] = "2";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.removeComments("2");
      SQLUtil.normalize("wuL/'+2/?Ic?R", false);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      pGConnectionPoolDataSource0.getLogWriter();
      pGConnectionPoolDataSource0.setLogWriter((PrintWriter) null);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("executeerror in url:", false, (String) null, "T8[9&K$Hy&uBQYyM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("2", true, "2", "2");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getForeignKeyConstraints();
      SQLUtil.constraintName(dBCheckConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("update");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("O");
      int int0 = 8001;
      DBDataType.getInstance(8001, "setSQLXML(String, SQLXML)");
      DBDataType.getInstance(8001, "setSQLXML(String, SQLXML)");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.removeComments(" REFERENCES ");
      TableContainer tableContainer0 = new TableContainer("org.databene.jdbacl.SQLUtil");
      String[] stringArray0 = new String[8];
      stringArray0[0] = " REFERENCES ";
      stringArray0[1] = " REFERENCES ";
      stringArray0[2] = "setSQLXML(String, SQLXML)";
      stringArray0[3] = " REFERENCES ";
      stringArray0[4] = "setSQLXML(String, SQLXML)";
      stringArray0[5] = "setSQLXML(String, SQLXML)";
      stringArray0[6] = " REFERENCES ";
      stringArray0[7] = "org.databene.jdbacl.SQLUtil";
      SQLUtil.normalize("setSQLXML(String, SQLXML)", false);
      TableContainer tableContainer1 = new TableContainer("I(");
      tableContainer0.getSchema();
      SQLUtil.typeAndName(defaultDBTable0);
      // Undeclared exception!
      try { 
        defaultDBTable1.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns ( REFERENCES ,  REFERENCES , setSQLXML(String, SQLXML),  REFERENCES , setSQLXML(String, SQLXML), setSQLXML(String, SQLXML),  REFERENCES , org.databene.jdbacl.SQLUtil)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("Error in url: ");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = SQLUtil.normalize("hS;DL&zW-D]]fC;h", true);
      assertEquals("hS ; DL & zW - D ] ] fC ; h", string0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema("?Tg5@yY}\".k3fAUCu%7");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      dBSchema0.setName("");
      String string1 = SQLUtil.substituteMarkers("b^/foum", "{7 8Y45Eu", "?Tg5@yY}\".k3fAUCu%7");
      assertEquals("b^/foum", string1);
      
      dBSchema0.getTable("execute");
      String string2 = SQLUtil.normalize("~:<*/61&&4o", true);
      assertEquals("~ : < */ 61 & & 4o", string2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "select");
      DBCatalog dBCatalog0 = new DBCatalog(">");
      DBSchema dBSchema0 = new DBSchema("standard_conforming_strings", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(">", dBSchema0);
      defaultDBTable0.getCheckConstraints();
      TableContainer tableContainer0 = new TableContainer("7%5s");
      tableContainer0.getSchema();
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("truncateow}2]@?s!c*2?>n");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      tableContainer0.isIdentical((DBObject) null);
      String string0 = SQLUtil.normalize("C4@K", false);
      assertEquals("C4 @ K", string0);
      
      TableContainer tableContainer1 = new TableContainer("truncateow}2]@?s!c*2?>n");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null, (DBSchema) null);
      String string1 = SQLUtil.ownerDotComponent(tableContainer1);
      assertEquals("truncateow}2]@?s!c*2?>n", string1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("/@6mW2sw0$. lp0");
      DBDataType.getInstance(90024, "create materialized view");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType.getInstance(1863, "b^/f");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = RawStoreFactory.OLD_ENCRYPTED_KEY;
      String string1 = SQLUtil.normalize("insert", false);
      assertEquals("insert", string1);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selecto");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Random.setNextRandom(2273);
      String string2 = SQLUtil.normalize("'jai|X", true);
      assertEquals("'jai|X'", string2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-94), "O");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("O", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setVersionColumn(true);
      Integer integer0 = new Integer((-871));
      long long0 = Long.MAX_VALUE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O");
      JoinNode.joinTypeToString((-94));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      SQLUtil.isQuery("O");
      Boolean boolean1 = new Boolean((String) null);
      SQLUtil.removeComments("b^/FoumBf:`7kmyP)MH");
      String string0 = DataFactory.DB_LOCKFILE_NAME;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" NULL");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint((String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns ()
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-115), "O");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DBDataType.getInstance((-115), "O");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dBDataType0.isNumber();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("O", defaultDBTable0, dBDataType0);
      Integer integer0 = new Integer((-843));
      long long0 = LogCounter.MAX_LOGFILE_NUMBER;
      defaultDBColumn0.setSize(integer0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Character.valueOf('7');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O");
      SQLUtil.renderColumn(defaultDBColumn0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("drop index", 39);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      SQLUtil.isQuery("O");
      SQLUtil.mutatesStructure("b^/FoumBf:`7kmyP)MH");
      Boolean boolean1 = new Boolean("b^/FoumBf:`7kmyP)MH");
      SQLUtil.removeComments(" of ");
      SQLUtil.normalize("b^/FoumBf:`7kmyP)MH", false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" of ");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "inner", false, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(2147483647L);
      SQLUtil.mutatesStructure("O");
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint((String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns ()
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-115), "O");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "O";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "O", false, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      DBDataType.getInstance((-115), "O");
      dBDataType0.isNumber();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("O", defaultDBTable0, dBDataType0);
      Integer integer0 = new Integer((-843));
      long long0 = LogCounter.MAX_LOGFILE_NUMBER;
      defaultDBColumn0.setSize(integer0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Character.valueOf('7');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O");
      SQLUtil.renderColumn(defaultDBColumn0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("drop index", 39);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      SQLUtil.isQuery("O");
      SQLUtil.mutatesStructure("b^/FoumBf:`7kmyP)MH");
      Boolean boolean1 = new Boolean("b^/FoumBf:`7kmyP)MH");
      SQLUtil.removeComments(" of ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" of ");
      pGConnectionPoolDataSource0.setLogWriter(mockPrintWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.isDML("org.databene.jdbacl.SQLUtil");
      defaultDBTable0.getCheckConstraints();
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.removeComments("S'V");
      SQLUtil.normalize("table null", false);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("WINDOW/");
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource1.getDescription();
      pGConnectionPoolDataSource1.setLogWriter(mockPrintWriter0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable1, false, nameSpec0, mockPrintWriter0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLUtil.isQuery("select");
      Boolean boolean0 = new Boolean("select");
      DBSchema dBSchema0 = new DBSchema("/@6mW2sw0$. lp0");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "r65R[&L:,kp#2vT|u";
      stringArray0[1] = "/@6mW2sw0$. lp0";
      stringArray0[2] = "/@6mW2sw0$. lp0";
      stringArray0[3] = "error i";
      stringArray0[4] = "r65R[&L:,kp#2vT|u";
      defaultDBTable0.countProviders();
      stringArray0[5] = "r65R[&L:,kp#2vT|u";
      stringArray0[6] = "P3MpCtgSi9koW;";
      stringArray0[7] = "P3MpCtgSi9koW;";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("P3MpCtgSi9koW;", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.removeForeignKeyConstraint(dBForeignKeyConstraint0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.normalize("P3MpCtgSi9koW;", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/@6mW2sw0$. lp0");
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setLogWriter(mockPrintWriter0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("O");
      DBDataType.getInstance(8001, "setSQLXML(String, SQLXML)");
      DBDataType.getInstance(8001, "setSQLXML(String, SQLXML)");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType.getInstance((-103), " REFERENCES ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.removeComments(" REFERENCES ");
      TableContainer tableContainer0 = new TableContainer("org.databene.jdbacl.SQLUtil");
      tableContainer0.getSchema();
      SQLUtil.normalize("T*bn^Z]ql~]", false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(4611688217450647360L);
      SQLUtil.mutatesStructure("setSQLXML(String, SQLXML)");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "T * bn ^ Z ] ql ~ ]", false, (String[]) null);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec1);
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("{dL#Rys`z.g]~", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance((-103), "BH{?AD}#m^");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String string0 = RawStoreFactory.PAGE_SIZE_STRING;
      SQLUtil.normalize("/*", false);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      boolean boolean1 = FileUtil.fsIsIgnoreCase;
      SQLUtil.removeComments("drop indexreferences");
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FlV%2NrSE$!)d:}");
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      assertEquals(0, jdbcDataSource0.getTraceId());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = TransactionFactory.MODULE;
      String string1 = TypeId.NUMERIC_NAME;
      SQLUtil.normalize("rn;`>v-:!s]", false);
      TableContainer tableContainer0 = new TableContainer("org.apache.derby.iapi.store.raw.xact.TransactionFactory");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      StringBuilder stringBuilder0 = new StringBuilder("q#29-");
      // Undeclared exception!
      try { 
        ByteBuffer.allocate((-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DBDataType dBDataType0 = DBDataType.getInstance((-94), "O");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer((-871));
      Integer integer1 = new Integer((-871));
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("xK1'c_B49er?w", defaultDBTable0, dBDataType0, integer2, integer2);
      defaultDBColumn0.setSize(integer1);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      defaultDBTable0.getIndexes();
      Character character0 = new Character('7');
      SQLUtil.renderColumn(defaultDBColumn0);
      boolean boolean0 = FBBlob.SEGMENTED;
      SQLUtil.isQuery("xK1'c_B49er?w O(-871,1) NULL");
      TableContainer tableContainer0 = new TableContainer("enI)zFmNg:[.h:-i0");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("xK1'c_B49er?w O(-871,1) NULL", (DBSchema) null);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, (String[]) null, "org.apache.derby.iapi.types.DateTimeDataValue", "xK1'c_B49er?w", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLUtil.isProcedureCall("alter sessionerror in url:");
      String string0 = Page.DIAG_MINIMUM_REC_SIZE;
      Random.setNextRandom((-651));
      SQLUtil.mutatesDataOrStructure("alter sessionerror in url:");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "alter sessionerror in url:";
      stringArray0[1] = "";
      stringArray0[2] = "minRecSize";
      stringArray0[3] = "minRecSize";
      stringArray0[4] = "alter sessionerror in url:";
      stringArray0[5] = "alter sessionerror in url:";
      stringArray0[6] = "minRecSize";
      stringArray0[7] = "alter sessionerror in url:";
      stringArray0[8] = "alter sessionerror in url:";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (alter sessionerror in url:, , minRecSize, minRecSize, alter sessionerror in url:, alter sessionerror in url:, minRecSize, alter sessionerror in url:, alter sessionerror in url:)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
      
      String string0 = LogToFile.DUMP_LOG_FROM_LOG_FILE;
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
      
      DBDataType dBDataType0 = DBDataType.getInstance(34, "VIEWS");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter sessionalter session", defaultDBTable0, dBDataType0, integer0);
      String string2 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("VIEWS(1)", string2);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alter sessiono", false, "alter sessiono", "truncateo");
      defaultDBTable0.addCheckConstraint(dBCheckConstraint0);
      DBDataType dBDataType0 = DBDataType.getInstance((-94), "O");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("O", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setVersionColumn(true);
      Integer integer0 = new Integer((-871));
      long long0 = Long.MAX_VALUE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O");
      JoinNode.joinTypeToString((-94));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      SQLUtil.isQuery("O");
      Boolean boolean1 = new Boolean("b^/FoumBf:`7kmyP)MH");
      SQLUtil.removeComments("C");
      String string0 = DataFactory.DB_LOCKFILE_NAME;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("C");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "b^/FoumBf:`7kmyP)MH";
      stringArray0[1] = "db.lck";
      stringArray0[2] = null;
      stringArray0[3] = "b^/FoumBf:`7kmyP)MH";
      stringArray0[4] = null;
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (b^/FoumBf:`7kmyP)MH, db.lck, , b^/FoumBf:`7kmyP)MH, )
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-115), "O");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DBDataType.getInstance((-115), "O");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("O", defaultDBTable0, dBDataType0);
      genericDescriptorList0.add((Object) defaultDBColumn0);
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("call2", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("O");
      assertNull(boolean1);
      
      String string0 = Dependable.TABLE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
      String string1 = SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
      assertEquals("O", string1);
  }
}
