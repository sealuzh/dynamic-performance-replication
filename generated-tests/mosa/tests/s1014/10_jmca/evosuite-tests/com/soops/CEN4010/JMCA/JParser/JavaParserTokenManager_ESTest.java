/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:10:24 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit((JavaCharStream) null, 1281);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1281. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.ReInit((JavaCharStream) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SwitchTo(1);
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("if");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 24, 24, 24);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(36, token0.kind);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0f");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 24, 24, 24);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(25, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+_<OhL8V!f");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 30, 30, 30);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(101, token0.kind);
      assertEquals(30, token0.endColumn);
      assertEquals(30, token0.beginColumn);
      assertEquals(30, token0.beginLine);
      assertEquals(30, token0.endLine);
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getBeginLine());
      assertEquals(30, javaCharStream0.getBeginColumn());
      assertEquals(30, javaCharStream0.getColumn());
      assertEquals(30, javaCharStream0.getEndLine());
      assertEquals("+", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getBeginLine());
      assertEquals(30, javaCharStream0.getBeginColumn());
      assertEquals(30, javaCharStream0.getColumn());
      assertEquals(30, javaCharStream0.getEndLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(30, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(31, token1.beginColumn);
      assertEquals(31, token1.endColumn);
      assertEquals(30, token1.beginLine);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(30, javaCharStream0.getLine());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals(30, javaCharStream0.getEndLine());
      assertEquals("_", token1.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(30, javaCharStream0.getLine());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals(30, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i:");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1388, 1388, 1388);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1388, token0.beginColumn);
      assertEquals(1388, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1388, token0.beginLine);
      assertEquals(1388, token0.endLine);
      assertEquals(1388, javaCharStream0.getEndLine());
      assertEquals(1388, javaCharStream0.getBeginColumn());
      assertEquals(1388, javaCharStream0.getBeginLine());
      assertEquals(1388, javaCharStream0.getLine());
      assertEquals(1388, javaCharStream0.getEndColumn());
      assertEquals(1388, javaCharStream0.getColumn());
      assertEquals("i", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1389, token1.endColumn);
      assertEquals(92, token1.kind);
      assertEquals(1388, token1.beginLine);
      assertEquals(1389, token1.beginColumn);
      assertEquals(1388, token1.endLine);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1388, javaCharStream0.getEndLine());
      assertEquals(1388, javaCharStream0.getBeginLine());
      assertEquals(1389, javaCharStream0.getBeginColumn());
      assertEquals(1388, javaCharStream0.getLine());
      assertEquals(1389, javaCharStream0.getEndColumn());
      assertEquals(1389, javaCharStream0.getColumn());
      assertEquals(":", token1.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+_<OhL8V!f");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 31, 96, 96);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('+', char0);
      assertEquals(31, javaCharStream0.getBeginLine());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(31, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals(31, javaCharStream0.getEndLine());
      assertEquals(96, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 3);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(31, javaCharStream0.getBeginLine());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(31, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals(31, javaCharStream0.getEndLine());
      assertEquals(96, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 31, column 106.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"^\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.curLexState = (-1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.kind);
      assertEquals(Integer.MAX_VALUE, token0.beginLine);
      assertEquals(Integer.MAX_VALUE, token0.endLine);
      assertEquals(Integer.MAX_VALUE, token0.beginColumn);
      assertEquals(Integer.MAX_VALUE, token0.endColumn);
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals("", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(Integer.MIN_VALUE, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(Integer.MAX_VALUE, token1.beginLine);
      assertEquals(Integer.MAX_VALUE, token1.endLine);
      assertEquals(Integer.MIN_VALUE, token1.endColumn);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(Integer.MIN_VALUE, javaCharStream0.getBeginColumn());
      assertEquals(Integer.MIN_VALUE, javaCharStream0.getColumn());
      assertEquals(Integer.MIN_VALUE, javaCharStream0.getEndColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"duble\"");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 113, 113);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\"', char0);
      assertEquals(113, javaCharStream0.getBeginLine());
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals(113, javaCharStream0.getLine());
      assertEquals(113, javaCharStream0.getColumn());
      assertEquals(113, javaCharStream0.getEndLine());
      assertEquals(113, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(113, javaCharStream0.getBeginLine());
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals(113, javaCharStream0.getLine());
      assertEquals(113, javaCharStream0.getColumn());
      assertEquals(113, javaCharStream0.getEndLine());
      assertEquals(113, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(118, token0.endColumn);
      assertEquals(113, token0.beginLine);
      assertEquals(114, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(113, token0.endLine);
      assertEquals(113, javaCharStream0.getBeginLine());
      assertEquals(118, javaCharStream0.getEndColumn());
      assertEquals(114, javaCharStream0.getBeginColumn());
      assertEquals(113, javaCharStream0.getLine());
      assertEquals(113, javaCharStream0.getEndLine());
      assertEquals(118, javaCharStream0.getColumn());
      assertEquals("duble", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 113, column 120.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"S[cgc(W@3b-K[");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 93, 93);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 93, column 108.  Encountered: <EOF> after : \"\\\"S[cgc(W@3b-K\\u007f[\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"^\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(73, token0.kind);
      assertEquals((-2147483647), token0.endColumn);
      assertEquals(Integer.MAX_VALUE, token0.endLine);
      assertEquals(Integer.MAX_VALUE, token0.beginColumn);
      assertEquals(Integer.MAX_VALUE, token0.beginLine);
      assertEquals((-2147483647), javaCharStream0.getEndColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginColumn());
      assertEquals((-2147483647), javaCharStream0.getColumn());
      assertEquals("\"^\"", token0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+<OhL8V!f");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 6673, 37, 6673);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6673, token0.beginLine);
      assertEquals(37, token0.beginColumn);
      assertEquals(101, token0.kind);
      assertEquals(6673, token0.endLine);
      assertEquals(37, token0.endColumn);
      assertEquals(6673, javaCharStream0.getBeginLine());
      assertEquals(37, javaCharStream0.getBeginColumn());
      assertEquals(6673, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getEndColumn());
      assertEquals(6673, javaCharStream0.getEndLine());
      assertEquals("+", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(38, token1.beginColumn);
      assertEquals(38, token1.endColumn);
      assertEquals(88, token1.kind);
      assertEquals(6673, token1.beginLine);
      assertEquals(6673, token1.endLine);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(6673, javaCharStream0.getBeginLine());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals(6673, javaCharStream0.getLine());
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals(38, javaCharStream0.getEndColumn());
      assertEquals(6673, javaCharStream0.getEndLine());
      assertEquals("<", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6673, token2.beginLine);
      assertEquals(6673, token2.endLine);
      assertEquals(43, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(39, token2.beginColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(6673, javaCharStream0.getBeginLine());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals(6673, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getBeginColumn());
      assertEquals(6673, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals("OhL8V", token2.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"^\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\"', char0);
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(107, token0.kind);
      assertEquals(Integer.MIN_VALUE, token0.beginColumn);
      assertEquals(Integer.MAX_VALUE, token0.beginLine);
      assertEquals(Integer.MAX_VALUE, token0.endLine);
      assertEquals(Integer.MIN_VALUE, token0.endColumn);
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals(Integer.MIN_VALUE, javaCharStream0.getBeginColumn());
      assertEquals(Integer.MIN_VALUE, javaCharStream0.getEndColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MIN_VALUE, javaCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals("^", token0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("if");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(105, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 24, 24, 24);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(24, token0.endLine);
      assertEquals(24, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(24, token0.beginColumn);
      assertEquals(24, token0.endColumn);
      assertEquals(24, javaCharStream0.getColumn());
      assertEquals(24, javaCharStream0.getEndColumn());
      assertEquals(24, javaCharStream0.getLine());
      assertEquals(24, javaCharStream0.getBeginLine());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(24, javaCharStream0.getEndLine());
      assertEquals("f", token0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\b");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 17, 17, 17);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\b', char0);
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.kind);
      assertEquals(17, token0.beginColumn);
      assertEquals(17, token0.beginLine);
      assertEquals(17, token0.endLine);
      assertEquals(17, token0.endColumn);
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals("", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z$i%G ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 24, 24, 11);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(26, token0.endColumn);
      assertEquals(24, token0.endLine);
      assertEquals(24, token0.beginLine);
      assertEquals(24, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(26, javaCharStream0.getEndColumn());
      assertEquals(24, javaCharStream0.getEndLine());
      assertEquals(26, javaCharStream0.getColumn());
      assertEquals(24, javaCharStream0.getLine());
      assertEquals(24, javaCharStream0.getBeginLine());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals("Z$i", token0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(26, token0.endColumn);
      assertEquals(24, token0.endLine);
      assertEquals(24, token0.beginLine);
      assertEquals(24, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(26, javaCharStream0.getEndColumn());
      assertEquals(24, javaCharStream0.getEndLine());
      assertEquals(26, javaCharStream0.getColumn());
      assertEquals(24, javaCharStream0.getLine());
      assertEquals(24, javaCharStream0.getBeginLine());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals("Z$i", token0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\b");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 24, 3605, 3605);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 24, column 3606.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z$i%G ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 24, 24, 11);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(26, token0.endColumn);
      assertEquals(24, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(24, token0.beginLine);
      assertEquals(24, token0.beginColumn);
      assertEquals(24, javaCharStream0.getLine());
      assertEquals(26, javaCharStream0.getColumn());
      assertEquals(24, javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getEndColumn());
      assertEquals(24, javaCharStream0.getEndLine());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals("Z$i", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 24, column 27.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'X/F.sdVR7P,>H");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3279), 22);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -3279, column 24.  Encountered: \"/\" (47), after : \"\\'X\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z$i%G ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 24, 24, 24);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.nextCharInd = 2431;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 24, column 25.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E%=");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 97, 2581);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('E', char0);
      assertEquals(2581, javaCharStream0.getBeginColumn());
      assertEquals(2581, javaCharStream0.getEndColumn());
      assertEquals(2581, javaCharStream0.getColumn());
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2581, javaCharStream0.getBeginColumn());
      assertEquals(2581, javaCharStream0.getEndColumn());
      assertEquals(2581, javaCharStream0.getColumn());
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(117, token0.kind);
      assertEquals(97, token0.beginLine);
      assertEquals(2582, token0.beginColumn);
      assertEquals(97, token0.endLine);
      assertEquals(2583, token0.endColumn);
      assertEquals(2582, javaCharStream0.getBeginColumn());
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getBeginLine());
      assertEquals(2583, javaCharStream0.getColumn());
      assertEquals(2583, javaCharStream0.getEndColumn());
      assertEquals("%=", token0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4f5icp=qu/)");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 116, 116, 116);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringReader stringReader1 = new StringReader("4f5icp=qu/)");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(116, token0.beginLine);
      assertEquals(116, token0.beginColumn);
      assertEquals(70, token0.kind);
      assertEquals(116, token0.endLine);
      assertEquals(117, token0.endColumn);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(117, javaCharStream0.getEndColumn());
      assertEquals(116, javaCharStream0.getEndLine());
      assertEquals(116, javaCharStream0.getLine());
      assertEquals(117, javaCharStream0.getColumn());
      assertEquals(116, javaCharStream0.getBeginColumn());
      assertEquals(116, javaCharStream0.getBeginLine());
      assertEquals("4f", token0.toString());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals('5', char0);
      assertEquals(118, javaCharStream0.getEndColumn());
      assertEquals(118, javaCharStream0.getColumn());
      assertEquals(116, javaCharStream0.getEndLine());
      assertEquals(116, javaCharStream0.getLine());
      assertEquals(118, javaCharStream0.getBeginColumn());
      assertEquals(116, javaCharStream0.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(116, token1.endLine);
      assertEquals(116, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(119, token1.beginColumn);
      assertEquals(121, token1.endColumn);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(119, javaCharStream0.getBeginColumn());
      assertEquals(116, javaCharStream0.getEndLine());
      assertEquals(116, javaCharStream0.getLine());
      assertEquals(121, javaCharStream0.getColumn());
      assertEquals(121, javaCharStream0.getEndColumn());
      assertEquals(116, javaCharStream0.getBeginLine());
      assertEquals("icp", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(122, token2.beginColumn);
      assertEquals(122, token2.endColumn);
      assertEquals(87, token2.kind);
      assertEquals(116, token2.beginLine);
      assertEquals(116, token2.endLine);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(116, javaCharStream0.getEndLine());
      assertEquals(116, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals(116, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals("=", token2.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+kX/0OmR{iH2\"S}H.-");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 124, 124, 1096);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(124, token0.beginColumn);
      assertEquals(124, token0.endColumn);
      assertEquals(124, token0.endLine);
      assertEquals(101, token0.kind);
      assertEquals(124, token0.beginLine);
      assertEquals(124, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals("+", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(124, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(125, token1.beginColumn);
      assertEquals(124, token1.beginLine);
      assertEquals(126, token1.endColumn);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(125, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(126, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(126, javaCharStream0.getEndColumn());
      assertEquals("kX", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(127, token2.endColumn);
      assertEquals(124, token2.endLine);
      assertEquals(127, token2.beginColumn);
      assertEquals(124, token2.beginLine);
      assertEquals(104, token2.kind);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(127, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(127, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(127, javaCharStream0.getEndColumn());
      assertEquals("/", token2.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(127, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(127, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(127, javaCharStream0.getEndColumn());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(128, token3.endColumn);
      assertEquals(128, token3.beginColumn);
      assertEquals(124, token3.endLine);
      assertEquals(66, token3.kind);
      assertEquals(124, token3.beginLine);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(128, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(128, javaCharStream0.getEndColumn());
      assertEquals(128, javaCharStream0.getBeginColumn());
      assertEquals("0", token3.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"/\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"/\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-2069), (-2069));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals('\"', char0);
      assertEquals((-2069), javaCharStream0.getBeginLine());
      assertEquals((-2069), javaCharStream0.getColumn());
      assertEquals((-2069), javaCharStream0.getLine());
      assertEquals((-2069), javaCharStream0.getEndColumn());
      assertEquals((-2069), javaCharStream0.getEndLine());
      assertEquals((-2069), javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-2069), javaCharStream0.getBeginLine());
      assertEquals((-2069), javaCharStream0.getColumn());
      assertEquals((-2069), javaCharStream0.getLine());
      assertEquals((-2069), javaCharStream0.getEndColumn());
      assertEquals((-2069), javaCharStream0.getEndLine());
      assertEquals((-2069), javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(104, token0.kind);
      assertEquals((-2069), token0.beginLine);
      assertEquals((-2068), token0.endColumn);
      assertEquals((-2068), token0.beginColumn);
      assertEquals((-2069), token0.endLine);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-2069), javaCharStream0.getBeginLine());
      assertEquals((-2068), javaCharStream0.getEndColumn());
      assertEquals((-2069), javaCharStream0.getLine());
      assertEquals((-2068), javaCharStream0.getColumn());
      assertEquals((-2069), javaCharStream0.getEndLine());
      assertEquals((-2068), javaCharStream0.getBeginColumn());
      assertEquals("/", token0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KOCLq8VRf");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 17, 17, 17);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(17, token0.beginColumn);
      assertEquals(17, token0.beginLine);
      assertEquals(17, token0.endLine);
      assertEquals(25, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(25, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(25, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals("KOCLq8VRf", token0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NzZ],@OSoq");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("NzZ],@OSoq");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 2553, 2553);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals('N', char0);
      assertEquals(2553, javaCharStream0.getBeginColumn());
      assertEquals(2553, javaCharStream0.getColumn());
      assertEquals(2553, javaCharStream0.getEndColumn());
      assertEquals(2553, javaCharStream0.getEndLine());
      assertEquals(2553, javaCharStream0.getBeginLine());
      assertEquals(2553, javaCharStream0.getLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(2553, javaCharStream0.getBeginColumn());
      assertEquals(2553, javaCharStream0.getColumn());
      assertEquals(2553, javaCharStream0.getEndColumn());
      assertEquals(2553, javaCharStream0.getEndLine());
      assertEquals(2553, javaCharStream0.getBeginLine());
      assertEquals(2553, javaCharStream0.getLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2554, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2553, token0.beginLine);
      assertEquals(2555, token0.endColumn);
      assertEquals(2553, token0.endLine);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(2554, javaCharStream0.getBeginColumn());
      assertEquals(2555, javaCharStream0.getColumn());
      assertEquals(2553, javaCharStream0.getEndLine());
      assertEquals(2553, javaCharStream0.getBeginLine());
      assertEquals(2555, javaCharStream0.getEndColumn());
      assertEquals(2553, javaCharStream0.getLine());
      assertEquals("zZ", token0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray0[0] = '=';
      charArray0[1] = '=';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'=', '='}, charArray0);
      assertNotNull(charArrayReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertArrayEquals(new char[] {'=', '='}, charArray0);
      assertNotNull(pushbackReader0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 17, 17, 17);
      assertArrayEquals(new char[] {'=', '='}, charArray0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'=', '='}, charArray0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'=', '='}, charArray0);
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager1.input_stream = javaCharStream0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaParserTokenManager1.input_stream.getBeginLine());
      assertEquals(0, javaParserTokenManager1.input_stream.getBeginColumn());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertArrayEquals(new char[] {'=', '='}, charArray0);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(17, token0.endLine);
      assertEquals(17, token0.beginColumn);
      assertEquals(17, token0.beginLine);
      assertEquals(18, token0.endColumn);
      assertEquals(93, token0.kind);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals("==", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new char[] {'=', '='}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$T{4+}~UpP");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 37, 11, 37);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(11, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(37, token0.endLine);
      assertEquals(37, token0.beginLine);
      assertEquals(12, token0.endColumn);
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals("$T", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(37, token1.beginLine);
      assertEquals(37, token1.endLine);
      assertEquals(13, token1.endColumn);
      assertEquals(79, token1.kind);
      assertEquals(13, token1.beginColumn);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals("{", token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(37, token1.beginLine);
      assertEquals(37, token1.endLine);
      assertEquals(13, token1.endColumn);
      assertEquals(79, token1.kind);
      assertEquals(13, token1.beginColumn);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals("{", token1.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NzZ],@OSoq");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("NzZ],@OSoq");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("NzZ", token0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("NzZ", token0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4f5icp=qu/)");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3834, 1791);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('4', char0);
      assertEquals(1791, javaCharStream0.getColumn());
      assertEquals(1791, javaCharStream0.getEndColumn());
      assertEquals(1791, javaCharStream0.getBeginColumn());
      assertEquals(3834, javaCharStream0.getEndLine());
      assertEquals(3834, javaCharStream0.getBeginLine());
      assertEquals(3834, javaCharStream0.getLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1791, javaCharStream0.getColumn());
      assertEquals(1791, javaCharStream0.getEndColumn());
      assertEquals(1791, javaCharStream0.getBeginColumn());
      assertEquals(3834, javaCharStream0.getEndLine());
      assertEquals(3834, javaCharStream0.getBeginLine());
      assertEquals(3834, javaCharStream0.getLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3834, token0.beginLine);
      assertEquals(1796, token0.endColumn);
      assertEquals(3834, token0.endLine);
      assertEquals(1792, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1796, javaCharStream0.getEndColumn());
      assertEquals(1792, javaCharStream0.getBeginColumn());
      assertEquals(3834, javaCharStream0.getEndLine());
      assertEquals(3834, javaCharStream0.getBeginLine());
      assertEquals(3834, javaCharStream0.getLine());
      assertEquals(1796, javaCharStream0.getColumn());
      assertEquals("f5icp", token0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+W7wwr");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("+W7wwr");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3136), 3022, 3022);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3136), token0.beginLine);
      assertEquals(3022, token0.beginColumn);
      assertEquals((-3136), token0.endLine);
      assertEquals(3022, token0.endColumn);
      assertEquals(101, token0.kind);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-3136), javaCharStream0.getLine());
      assertEquals((-3136), javaCharStream0.getBeginLine());
      assertEquals(3022, javaCharStream0.getColumn());
      assertEquals(3022, javaCharStream0.getBeginColumn());
      assertEquals(3022, javaCharStream0.getEndColumn());
      assertEquals((-3136), javaCharStream0.getEndLine());
      assertEquals("+", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3023, token1.beginColumn);
      assertEquals((-3136), token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals((-3136), token1.endLine);
      assertEquals(3027, token1.endColumn);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-3136), javaCharStream0.getLine());
      assertEquals(3027, javaCharStream0.getEndColumn());
      assertEquals((-3136), javaCharStream0.getBeginLine());
      assertEquals(3027, javaCharStream0.getColumn());
      assertEquals((-3136), javaCharStream0.getEndLine());
      assertEquals(3023, javaCharStream0.getBeginColumn());
      assertEquals("W7wwr", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3136), token2.endLine);
      assertEquals(3027, token2.endColumn);
      assertEquals(3027, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals((-3136), token2.beginLine);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals((-3136), javaCharStream0.getLine());
      assertEquals(3027, javaCharStream0.getEndColumn());
      assertEquals((-3136), javaCharStream0.getBeginLine());
      assertEquals(3027, javaCharStream0.getColumn());
      assertEquals(3027, javaCharStream0.getBeginColumn());
      assertEquals((-3136), javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'>*e6");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2672), 50);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\'', char0);
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals((-2672), javaCharStream0.getBeginLine());
      assertEquals((-2672), javaCharStream0.getLine());
      assertEquals((-2672), javaCharStream0.getEndLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals((-2672), javaCharStream0.getBeginLine());
      assertEquals((-2672), javaCharStream0.getLine());
      assertEquals((-2672), javaCharStream0.getEndLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(124, token0.kind);
      assertEquals(51, token0.endColumn);
      assertEquals((-2672), token0.endLine);
      assertEquals(51, token0.beginColumn);
      assertEquals((-2672), token0.beginLine);
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals((-2672), javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals((-2672), javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals((-2672), javaCharStream0.getEndLine());
      assertEquals(">", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(52, token1.endColumn);
      assertEquals((-2672), token1.endLine);
      assertEquals(103, token1.kind);
      assertEquals(52, token1.beginColumn);
      assertEquals((-2672), token1.beginLine);
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals((-2672), javaCharStream0.getBeginLine());
      assertEquals((-2672), javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals((-2672), javaCharStream0.getEndLine());
      assertEquals("*", token1.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E%=");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("XW*{j#@_Ne>hJu");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("XW*{j#@_Ne>hJu");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 97, (-3360));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(97, token0.endLine);
      assertEquals((-3359), token0.endColumn);
      assertEquals(97, token0.beginLine);
      assertEquals((-3360), token0.beginColumn);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(97, javaCharStream0.getBeginLine());
      assertEquals((-3360), javaCharStream0.getBeginColumn());
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals((-3359), javaCharStream0.getColumn());
      assertEquals((-3359), javaCharStream0.getEndColumn());
      assertEquals("XW", token0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+kX/0OmR{iH2\"S}H.-");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 124, 124, 1096);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(124, token0.beginLine);
      assertEquals(124, token0.beginColumn);
      assertEquals(124, token0.endColumn);
      assertEquals(124, token0.endLine);
      assertEquals(101, token0.kind);
      assertEquals(124, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals("+", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(126, token1.endColumn);
      assertEquals(124, token1.endLine);
      assertEquals(125, token1.beginColumn);
      assertEquals(124, token1.beginLine);
      assertEquals(74, token1.kind);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(125, javaCharStream0.getBeginColumn());
      assertEquals(126, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(126, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals("kX", token1.toString());
      
      javaParserTokenManager0.defaultLexState = 2425;
      assertEquals(125, javaCharStream0.getBeginColumn());
      assertEquals(126, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(126, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals('0', char0);
      assertEquals(125, javaCharStream0.getBeginColumn());
      assertEquals(126, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(126, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(127, token2.beginColumn);
      assertEquals(124, token2.beginLine);
      assertEquals(104, token2.kind);
      assertEquals(124, token2.endLine);
      assertEquals(127, token2.endColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(127, javaCharStream0.getEndColumn());
      assertEquals(127, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(127, javaCharStream0.getColumn());
      assertEquals("/", token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(124, token3.endLine);
      assertEquals(74, token3.kind);
      assertEquals(130, token3.endColumn);
      assertEquals(128, token3.beginColumn);
      assertEquals(124, token3.beginLine);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(128, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(130, javaCharStream0.getColumn());
      assertEquals(130, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals("OmR", token3.toString());
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(131, token4.beginColumn);
      assertEquals(131, token4.endColumn);
      assertEquals(124, token4.endLine);
      assertEquals(124, token4.beginLine);
      assertEquals(79, token4.kind);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(131, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(131, javaCharStream0.getBeginColumn());
      assertEquals(131, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals("{", token4.toString());
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertNotNull(token5);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(134, token5.endColumn);
      assertEquals(124, token5.endLine);
      assertEquals(124, token5.beginLine);
      assertEquals(74, token5.kind);
      assertEquals(132, token5.beginColumn);
      assertNotSame(token5, token0);
      assertNotSame(token5, token2);
      assertNotSame(token5, token3);
      assertNotSame(token5, token1);
      assertNotSame(token5, token4);
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token4));
      assertEquals(134, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(132, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(134, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals("iH2", token5.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KOCLq8VRf");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 17, 17, 17);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringReader stringReader1 = new StringReader("fP=eJ|.|");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-1), (-1), 3022);
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-1), token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals((-1), token0.beginColumn);
      assertEquals((-1), token0.endLine);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals("fP", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals((-1), token1.endLine);
      assertEquals(87, token1.kind);
      assertEquals(1, token1.endColumn);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals("=", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(4, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token2.beginLine);
      assertEquals((-1), token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(3, token2.endColumn);
      assertEquals(2, token2.beginColumn);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(3, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals("eJ", token2.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("s?e");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 17, 15, 15);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(17, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(17, token0.endLine);
      assertEquals(15, token0.beginColumn);
      assertEquals(15, token0.endColumn);
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals("s", token0.toString());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('?', char0);
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getEndLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(17, token1.beginColumn);
      assertEquals(17, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(17, token1.endLine);
      assertEquals(17, token1.endColumn);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals("e", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.kind);
      assertEquals(17, token2.endLine);
      assertEquals(17, token2.beginColumn);
      assertEquals(17, token2.beginLine);
      assertEquals(17, token2.endColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NzZ],@OSoq");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 37, 17, 37);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(37, token0.beginLine);
      assertEquals(17, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(19, token0.endColumn);
      assertEquals(37, token0.endLine);
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals("NzZ", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(82, token1.kind);
      assertEquals(37, token1.beginLine);
      assertEquals(20, token1.beginColumn);
      assertEquals(20, token1.endColumn);
      assertEquals(37, token1.endLine);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals("]", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(21, token2.endColumn);
      assertEquals(21, token2.beginColumn);
      assertEquals(84, token2.kind);
      assertEquals(37, token2.beginLine);
      assertEquals(37, token2.endLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(21, javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(",", token2.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"double\"");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 2113, 113);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\"', char0);
      assertEquals(113, javaCharStream0.getBeginColumn());
      assertEquals(113, javaCharStream0.getColumn());
      assertEquals(2113, javaCharStream0.getEndLine());
      assertEquals(2113, javaCharStream0.getLine());
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals(2113, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(113, javaCharStream0.getBeginColumn());
      assertEquals(113, javaCharStream0.getColumn());
      assertEquals(2113, javaCharStream0.getEndLine());
      assertEquals(2113, javaCharStream0.getLine());
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals(2113, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(26, token0.kind);
      assertEquals(119, token0.endColumn);
      assertEquals(114, token0.beginColumn);
      assertEquals(2113, token0.endLine);
      assertEquals(2113, token0.beginLine);
      assertEquals(114, javaCharStream0.getBeginColumn());
      assertEquals(2113, javaCharStream0.getEndLine());
      assertEquals(119, javaCharStream0.getColumn());
      assertEquals(119, javaCharStream0.getEndColumn());
      assertEquals(2113, javaCharStream0.getLine());
      assertEquals(2113, javaCharStream0.getBeginLine());
      assertEquals("double", token0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+<OhL8V!f");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '3';
      charArray0[2] = 'V';
      charArray0[3] = 'm';
      charArray0[4] = 'i';
      charArray0[5] = '0';
      charArray0[6] = 'A';
      charArray0[7] = '$';
      charArray0[8] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'/', '3', 'V', 'm', 'i', '0', 'A', '$', '1'}, charArray0);
      assertNotNull(charArrayReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertArrayEquals(new char[] {'/', '3', 'V', 'm', 'i', '0', 'A', '$', '1'}, charArray0);
      assertNotNull(pushbackReader0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1, 37, 2975);
      assertArrayEquals(new char[] {'/', '3', 'V', 'm', 'i', '0', 'A', '$', '1'}, charArray0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'/', '3', 'V', 'm', 'i', '0', 'A', '$', '1'}, charArray0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertArrayEquals(new char[] {'/', '3', 'V', 'm', 'i', '0', 'A', '$', '1'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('/', char0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'/', '3', 'V', 'm', 'i', '0', 'A', '$', '1'}, charArray0);
      assertNotNull(token0);
      assertEquals(1, token0.endLine);
      assertEquals(38, token0.endColumn);
      assertEquals(38, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("3", token0.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(38, javaCharStream0.getEndColumn());
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'/', '3', 'V', 'm', 'i', '0', 'A', '$', '1'}, charArray0);
      assertNotNull(token1);
      assertEquals(1, token1.beginLine);
      assertEquals(45, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(39, token1.beginColumn);
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals("Vmi0A$1", token1.toString());
      assertEquals(45, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = '1';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      charArray0[4] = '%';
      charArray0[5] = 'W';
      charArray0[6] = 'z';
      charArray0[7] = '<';
      charArray0[8] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'V', '1', 'z', 'z', '%', 'W', 'z', '<', '-'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 20, 20);
      assertArrayEquals(new char[] {'V', '1', 'z', 'z', '%', 'W', 'z', '<', '-'}, charArray0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'V', '1', 'z', 'z', '%', 'W', 'z', '<', '-'}, charArray0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'V', '1', 'z', 'z', '%', 'W', 'z', '<', '-'}, charArray0);
      assertNotNull(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(20, token0.endLine);
      assertEquals(20, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(20, token0.beginColumn);
      assertEquals(23, token0.endColumn);
      assertEquals(20, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getLine());
      assertEquals(20, javaCharStream0.getEndLine());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals("V1zz", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertArrayEquals(new char[] {'V', '1', 'z', 'z', '%', 'W', 'z', '<', '-'}, charArray0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(20, token0.endLine);
      assertEquals(20, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(20, token0.beginColumn);
      assertEquals(23, token0.endColumn);
      assertEquals(20, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getLine());
      assertEquals(20, javaCharStream0.getEndLine());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals("V1zz", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'V', '1', 'z', 'z', '%', 'W', 'z', '<', '-'}, charArray0);
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(108, token1.kind);
      assertEquals(24, token1.beginColumn);
      assertEquals(24, token1.endColumn);
      assertEquals(20, token1.endLine);
      assertEquals(20, token1.beginLine);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(20, javaCharStream0.getBeginLine());
      assertEquals(24, javaCharStream0.getColumn());
      assertEquals(20, javaCharStream0.getLine());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getEndLine());
      assertEquals(24, javaCharStream0.getEndColumn());
      assertEquals("%", token1.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("\"duble\"");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-15);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-114), (byte)2, (byte)110, (byte)11}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-114), (byte)2, (byte)110, (byte)11}, byteArray0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-114), (byte)2, (byte)110, (byte)11}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-114), (byte)2, (byte)110, (byte)11}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+<OhL8V!f");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '3';
      charArray0[2] = 'V';
      charArray0[4] = 'i';
      charArray0[5] = '\u0000';
      charArray0[6] = 'A';
      charArray0[7] = '$';
      charArray0[8] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'/', '3', 'V', '\u0000', 'i', '\u0000', 'A', '$', '1'}, charArray0);
      assertNotNull(charArrayReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertArrayEquals(new char[] {'/', '3', 'V', '\u0000', 'i', '\u0000', 'A', '$', '1'}, charArray0);
      assertNotNull(pushbackReader0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1, 37, 2975);
      assertArrayEquals(new char[] {'/', '3', 'V', '\u0000', 'i', '\u0000', 'A', '$', '1'}, charArray0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'/', '3', 'V', '\u0000', 'i', '\u0000', 'A', '$', '1'}, charArray0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'/', '3', 'V', '\u0000', 'i', '\u0000', 'A', '$', '1'}, charArray0);
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(37, token0.endColumn);
      assertEquals(104, token0.kind);
      assertEquals(37, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("/", token0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z$i%G ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1270), 1955, 17);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('Z', char0);
      assertEquals(1955, javaCharStream0.getColumn());
      assertEquals(1955, javaCharStream0.getEndColumn());
      assertEquals((-1270), javaCharStream0.getEndLine());
      assertEquals(1955, javaCharStream0.getBeginColumn());
      assertEquals((-1270), javaCharStream0.getBeginLine());
      assertEquals((-1270), javaCharStream0.getLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1955, javaCharStream0.getColumn());
      assertEquals(1955, javaCharStream0.getEndColumn());
      assertEquals((-1270), javaCharStream0.getEndLine());
      assertEquals(1955, javaCharStream0.getBeginColumn());
      assertEquals((-1270), javaCharStream0.getBeginLine());
      assertEquals((-1270), javaCharStream0.getLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1956, token0.beginColumn);
      assertEquals((-1270), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-1270), token0.beginLine);
      assertEquals(1957, token0.endColumn);
      assertEquals(1957, javaCharStream0.getColumn());
      assertEquals(1956, javaCharStream0.getBeginColumn());
      assertEquals(1957, javaCharStream0.getEndColumn());
      assertEquals((-1270), javaCharStream0.getEndLine());
      assertEquals((-1270), javaCharStream0.getBeginLine());
      assertEquals((-1270), javaCharStream0.getLine());
      assertEquals("$i", token0.toString());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'Z';
      charArray0[4] = 'Z';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', 'Z', 'Z'}, charArray0);
      assertEquals((-1), int0);
      
      char char1 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(char1 == char0);
      assertEquals('', char1);
      assertEquals(1958, javaCharStream0.getEndColumn());
      assertEquals(1958, javaCharStream0.getColumn());
      assertEquals(1958, javaCharStream0.getBeginColumn());
      assertEquals((-1270), javaCharStream0.getEndLine());
      assertEquals((-1270), javaCharStream0.getBeginLine());
      assertEquals((-1270), javaCharStream0.getLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1958, javaCharStream0.getEndColumn());
      assertEquals(1958, javaCharStream0.getColumn());
      assertEquals(1958, javaCharStream0.getBeginColumn());
      assertEquals((-1270), javaCharStream0.getEndLine());
      assertEquals((-1270), javaCharStream0.getBeginLine());
      assertEquals((-1270), javaCharStream0.getLine());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1959, token1.endColumn);
      assertEquals((-1270), token1.endLine);
      assertEquals(1959, token1.beginColumn);
      assertEquals(108, token1.kind);
      assertEquals((-1270), token1.beginLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1959, javaCharStream0.getBeginColumn());
      assertEquals(1959, javaCharStream0.getEndColumn());
      assertEquals((-1270), javaCharStream0.getEndLine());
      assertEquals((-1270), javaCharStream0.getBeginLine());
      assertEquals((-1270), javaCharStream0.getLine());
      assertEquals(1959, javaCharStream0.getColumn());
      assertEquals("%", token1.toString());
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1960, token2.endColumn);
      assertEquals(1960, token2.beginColumn);
      assertEquals((-1270), token2.beginLine);
      assertEquals(74, token2.kind);
      assertEquals((-1270), token2.endLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1960, javaCharStream0.getEndColumn());
      assertEquals(1960, javaCharStream0.getBeginColumn());
      assertEquals((-1270), javaCharStream0.getEndLine());
      assertEquals((-1270), javaCharStream0.getBeginLine());
      assertEquals(1960, javaCharStream0.getColumn());
      assertEquals((-1270), javaCharStream0.getLine());
      assertEquals("G", token2.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Pu])>io,");
      assertNotNull(stringReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 6673, 33, 6673);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('P', char0);
      assertEquals(6673, javaCharStream0.getEndLine());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(6673, javaCharStream0.getBeginLine());
      assertEquals(6673, javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getEndColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(34, token0.endColumn);
      assertEquals(34, token0.beginColumn);
      assertEquals(6673, token0.endLine);
      assertEquals(6673, token0.beginLine);
      assertEquals(6673, javaCharStream0.getEndLine());
      assertEquals(34, javaCharStream0.getColumn());
      assertEquals(34, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getBeginColumn());
      assertEquals(6673, javaCharStream0.getBeginLine());
      assertEquals(6673, javaCharStream0.getLine());
      assertEquals("u", token0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z$i%G ");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-110);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)42, (byte) (-31), (byte)46, (byte) (-110)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)42, (byte) (-31), (byte)46, (byte) (-110)}, byteArray0);
      assertNotNull(bufferedInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)42, (byte) (-31), (byte)46, (byte) (-110)}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(dataInputStream0, charset0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)42, (byte) (-31), (byte)46, (byte) (-110)}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(inputStreamReader0, 110, (-1443));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)42, (byte) (-31), (byte)46, (byte) (-110)}, byteArray0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertArrayEquals(new byte[] {(byte) (-1), (byte)42, (byte) (-31), (byte)46, (byte) (-110)}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\uFFFD', char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals((-1443), javaCharStream0.getBeginColumn());
      assertEquals((-1443), javaCharStream0.getColumn());
      assertEquals((-1443), javaCharStream0.getEndColumn());
      assertEquals(110, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals(110, javaCharStream0.getLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)42, (byte) (-31), (byte)46, (byte) (-110)}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals((-1443), javaCharStream0.getBeginColumn());
      assertEquals((-1443), javaCharStream0.getColumn());
      assertEquals((-1443), javaCharStream0.getEndColumn());
      assertEquals(110, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals(110, javaCharStream0.getLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte) (-1), (byte)42, (byte) (-31), (byte)46, (byte) (-110)}, byteArray0);
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(103, token0.kind);
      assertEquals((-1442), token0.beginColumn);
      assertEquals(110, token0.endLine);
      assertEquals((-1442), token0.endColumn);
      assertEquals(110, token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals((-1442), javaCharStream0.getBeginColumn());
      assertEquals((-1442), javaCharStream0.getEndColumn());
      assertEquals((-1442), javaCharStream0.getColumn());
      assertEquals(110, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals(110, javaCharStream0.getLine());
      assertEquals("*", token0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"~\"");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 97, 97);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\"', char0);
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getBeginColumn());
      assertEquals(97, javaCharStream0.getBeginLine());
      assertEquals(97, javaCharStream0.getEndColumn());
      assertEquals(97, javaCharStream0.getColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getBeginColumn());
      assertEquals(97, javaCharStream0.getBeginLine());
      assertEquals(97, javaCharStream0.getEndColumn());
      assertEquals(97, javaCharStream0.getColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(98, token0.beginColumn);
      assertEquals(97, token0.beginLine);
      assertEquals(97, token0.endLine);
      assertEquals(98, token0.endColumn);
      assertEquals(90, token0.kind);
      assertEquals(98, javaCharStream0.getEndColumn());
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getBeginLine());
      assertEquals(98, javaCharStream0.getBeginColumn());
      assertEquals(98, javaCharStream0.getColumn());
      assertEquals("~", token0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+kX/Om{iH2\"SH.-");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 124, 124, 1096);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(124, token0.endLine);
      assertEquals(124, token0.beginLine);
      assertEquals(124, token0.beginColumn);
      assertEquals(124, token0.endColumn);
      assertEquals(101, token0.kind);
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals("+", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(125, token1.beginColumn);
      assertEquals(126, token1.endColumn);
      assertEquals(124, token1.beginLine);
      assertEquals(124, token1.endLine);
      assertEquals(74, token1.kind);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(126, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(125, javaCharStream0.getBeginColumn());
      assertEquals(126, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals("kX", token1.toString());
      
      javaParserTokenManager0.defaultLexState = 2425;
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(126, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(125, javaCharStream0.getBeginColumn());
      assertEquals(126, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('O', char0);
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(126, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(125, javaCharStream0.getBeginColumn());
      assertEquals(126, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(127, token2.beginColumn);
      assertEquals(127, token2.endColumn);
      assertEquals(124, token2.endLine);
      assertEquals(104, token2.kind);
      assertEquals(124, token2.beginLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(127, javaCharStream0.getEndColumn());
      assertEquals(127, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(127, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals("/", token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(74, token3.kind);
      assertEquals(124, token3.beginLine);
      assertEquals(124, token3.endLine);
      assertEquals(128, token3.endColumn);
      assertEquals(128, token3.beginColumn);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(128, javaCharStream0.getBeginColumn());
      assertEquals(128, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(128, javaCharStream0.getColumn());
      assertEquals("m", token3.toString());
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(129, token4.beginColumn);
      assertEquals(79, token4.kind);
      assertEquals(124, token4.beginLine);
      assertEquals(129, token4.endColumn);
      assertEquals(124, token4.endLine);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(129, javaCharStream0.getEndColumn());
      assertEquals(129, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(129, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals("{", token4.toString());
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertNotNull(token5);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(130, token5.beginColumn);
      assertEquals(74, token5.kind);
      assertEquals(132, token5.endColumn);
      assertEquals(124, token5.endLine);
      assertEquals(124, token5.beginLine);
      assertNotSame(token5, token1);
      assertNotSame(token5, token0);
      assertNotSame(token5, token4);
      assertNotSame(token5, token3);
      assertNotSame(token5, token2);
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token2));
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(132, javaCharStream0.getEndColumn());
      assertEquals(132, javaCharStream0.getColumn());
      assertEquals(130, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals("iH2", token5.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"-\"");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 13, 410, 110);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\"', char0);
      assertEquals(410, javaCharStream0.getBeginColumn());
      assertEquals(410, javaCharStream0.getColumn());
      assertEquals(410, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getEndLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(410, javaCharStream0.getBeginColumn());
      assertEquals(410, javaCharStream0.getColumn());
      assertEquals(410, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getEndLine());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(411, token0.beginColumn);
      assertEquals(13, token0.beginLine);
      assertEquals(13, token0.endLine);
      assertEquals(102, token0.kind);
      assertEquals(411, token0.endColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(411, javaCharStream0.getColumn());
      assertEquals(411, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(411, javaCharStream0.getBeginColumn());
      assertEquals("-", token0.toString());
      
      javaParserTokenManager1.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(411, javaCharStream0.getColumn());
      assertEquals(411, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(411, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '1'}, charArray0);
      assertNotNull(charArrayReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '1'}, charArray0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 3427, 854, 854);
      assertArrayEquals(new char[] {'\u0000', '1'}, charArray0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertArrayEquals(new char[] {'\u0000', '1'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      assertEquals(854, javaCharStream0.getEndColumn());
      assertEquals(3427, javaCharStream0.getEndLine());
      assertEquals(854, javaCharStream0.getColumn());
      assertEquals(854, javaCharStream0.getBeginColumn());
      assertEquals(3427, javaCharStream0.getLine());
      assertEquals(3427, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'\u0000', '1'}, charArray0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(854, javaCharStream0.getEndColumn());
      assertEquals(3427, javaCharStream0.getEndLine());
      assertEquals(854, javaCharStream0.getColumn());
      assertEquals(854, javaCharStream0.getBeginColumn());
      assertEquals(3427, javaCharStream0.getLine());
      assertEquals(3427, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'\u0000', '1'}, charArray0);
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(3427, token0.beginLine);
      assertEquals(855, token0.endColumn);
      assertEquals(3427, token0.endLine);
      assertEquals(855, token0.beginColumn);
      assertEquals(855, javaCharStream0.getBeginColumn());
      assertEquals(3427, javaCharStream0.getEndLine());
      assertEquals(855, javaCharStream0.getColumn());
      assertEquals(3427, javaCharStream0.getLine());
      assertEquals(3427, javaCharStream0.getBeginLine());
      assertEquals(855, javaCharStream0.getEndColumn());
      assertEquals("1", token0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$T{4+}~UpP");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2672), 113);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('$', char0);
      assertEquals(113, javaCharStream0.getBeginColumn());
      assertEquals(113, javaCharStream0.getColumn());
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals((-2672), javaCharStream0.getLine());
      assertEquals((-2672), javaCharStream0.getBeginLine());
      assertEquals((-2672), javaCharStream0.getEndLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(113, javaCharStream0.getBeginColumn());
      assertEquals(113, javaCharStream0.getColumn());
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals((-2672), javaCharStream0.getLine());
      assertEquals((-2672), javaCharStream0.getBeginLine());
      assertEquals((-2672), javaCharStream0.getEndLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2672), token0.beginLine);
      assertEquals(114, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(114, token0.beginColumn);
      assertEquals((-2672), token0.endLine);
      assertEquals(114, javaCharStream0.getBeginColumn());
      assertEquals(114, javaCharStream0.getEndColumn());
      assertEquals((-2672), javaCharStream0.getLine());
      assertEquals((-2672), javaCharStream0.getBeginLine());
      assertEquals(114, javaCharStream0.getColumn());
      assertEquals((-2672), javaCharStream0.getEndLine());
      assertEquals("T", token0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"S[cgc(W@3b-K[");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 93, 93);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\"', char0);
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(93, javaCharStream0.getColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(93, javaCharStream0.getColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(93, token0.endLine);
      assertEquals(93, token0.beginLine);
      assertEquals(94, token0.endColumn);
      assertEquals(94, token0.beginColumn);
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals("S", token0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NzZ],@OSoq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 17, (-229), 17);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-229), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(17, token0.endLine);
      assertEquals(17, token0.beginLine);
      assertEquals((-227), token0.endColumn);
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals((-227), javaCharStream0.getEndColumn());
      assertEquals((-227), javaCharStream0.getColumn());
      assertEquals((-229), javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals("NzZ", token0.toString());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(']', char0);
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals((-226), javaCharStream0.getEndColumn());
      assertEquals((-226), javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals((-226), javaCharStream0.getColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(17, token1.beginLine);
      assertEquals((-225), token1.beginColumn);
      assertEquals(84, token1.kind);
      assertEquals((-225), token1.endColumn);
      assertEquals(17, token1.endLine);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals((-225), javaCharStream0.getEndColumn());
      assertEquals((-225), javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals((-225), javaCharStream0.getColumn());
      assertEquals(",", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(17, token2.beginLine);
      assertEquals((-224), token2.beginColumn);
      assertEquals(17, token2.endLine);
      assertEquals(86, token2.kind);
      assertEquals((-224), token2.endColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals((-224), javaCharStream0.getEndColumn());
      assertEquals((-224), javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals((-224), javaCharStream0.getColumn());
      assertEquals("@", token2.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 93, 79);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(79, token0.beginColumn);
      assertEquals(93, token0.beginLine);
      assertEquals(79, token0.endColumn);
      assertEquals(93, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals(79, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(79, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals("E", token0.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = 1096;
      StringReader stringReader0 = new StringReader("+kX/0OmR{iH2\"S}H.-");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 124, 124, 1096);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 61);
      assertArrayEquals(new byte[] {(byte)11, (byte)1, (byte)1, (byte)11}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 845);
      assertArrayEquals(new byte[] {(byte)11, (byte)1, (byte)1, (byte)11}, byteArray0);
      assertNotNull(bufferedInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedInputStream0, 104, 83);
      assertArrayEquals(new byte[] {(byte)11, (byte)1, (byte)1, (byte)11}, byteArray0);
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)11, (byte)1, (byte)1, (byte)11}, byteArray0);
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream2, (byte)1);
      assertNotNull(javaParserTokenManager2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager2.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 19.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4f5icp=qu/)");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 116, 116, 32);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringReader stringReader1 = new StringReader("4f5icp=qu/)");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(117, token0.endColumn);
      assertEquals(70, token0.kind);
      assertEquals(116, token0.beginColumn);
      assertEquals(116, token0.endLine);
      assertEquals(116, token0.beginLine);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(116, javaCharStream0.getBeginLine());
      assertEquals(117, javaCharStream0.getColumn());
      assertEquals(117, javaCharStream0.getEndColumn());
      assertEquals(116, javaCharStream0.getEndLine());
      assertEquals(116, javaCharStream0.getLine());
      assertEquals(116, javaCharStream0.getBeginColumn());
      assertEquals("4f", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(118, token1.beginColumn);
      assertEquals(118, token1.endColumn);
      assertEquals(116, token1.beginLine);
      assertEquals(66, token1.kind);
      assertEquals(116, token1.endLine);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(116, javaCharStream0.getBeginLine());
      assertEquals(118, javaCharStream0.getEndColumn());
      assertEquals(118, javaCharStream0.getColumn());
      assertEquals(118, javaCharStream0.getBeginColumn());
      assertEquals(116, javaCharStream0.getEndLine());
      assertEquals(116, javaCharStream0.getLine());
      assertEquals("5", token1.toString());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals('i', char0);
      assertEquals(116, javaCharStream0.getBeginLine());
      assertEquals(119, javaCharStream0.getBeginColumn());
      assertEquals(119, javaCharStream0.getEndColumn());
      assertEquals(116, javaCharStream0.getEndLine());
      assertEquals(116, javaCharStream0.getLine());
      assertEquals(119, javaCharStream0.getColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(116, javaCharStream0.getBeginLine());
      assertEquals(119, javaCharStream0.getBeginColumn());
      assertEquals(119, javaCharStream0.getEndColumn());
      assertEquals(116, javaCharStream0.getEndLine());
      assertEquals(116, javaCharStream0.getLine());
      assertEquals(119, javaCharStream0.getColumn());
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(121, token2.endColumn);
      assertEquals(116, token2.beginLine);
      assertEquals(74, token2.kind);
      assertEquals(120, token2.beginColumn);
      assertEquals(116, token2.endLine);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(116, javaCharStream0.getBeginLine());
      assertEquals(121, javaCharStream0.getEndColumn());
      assertEquals(120, javaCharStream0.getBeginColumn());
      assertEquals(116, javaCharStream0.getEndLine());
      assertEquals(116, javaCharStream0.getLine());
      assertEquals(121, javaCharStream0.getColumn());
      assertEquals("cp", token2.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wS[chc(W@M-K)[");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 476, 74);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(476, token0.endLine);
      assertEquals(74, token0.beginColumn);
      assertEquals(75, token0.endColumn);
      assertEquals(476, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(476, javaCharStream0.getBeginLine());
      assertEquals(476, javaCharStream0.getLine());
      assertEquals(75, javaCharStream0.getEndColumn());
      assertEquals(75, javaCharStream0.getColumn());
      assertEquals(74, javaCharStream0.getBeginColumn());
      assertEquals(476, javaCharStream0.getEndLine());
      assertEquals("wS", token0.toString());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('[', char0);
      assertEquals(476, javaCharStream0.getBeginLine());
      assertEquals(476, javaCharStream0.getLine());
      assertEquals(76, javaCharStream0.getEndColumn());
      assertEquals(76, javaCharStream0.getColumn());
      assertEquals(76, javaCharStream0.getBeginColumn());
      assertEquals(476, javaCharStream0.getEndLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(476, token1.beginLine);
      assertEquals(77, token1.beginColumn);
      assertEquals(476, token1.endLine);
      assertEquals(79, token1.endColumn);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(476, javaCharStream0.getBeginLine());
      assertEquals(79, javaCharStream0.getEndColumn());
      assertEquals(476, javaCharStream0.getLine());
      assertEquals(77, javaCharStream0.getBeginColumn());
      assertEquals(476, javaCharStream0.getEndLine());
      assertEquals(79, javaCharStream0.getColumn());
      assertEquals("chc", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(80, token2.endColumn);
      assertEquals(80, token2.beginColumn);
      assertEquals(77, token2.kind);
      assertEquals(476, token2.beginLine);
      assertEquals(476, token2.endLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(476, javaCharStream0.getBeginLine());
      assertEquals(80, javaCharStream0.getEndColumn());
      assertEquals(80, javaCharStream0.getBeginColumn());
      assertEquals(476, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getColumn());
      assertEquals(476, javaCharStream0.getEndLine());
      assertEquals("(", token2.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+_<OhL8V!f");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 1639, 1639, 32);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringReader stringReader1 = new StringReader("n=u5R");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(101, token0.kind);
      assertEquals(1639, token0.endLine);
      assertEquals(1639, token0.endColumn);
      assertEquals(1639, token0.beginColumn);
      assertEquals(1639, token0.beginLine);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(1639, javaCharStream0.getBeginLine());
      assertEquals(1639, javaCharStream0.getEndColumn());
      assertEquals(1639, javaCharStream0.getBeginColumn());
      assertEquals(1639, javaCharStream0.getColumn());
      assertEquals(1639, javaCharStream0.getLine());
      assertEquals(1639, javaCharStream0.getEndLine());
      assertEquals("+", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1640, token1.endColumn);
      assertEquals(1639, token1.endLine);
      assertEquals(1639, token1.beginLine);
      assertEquals(1640, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1639, javaCharStream0.getBeginLine());
      assertEquals(1640, javaCharStream0.getEndColumn());
      assertEquals(1640, javaCharStream0.getBeginColumn());
      assertEquals(1639, javaCharStream0.getLine());
      assertEquals(1639, javaCharStream0.getEndLine());
      assertEquals(1640, javaCharStream0.getColumn());
      assertEquals("_", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1641, token2.beginColumn);
      assertEquals(88, token2.kind);
      assertEquals(1639, token2.beginLine);
      assertEquals(1641, token2.endColumn);
      assertEquals(1639, token2.endLine);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1639, javaCharStream0.getBeginLine());
      assertEquals(1641, javaCharStream0.getEndColumn());
      assertEquals(1641, javaCharStream0.getBeginColumn());
      assertEquals(1639, javaCharStream0.getLine());
      assertEquals(1639, javaCharStream0.getEndLine());
      assertEquals(1641, javaCharStream0.getColumn());
      assertEquals("<", token2.toString());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals('O', char0);
      assertEquals(1639, javaCharStream0.getBeginLine());
      assertEquals(1642, javaCharStream0.getEndColumn());
      assertEquals(1642, javaCharStream0.getBeginColumn());
      assertEquals(1639, javaCharStream0.getLine());
      assertEquals(1639, javaCharStream0.getEndLine());
      assertEquals(1642, javaCharStream0.getColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1639, javaCharStream0.getBeginLine());
      assertEquals(1642, javaCharStream0.getEndColumn());
      assertEquals(1642, javaCharStream0.getBeginColumn());
      assertEquals(1639, javaCharStream0.getLine());
      assertEquals(1639, javaCharStream0.getEndLine());
      assertEquals(1642, javaCharStream0.getColumn());
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1639, token3.beginLine);
      assertEquals(74, token3.kind);
      assertEquals(1639, token3.endLine);
      assertEquals(1643, token3.beginColumn);
      assertEquals(1646, token3.endColumn);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertEquals(1646, javaCharStream0.getEndColumn());
      assertEquals(1639, javaCharStream0.getBeginLine());
      assertEquals(1646, javaCharStream0.getColumn());
      assertEquals(1643, javaCharStream0.getBeginColumn());
      assertEquals(1639, javaCharStream0.getLine());
      assertEquals(1639, javaCharStream0.getEndLine());
      assertEquals("hL8V", token3.toString());
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertNotNull(token4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1639, token4.endLine);
      assertEquals(1647, token4.endColumn);
      assertEquals(1647, token4.beginColumn);
      assertEquals(89, token4.kind);
      assertEquals(1639, token4.beginLine);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertEquals(1647, javaCharStream0.getBeginColumn());
      assertEquals(1639, javaCharStream0.getBeginLine());
      assertEquals(1647, javaCharStream0.getColumn());
      assertEquals(1639, javaCharStream0.getLine());
      assertEquals(1639, javaCharStream0.getEndLine());
      assertEquals(1647, javaCharStream0.getEndColumn());
      assertEquals("!", token4.toString());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$T{4+}~UpP");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 37, 32);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(37, token0.beginLine);
      assertEquals(33, token0.endColumn);
      assertEquals(37, token0.endLine);
      assertEquals(32, token0.beginColumn);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals(33, javaCharStream0.getEndColumn());
      assertEquals("$T", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(79, token1.kind);
      assertEquals(37, token1.endLine);
      assertEquals(34, token1.beginColumn);
      assertEquals(34, token1.endColumn);
      assertEquals(37, token1.beginLine);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(34, javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(34, javaCharStream0.getBeginColumn());
      assertEquals(34, javaCharStream0.getEndColumn());
      assertEquals("{", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(37, token2.endLine);
      assertEquals(35, token2.beginColumn);
      assertEquals(66, token2.kind);
      assertEquals(35, token2.endColumn);
      assertEquals(37, token2.beginLine);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(35, javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(35, javaCharStream0.getBeginColumn());
      assertEquals(35, javaCharStream0.getEndColumn());
      assertEquals("4", token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(36, token3.endColumn);
      assertEquals(37, token3.endLine);
      assertEquals(101, token3.kind);
      assertEquals(37, token3.beginLine);
      assertEquals(36, token3.beginColumn);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(36, javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(36, javaCharStream0.getEndColumn());
      assertEquals("+", token3.toString());
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(37, token4.beginColumn);
      assertEquals(37, token4.beginLine);
      assertEquals(80, token4.kind);
      assertEquals(37, token4.endColumn);
      assertEquals(37, token4.endLine);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertEquals(37, javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(37, javaCharStream0.getBeginColumn());
      assertEquals("}", token4.toString());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(37, javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(37, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=8'9P@A|*z");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 18, 24, 34);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(87, token0.kind);
      assertEquals(18, token0.beginLine);
      assertEquals(24, token0.endColumn);
      assertEquals(24, token0.beginColumn);
      assertEquals(18, token0.endLine);
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(24, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(24, javaCharStream0.getEndColumn());
      assertEquals("=", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(18, token1.beginLine);
      assertEquals(66, token1.kind);
      assertEquals(25, token1.endColumn);
      assertEquals(18, token1.endLine);
      assertEquals(25, token1.beginColumn);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(25, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(25, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(25, javaCharStream0.getBeginColumn());
      assertEquals("8", token1.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      
      Token token2 = token_GTToken0.specialToken;
      assertNull(token2);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(25, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(25, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(25, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'>*e6");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2672), 50);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\'', char0);
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals((-2672), javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals((-2672), javaCharStream0.getBeginLine());
      assertEquals((-2672), javaCharStream0.getLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals((-2672), javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals((-2672), javaCharStream0.getBeginLine());
      assertEquals((-2672), javaCharStream0.getLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(51, token0.beginColumn);
      assertEquals((-2672), token0.beginLine);
      assertEquals(124, token0.kind);
      assertEquals(51, token0.endColumn);
      assertEquals((-2672), token0.endLine);
      assertEquals((-2672), javaCharStream0.getEndLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals((-2672), javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals((-2672), javaCharStream0.getLine());
      assertEquals(">", token0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(51, token0.beginColumn);
      assertEquals((-2672), token0.beginLine);
      assertEquals(124, token0.kind);
      assertEquals(51, token0.endColumn);
      assertEquals((-2672), token0.endLine);
      assertEquals((-2672), javaCharStream0.getEndLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals((-2672), javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals((-2672), javaCharStream0.getLine());
      assertEquals(">", token0.toString());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uR;NEY0kI:kAzzW@");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 97, (-683));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('u', char0);
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals((-683), javaCharStream0.getColumn());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals((-683), javaCharStream0.getBeginColumn());
      assertEquals(97, javaCharStream0.getBeginLine());
      assertEquals((-683), javaCharStream0.getEndColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals((-683), javaCharStream0.getColumn());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals((-683), javaCharStream0.getBeginColumn());
      assertEquals(97, javaCharStream0.getBeginLine());
      assertEquals((-683), javaCharStream0.getEndColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(97, token0.endLine);
      assertEquals(97, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-682), token0.beginColumn);
      assertEquals((-682), token0.endColumn);
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals((-682), javaCharStream0.getBeginColumn());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals((-682), javaCharStream0.getColumn());
      assertEquals(97, javaCharStream0.getBeginLine());
      assertEquals((-682), javaCharStream0.getEndColumn());
      assertEquals("R", token0.toString());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      StringReader stringReader0 = new StringReader("Pu])>io,");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 6673, 6673, 6673);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.BeginToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4f5icp=qu/)");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 116, 116, 32);
      StringReader stringReader1 = new StringReader("4f5icp=qu/)");
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<EOF>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 102, 102, 102);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 102, (-1), 24);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("5^'");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 16, 567, 49);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 16, column 570.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = '&';
      charArray0[2] = '2';
      charArray0[3] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      charArrayReader0.markSupported();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<STRING_LITERAL>");
      StringReader stringReader1 = new StringReader("<STRING_LITERAL>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3360), 97);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("kQtR^:N^;m[");
      StringReader stringReader1 = new StringReader("kQtR^:N^;m[");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2581, 2581);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E%=");
      StringReader stringReader1 = new StringReader("static");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-3136), (-3136), 3022);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pushbackReader0);
      char[] charArray0 = new char[2];
      charArray0[0] = '}';
      charArray0[1] = '\"';
      pushbackReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 43, 43);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      PushbackReader pushbackReader1 = new PushbackReader(pushbackReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader1, 97, 16);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`sk2W4");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 124, 124, 45);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U@FXyP");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1324), 43);
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E%=");
      StringReader stringReader1 = new StringReader("static");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-3136), (-3136), 3022);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      stringReader1.close();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      StringReader stringReader1 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1671, 1671, 124);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaCharStream0.ReadByte();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<LETTER>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2638, 42);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pushbackReader0);
      char[] charArray0 = new char[2];
      charArray0[0] = '}';
      charArray0[1] = '\"';
      pushbackReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 2616, (-1866), 0);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      StringReader stringReader1 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1671, 1671, 124);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaCharStream0.ReadByte();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = '&';
      charArray0[2] = '2';
      charArray0[3] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1172), 51, 1935);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0!k'+$FX$Acf;");
      StringReader stringReader1 = new StringReader("0!k'+$FX$Acf;");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.BeginToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 6.  Encountered: \"$\" (36), after : \"\\'+\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0!k'+$FX$Acf;");
      StringReader stringReader1 = new StringReader("0!k'+$FX$Acf;");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaCharStream0.ReadByte();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.jjnewStateCnt = 81;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 6.  Encountered: \"F\" (70), after : \"\\'$\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[a^OrMy5o-rK]K=tQ");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaCharStream0.ReadByte();
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 2581, 2952, 36);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StringReader stringReader0 = new StringReader("s?e");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-598), 9);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '@';
      charArray0[1] = 'A';
      charArray0[2] = 'V';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 'A', (-2882), 111);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = new Token();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\u000b\" (11), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = 'p';
      charArray0[2] = 'L';
      charArray0[4] = 'A';
      charArray0[4] = 'I';
      charArray0[5] = '.';
      charArray0[6] = '`';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-2102), 15, 3427);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }
}
