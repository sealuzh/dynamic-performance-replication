/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 04 06:18:15 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealBufferedSource_ESTest extends RealBufferedSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = ByteString.encodeUtf8("V6dsZy;*P47$pyPCe");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf(byteString0, 4098L);
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = pipe0.buffer;
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteArray((-120L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -120
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)64, (-1402L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-1402 toIndex=9223372036854775807
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.snapshot();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[2] = (byte)95;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte)104;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      assertTrue(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Pipe pipe0 = new Pipe(831L);
      Source source0 = pipe0.source();
      pipe0.sourceClosed = false;
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(source0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      source0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      inflaterSource0.timeout();
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)70;
      realBufferedSink0.write(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)70, (long) (byte)70, 831L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Pipe pipe0 = new Pipe(71776119061217280L);
      Buffer buffer0 = pipe0.buffer;
      Inflater inflater0 = new Inflater();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-45);
      inflater0.setInput(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.decodeBase64("");
      realBufferedSource0.indexOfElement(byteString0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      try { 
        realBufferedSource1.readUtf8LineStrict(1224L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      realBufferedSource0.rangeEquals(4L, byteString0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      realBufferedSource2.readUtf8Line();
      long long0 = realBufferedSource0.indexOf((byte) (-32), 4L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      HashingSource hashingSource0 = HashingSource.md5(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-50);
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      pipe_PipeSource0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      realBufferedSink0.write(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[0];
      String string0 = realBufferedSource0.toString();
      assertEquals("buffer([size=0])", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Inflater inflater0 = new Inflater(true);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer();
      InflaterSource inflaterSource0 = new InflaterSource(buffer1, inflater0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSource0.buffer);
      buffer2.writeLongLe(0L);
      realBufferedSource0.indexOf((byte) (-16), 0L, 1L);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer2);
      realBufferedSource2.skip(0L);
      boolean boolean0 = realBufferedSource1.request(8L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      pipe_PipeSource0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      realBufferedSink0.write(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = realBufferedSource0.select(options0);
      assertEquals((-1), int0);
      
      String string0 = realBufferedSource0.toString();
      assertEquals("buffer([size=0])", string0);
      
      try { 
        realBufferedSource0.readIntLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Inflater inflater0 = new Inflater(true);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer();
      InflaterSource inflaterSource0 = new InflaterSource(buffer1, inflater0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSource0.buffer);
      buffer2.writeLongLe(0L);
      byte[] byteArray0 = new byte[0];
      realBufferedSink2.write(byteArray0);
      realBufferedSource1.read(buffer2, 3L);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(inflaterSource0);
      try { 
        realBufferedSource2.readUtf8LineStrict(1000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Pipe pipe0 = new Pipe(32L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Inflater inflater0 = new Inflater(false);
      Inflater inflater1 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      realBufferedSink1.write(byteArray0);
      long long0 = realBufferedSource0.read(buffer0, 4L);
      assertEquals((-1L), long0);
      
      boolean boolean0 = realBufferedSource0.request(100000L);
      assertFalse(boolean0);
      
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = 338L;
      try { 
        realBufferedSource0.skip(338L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Inflater inflater0 = new Inflater();
      Inflater inflater1 = new Inflater(false);
      Source source0 = pipe0.source();
      InflaterSource inflaterSource0 = new InflaterSource(source0, inflater1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)2;
      realBufferedSink1.write(byteArray0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.read(buffer1, (long) (byte)2);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink1.buffer);
      int int0 = realBufferedSource1.readInt();
      assertEquals(33686018, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = false;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      String string0 = realBufferedSource0.readUtf8Line();
      assertNull(string0);
      
      long long0 = realBufferedSource0.readAll(buffer0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.write(byteArray0);
      Inflater inflater0 = new Inflater(false);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.readUtf8Line();
      int int0 = realBufferedSource1.readUtf8CodePoint();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Inflater inflater0 = new Inflater(false);
      Inflater inflater1 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSource0.buffer();
      try { 
        realBufferedSource0.readIntLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      realBufferedSink0.write(byteArray0);
      Inflater inflater0 = new Inflater(false);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString byteString0 = ByteString.decodeBase64("");
      realBufferedSource1.indexOfElement(byteString0);
      // Undeclared exception!
      try { 
        realBufferedSource0.request((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.read(buffer0, 8L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      try { 
        realBufferedSource0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      realBufferedSink0.write(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(byteArray0, 1324, 49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=1324 byteCount=49
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Pipe pipe0 = new Pipe(32L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      try { 
        realBufferedSource0.readByteString(32L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)25;
      realBufferedSink0.write(byteArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.read(byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSource1.buffer.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      realBufferedSource0.read(buffer1, 100000000000000L);
      realBufferedSource1.request((byte)25);
      int int0 = realBufferedSource1.read(byteArray0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)45;
      realBufferedSink0.write(byteArray0);
      Inflater inflater0 = new Inflater(false);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8Line();
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource1);
      int int0 = realBufferedSource3.readUtf8CodePoint();
      assertEquals(111, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.readUtf8();
      try { 
        realBufferedSource0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = false;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)25;
      realBufferedSink0.write(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.read(byteArray0);
      long long0 = realBufferedSource0.read(realBufferedSink0.buffer, (long) (byte)51);
      assertEquals((-1L), long0);
      
      realBufferedSource0.request(10000L);
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)70;
      realBufferedSink0.write(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource1.indexOf((byte) (-44), (long) (byte) (-44), 4L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-44 toIndex=4
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = 4L;
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      try { 
        realBufferedSource0.require(4L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Inflater inflater0 = new Inflater(true);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer();
      InflaterSource inflaterSource0 = new InflaterSource(buffer1, inflater0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSource0.buffer);
      buffer2.writeLongLe(0L);
      byte[] byteArray0 = new byte[0];
      realBufferedSink2.write(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      buffer0.snapshot();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      gzipSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.require((-1607L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1607
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      HashingSource hashingSource0 = HashingSource.md5(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)29;
      try { 
        realBufferedSource0.exhausted();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Inflater inflater0 = new Inflater(false);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer();
      InflaterSource inflaterSource0 = new InflaterSource(buffer1, inflater0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSource0.buffer);
      buffer2.writeLongLe(0L);
      byte[] byteArray0 = new byte[0];
      realBufferedSink2.write(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)72, (long) (byte)72, (long) (byte)72);
      buffer0.toString();
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteArray((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = false;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readAll((Sink) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = 7L;
      Pipe pipe0 = new Pipe(7L);
      pipe0.sourceClosed = true;
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      long long1 = 1L;
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-124), 1L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Pipe pipe0 = new Pipe(831L);
      Source source0 = pipe0.source();
      pipe0.sourceClosed = false;
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(source0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer0 = realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)38;
      realBufferedSink0.write(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer0, (-181L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -181
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      try { 
        realBufferedSource0.require(4L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Inflater inflater0 = new Inflater(false);
      pipe0.sinkClosed = false;
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      buffer0.outputStream();
      inflater0.end();
      inflaterSource0.refill();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      realBufferedSource0.toString();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      realBufferedSource2.inputStream();
      realBufferedSource2.readUtf8Line();
      realBufferedSource1.readAll(realBufferedSource0.buffer);
      ByteString.decodeBase64("buffer(okio.InflaterSource@9)");
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Inflater has been closed
         //
         verifyException("java.util.zip.Inflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)100;
      realBufferedSource0.inputStream();
      realBufferedSource0.readUtf8Line();
      realBufferedSource0.readAll(buffer0);
      ByteString byteString0 = ByteString.decodeBase64("closed");
      // Undeclared exception!
      try { 
        byteString0.getByte((byte)100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      HashingSource hashingSource0 = HashingSource.md5(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      long long0 = (-516L);
      try { 
        realBufferedSource0.readByteString();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.write(byteArray0);
      realBufferedSource0.indexOf((byte)118, 0L, 762L);
      realBufferedSource0.skip((-1L));
      boolean boolean0 = realBufferedSource0.request(1707L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      realBufferedSink0.write(byteArray0);
      long long0 = realBufferedSource0.indexOf((byte) (-12), (long) (byte)70, 831L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      CharBuffer charBuffer0 = CharBuffer.allocate((byte)64);
      Charset charset0 = Charset.defaultCharset();
      charset0.encode(charBuffer0);
      charset0.encode("Vji0)GKNnm\"2d");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset charset1 = Charset.defaultCharset();
      try { 
        realBufferedSource0.readString((long) (byte)64, charset1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Pipe pipe0 = new Pipe(32L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      Inflater inflater0 = new Inflater(false);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(pipe_PipeSource0);
      ByteString.decodeBase64("");
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(pipe_PipeSource0);
      // Undeclared exception!
      try { 
        realBufferedSource1.readUtf8Line();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      ByteString.encodeUtf8("");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)93, 4L, 4L);
      try { 
        realBufferedSource0.skip(8L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      boolean boolean0 = realBufferedSource0.closed;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.readUtf8Line();
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Pipe pipe0 = new Pipe(32L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      byte[] byteArray0 = new byte[1];
      long long0 = realBufferedSource0.indexOf((byte)0, 32L, 831L);
      assertEquals((-1L), long0);
      
      ByteString byteString0 = ByteString.decodeBase64("closed");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(pipe_PipeSource0);
      // Undeclared exception!
      try { 
        realBufferedSource1.indexOf(byteString0, 2147483647L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j;(gYndtxp:K|\"_");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      String string0 = realBufferedSource0.readUtf8();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j;(gYndtxp:K|\"_");
      pipe0.sinkClosed = false;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)15;
      realBufferedSink0.write(byteArray0);
      realBufferedSource0.indexOf((byte)55, (long) (byte)1, (long) (byte)48);
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.skip(1185L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      Inflater inflater0 = new Inflater();
      Inflater inflater1 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      realBufferedSink1.write(byteArray0);
      realBufferedSource0.read(buffer0, 4L);
      long long0 = 100000L;
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      buffer0.snapshot();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      gzipSource0.close();
      realBufferedSource0.timeout();
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8(1284L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000L);
      Pipe pipe1 = new Pipe(4L);
      Buffer buffer0 = pipe1.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[0];
      realBufferedSink0.write(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.read(byteArray0);
      long long0 = realBufferedSource0.read(realBufferedSink0.buffer, (long) (byte)25);
      assertEquals((-1L), long0);
      
      boolean boolean0 = realBufferedSource0.request(4L);
      assertFalse(boolean0);
      
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.exhausted();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      try { 
        realBufferedSource1.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.write(byteArray0);
      Inflater inflater0 = new Inflater(false);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString.decodeBase64("");
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.readUtf8Line();
      int int0 = realBufferedSource1.readUtf8CodePoint();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte byte0 = (byte)64;
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      CharBuffer charBuffer0 = CharBuffer.allocate((byte)0);
      Charset charset0 = Charset.defaultCharset();
      charset0.encode(charBuffer0);
      charset0.encode("okio.GzipSource");
      try { 
        realBufferedSource0.readString(4948L, charset0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      ByteString byteString0 = ByteString.decodeBase64("");
      realBufferedSource0.indexOfElement(byteString0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(((RealBufferedSink) bufferedSink0).buffer);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteArray((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.exhausted();
      try { 
        realBufferedSource0.readUtf8LineStrict(4294967295L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j;(gYndtxp:K|\"_");
      pipe0.sinkClosed = false;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      realBufferedSource0.readFully(byteArray0);
      assertEquals(0, byteArray0.length);
      
      try { 
        realBufferedSource0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Inflater inflater0 = new Inflater(true);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer();
      InflaterSource inflaterSource0 = new InflaterSource(buffer1, inflater0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSource0.buffer);
      buffer2.writeLongLe(0L);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource2.readUtf8Line();
      try { 
        realBufferedSource2.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater(0, true);
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      boolean boolean0 = realBufferedSource0.exhausted();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)113;
      long long0 = realBufferedSource0.read(buffer1, (long) (byte)0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      buffer0.snapshot();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      gzipSource0.close();
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)25;
      realBufferedSink0.write(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.read(byteArray0);
      long long0 = realBufferedSource0.read(realBufferedSink0.buffer, (long) (byte)51);
      assertEquals((-1L), long0);
      
      boolean boolean0 = realBufferedSource0.request(10000L);
      assertFalse(boolean0);
      
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals((-1), int0);
      
      long long1 = realBufferedSource0.indexOf((byte)25);
      assertEquals((-1L), long1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000L);
      Buffer buffer0 = pipe0.buffer;
      ByteString.encodeUtf8("V6dsZy;*P47$pyPCe");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = ByteString.encodeUtf8("V6dsZy;*P47$pyPCe");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.rangeEquals(10000000000L, byteString0);
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Inflater inflater0 = new Inflater(false);
      pipe0.sinkClosed = false;
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      buffer0.outputStream();
      inflater0.end();
      inflaterSource0.refill();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      realBufferedSource0.toString();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-45);
      inflater0.setInput(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8(4L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Inflater has been closed
         //
         verifyException("java.util.zip.Inflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Pipe pipe0 = new Pipe(831L);
      Source source0 = pipe0.source();
      pipe0.sourceClosed = true;
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(source0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      byte byte0 = (byte)2;
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        realBufferedSource0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Inflater inflater0 = new Inflater();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.writeLongLe(1631L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-48);
      realBufferedSink0.write(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer2, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.write(byteArray0);
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)70;
      realBufferedSink1.write(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-12), (-747L), (-1016L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-747 toIndex=-1016
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Pipe pipe0 = new Pipe(32L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      byte[] byteArray0 = new byte[10];
      realBufferedSource0.indexOf((byte)0, 32L, 831L);
      ByteString.decodeBase64("WM`-*n:Ip[s");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource1.rangeEquals((-1L), (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[5];
      buffer0.writeUtf8("W", (int) (byte)0, (int) (byte)0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-108);
      buffer0.writeDecimalLong(9223372036854775807L);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)0;
      realBufferedSource0.read(byteArray0, 0, (int) (byte)0);
      buffer0.readUtf8((long) (byte)0);
      Charset.defaultCharset();
      realBufferedSource0.indexOf((byte)0, 673L);
      // Undeclared exception!
      try { 
        Charset.isSupported((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)0;
      realBufferedSource0.read(byteArray0, 0, (int) (byte)0);
      buffer0.readUtf8((long) (byte)0);
      long long0 = 100000L;
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        Charset.isSupported((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000L);
      Pipe pipe1 = new Pipe(4L);
      Buffer buffer0 = pipe1.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[0];
      realBufferedSink0.write(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.read(byteArray0);
      realBufferedSource0.readFully(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ByteString.encodeUtf8("V6dsZy;*P47$pyPCe");
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      try { 
        realBufferedSource0.request(1875L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      Inflater inflater0 = new Inflater(false);
      inflater0.setInput(byteArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString byteString0 = ByteString.decodeBase64("");
      realBufferedSource1.indexOfElement(byteString0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(((RealBufferedSink) bufferedSink0).buffer);
      // Undeclared exception!
      try { 
        realBufferedSource1.readUtf8LineStrict((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Inflater inflater0 = new Inflater(false);
      Inflater inflater1 = new Inflater(false);
      Buffer buffer0 = new Buffer();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater1);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      Inflater inflater2 = new Inflater();
      InflaterSource inflaterSource1 = new InflaterSource(hashingSource0, inflater2);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      realBufferedSink0.write(byteArray0);
      try { 
        realBufferedSource0.read(realBufferedSink0.buffer, 4L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      HashingSource hashingSource0 = HashingSource.md5(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      long long0 = (-533L);
      try { 
        realBufferedSource0.readByteString();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.readUtf8Line();
      try { 
        realBufferedSource1.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte byte0 = (byte) (-112);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-112), (-1725L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-1725 toIndex=9223372036854775807
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-48);
      byte byte0 = (byte)0;
      byteArray0[4] = (byte)0;
      int int0 = 0;
      // Undeclared exception!
      try { 
        realBufferedSource0.read(byteArray0, 0, (int) (byte)13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=5 offset=0 byteCount=13
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      buffer0.snapshot();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      gzipSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8(1284L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000L);
      Pipe pipe1 = new Pipe(4L);
      Buffer buffer0 = pipe1.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[0];
      realBufferedSink0.write(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.readFully(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      byte[] byteArray0 = new byte[1];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readByteArray(4L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      GzipSource gzipSource0 = new GzipSource(buffer0);
      buffer0.snapshot();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      gzipSource0.close();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      // Undeclared exception!
      try { 
        realBufferedSource2.readUtf8((-13L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -13
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict((long) (byte) (-12));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -12
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Pipe pipe0 = new Pipe(831L);
      Source source0 = pipe0.source();
      pipe0.sourceClosed = true;
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(source0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[10];
      realBufferedSource0.closed = true;
      inflater0.setInput(byteArray0);
      HashingSource hashingSource0 = HashingSource.sha256(source0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8((long) (byte)38);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)72, (long) (byte)72, (long) (byte)72);
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      realBufferedSink0.write(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict((long) (byte) (-12));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -12
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      byte[] byteArray0 = new byte[3];
      realBufferedSource1.close();
      byteArray0[0] = (byte)64;
      // Undeclared exception!
      try { 
        realBufferedSource1.read(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = 4L;
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte) (-66), 4L);
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = ByteString.encodeUtf8("V6dsZy;*P47$pyPCe");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.rangeEquals(100000L, byteString0);
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      realBufferedSource1.read(byteArray0);
      realBufferedSource1.request(4L);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Inflater inflater0 = new Inflater();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource1.readByteString();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte)78;
      byteString0.rangeEquals(385, byteArray0, (int) (byte) (-64), (int) (byte) (-64));
      realBufferedSource1.rangeEquals((-1316L), byteString0);
      GzipSource gzipSource0 = new GzipSource(realBufferedSource1);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(gzipSource0);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource0);
      RealBufferedSource realBufferedSource4 = new RealBufferedSource(realBufferedSource1);
      realBufferedSource4.readUtf8Line();
      byte byte0 = (byte) (-32);
      ByteString[] byteStringArray0 = new ByteString[7];
      // Undeclared exception!
      try { 
        HashingSink.hmacSha512(realBufferedSource0.buffer, byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)72, (long) (byte)72, (long) (byte)72);
      realBufferedSource0.readByteArray();
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      realBufferedSink0.write(byteArray0);
      Inflater inflater0 = new Inflater(false);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource1.request(3L);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource2.readByteString((-634L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -634
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Inflater inflater0 = new Inflater(false);
      pipe0.sinkClosed = false;
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      buffer0.outputStream();
      inflater0.end();
      inflaterSource0.refill();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.exhausted();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Inflater has been closed
         //
         verifyException("java.util.zip.Inflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      byte[] byteArray0 = new byte[3];
      try { 
        realBufferedSource1.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Inflater inflater0 = new Inflater(true);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer();
      InflaterSource inflaterSource0 = new InflaterSource(buffer1, inflater0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      realBufferedSource1.buffer.writeLongLe((-338L));
      // Undeclared exception!
      try { 
        realBufferedSource1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xae
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      realBufferedSource0.rangeEquals(4L, byteString0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      realBufferedSource2.readUtf8Line();
      try { 
        realBufferedSource2.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[0];
      ByteString.decodeBase64("V6dsZy;*P47$pyPCe");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((ByteString) null, 1542L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha256(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha256(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte byte0 = (byte)0;
      try { 
        realBufferedSource0.indexOf((byte)0, (long) (byte)0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)70, 4L, (-30L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=4 toIndex=-30
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.write(byteArray0);
      Inflater inflater0 = new Inflater(false);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString.decodeBase64("");
      realBufferedSource1.read(buffer0, 1886L);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      try { 
        realBufferedSource1.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = realBufferedSource0.indexOf((byte)70, (long) (byte)70);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater(0, true);
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.exhausted();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)16;
      byteArray0[8] = (byte) (-9);
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, (-218), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Pipe pipe0 = new Pipe(71776119061217280L);
      Buffer buffer0 = pipe0.buffer;
      Inflater inflater0 = new Inflater();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-45);
      byteArray0[3] = (byte) (-112);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.write(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      try { 
        realBufferedSource0.readUtf8LineStrict(18L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=4 content=d3d30090\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = false;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8Line();
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer0, (-181L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -181
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Source source0 = pipe0.source();
      Inflater inflater0 = new Inflater();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-36);
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte) (-50);
      byteArray0[8] = (byte) (-1);
      inflater0.inflate(byteArray0);
      InflaterSource inflaterSource0 = new InflaterSource(source0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte)70;
      realBufferedSink0.write(byteArray1);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-68), 1000000000000L, 4L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=1000000000000 toIndex=4
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      pipe_PipeSource0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteString byteString0 = ByteString.encodeUtf8("OB");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf(byteString0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSink0.buffer);
      try { 
        realBufferedSource2.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.read(realBufferedSource0.buffer, 1578L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)51;
      realBufferedSource1.indexOf((byte)2);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)64;
      realBufferedSource0.read(byteArray0);
      realBufferedSource0.request((byte)64);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      try { 
        realBufferedSource2.readByteString((long) (byte)64);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readIntLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      try { 
        realBufferedSource0.readUtf8Line();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      pipe_PipeSource0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      pipe0.sourceClosed = true;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      realBufferedSink0.write(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[1];
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.exhausted();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0, (long) (byte)111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[4];
      buffer0.writeDecimalLong((-1918L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      realBufferedSource0.readShortLe();
      Buffer buffer1 = bufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      realBufferedSink0.write(byteArray0);
      realBufferedSource0.read(((RealBufferedSink) bufferedSink0).buffer, (long) (short)12589);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      try { 
        realBufferedSource0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource.sha256(inflaterSource0);
      Inflater inflater1 = new Inflater(true);
      InflaterSource inflaterSource1 = new InflaterSource(buffer0, inflater1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.outputStream();
      inflater0.end();
      inflaterSource0.refill();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(inflaterSource0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      realBufferedSource2.toString();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-112);
      inflater1.setInput(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource1.readUtf8((-1417L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1417
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Inflater inflater0 = new Inflater(true);
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink1.buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)2;
      realBufferedSink1.write(byteArray0);
      long long0 = realBufferedSource0.read(realBufferedSink0.buffer, 15L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Inflater inflater0 = new Inflater();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`F-Ajc#");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)95;
      realBufferedSource0.close();
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)48;
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      Inflater inflater0 = new Inflater(false);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString byteString0 = ByteString.decodeBase64("");
      realBufferedSource1.indexOfElement(byteString0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(((RealBufferedSink) bufferedSink0).buffer);
      // Undeclared exception!
      try { 
        realBufferedSource1.readUtf8LineStrict((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Pipe pipe0 = new Pipe(831L);
      Source source0 = pipe0.source();
      pipe0.sourceClosed = false;
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(source0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      source0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)70;
      realBufferedSink0.write(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)70, (long) (byte)70, 831L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Pipe pipe0 = new Pipe(831L);
      Source source0 = pipe0.source();
      pipe0.sourceClosed = true;
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(source0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      realBufferedSink0.write(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(realBufferedSink0.buffer, 710L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      Inflater inflater1 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater1);
      buffer0.outputStream();
      inflater1.end();
      inflaterSource0.refill();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      realBufferedSource0.toString();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-112);
      inflater0.setInput(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8((long) (byte) (-112));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -112
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      try { 
        realBufferedSource0.readUtf8(19L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte byte0 = (byte)64;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      try { 
        realBufferedSource1.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Pipe pipe0 = new Pipe(831L);
      Source source0 = pipe0.source();
      pipe0.sourceClosed = true;
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(source0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      realBufferedSink0.write(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(realBufferedSink0.buffer, 710L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.exhausted();
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }
}
