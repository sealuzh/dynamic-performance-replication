/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 23:20:30 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.ParseException;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParser_ESTest extends JavaParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      JavaParser.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      JavaParser javaParser0 = new JavaParser("An interface cannot have initializers");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ResultType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.EnumDeclaration((-207));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "=8NA]axn5'nlAh:7/";
      StringReader stringReader0 = new StringReader("=8NA]axn5'nlAh:7/");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      int int0 = (-716);
      EvoSuiteFile evoSuiteFile0 = null;
      try { 
        javaParser0.VariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: =
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~p+_zM$g*{In||DSa`(");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 74, 74, 74);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParser0.MultiplicativeExpression();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(74, javaCharStream0.getLine());
      assertEquals(76, javaCharStream0.getColumn());
      assertEquals(74, javaCharStream0.getEndLine());
      assertEquals(76, javaCharStream0.getBeginColumn());
      assertEquals(74, javaCharStream0.getBeginLine());
      assertEquals(76, javaCharStream0.getEndColumn());
      
      try { 
        javaParser0.PrimaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 74, column 76.  Encountered: +
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", column ");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: ,
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)90;
      byteArray0[0] = (byte)90;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J@mbA-");
      assertFalse(boolean0);
      
      byteArrayInputStream0.reset();
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      javaParser0.VariableInitializer();
      assertFalse(javaParser0.lookingAhead);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wPk9;m");
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ForInit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#PRfc@lXmF9v-#{c");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.VariableDeclarator();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Java Parser Version 1.1:  File ");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ExplicitConstructorInvocation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: Java
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-21), (byte)100, (byte)100, (byte)102, (byte)34, (byte)82, (byte)35}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(239, int0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-21), (byte)100, (byte)100, (byte)102, (byte)34, (byte)82, (byte)35}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-21), (byte)100, (byte)100, (byte)102, (byte)34, (byte)82, (byte)35}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      byteArrayInputStream0.reset();
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-21), (byte)100, (byte)100, (byte)102, (byte)34, (byte)82, (byte)35}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser0.Initializer();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser1.lookingAhead);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParser1.IfStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";^tn");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.CompilationUnit();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: ^
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)63}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)63}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser0.TypeBound();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u0007\" (7), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SystemInUtil.addInputLine("!QKS6>LAfj?");
      StringReader stringReader0 = new StringReader("<HEX_LITERAL>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        javaParser0.VariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ClassOrInterfaceBodyDeclaration(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'M';
      charArray0[1] = 'P';
      charArray0[2] = '[';
      charArray0[3] = '~';
      charArray0[4] = 'q';
      charArray0[5] = '1';
      charArray0[6] = 'g';
      charArray0[7] = 'V';
      charArray0[8] = '(';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer1);
      assertEquals(9, charArray0.length);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertArrayEquals(new char[] {'M', 'P', '[', '~', 'q', '1', 'g', 'V', '('}, charArray0);
      assertEquals("MP[~q1gV(", charBuffer1.toString());
      assertEquals(9, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(9, charBuffer1.capacity());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertEquals(9, charBuffer1.length());
      assertEquals(9, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      
      int int0 = charBuffer0.read(charBuffer1);
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertArrayEquals(new char[] {'M', 'P', '[', '~', 'q', '1', 'g', 'V', '('}, charArray0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals("MP[~q1gV(", charBuffer1.toString());
      assertEquals(9, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(9, charBuffer1.capacity());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertEquals(9, charBuffer1.length());
      assertEquals(9, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      
      int int1 = stringReader0.read(charBuffer0);
      assertEquals(0, int1);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int1 == int0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ConditionalAndExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SystemInUtil.addInputLine("O08");
      StringReader stringReader0 = new StringReader("f+4C");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.Type();
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.Expression();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" not found.");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AnnotationTypeMemberDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 11.  Encountered: .
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("         java JavaParser inputfile");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(32, int0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.VariableDeclaratorId();
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.TypeArgument();
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      javaParser0.MemberValue();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.EnumBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 33.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertNotNull(javaParser_ModifierSet0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = javaParser_ModifierSet0.isNative(95);
      assertFalse(boolean1);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertTrue(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = javaParser_ModifierSet0.isVolatile((-3332));
      assertTrue(boolean3);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)63}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      boolean boolean4 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Parse error at line ");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)63}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      try { 
        javaParser0.UnaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: ?
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.Block();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-115)}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParser0.TypeDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#fSHv@q/8%Iaa..");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      stringReader0.mark(47);
      stringReader0.mark(47);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.CastLookahead();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = javaParser_ModifierSet0.isVolatile(2393);
      assertFalse(boolean1);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertTrue(boolean1 == boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet1 = new JavaParser.ModifierSet();
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertNotNull(javaParser_ModifierSet1);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      
      StringReader stringReader0 = new StringReader("-2cOP{I<Pesx");
      assertNotNull(stringReader0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I}");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.MemberValue();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.WhileStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: cOP
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean4 = javaParser_ModifierSet0.isStatic(359);
      assertFalse(boolean4);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.Literal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "pTvfXP<AH91H^ucnx";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("pTvfXP<AH91H^ucnx");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(112, int0);
      
      stringReader0.reset();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ResultType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 13.  Encountered: ^
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.SwitchLabel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SystemInUtil.addInputLine("<WA'T");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.EqualityExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 4096, 26);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.inBuf = 106;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParser0.NormalAnnotation();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]_:P#4DS;>]");
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.PrimarySuffix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser");
      assertNotNull(stringReader0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.soops.CEN4010.JMCA.JParser.JavaParser");
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.TypeArgument();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        stringReader0.ready();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h?LF^X[<kW8|O.9@wmi");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 2);
      assertFalse(javaParser0.lookingAhead);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser1.lookingAhead);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.jjmatchedKind = (-1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.column = (-1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParser1.ForStatement();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 19.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SystemInUtil.addInputLine("");
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.AnnotationTypeDeclaration(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.PackageDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-15);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte) (-15)}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArrayInputStream0.reset();
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte) (-15)}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte) (-15)}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser0.MemberValuePairs();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u0019\" (25), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RCL^}G^%!'Koo ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 65, 65, 65);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      SystemInUtil.addInputLine("RCL^}G^%!'Koo ");
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaParser0.VariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 65, column 69.  Encountered: }
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t$0oc.qQ5Zg^30@J");
      assertNotNull(stringReader0);
      
      stringReader0.mark(2620);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      javaParser0.ArgumentList();
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ParseException parseException0 = javaParser0.generateParseException();
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(parseException0);
      
      try { 
        javaParser0.TypeDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 16.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'~w+%/");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        javaParser0.TypeParameter();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"w\" (119), after : \"\\'~\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.SwitchStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)102, (byte)59, (byte) (-71), (byte)79, (byte)115, (byte)68, (byte)32}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)79);
      assertNotNull(bufferedInputStream0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)102, (byte)59, (byte) (-71), (byte)79, (byte)115, (byte)68, (byte)32}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)102, (byte)59, (byte) (-71), (byte)79, (byte)115, (byte)68, (byte)32}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)102, (byte)59, (byte) (-71), (byte)79, (byte)115, (byte)68, (byte)32}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      javaParser0.ForInit();
      assertFalse(javaParser0.lookingAhead);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)102, (byte)59, (byte) (-71), (byte)79, (byte)115, (byte)68, (byte)32}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.EnumBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isAbstract(40);
      assertTrue(boolean0);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ReferenceType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        javaParser0.ClassOrInterfaceBody(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)122;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-74), (byte) (-116), (byte)103, (byte)64, (byte)22, (byte)21, (byte)122, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-74), (byte) (-116), (byte)103, (byte)64, (byte)22, (byte)21, (byte)122, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser0.Annotation();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.token_source = javaParserTokenManager0;
      // Undeclared exception!
      try { 
        javaParser0.MethodDeclaration(94);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Xsya{vV`q+");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 59, 61, 59);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        javaParser0.TypeArguments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 59, column 61.  Encountered: Xsya
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = ":3)qbjC|sGB=x1{`;2";
      StringReader stringReader0 = new StringReader(":3)qbjC|sGB=x1{`;2");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: :
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SystemInUtil.addInputLine("\"`C|3602O&B#|");
      JavaParser javaParser0 = new JavaParser("<HEX_LITERAL>");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.NameList();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2, column 0.  Encountered: <EOF> after : \"\\\"`C|3602O&B#|\\n\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eW(skbb?}&v{e?");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      stringReader0.reset();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "eW(skbb?}&v{e?");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ClassOrInterfaceBodyDeclaration(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 8.  Encountered: ?
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.DoStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SystemInUtil.addInputLine(", column ");
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic((-1774));
      assertFalse(boolean0);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      StringReader stringReader0 = new StringReader(", column ");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", column ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ForInit();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: ,
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "~7xC5Qf[qC1^3+XHG";
      StringReader stringReader0 = new StringReader("~7xC5Qf[qC1^3+XHG");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.column = (-1285);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        javaParser0.ForInit();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column -1284.  Encountered: ~
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1dYkA]{|");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.PrimaryExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.PreIncrementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: Y
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Reader reader0 = null;
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.MemberSelector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "5$l`jY";
      JavaParser javaParser0 = new JavaParser("5$l`jY");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.enable_tracing();
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      int int0 = 82;
      boolean boolean0 = javaParser_ModifierSet0.isPrivate(82);
      assertFalse(boolean0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      javaParser0.ReInit((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.MemberValuePair();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "`q`t";
      StringReader stringReader0 = new StringReader("`q`t");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.PreIncrementExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ArgumentList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "c7@;#[Ew:H6;BuGZ<mD");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)15;
      byteArray0[8] = (byte) (-2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)23, (byte)94, (byte)13, (byte)110, (byte)107, (byte) (-26), (byte)24, (byte)15, (byte) (-2)}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)110);
      assertNotNull(bufferedInputStream0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)23, (byte)94, (byte)13, (byte)110, (byte)107, (byte) (-26), (byte)24, (byte)15, (byte) (-2)}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)23, (byte)94, (byte)13, (byte)110, (byte)107, (byte) (-26), (byte)24, (byte)15, (byte) (-2)}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pushbackInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)23, (byte)94, (byte)13, (byte)110, (byte)107, (byte) (-26), (byte)24, (byte)15, (byte) (-2)}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      bufferedInputStream0.mark((-194));
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)23, (byte)94, (byte)13, (byte)110, (byte)107, (byte) (-26), (byte)24, (byte)15, (byte) (-2)}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      pushbackInputStream0.mark((byte)13);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)23, (byte)94, (byte)13, (byte)110, (byte)107, (byte) (-26), (byte)24, (byte)15, (byte) (-2)}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser0.MethodDeclaration((byte)23);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u0017\" (23), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.PreDecrementExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ForUpdate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MemberValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "FP-\\N,2$lZ}2Ni6t)-";
      StringReader stringReader0 = new StringReader("FP-N,2$lZ}2Ni6t)-");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.StatementExpressionList();
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      try { 
        javaParser0.PrimaryPrefix();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: -
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S:8Tz)E");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(string0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int0 = 4096;
      try { 
        javaParser0.AnnotationTypeMemberDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: :
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.VariableDeclarator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("[vi");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.lookingAhead = false;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      javaParser0.ReInit((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.UnaryExpressionNotPlusMinus();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Reader reader0 = null;
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParser0.ForStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isAbstract(2241);
      assertFalse(boolean0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      
      StringReader stringReader0 = new StringReader("null");
      assertNotNull(stringReader0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      stringReader0.reset();
      boolean boolean2 = stringReader0.ready();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.token = null;
      // Undeclared exception!
      try { 
        javaParser0.TypeBound();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean1 = javaParser_ModifierSet0.isFinal(57);
      assertTrue(boolean1);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertTrue(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ClassOrInterfaceBodyDeclaration(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 13.  Encountered: Version
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.Initializer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("B=rK~+");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.enable_tracing();
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      try { 
        javaParser0.Statement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 5.  Encountered: ~
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean1 = javaParser_ModifierSet0.isPublic((-1788));
      assertFalse(boolean1);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-14);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)8, (byte)69, (byte)69, (byte) (-55), (byte)1, (byte) (-14)}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)8, (byte)69, (byte)69, (byte) (-55), (byte)1, (byte) (-14)}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(bufferedInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)8, (byte)69, (byte)69, (byte) (-55), (byte)1, (byte) (-14)}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser0.TypeArgument();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\b\" (8), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)69;
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte) (-88);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)69, (byte) (-92), (byte) (-30), (byte)16, (byte) (-7), (byte) (-54), (byte)98, (byte) (-88)}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)69, (byte) (-92), (byte) (-30), (byte)16, (byte) (-7), (byte) (-54), (byte)98, (byte) (-88)}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)69, (byte) (-92), (byte) (-30), (byte)16, (byte) (-7), (byte) (-54), (byte)98, (byte) (-88)}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser0.ClassOrInterfaceBodyDeclaration(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = "";
      SystemInUtil.addInputLine("");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SystemInUtil.addInputLine("");
      int int0 = 84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 84);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      boolean boolean1 = byteArrayInputStream0.markSupported();
      assertTrue(boolean1);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser0.TypeArgument();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        javaParser0.AndExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: ;
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SystemInUtil.addInputLine(" not found.");
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      StringReader stringReader0 = new StringReader("boolean");
      assertNotNull(stringReader0);
      
      stringReader0.mark(91);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.FieldDeclaration(91);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 7.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Reader reader0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.NormalAnnotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.lookingAhead = false;
      // Undeclared exception!
      try { 
        javaParser0.PostfixExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte)77;
      byteArray0[8] = (byte) (-2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)74, (byte)107, (byte) (-105), (byte)106, (byte)96, (byte)69, (byte)55, (byte)77, (byte) (-2)}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)74, (byte)107, (byte) (-105), (byte)106, (byte)96, (byte)69, (byte)55, (byte)77, (byte) (-2)}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)74, (byte)107, (byte) (-105), (byte)106, (byte)96, (byte)69, (byte)55, (byte)77, (byte) (-2)}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)74, (byte)107, (byte) (-105), (byte)106, (byte)96, (byte)69, (byte)55, (byte)77, (byte) (-2)}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParser0.MethodDeclarator();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjmatchedKind = 86;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)93;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)62, (byte)15, (byte)93}, byteArray0);
      
      javaParserTokenManager0.setDebugStream((PrintStream) null);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.SynchronizedStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " not found.");
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.MarkerAnnotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("e^\tEVP}D.FPacy;m");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      charArray0[1] = 'J';
      charArray0[2] = '6';
      charArray0[3] = ':';
      charArray0[4] = '4';
      charArray0[5] = 't';
      charArray0[6] = ':';
      int int0 = stringReader0.read(charArray0);
      assertEquals(7, int0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'e', '^', '\t', 'E', 'V', 'P', '}'}, charArray0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.VariableInitializer();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ForStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 8.  Encountered: ;
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&.o#]d9+d:?9m");
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ClassOrInterfaceDeclaration((-1733));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hw+1ID0VG ");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.InclusiveOrExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Block();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 5.  Encountered: ID
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)49;
      byteArray0[8] = (byte)77;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)31, (byte)9, (byte)79, (byte)7, (byte) (-7), (byte)78, (byte)58, (byte)49, (byte)77}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0, (-2496), (-2496), (-104));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParser0.AnnotationTypeBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = javaParser_ModifierSet0.isFinal(103);
      assertTrue(boolean1);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = javaParser_ModifierSet0.isPublic(94);
      assertFalse(boolean2);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int0 = JavaParser.ModifierSet.removeModifier(16, 85);
      assertEquals(0, int0);
      
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ThrowStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SystemInUtil.addInputLine(" not found.");
      StringReader stringReader0 = new StringReader(" not found.");
      assertNotNull(stringReader0);
      
      int int0 = 190;
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 190, 190);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.readChar();
      assertEquals(' ', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(190, javaCharStream0.getEndLine());
      assertEquals(190, javaCharStream0.getLine());
      assertEquals(190, javaCharStream0.getEndColumn());
      assertEquals(190, javaCharStream0.getBeginColumn());
      assertEquals(190, javaCharStream0.getColumn());
      assertEquals(190, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(190, javaCharStream0.getEndLine());
      assertEquals(190, javaCharStream0.getLine());
      assertEquals(190, javaCharStream0.getEndColumn());
      assertEquals(190, javaCharStream0.getBeginColumn());
      assertEquals(190, javaCharStream0.getColumn());
      assertEquals(190, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.jjmatchedPos = 190;
      assertEquals(190, javaCharStream0.getEndLine());
      assertEquals(190, javaCharStream0.getLine());
      assertEquals(190, javaCharStream0.getEndColumn());
      assertEquals(190, javaCharStream0.getBeginColumn());
      assertEquals(190, javaCharStream0.getColumn());
      assertEquals(190, javaCharStream0.getBeginLine());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      javaParserTokenManager0.lengthOfMatch = 0;
      assertEquals(190, javaCharStream0.getEndLine());
      assertEquals(190, javaCharStream0.getLine());
      assertEquals(190, javaCharStream0.getEndColumn());
      assertEquals(190, javaCharStream0.getBeginColumn());
      assertEquals(190, javaCharStream0.getColumn());
      assertEquals(190, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(190, javaCharStream0.getEndLine());
      assertEquals(190, javaCharStream0.getLine());
      assertEquals(190, javaCharStream0.getEndColumn());
      assertEquals(190, javaCharStream0.getBeginColumn());
      assertEquals(190, javaCharStream0.getColumn());
      assertEquals(190, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufpos = 67;
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(190, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(190, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      boolean boolean2 = stringReader0.ready();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int1 = 91;
      CharBuffer charBuffer0 = CharBuffer.allocate(91);
      assertNotNull(charBuffer0);
      assertEquals(91, charBuffer0.capacity());
      assertEquals(91, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(91, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(91, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      
      int int2 = stringReader0.read(charBuffer0);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(91, charBuffer0.capacity());
      assertEquals(91, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(91, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(91, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      
      javaParser0.UnaryExpression();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(199, javaCharStream0.getColumn());
      assertEquals(199, javaCharStream0.getEndColumn());
      assertEquals(190, javaCharStream0.getEndLine());
      assertEquals(190, javaCharStream0.getLine());
      assertEquals(190, javaCharStream0.getBeginLine());
      assertEquals(195, javaCharStream0.getBeginColumn());
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      javaParser0.ReferenceType();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(200, javaCharStream0.getBeginColumn());
      assertEquals(200, javaCharStream0.getColumn());
      assertEquals(190, javaCharStream0.getEndLine());
      assertEquals(200, javaCharStream0.getEndColumn());
      assertEquals(190, javaCharStream0.getLine());
      assertEquals(190, javaCharStream0.getBeginLine());
      
      javaCharStream0.tokenBegin = (-1);
      assertEquals(200, javaCharStream0.getColumn());
      assertEquals(190, javaCharStream0.getEndLine());
      assertEquals(200, javaCharStream0.getEndColumn());
      assertEquals(190, javaCharStream0.getLine());
      
      try { 
        javaParser0.EnumBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 190, column 200.  Encountered: .
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SystemInUtil.addInputLine("cro[");
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isSynchronized(771);
      assertFalse(boolean0);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MemberSelector();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: cro
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.CastExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SystemInUtil.addInputLine("An interface cannot have initializers");
      JavaParser javaParser0 = new JavaParser("An interface cannot have initializers");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.EqualityExpression();
      assertFalse(javaParser0.lookingAhead);
      
      int int0 = 166;
      try { 
        javaParser0.UnaryExpressionNotPlusMinus();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 4.  Encountered: interface
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isStrictfp((-1533));
      assertTrue(boolean0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      
      boolean boolean1 = javaParser_ModifierSet0.isStatic(68);
      assertFalse(boolean1);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertFalse(boolean1 == boolean0);
      
      String string0 = "3o3zSSB]\"*;<ib0T";
      JavaParser javaParser0 = new JavaParser("3o3zSSB]\"*;<ib0T");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TypeBound();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Zmg7U&Jz^ZbT`R6;\\s,";
      SystemInUtil.addInputLine("Zmg7U&Jz^ZbT`R6;s,");
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("zta+l9ClG `!XpZU+");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.VariableInitializer();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 13.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "";
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      SystemInUtil.addInputLine("IB-P+2%?=c5.3zqe");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      try { 
        javaParser0.Literal();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: IB
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isNative(74);
      assertFalse(boolean0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte) (-22);
      byteArray0[7] = (byte)86;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-127), (byte)93, (byte)94, (byte)69, (byte)55, (byte) (-22), (byte)86}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-127), (byte)93, (byte)94, (byte)69, (byte)55, (byte) (-22), (byte)86}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser0.SwitchStatement();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X- k!2[>*8BWq~=U=0_");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "X- k!2[>*8BWq~=U=0_";
      JavaParser.main(stringArray0);
      assertEquals(1, stringArray0.length);
      
      javaParser0.UnaryExpressionNotPlusMinus();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Annotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: -
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "BreakStatement";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BreakStatement");
      assertFalse(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      int int0 = 4979;
      boolean boolean1 = javaParser_ModifierSet0.isFinal(4979);
      assertTrue(boolean1);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(boolean1 == boolean0);
      
      Reader reader0 = null;
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.lookingAhead = false;
      // Undeclared exception!
      try { 
        javaParser0.ExtendsList(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("!&==8!L~qL");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      StringReader stringReader0 = new StringReader("\"=\"");
      assertNotNull(stringReader0);
      
      javaParser0.ReInit((Reader) stringReader0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.InclusiveOrExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.FieldDeclaration(39);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic(927);
      assertTrue(boolean0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      JavaParser javaParser0 = new JavaParser(dataInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.AnnotationTypeMemberDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        javaParser0.EnumConstant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      javaParser0.token = null;
      // Undeclared exception!
      try { 
        javaParser0.NameList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.Arguments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "iF{cX'k";
      SystemInUtil.addInputLine("iF{cX'k");
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.Modifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      String string0 = "m5.3@YU&\\_";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("m5.3@YU&_");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.NameList();
      assertFalse(javaParser0.lookingAhead);
      
      long long0 = stringReader0.skip(4096);
      assertEquals(0L, long0);
      
      stringReader0.reset();
      try { 
        javaParser0.ResultType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: .3
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = null;
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ResultType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isAbstract(68);
      assertFalse(boolean0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      
      SystemInUtil.addInputLine("FD_SIZ^");
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token token0 = javaParser0.getNextToken();
      assertFalse(javaParser0.lookingAhead);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertEquals("FD_SIZ", token0.toString());
      
      token0.beginColumn = 280;
      assertEquals("FD_SIZ", token0.toString());
      
      try { 
        javaParser0.AssignmentOperator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 7.  Encountered: ^
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SystemInUtil.addInputLine("J,Zb");
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isNative(650);
      assertTrue(boolean0);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      
      JavaParser javaParser0 = new JavaParser("J,Zb");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        javaParser0.SwitchStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: J
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iULxbp?,3_F");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iULxbp?,3_F");
      assertFalse(boolean0);
      
      javaParser0.VariableDeclaratorId();
      assertFalse(javaParser0.lookingAhead);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = false;
      try { 
        javaParser0.PostfixExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 7.  Encountered: ?
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      StringReader stringReader0 = new StringReader("j5vx!]^(1lWy");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.TypeParameter();
      assertFalse(javaParser0.lookingAhead);
      
      stringReader0.reset();
      try { 
        javaParser0.ExplicitConstructorInvocation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 5.  Encountered: !
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zH#&i");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MemberSelector();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: zH
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("'");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.MemberValue();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ForInit();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: :
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l[m=");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.ReferenceType();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.PrimaryPrefix();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: [
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)76;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-18), (byte)105, (byte)5, (byte)30, (byte)76}, byteArray0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-119);
      byteArray1[1] = (byte)43;
      byteArray1[2] = (byte)106;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean1);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)43, (byte)106}, byteArray1);
      
      String[] stringArray0 = new String[0];
      JavaParser.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean2 = javaParser_ModifierSet0.isTransient((byte) (-119));
      assertTrue(boolean2);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("5 sQ'#U@|If`");
      assertNotNull(stringReader0);
      
      int int0 = (-4645);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-4645), (-705));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParser0.VariableInitializer();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertEquals((-703), javaCharStream0.getBeginColumn());
      assertEquals((-4645), javaCharStream0.getBeginLine());
      assertEquals((-702), javaCharStream0.getColumn());
      assertEquals((-4645), javaCharStream0.getLine());
      assertEquals((-4645), javaCharStream0.getEndLine());
      assertEquals((-702), javaCharStream0.getEndColumn());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = 'm';
      charArray0[2] = 'n';
      int int1 = stringReader0.read(charArray0);
      assertEquals((-1), int1);
      assertEquals(3, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'r', 'm', 'n'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParser0.VariableDeclaratorId();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -4645, column -699.  Encountered: \"U\" (85), after : \"\\'#\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F9H>{9[T%");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ConditionalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 5.  Encountered: {
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.WhileStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertNotNull(javaParser_ModifierSet0);
      
      int int0 = 25;
      boolean boolean0 = javaParser_ModifierSet0.isPublic(25);
      assertTrue(boolean0);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.MemberValueArrayInitializer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ReturnStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isProtected((-19));
      assertFalse(boolean0);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "t^N>B1`!8";
      StringReader stringReader0 = new StringReader("t^N>B1`!8");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      stringReader0.reset();
      javaParser0.InstanceOfExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.LocalVariableDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: ^
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic(5);
      assertTrue(boolean0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.disable_tracing();
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.CastLookahead();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isTransient(67);
      assertFalse(boolean0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      
      StringReader stringReader0 = new StringReader(";");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.UnaryExpressionNotPlusMinus();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: ;
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PackageDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isStrictfp(3391);
      assertFalse(boolean0);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.FieldDeclaration(64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<?xml version='1.0' encoding='ISO-8859-1' ?>");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("An interface cannot have initializers");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int0 = stringReader0.read();
      assertEquals(65, int0);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('n', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaParser0.StatementExpressionList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: interface
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SystemInUtil.addInputLine("AcF:Q7ap{\"-6X,d*");
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.RelationalExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.FormalParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 4.  Encountered: :
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.LocalVariableDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"char\"");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AnnotationTypeMemberDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: \"char\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        javaParser0.ArrayDimsAndInits();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 94);
      assertNotNull(pushbackInputStream0);
      
      pushbackInputStream0.close();
      JavaParser javaParser0 = new JavaParser(pushbackInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.NormalAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]B+|\"loBwuI=r");
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.SwitchStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ImplementsList(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringReader stringReader0 = new StringReader("--");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ExclusiveOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "";
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      int int0 = (-861);
      try { 
        javaParser0.EmptyStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser("lX{hjFS<");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      SystemInUtil.addInputLine("lX{hjFS<");
      try { 
        javaParser0.SynchronizedStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: lX
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = ".  Encountered: ";
      StringReader stringReader0 = new StringReader(".  Encountered: ");
      assertNotNull(stringReader0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Expression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: .
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("TiB/");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[0];
      int int0 = stringReader0.read(charArray0);
      assertEquals(0, int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.StatementExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 4.  Encountered: /
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.ReferenceType();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.CompilationUnit();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 6.  Encountered: Parser
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      StringBuffer stringBuffer0 = new StringBuffer(105);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      javaParserTokenManager0.image = stringBuffer0;
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", javaParserTokenManager0.image.toString());
      assertEquals(0, javaParserTokenManager0.image.length());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ArrayInitializer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertNotNull(javaParser_ModifierSet0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      SystemInUtil.addInputLine("");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      boolean boolean1 = javaParser_ModifierSet0.isVolatile(1805);
      assertTrue(boolean1);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertFalse(boolean1 == boolean0);
      
      JavaParser javaParser0 = null;
      try {
        javaParser0 = new JavaParser((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser0.SynchronizedStatement();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SystemInUtil.addInputLine("<?xml version='1.0' encoding='ISO-8859-1' ?>");
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isNative(13);
      assertFalse(boolean0);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ForUpdate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("dJ_g#kNqA:$K2Z:)M@");
      assertNotNull(stringReader0);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.inputStream = (Reader) stringReader0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParser0.ConditionalOrExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".  Encountered: ");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.WhileStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: .
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.VariableInitializer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)19;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)19, (byte)42, (byte)77, (byte) (-21), (byte)85, (byte)100, (byte)6}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      byteArrayInputStream0.close();
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)19, (byte)42, (byte)77, (byte) (-21), (byte)85, (byte)100, (byte)6}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      boolean boolean1 = byteArrayInputStream0.markSupported();
      assertTrue(boolean1);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)19, (byte)42, (byte)77, (byte) (-21), (byte)85, (byte)100, (byte)6}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)19, (byte)42, (byte)77, (byte) (-21), (byte)85, (byte)100, (byte)6}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      byteArrayInputStream0.reset();
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)19, (byte)42, (byte)77, (byte) (-21), (byte)85, (byte)100, (byte)6}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser0.ForUpdate();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "sCEtK*X{&NEN[Ej";
      stringArray0[1] = "se{=i38";
      stringArray0[2] = "";
      stringArray0[3] = "Java Parser Version 1.1:  Usage is one of:";
      stringArray0[4] = "";
      stringArray0[5] = "={*3k1't=7/1s(Qj{>U";
      stringArray0[6] = "";
      stringArray0[7] = "781";
      stringArray0[8] = "6jk'";
      JavaParser.main(stringArray0);
      assertEquals(9, stringArray0.length);
      
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TypeArgument();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-19);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)23, (byte)5, (byte)110, (byte) (-19)}, byteArray0);
      
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ExplicitConstructorInvocation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ConditionalExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.BooleanLiteral();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "\\f";
      SystemInUtil.addInputLine("\f");
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TypeDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$A!n2W2*v[:xu");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.ReInit((Reader) stringReader0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MemberValuePairs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: !
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      SystemInUtil.addInputLine("ConditionalExpression");
      // Undeclared exception!
      try { 
        javaParser0.AssertStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("Java Parser Version 1.1:  File ");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TypeBound();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: Java
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Reader reader0 = null;
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ClassOrInterfaceType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertNotNull(javaParser_ModifierSet0);
      
      int int0 = 6;
      boolean boolean0 = javaParser_ModifierSet0.isStrictfp(6);
      assertFalse(boolean0);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"\r\"");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.VariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      StringReader stringReader0 = new StringReader("!0j");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)21;
      byteArray0[8] = (byte)35;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-51), (byte)101, (byte)24, (byte)43, (byte) (-33), (byte)82, (byte) (-14), (byte)21, (byte)35}, byteArray0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      assertNotNull(fileSystemHandling2);
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling1));
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling0));
      
      try { 
        javaParser0.Statement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: !
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("/2__fWXFeXN~q-|sz");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.LabeledStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = javaParser_ModifierSet0.isPrivate(95);
      assertTrue(boolean1);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertTrue(boolean1 == boolean0);
      
      int int0 = JavaParser.ModifierSet.removeModifier(64, 64);
      assertEquals(0, int0);
      
      JavaParser javaParser0 = new JavaParser("?");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.EnumConstant();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isSynchronized(69);
      assertTrue(boolean0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      stringReader0.mark(128);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ArrayDimsAndInits();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.CompilationUnit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader(" 4");
      assertNotNull(stringReader0);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = stringReader0.read();
      assertEquals(32, int0);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.EnumBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: 4
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`g");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 143, (-1181));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 143, column -1181.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("/s(_,^!z");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.disable_tracing();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ReferenceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertNotNull(javaParser_ModifierSet0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = javaParser_ModifierSet0.isPrivate(73);
      assertFalse(boolean1);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertTrue(boolean1 == boolean0);
      
      String string0 = null;
      File file0 = MockFile.createTempFile("}SVHwkBdC", (String) null);
      assertNotNull(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/}SVHwkBdC0.tmp", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("}SVHwkBdC0.tmp", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      
      SystemInUtil.addInputLine("}SVHwkBdC");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/}SVHwkBdC0.tmp", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("}SVHwkBdC0.tmp", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0, mockFileInputStream0.available());
      
      SystemInUtil.addInputLine((String) null);
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/}SVHwkBdC0.tmp", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("}SVHwkBdC0.tmp", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0, mockFileInputStream0.available());
      
      try { 
        javaParser0.TryStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      SystemInUtil.addInputLine("!J_o%z;jQxq9,S&S~");
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParser javaParser0 = new JavaParser("!J_o%z;jQxq9,S&S~");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MemberValueArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: !
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ImportDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'ae&g[GW");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.FormalParameters();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"e\" (101), after : \"\\'a\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)26, 87);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)26, (byte)69}, byteArray0);
      assertEquals((-24), byteArrayInputStream0.available());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)26, (byte)69}, byteArray0);
      assertEquals((-24), byteArrayInputStream0.available());
      
      long long0 = byteArrayInputStream0.skip((-1461L));
      assertEquals(0L, long0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)26, (byte)69}, byteArray0);
      assertEquals((-24), byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)26, (byte)69}, byteArray0);
      assertEquals((-24), byteArrayInputStream0.available());
      
      try { 
        javaParser0.AssertStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@cF=@Y";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "<?xml version='1.0' encoding='ISO-8859-1' ?>";
      stringArray0[4] = "root";
      stringArray0[5] = " Qk{{*MJOk!$YQE.";
      stringArray0[6] = "xx;QJE=P7";
      stringArray0[7] = "";
      stringArray0[8] = "`j%=BLt-/";
      JavaParser.main(stringArray0);
      assertEquals(9, stringArray0.length);
      
      JavaParser javaParser0 = new JavaParser(")5QQLgkj,&%kL");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ResultType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertNotNull(javaParser_ModifierSet0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76, (byte)108, (byte)39}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76, (byte)108, (byte)39}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser0.ExclusiveOrExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.UnaryExpressionNotPlusMinus();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MethodDeclarator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      stringReader0.close();
      try { 
        javaParser0.ForInit();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OR");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.LocalVariableDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.TryStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token token0 = javaParser0.getToken(3307);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(0, token0.kind);
      assertNotNull(token0);
      assertEquals("", token0.toString());
      
      try { 
        javaParser0.PreIncrementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Z=7gYF@5g;x(t=");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PrimitiveType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = javaParser_ModifierSet0.isPrivate(95);
      assertTrue(boolean1);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertTrue(boolean1 == boolean0);
      
      int int0 = JavaParser.ModifierSet.removeModifier(64, 79);
      assertEquals(0, int0);
      
      JavaParser javaParser0 = new JavaParser("?");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.FieldDeclaration(16);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.PrimaryPrefix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean1 = javaParser_ModifierSet0.isProtected(42);
      assertTrue(boolean1);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertFalse(boolean1 == boolean0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JavaParser javaParser0 = new JavaParser(mockFileInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertFalse(fileDescriptor0.valid());
      
      try { 
        javaParser0.ArrayDimsAndInits();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.SingleMemberAnnotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.DoStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.AllocationExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      int int0 = (-876);
      SimpleNode simpleNode0 = new SimpleNode((-876));
      assertNotNull(simpleNode0);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      
      simpleNode0.setIdentifier("");
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      
      javaParser0.currNode = null;
      try { 
        javaParser0.MarkerAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"@\"");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = javaParser_ModifierSet0.isStatic((-3193));
      assertFalse(boolean2);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      StringReader stringReader0 = new StringReader("DEFAULT");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Literal();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: DEFAULT
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TryStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      JavaParser javaParser0 = new JavaParser(pushbackInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ClassOrInterfaceBodyDeclaration(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "A class cannot extend more than one other class";
      JavaParser javaParser0 = new JavaParser("A class cannot extend more than one other class");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.enable_tracing();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Block();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte) (-17);
      byteArray0[7] = (byte) (-76);
      byteArray0[8] = (byte)83;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)103, (byte)109, (byte)98, (byte)19, (byte)52, (byte) (-17), (byte) (-76), (byte)83}, byteArray0);
      
      StringReader stringReader0 = new StringReader("Rkm|dIcf}dW:1b We|G");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParser0.getNextToken();
      assertFalse(javaParser0.lookingAhead);
      assertEquals(3, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      assertEquals("Rkm", token0.toString());
      
      try { 
        javaParser0.FieldDeclaration(4096);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 4.  Encountered: |
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[2qR (x9!^8s|");
      assertNotNull(stringReader0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|&s$yV c|0!,");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.InstanceOfExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: [
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser(")x+\tTji)>Ca");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PreDecrementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_h9zjRL{h92");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.BreakStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-1), 2175);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufline = javaParserTokenManager0.jjnewLexState;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParser0.ConditionalOrExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)33;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)106, (byte)67, (byte)45, (byte)107, (byte)26, (byte)43, (byte)33}, byteArray0);
      
      StringReader stringReader0 = new StringReader("\b");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser1.lookingAhead);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParser1.LocalVariableDeclaration();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("PD97");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.IfStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader(",pW/glU4_1V@c:8I3");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ArgumentList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: ,
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)63;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-22), (byte)38, (byte)63}, byteArray0);
      
      StringReader stringReader0 = new StringReader("o5(o.T(`m'.'1ZJ");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = '-';
      charArray0[2] = '(';
      charArray0[3] = 'a';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'0', '-', '(', 'a'}, charArray0);
      assertEquals("0-(a", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.length());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(4, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      
      int int0 = stringReader0.read(charBuffer0);
      assertEquals(4, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'o', '5', '(', 'o'}, charArray0);
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.position());
      assertEquals(4, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      
      int int1 = stringReader0.read(charArray0);
      assertEquals(4, int1);
      assertEquals(4, charArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'.', 'T', '(', '`'}, charArray0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.EnumConstant();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isAbstract(52);
      assertFalse(boolean0);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)60;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 3354);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)47, (byte)60}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)47, (byte)60}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      javaParser0.ReInit((InputStream) byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)47, (byte)60}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "5>qW";
      SystemInUtil.addInputLine("5>qW");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(52);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, pipedInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        javaParser0.ExplicitConstructorInvocation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      int int0 = 90;
      try { 
        javaParser0.CastExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Java Parser Version 1.1:  Usage is one of:");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.SwitchLabel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: Java
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AnnotationTypeBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = 'Q';
      charArray0[2] = '!';
      charArray0[3] = '<';
      charArray0[4] = ';';
      charArray0[5] = '9';
      charArray0[6] = 'Y';
      charArray0[7] = '%';
      int int0 = stringReader0.read(charArray0);
      assertEquals(8, int0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'c', 'o', 'm', '.', 's', 'o', 'o', 'p'}, charArray0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 45.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Reader reader0 = null;
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.FormalParameter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token token0 = javaParser0.getNextToken();
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertNotNull(token0);
      assertEquals("", token0.toString());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Token token1 = javaParser0.getToken(99);
      assertNotSame(token1, token0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals("", token1.toString());
      
      try { 
        javaParser0.ResultType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MemberValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("An interface cannot implement other interfaces");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(javaParserTokenManager0.debugStream, false);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        javaParser0.dump(mockPrintWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x^)~o\"T?gkHsh,nx");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = 2259;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = (-2176);
      try { 
        javaParser0.FormalParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: x
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AnnotationTypeDeclaration((-3286));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "' a^n k<TSfAql\"}ST");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("' a^n k<TSfAql\"}ST");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.DefaultValue();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"a\" (97), after : \"\\' \"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{>.<3$m_h;RKAl[");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaParser0.AdditiveExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: {
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ArrayDimsAndInits();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|>ByT");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TypeDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: |
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SystemInUtil.addInputLine(">>=");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("wq}/Mu=bm");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        javaParser0.ForUpdate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: >>=
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ClassOrInterfaceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.MethodDeclarator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      StringBuffer stringBuffer0 = new StringBuffer(105);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      javaParserTokenManager0.image = stringBuffer0;
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, javaParserTokenManager0.image.length());
      assertEquals("", javaParserTokenManager0.image.toString());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.LabeledStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("5");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      int int0 = javaParser0.Modifiers();
      assertEquals(0, int0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.VariableDeclarator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = "zL<f-qV)xK!)cy2";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser("zL<f-qV)xK!)cy2");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.CastLookahead();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("TRcLS2<}");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.EnumConstant();
      assertFalse(javaParser0.lookingAhead);
      
      Token token0 = javaParser0.getNextToken();
      assertFalse(javaParser0.lookingAhead);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(7, token0.endColumn);
      assertEquals(88, token0.kind);
      assertEquals(7, token0.beginColumn);
      assertNotNull(token0);
      assertEquals("<", token0.toString());
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      try { 
        javaParser0.FormalParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 8.  Encountered: }
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Type");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.CompilationUnit();
      assertFalse(javaParser0.lookingAhead);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)66;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)57, (byte)109, (byte)61, (byte)89, (byte)101, (byte) (-86), (byte)66}, byteArray0);
      
      try { 
        javaParser0.Type();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.NullLiteral();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '?';
      charArray0[2] = 'f';
      charArray0[3] = 'q';
      charArray0[4] = 'z';
      int int0 = stringReader0.read(charArray0);
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'3', '?', 'f', 'q', 'z'}, charArray0);
      
      try { 
        javaParser0.ArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~nmeq");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      stringReader0.mark(2188);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        javaParser0.Annotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: ~
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal((-493));
      assertFalse(boolean0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      StringReader stringReader0 = new StringReader("class");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      char[] charArray0 = null;
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "class");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        javaParser0.AndExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: class
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.DefaultValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = "3TVG8HDE&";
      StringReader stringReader0 = new StringReader("3TVG8HDE&");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.ForInit();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ForStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: TVG8HDE
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("\")\"");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      assertNotNull(jJTJavaParserState0);
      
      javaParser0.jjtree = jJTJavaParserState0;
      try { 
        javaParser0.ConstructorDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MemberValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.MemberValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isTransient(74);
      assertFalse(boolean0);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-2067L));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, (-1493));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      SystemInUtil.addInputLine("");
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      SystemInUtil.addInputLine("");
      javaParser0.CompilationUnit();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getEndLine());
      assertEquals((-1494), javaCharStream0.getBeginColumn());
      assertEquals(64, javaCharStream0.getLine());
      assertEquals((-1494), javaCharStream0.getColumn());
      assertEquals((-1494), javaCharStream0.getEndColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getEndLine());
      assertEquals((-1494), javaCharStream0.getBeginColumn());
      assertEquals(64, javaCharStream0.getLine());
      assertEquals((-1494), javaCharStream0.getColumn());
      assertEquals((-1494), javaCharStream0.getEndColumn());
      
      try { 
        javaParser0.PrimarySuffix();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 64, column -1494.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      SystemInUtil.addInputLine("D&o`");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.StatementExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.InstanceOfExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: &
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)26, 87);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)26, (byte)69}, byteArray0);
      assertEquals((-24), byteArrayInputStream0.available());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)26, (byte)69}, byteArray0);
      assertEquals((-24), byteArrayInputStream0.available());
      
      long long0 = byteArrayInputStream0.skip((-1461L));
      assertEquals(0L, long0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)26, (byte)69}, byteArray0);
      assertEquals((-24), byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)26, (byte)69}, byteArray0);
      assertEquals((-24), byteArrayInputStream0.available());
      
      try { 
        javaParser0.MemberSelector();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isStrictfp(238);
      assertFalse(boolean0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("AyJBQSNQ9NN");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MemberValuePairs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isStatic(88);
      assertTrue(boolean0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)127;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)98, (byte) (-105), (byte)72, (byte) (-93), (byte)127}, byteArray0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.DefaultValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "+3}7g\\n}}";
      JavaParser javaParser0 = new JavaParser("+3}7g\n}}");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MemberValuePair();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "*lt";
      JavaParser javaParser0 = new JavaParser("*lt");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AllocationExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      
      int int0 = stringReader0.read(charBuffer0);
      assertEquals(0, int0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      
      charArray0[0] = '@';
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray0[1] = 'H';
      int int1 = stringReader0.read(charArray0);
      assertEquals((-1), int1);
      assertEquals(2, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'@', 'H'}, charArray0);
      
      stringReader0.close();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ResultType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("*}Q]`7K8yxLbs");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AnnotationTypeMemberDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "";
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ReferenceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " u;}6PS.");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Java Parser Version 1.1:  Usage is one of:");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      SystemInUtil.addInputLine("YI_{n7KpH{k|2GN1]");
      try { 
        javaParser0.PrimarySuffix();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: YI_
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Tnr`x:");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.LabeledStatement();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Reader reader0 = null;
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.PreIncrementExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      long long0 = stringReader0.skip((-2823L));
      assertEquals(0L, long0);
      
      try { 
        javaParser0.ContinueStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = "try";
      JavaParser javaParser0 = new JavaParser("try");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TypeArguments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TypeParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)14;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)72, (byte) (-25), (byte)101, (byte)14}, byteArray0);
      
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.BooleanLiteral();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Java Parser Version 1.1:  Usage is one of:");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("Java Parser Version 1.1:  Usage is one of:");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[1];
      long long0 = stringReader0.skip(104L);
      assertEquals(42L, long0);
      
      int int0 = stringReader0.read(charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      charArray0[0] = '1';
      int int1 = stringReader0.read(charArray0);
      assertEquals((-1), int1);
      assertEquals(1, charArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'1'}, charArray0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TypeParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-116), (byte)8, (byte)50, (byte)4, (byte)38, (byte)115, (byte) (-6)}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-116), (byte)8, (byte)50, (byte)4, (byte)38, (byte)115, (byte) (-6)}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      try { 
        javaParser0.ThrowStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: 3
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'y^~vg9Whez");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ThrowStatement();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"^\" (94), after : \"\\'y\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(15);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 15, 173);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        javaParser0.RSIGNEDSHIFT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 15, column 172.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SystemInUtil.addInputLine("OR");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)93}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)93);
      assertNotNull(pushbackInputStream0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)93}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0, 77, 97, 97);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)93}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)93}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)93}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)93}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        javaParser0.InclusiveOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 77, column 97.  Encountered: ]
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.NameList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isStatic((-1881));
      assertFalse(boolean0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ClassOrInterfaceBody(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      SystemInUtil.addInputLine((String) null);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean1 = javaParser_ModifierSet0.isVolatile(34);
      assertFalse(boolean1);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertTrue(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        javaParser0.RUNSIGNEDSHIFT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q5ra%{{.noo?'");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      long long0 = stringReader0.skip(232L);
      assertEquals(13L, long0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ImportDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParser javaParser0 = new JavaParser("~RYpV#N_f)=H");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ClassOrInterfaceDeclaration((-2224));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isNative(74);
      assertFalse(boolean0);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte) (-22);
      byteArray0[7] = (byte)86;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-127), (byte)93, (byte)94, (byte)69, (byte)55, (byte) (-22), (byte)86}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-127), (byte)93, (byte)94, (byte)69, (byte)55, (byte) (-22), (byte)86}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParser0.MemberValueArrayInitializer();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      SystemInUtil.addInputLine("9{Ar~0MZ.<;wd6");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)22;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)94, (byte)22, (byte)118, (byte) (-83), (byte)63, (byte)96, (byte)52}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)94, (byte)22, (byte)118, (byte) (-83), (byte)63, (byte)96, (byte)52}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      try { 
        javaParser0.Statement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: ^
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("7z+rjafd]5<vl6");
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.lookingAhead = false;
      try { 
        javaParser0.ReturnStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: 7
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      SystemInUtil.addInputLine("");
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)21;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)60, (byte)119, (byte) (-81), (byte)32, (byte)21}, byteArray0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Initializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*`2C:");
      assertFalse(boolean0);
      
      SystemInUtil.addInputLine("uutmA@|)6XZ*");
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.MultiplicativeExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ClassOrInterfaceDeclaration((-756));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 6.  Encountered: @
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        javaParser0.WildcardBounds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParserTokenManager0.curChar = 'C';
      // Undeclared exception!
      try { 
        javaParser0.TypeParameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = " not found.";
      StringReader stringReader0 = new StringReader(" not found.");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.WildcardBounds();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: not
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        javaParser0.AssignmentOperator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isAbstract((-2177));
      assertTrue(boolean0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      
      boolean boolean1 = javaParser_ModifierSet0.isStatic(256);
      assertFalse(boolean1);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertFalse(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MethodDeclaration(52);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PostfixExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isAbstract((-2177));
      assertTrue(boolean0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      boolean boolean1 = javaParser_ModifierSet0.isNative((-2177));
      assertFalse(boolean1);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertFalse(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ForStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("gI");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ExtendsList(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Pl4@pP6h7");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte)60;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertTrue(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-34), (byte)84, (byte)0, (byte)90, (byte)2, (byte)53, (byte)81, (byte)47, (byte)60}, byteArray0);
      
      JavaParser javaParser0 = new JavaParser("Pl4@pP6h7");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.SingleMemberAnnotation();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      StringReader stringReader0 = new StringReader("J*|=r7");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ImplementsList(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: J
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("com.soops.CEN4010.JMCA.JParser.JJTJavaParserState");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      boolean boolean0 = true;
      try { 
        javaParser0.EqualityExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Pl4@pP6h7");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.SingleMemberAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      StringReader stringReader0 = new StringReader("VariableInitializer");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      boolean boolean0 = true;
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        javaParser0.EnumDeclaration(52);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: VariableInitializer
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      int int0 = 111;
      // Undeclared exception!
      try { 
        javaParser0.getToken(111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      StringReader stringReader0 = new StringReader("         java JavaParser < inputfile");
      assertNotNull(stringReader0);
      
      int int0 = 12;
      int int1 = (-1098);
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream(stringReader0, 12, (-1098), (-819));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"3y-:!;/#)uv{gwyU'");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.WhileStatement();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 20.  Encountered: <EOF> after : \"\\\"3y\\u007f-:!;/#)uv{gwyU\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      InputStream inputStream0 = null;
      int int0 = 20;
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null, 20, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      StringReader stringReader0 = new StringReader("D1>2h1ALVK%W4");
      assertNotNull(stringReader0);
      
      int int0 = 110;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 110, 110);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0, 12, 12);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      javaCharStream0.bufpos = 110;
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = pushbackInputStream0.markSupported();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      assertNotNull(bufferedInputStream0);
      
      SystemInUtil.addInputLine("D1>2h1ALVK%W4");
      int int1 = (-217);
      int int2 = 120;
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 12, column 14.  Encountered: >
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JavaParser javaParser0 = null;
      try {
        javaParser0 = new JavaParser((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte)83;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)119, (byte) (-26), (byte)51, (byte)25, (byte)68, (byte)83}, byteArray0);
      
      StringReader stringReader0 = new StringReader("980_");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      javaParser0.ArgumentList();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Arguments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 4.  Encountered: _
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.EqualityExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertNotNull(javaParser_ModifierSet0);
      
      int int0 = (-1992);
      boolean boolean0 = javaParser_ModifierSet0.isTransient((-1992));
      assertFalse(boolean0);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      
      StringReader stringReader0 = new StringReader(">>=");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ArgumentList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: >>=
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }
}
