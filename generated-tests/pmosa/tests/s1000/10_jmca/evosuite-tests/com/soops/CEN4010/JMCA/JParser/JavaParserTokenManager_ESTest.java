/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 13:23:50 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PrintStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H");
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      javaParserTokenManager0.debugStream = (PrintStream) mockPrintStream0;
      javaParserTokenManager0.debugStream = null;
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.setDebugStream((PrintStream) null);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1887), 14);
      byteArrayInputStream0.skip((-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.input_stream = javaCharStream0;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(22, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)121;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 30, (-1899));
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-309), (byte)103);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream1, (int) (byte) (-10));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -10. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)103;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-152), (-1306));
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, 2082408385, (byte)121);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager1.getNextToken();
      javaCharStream2.ReInit((Reader) null, (-140), (-152));
      // Undeclared exception!
      try { 
        javaParserTokenManager1.ReInit(javaCharStream0, (-248));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -248. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)94, (byte)94);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = new Token();
      assertEquals(0, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("extends");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("throws");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, (byte)69);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (byte)69, (-2546));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.backup((-2546));
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream(mockFileReader0, (-465), 123, (-2546));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)77;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-4345), 94);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("^", token0.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte)119;
      byteArray0[8] = (byte)29;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-2121), (byte)24);
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, 1667, (byte)38);
      byteArrayInputStream0.close();
      JavaCharStream javaCharStream3 = new JavaCharStream(byteArrayInputStream0, 29, (byte)33);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream3);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream3.bufpos);
      assertEquals(105, token0.kind);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 100, (byte)69);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(73, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)56, 113);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.curLexState = 74;
      javaParserTokenManager0.getNextToken();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, true, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)68;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-2860), (byte) (-108));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-4517));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -4517. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-73);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-1005), (byte) (-73));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1005, column -70.  Encountered: <EOF> after : \"\\'V\\ufffd\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 94, 109);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      byteArrayInputStream0.close();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 94, column 111.  Encountered: \"\" (0), after : \"\\'E\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-2860), (byte)39);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -2860, column 42.  Encountered: <EOF> after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)90, (byte)90);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      PrintStream printStream0 = javaParserTokenManager0.debugStream;
      javaParserTokenManager0.setDebugStream(printStream0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)3, (byte)3);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1, (byte)3);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 3, column 4.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)54, (byte)54);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("6", token0.toString());
      assertEquals(66, token0.kind);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 20, (byte)98);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(98, javaCharStream0.getBeginColumn());
      assertEquals(105, token0.kind);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)66;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)66, (byte)66, (-2039));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(74, token0.kind);
      assertEquals("B", token0.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)69, (byte)69);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjround = (-1);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("E", token0.toString());
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)99, (byte)99);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      String string0 = "zf";
      MockFile mockFile0 = new MockFile("zf");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "c");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // c
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-1005), (byte)0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      byteArrayInputStream0.reset();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.jjFillToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1005, column 2.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-2849), (byte)54);
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (-2849), (-1356), (-963));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(66, token0.kind);
      assertEquals("6", token0.toString());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-35);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 2334, (byte)54);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-2855));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2855. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1531), 918);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals(88, token0.kind);
      assertEquals("<", token0.toString());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)117, (byte)117);
      javaCharStream0.available = (int) (byte)117;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("throws");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, (byte)69);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (byte)69, (-2546));
      javaCharStream0.ReadByte();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.backup((-2546));
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 69);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 69. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Reader reader0 = null;
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)39;
      byteArray0[0] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = 34;
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-3374), 34);
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, 45, 70);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 45, column 73.  Encountered: <EOF> after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("throws");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)86;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)69, (-1005));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.MoreLexicalActions();
      javaParserTokenManager1.MoreLexicalActions();
      javaParserTokenManager0.jjFillToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager2.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 69, column -1004.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)114;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 48, (byte)39);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(48, javaCharStream1.getEndLine());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PNKETcr0Dv_W3apfC?");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, (byte)69);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (byte)69, (-2546));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.backup((-2546));
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(69);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 69. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1972, (byte)124, 48);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("1", token0.toString());
      assertEquals(66, token0.kind);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-10);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-66), 72);
      javaCharStream0.ReadByte();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      charArray0[1] = 'R';
      charArray0[2] = '+';
      charArray0[3] = 'b';
      charArray0[4] = '^';
      charArray0[5] = ' ';
      charArray0[6] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(2, javaCharStream1.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)39, 34);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte)39;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(2, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)39, (byte)39}, byteArray1);
      assertNotNull(byteArrayInputStream1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream1, (byte)39, (byte)39);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(2, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)39, (byte)39}, byteArray1);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(2, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)39, (byte)39}, byteArray1);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 39, column 41.  Encountered: <EOF> after : \"\\'\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ex<en5j");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("ex", token0.toString());
      assertNotNull(token0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNotNull(mockPrintStream0);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("extendZs");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(8, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals("extendZs", token0.toString());
      assertNotNull(token0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("extendZs");
      assertNotNull(mockPrintStream0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(8, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals("extendZs", token1.toString());
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("extendZs");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("extendZs", token0.toString());
      assertNotNull(token0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("extendZs");
      assertNotNull(mockPrintStream0);
      
      Token token1 = new Token();
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PNKETcr0Dv_W3apfC?");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, (byte)69);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (byte)69, (-2546));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)40, (byte)69, (byte)69, (byte)69, (byte)69}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)69, 3219);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)40, (byte)69, (byte)69, (byte)69, (byte)69}, byteArray0);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)40, (byte)69, (byte)69, (byte)69, (byte)69}, byteArray0);
      assertNotNull(javaParserTokenManager2);
      
      Token token0 = javaParserTokenManager2.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(69, token0.endLine);
      assertEquals(69, token0.beginLine);
      assertEquals(3219, token0.beginColumn);
      assertEquals(3219, token0.endColumn);
      assertEquals(77, token0.kind);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(69, javaCharStream1.getBeginLine());
      assertEquals(69, javaCharStream1.getLine());
      assertEquals(3219, javaCharStream1.getColumn());
      assertEquals(3219, javaCharStream1.getBeginColumn());
      assertEquals(69, javaCharStream1.getEndLine());
      assertEquals(3219, javaCharStream1.getEndColumn());
      assertEquals("(", token0.toString());
      assertArrayEquals(new byte[] {(byte)40, (byte)69, (byte)69, (byte)69, (byte)69}, byteArray0);
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      
      JavaParserTokenManager javaParserTokenManager3 = null;
      try {
        javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0, 3219);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 3219. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)60, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(8, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)60, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1991, (-2365));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)60, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)60, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2365), token0.endColumn);
      assertEquals(1991, token0.endLine);
      assertEquals(1991, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals((-2365), token0.beginColumn);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-2365), javaCharStream0.getBeginColumn());
      assertEquals((-2365), javaCharStream0.getColumn());
      assertEquals(1991, javaCharStream0.getBeginLine());
      assertEquals((-2365), javaCharStream0.getEndColumn());
      assertEquals(1991, javaCharStream0.getLine());
      assertEquals(1991, javaCharStream0.getEndLine());
      assertEquals("<", token0.toString());
      assertArrayEquals(new byte[] {(byte)60, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("extendZs");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)40;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)114, (byte)44, (byte)7, (byte)0, (byte)88, (byte)108, (byte)26, (byte)40}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 95, 103);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)114, (byte)44, (byte)7, (byte)0, (byte)88, (byte)108, (byte)26, (byte)40}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)114, (byte)44, (byte)7, (byte)0, (byte)88, (byte)108, (byte)26, (byte)40}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(103, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(103, token0.endColumn);
      assertEquals(95, token0.beginLine);
      assertEquals(95, token0.endLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(103, javaCharStream0.getColumn());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(103, javaCharStream0.getEndColumn());
      assertEquals("r", token0.toString());
      assertArrayEquals(new byte[] {(byte)114, (byte)44, (byte)7, (byte)0, (byte)88, (byte)108, (byte)26, (byte)40}, byteArray0);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(95, token1.endLine);
      assertEquals(95, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(103, token1.beginColumn);
      assertEquals(103, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(103, javaCharStream0.getColumn());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(103, javaCharStream0.getEndColumn());
      assertEquals("r", token1.toString());
      assertArrayEquals(new byte[] {(byte)114, (byte)44, (byte)7, (byte)0, (byte)88, (byte)108, (byte)26, (byte)40}, byteArray0);
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)69, 918);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(69, token0.endLine);
      assertEquals(918, token0.beginColumn);
      assertEquals(69, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(918, token0.endColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals(918, javaCharStream0.getBeginColumn());
      assertEquals(918, javaCharStream0.getEndColumn());
      assertEquals(918, javaCharStream0.getColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals("f", token0.toString());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(918, token1.beginColumn);
      assertEquals(69, token1.beginLine);
      assertEquals(69, token1.endLine);
      assertEquals(918, token1.endColumn);
      assertEquals(74, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals(918, javaCharStream0.getBeginColumn());
      assertEquals(918, javaCharStream0.getEndColumn());
      assertEquals(918, javaCharStream0.getColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals("f", token1.toString());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)39, 34);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 45, 70);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 45, column 72.  Encountered: \"\" (0), after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l~EkhO?Suo$:2+ki]q(");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 90);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2546), 90);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals('l', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      javaCharStream0.backup((-12));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(11, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2546), token0.endLine);
      assertEquals((-2546), token0.beginLine);
      assertEquals(90, token0.endColumn);
      assertEquals(90, token0.kind);
      assertEquals(90, token0.beginColumn);
      assertEquals((-2546), javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getColumn());
      assertEquals((-2546), javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals((-2546), javaCharStream0.getEndLine());
      assertEquals(90, javaCharStream0.getEndColumn());
      assertEquals("~", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 389);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 389. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)72, (byte) (-66), (byte)69}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 1052, (byte)72);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'o';
      charArray0[1] = '[';
      charArray0[2] = '9';
      charArray0[3] = '[';
      charArray0[4] = '8';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'o', '[', '9', '[', '8', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'o', '[', '9', '[', '8', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertArrayEquals(new char[] {'o', '[', '9', '[', '8', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(javaCharStream2);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertArrayEquals(new char[] {'o', '[', '9', '[', '8', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(javaParserTokenManager2);
      
      Token token0 = javaParserTokenManager2.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream2.getEndColumn());
      assertEquals(1, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals("o", token0.toString());
      assertArrayEquals(new char[] {'o', '[', '9', '[', '8', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(token0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(71, token1.beginColumn);
      assertEquals(1052, token1.endLine);
      assertEquals(71, token1.endColumn);
      assertEquals(1052, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals("", token1.toString());
      assertEquals(71, javaCharStream0.getColumn());
      assertEquals(71, javaCharStream0.getEndColumn());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals(1052, javaCharStream0.getBeginLine());
      assertEquals(1052, javaCharStream0.getEndLine());
      assertEquals(1052, javaCharStream0.getLine());
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)58;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(20, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)58, (byte)58);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(20, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(20, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      byteArrayInputStream0.close();
      assertEquals(20, byteArrayInputStream0.available());
      
      StringBuffer stringBuffer0 = new StringBuffer("\"double\"");
      assertEquals("\"double\"", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      javaParserTokenManager0.image = stringBuffer0;
      assertEquals(20, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("\"double\"", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      assertEquals("\"double\"", javaParserTokenManager0.image.toString());
      assertEquals(8, javaParserTokenManager0.image.length());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(58, token0.endColumn);
      assertEquals(92, token0.kind);
      assertEquals(58, token0.beginLine);
      assertEquals(58, token0.beginColumn);
      assertEquals(58, token0.endLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(58, javaCharStream0.getBeginColumn());
      assertEquals(58, javaCharStream0.getEndColumn());
      assertEquals(58, javaCharStream0.getColumn());
      assertEquals(58, javaCharStream0.getEndLine());
      assertEquals(58, javaCharStream0.getBeginLine());
      assertEquals(58, javaCharStream0.getLine());
      assertEquals(":", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)39, (byte)86, (byte)39}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-1005), (byte)39);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)39, (byte)86, (byte)39}, byteArray0);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)39, (byte)86, (byte)39}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals((-1005), token0.beginLine);
      assertEquals((-1005), token0.endLine);
      assertEquals(41, token0.endColumn);
      assertEquals(39, token0.beginColumn);
      assertEquals(72, token0.kind);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(41, javaCharStream1.getColumn());
      assertEquals(41, javaCharStream1.getEndColumn());
      assertEquals((-1005), javaCharStream1.getEndLine());
      assertEquals((-1005), javaCharStream1.getLine());
      assertEquals((-1005), javaCharStream1.getBeginLine());
      assertEquals(39, javaCharStream1.getBeginColumn());
      assertEquals("'V'", token0.toString());
      assertArrayEquals(new byte[] {(byte)39, (byte)86, (byte)39}, byteArray0);
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(41, javaCharStream1.getColumn());
      assertEquals(41, javaCharStream1.getEndColumn());
      assertEquals((-1005), javaCharStream1.getEndLine());
      assertEquals((-1005), javaCharStream1.getLine());
      assertEquals((-1005), javaCharStream1.getBeginLine());
      assertEquals(39, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)39, (byte)86, (byte)39}, byteArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1005));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1005. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("extendZs");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)115, (byte) (-59), (byte) (-86), (byte)94, (byte) (-77), (byte)48}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 17, 20);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)115, (byte) (-59), (byte) (-86), (byte)94, (byte) (-77), (byte)48}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)115, (byte) (-59), (byte) (-86), (byte)94, (byte) (-77), (byte)48}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(17, token0.endLine);
      assertEquals(17, token0.beginLine);
      assertEquals(20, token0.endColumn);
      assertEquals(20, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals("s", token0.toString());
      assertArrayEquals(new byte[] {(byte)115, (byte) (-59), (byte) (-86), (byte)94, (byte) (-77), (byte)48}, byteArray0);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(17, token1.endLine);
      assertEquals(17, token1.beginLine);
      assertEquals(20, token1.beginColumn);
      assertEquals(20, token1.endColumn);
      assertEquals(74, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals("s", token1.toString());
      assertArrayEquals(new byte[] {(byte)115, (byte) (-59), (byte) (-86), (byte)94, (byte) (-77), (byte)48}, byteArray0);
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(7, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 21, (byte) (-77));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 21, column -77.  Encountered: \"\\\\\" (92), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)78}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)78, (byte)78);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)78}, byteArray0);
      assertNotNull(javaCharStream0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)78}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertNotNull(javaCharStream2);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(78, token0.beginLine);
      assertEquals(78, token0.endLine);
      assertEquals(78, token0.beginColumn);
      assertEquals(78, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(78, javaCharStream0.getBeginColumn());
      assertEquals(78, javaCharStream0.getEndLine());
      assertEquals(78, javaCharStream0.getEndColumn());
      assertEquals(78, javaCharStream0.getColumn());
      assertEquals(78, javaCharStream0.getBeginLine());
      assertEquals(78, javaCharStream0.getLine());
      assertEquals("N", token0.toString());
      assertArrayEquals(new byte[] {(byte)78}, byteArray0);
      assertNotNull(token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals("8", token1.toString());
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertNotNull(token1);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(78, javaCharStream0.getBeginColumn());
      assertEquals(78, javaCharStream0.getEndLine());
      assertEquals(78, javaCharStream0.getEndColumn());
      assertEquals(78, javaCharStream0.getColumn());
      assertEquals(78, javaCharStream0.getBeginLine());
      assertEquals(78, javaCharStream0.getLine());
      assertArrayEquals(new byte[] {(byte)78}, byteArray0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.endColumn);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals("", token2.toString());
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertNotNull(token2);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager1.TokenLexicalActions(token2);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.endColumn);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals("", token2.toString());
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(78, token0.beginLine);
      assertEquals(78, token0.endLine);
      assertEquals(78, token0.beginColumn);
      assertEquals(78, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(78, javaCharStream0.getBeginColumn());
      assertEquals(78, javaCharStream0.getEndLine());
      assertEquals(78, javaCharStream0.getEndColumn());
      assertEquals(78, javaCharStream0.getColumn());
      assertEquals(78, javaCharStream0.getBeginLine());
      assertEquals(78, javaCharStream0.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals("N", token0.toString());
      assertArrayEquals(new byte[] {(byte)78}, byteArray0);
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PNKETcr0Dv_W3apfC?");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, (byte)69);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (byte)69, (-2546));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)69;
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(16, javaCharStream0.bufpos);
      assertEquals((-2546), token0.beginColumn);
      assertEquals(69, token0.beginLine);
      assertEquals(69, token0.endLine);
      assertEquals((-2530), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals((-2530), javaCharStream0.getColumn());
      assertEquals((-2530), javaCharStream0.getEndColumn());
      assertEquals((-2546), javaCharStream0.getBeginColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals("PNKETcr0Dv_W3apfC", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(16, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals((-2530), javaCharStream0.getColumn());
      assertEquals((-2530), javaCharStream0.getEndColumn());
      assertEquals((-2546), javaCharStream0.getBeginColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals(69, javaCharStream0.getLine());
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(17, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2529), token1.beginColumn);
      assertEquals((-2529), token1.endColumn);
      assertEquals(69, token1.endLine);
      assertEquals(91, token1.kind);
      assertEquals(69, token1.beginLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals((-2529), javaCharStream0.getBeginColumn());
      assertEquals((-2529), javaCharStream0.getEndColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals((-2529), javaCharStream0.getColumn());
      assertEquals("?", token1.toString());
      assertNotNull(token1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"...\"");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 33);
      assertNotNull(bufferedReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-9);
      byteArray0[3] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)92, (byte) (-9), (byte)0, (byte)92}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-9), 23);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)92, (byte) (-9), (byte)0, (byte)92}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)92, (byte) (-9), (byte)0, (byte)92}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)92, (byte) (-9), (byte)0, (byte)92}, byteArray0);
      assertNotNull(javaParserTokenManager1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedReader0, (byte)92, 66);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 955, 28, (byte)0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream2);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(javaParserTokenManager2);
      
      Token token0 = javaParserTokenManager2.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream2.bufpos);
      assertEquals(955, token0.beginLine);
      assertEquals(28, token0.beginColumn);
      assertEquals(73, token0.kind);
      assertEquals(32, token0.endColumn);
      assertEquals(955, token0.endLine);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(32, javaCharStream2.getEndColumn());
      assertEquals(32, javaCharStream2.getColumn());
      assertEquals(955, javaCharStream2.getLine());
      assertEquals(955, javaCharStream2.getBeginLine());
      assertEquals(28, javaCharStream2.getBeginColumn());
      assertEquals(955, javaCharStream2.getEndLine());
      assertEquals("\"...\"", token0.toString());
      assertNotNull(token0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)92, (byte) (-9), (byte)0, (byte)92}, byteArray0);
      assertNotNull(javaParserTokenManager3);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager3.SwitchTo(1751);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1751. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)111;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)38, (byte)111, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)111, (byte)38);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)38, (byte)111, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)38, (byte)111, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(105, token0.kind);
      assertEquals(38, token0.beginColumn);
      assertEquals(38, token0.endColumn);
      assertEquals(111, token0.endLine);
      assertEquals(111, token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(111, javaCharStream0.getBeginLine());
      assertEquals(38, javaCharStream0.getEndColumn());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals(111, javaCharStream0.getEndLine());
      assertEquals(111, javaCharStream0.getLine());
      assertEquals("&", token0.toString());
      assertArrayEquals(new byte[] {(byte)38, (byte)111, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("throws");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, (byte)69);
      assertNotNull(bufferedReader0);
      
      int int0 = bufferedReader0.read();
      assertEquals(116, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (byte)69, (-2546));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals('h', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.backup((-2546));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2545, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(69, token0.endLine);
      assertEquals((-2543), token0.endColumn);
      assertEquals(69, token0.beginLine);
      assertEquals((-2546), token0.beginColumn);
      assertEquals(69, javaCharStream0.getLine());
      assertEquals((-2543), javaCharStream0.getEndColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals((-2546), javaCharStream0.getBeginColumn());
      assertEquals((-2543), javaCharStream0.getColumn());
      assertEquals("rows", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2543), token1.endColumn);
      assertEquals(69, token1.beginLine);
      assertEquals((-2543), token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(69, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(69, javaCharStream0.getLine());
      assertEquals((-2543), javaCharStream0.getEndColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals((-2543), javaCharStream0.getBeginColumn());
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals((-2543), javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(69, token2.beginLine);
      assertEquals((-2543), token2.endColumn);
      assertEquals((-2543), token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(69, token2.endLine);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(69, javaCharStream0.getLine());
      assertEquals((-2543), javaCharStream0.getEndColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals((-2543), javaCharStream0.getBeginColumn());
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals((-2543), javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(69, token2.beginLine);
      assertEquals((-2543), token2.endColumn);
      assertEquals((-2543), token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(69, token2.endLine);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(69, javaCharStream0.getLine());
      assertEquals((-2543), javaCharStream0.getEndColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals((-2543), javaCharStream0.getBeginColumn());
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals((-2543), javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iYc&-|6N=B+zn");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 930);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (byte)69, (-668));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedReader0, (-1), (-2546));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals((-1), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-2546), token0.beginColumn);
      assertEquals((-2544), token0.endColumn);
      assertEquals((-1), token0.endLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals((-2546), javaCharStream1.getBeginColumn());
      assertEquals((-2544), javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-2544), javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals("iYc", token0.toString());
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals((-2546), javaCharStream1.getBeginColumn());
      assertEquals((-2544), javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-2544), javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(105, token1.kind);
      assertEquals((-1), token1.endLine);
      assertEquals((-2543), token1.endColumn);
      assertEquals((-2543), token1.beginColumn);
      assertEquals((-1), token1.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals((-2543), javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-2543), javaCharStream1.getEndColumn());
      assertEquals((-2543), javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals("&", token1.toString());
      assertNotNull(token1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PNKETcr0Dv_W3apfC?");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)39, (byte)69, (byte)86, (byte)39, (byte)39, (byte)37, (byte)39, (byte)69}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 49, (byte)37);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)39, (byte)69, (byte)86, (byte)39, (byte)39, (byte)37, (byte)39, (byte)69}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)39, (byte)69, (byte)86, (byte)39, (byte)39, (byte)37, (byte)39, (byte)69}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 49, column 39.  Encountered: \"V\" (86), after : \"\\'E\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)97;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)97, (byte)97}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)97, (byte)97);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)97, (byte)97}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)97, (byte)97}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(97, token0.beginLine);
      assertEquals(97, token0.beginColumn);
      assertEquals(100, token0.endColumn);
      assertEquals(97, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(100, javaCharStream0.getColumn());
      assertEquals(100, javaCharStream0.getEndColumn());
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getBeginLine());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getBeginColumn());
      assertEquals("aaaa", token0.toString());
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)97, (byte)97}, byteArray0);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (int) (byte)97);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 97. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)53, (byte)53);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)53}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)53}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)53}, byteArray0);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(53, token0.endLine);
      assertEquals(53, token0.beginLine);
      assertEquals(53, token0.beginColumn);
      assertEquals(53, token0.endColumn);
      assertEquals(66, token0.kind);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(53, javaCharStream0.getBeginLine());
      assertEquals(53, javaCharStream0.getEndColumn());
      assertEquals(53, javaCharStream0.getLine());
      assertEquals(53, javaCharStream0.getEndLine());
      assertEquals(53, javaCharStream0.getColumn());
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals("5", token0.toString());
      assertArrayEquals(new byte[] {(byte)53}, byteArray0);
      assertNotNull(token0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"...\"");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)33, (byte)23, (byte)3, (byte)64, (byte) (-10), (byte)123}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)123, (-491));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)33, (byte)23, (byte)3, (byte)64, (byte) (-10), (byte)123}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)64, 295);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)33, (byte)23, (byte)3, (byte)64, (byte) (-10), (byte)123}, byteArray0);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)33, (byte)23, (byte)3, (byte)64, (byte) (-10), (byte)123}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)33, (byte)23, (byte)3, (byte)64, (byte) (-10), (byte)123}, byteArray0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)33, (byte)23, (byte)3, (byte)64, (byte) (-10), (byte)123}, byteArray0);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(123, token0.beginLine);
      assertEquals(89, token0.kind);
      assertEquals((-491), token0.endColumn);
      assertEquals((-491), token0.beginColumn);
      assertEquals(123, token0.endLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(123, javaCharStream0.getLine());
      assertEquals(123, javaCharStream0.getBeginLine());
      assertEquals((-491), javaCharStream0.getBeginColumn());
      assertEquals((-491), javaCharStream0.getColumn());
      assertEquals(123, javaCharStream0.getEndLine());
      assertEquals((-491), javaCharStream0.getEndColumn());
      assertEquals("!", token0.toString());
      assertArrayEquals(new byte[] {(byte)33, (byte)23, (byte)3, (byte)64, (byte) (-10), (byte)123}, byteArray0);
      assertNotNull(token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l~EkhO?Suo$:2+ki]q(");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 108);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2546), 108);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals('l', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(90, token0.kind);
      assertEquals((-2546), token0.endLine);
      assertEquals(108, token0.endColumn);
      assertEquals((-2546), token0.beginLine);
      assertEquals(108, token0.beginColumn);
      assertEquals((-2546), javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals((-2546), javaCharStream0.getEndLine());
      assertEquals((-2546), javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getColumn());
      assertEquals("~", token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      javaCharStream0.backup((-12));
      assertEquals(12, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals((-2546), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2546), token1.endLine);
      assertEquals(112, token1.endColumn);
      assertEquals((-2546), token1.beginLine);
      assertEquals(109, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertEquals((-2546), javaCharStream0.getLine());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals((-2546), javaCharStream0.getEndLine());
      assertEquals(109, javaCharStream0.getBeginColumn());
      assertEquals((-2546), javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals("EkhO", token1.toString());
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-2546), javaCharStream0.getLine());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals((-2546), javaCharStream0.getEndLine());
      assertEquals(109, javaCharStream0.getBeginColumn());
      assertEquals((-2546), javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertNotNull(javaParserTokenManager1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(114, token2.beginColumn);
      assertEquals((-2546), token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(117, token2.endColumn);
      assertEquals((-2546), token2.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals((-2546), javaCharStream0.getLine());
      assertEquals((-2546), javaCharStream0.getEndLine());
      assertEquals(117, javaCharStream0.getColumn());
      assertEquals(117, javaCharStream0.getEndColumn());
      assertEquals((-2546), javaCharStream0.getBeginLine());
      assertEquals(114, javaCharStream0.getBeginColumn());
      assertEquals("Suo$", token2.toString());
      assertNotNull(token2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2546), token3.endLine);
      assertEquals((-2546), token3.beginLine);
      assertEquals(66, token3.kind);
      assertEquals(119, token3.endColumn);
      assertEquals(119, token3.beginColumn);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertEquals((-2546), javaCharStream0.getLine());
      assertEquals((-2546), javaCharStream0.getEndLine());
      assertEquals((-2546), javaCharStream0.getBeginLine());
      assertEquals(119, javaCharStream0.getBeginColumn());
      assertEquals(119, javaCharStream0.getColumn());
      assertEquals(119, javaCharStream0.getEndColumn());
      assertEquals("2", token3.toString());
      assertNotNull(token3);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2546), token4.endLine);
      assertEquals(74, token4.kind);
      assertEquals((-2546), token4.beginLine);
      assertEquals(122, token4.endColumn);
      assertEquals(121, token4.beginColumn);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertEquals((-2546), javaCharStream0.getLine());
      assertEquals((-2546), javaCharStream0.getEndLine());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals((-2546), javaCharStream0.getBeginLine());
      assertEquals(121, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals("ki", token4.toString());
      assertNotNull(token4);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)51, (byte)44, (byte)110, (byte)123}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 763, 2145388542);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)51, (byte)44, (byte)110, (byte)123}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)51, (byte)44, (byte)110, (byte)123}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(763, token0.beginLine);
      assertEquals(2145388542, token0.beginColumn);
      assertEquals(2145388542, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(763, token0.endLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(763, javaCharStream0.getLine());
      assertEquals(763, javaCharStream0.getBeginLine());
      assertEquals(2145388542, javaCharStream0.getBeginColumn());
      assertEquals(763, javaCharStream0.getEndLine());
      assertEquals(2145388542, javaCharStream0.getEndColumn());
      assertEquals(2145388542, javaCharStream0.getColumn());
      assertEquals("3", token0.toString());
      assertArrayEquals(new byte[] {(byte)51, (byte)44, (byte)110, (byte)123}, byteArray0);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (byte)44);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 44. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("extendZs");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)103, (byte)90, (byte)116, (byte) (-66), (byte)117}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-2876), 23);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)103, (byte)90, (byte)116, (byte) (-66), (byte)117}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)103, (byte)90, (byte)116, (byte) (-66), (byte)117}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(23, token0.beginColumn);
      assertEquals((-2876), token0.endLine);
      assertEquals(25, token0.endColumn);
      assertEquals((-2876), token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-2876), javaCharStream0.getLine());
      assertEquals((-2876), javaCharStream0.getEndLine());
      assertEquals((-2876), javaCharStream0.getBeginLine());
      assertEquals(25, javaCharStream0.getColumn());
      assertEquals(25, javaCharStream0.getEndColumn());
      assertEquals(23, javaCharStream0.getBeginColumn());
      assertEquals("gZt", token0.toString());
      assertArrayEquals(new byte[] {(byte)103, (byte)90, (byte)116, (byte) (-66), (byte)117}, byteArray0);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-579));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -579. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PNKETcr0Dv_W3apfC?");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, (byte)69);
      assertNotNull(bufferedReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = ']';
      charArray0[4] = 'j';
      charArray0[5] = '';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'P', 'N', 'K', 'E', 'T', 'c'}, charArray0);
      assertEquals(6, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (byte)69, (-2546));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(10, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(69, token0.beginLine);
      assertEquals((-2546), token0.beginColumn);
      assertEquals(69, token0.endLine);
      assertEquals((-2536), token0.endColumn);
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals((-2536), javaCharStream0.getEndColumn());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals((-2536), javaCharStream0.getColumn());
      assertEquals((-2546), javaCharStream0.getBeginColumn());
      assertEquals("r0Dv_W3apfC", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(91, token1.kind);
      assertEquals(69, token1.endLine);
      assertEquals((-2535), token1.endColumn);
      assertEquals((-2535), token1.beginColumn);
      assertEquals(69, token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(11, javaCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertEquals("?", token1.toString());
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals((-2535), javaCharStream0.getColumn());
      assertEquals((-2535), javaCharStream0.getEndColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals((-2535), javaCharStream0.getBeginColumn());
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals((-2535), token2.endColumn);
      assertEquals(69, token2.beginLine);
      assertEquals(69, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals((-2535), token2.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals("", token2.toString());
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals((-2535), javaCharStream0.getColumn());
      assertEquals((-2535), javaCharStream0.getEndColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals((-2535), javaCharStream0.getBeginColumn());
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertEquals((-2535), token2.endColumn);
      assertEquals(69, token2.beginLine);
      assertEquals(69, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals((-2535), token2.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals("", token2.toString());
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals((-2535), javaCharStream0.getColumn());
      assertEquals((-2535), javaCharStream0.getEndColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals((-2535), javaCharStream0.getBeginColumn());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l~EkhO?Suo$:>2+ki]q(");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 108);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2546), 108);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals('l', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2546), token0.endLine);
      assertEquals(90, token0.kind);
      assertEquals(108, token0.endColumn);
      assertEquals((-2546), token0.beginLine);
      assertEquals(108, token0.beginColumn);
      assertEquals(108, javaCharStream0.getColumn());
      assertEquals((-2546), javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals((-2546), javaCharStream0.getEndLine());
      assertEquals((-2546), javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getEndColumn());
      assertEquals("~", token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      javaCharStream0.backup((-12));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(12, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-2546), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(109, token1.beginColumn);
      assertEquals((-2546), token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals((-2546), token1.endLine);
      assertEquals(112, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(109, javaCharStream0.getBeginColumn());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals((-2546), javaCharStream0.getLine());
      assertEquals((-2546), javaCharStream0.getEndLine());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals((-2546), javaCharStream0.getBeginLine());
      assertEquals("EkhO", token1.toString());
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(109, javaCharStream0.getBeginColumn());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals((-2546), javaCharStream0.getLine());
      assertEquals((-2546), javaCharStream0.getEndLine());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals((-2546), javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2546), token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(117, token2.endColumn);
      assertEquals(114, token2.beginColumn);
      assertEquals((-2546), token2.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals((-2546), javaCharStream0.getLine());
      assertEquals((-2546), javaCharStream0.getEndLine());
      assertEquals(117, javaCharStream0.getEndColumn());
      assertEquals(117, javaCharStream0.getColumn());
      assertEquals((-2546), javaCharStream0.getBeginLine());
      assertEquals(114, javaCharStream0.getBeginColumn());
      assertEquals("Suo$", token2.toString());
      assertNotNull(token2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2546), token3.endLine);
      assertEquals((-2546), token3.beginLine);
      assertEquals(119, token3.beginColumn);
      assertEquals(124, token3.kind);
      assertEquals(119, token3.endColumn);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals((-2546), javaCharStream0.getLine());
      assertEquals((-2546), javaCharStream0.getEndLine());
      assertEquals(119, javaCharStream0.getBeginColumn());
      assertEquals(119, javaCharStream0.getEndColumn());
      assertEquals((-2546), javaCharStream0.getBeginLine());
      assertEquals(119, javaCharStream0.getColumn());
      assertEquals(">", token3.toString());
      assertNotNull(token3);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(121, token4.endColumn);
      assertEquals(101, token4.kind);
      assertEquals((-2546), token4.beginLine);
      assertEquals(121, token4.beginColumn);
      assertEquals((-2546), token4.endLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertEquals((-2546), javaCharStream0.getLine());
      assertEquals((-2546), javaCharStream0.getEndLine());
      assertEquals(121, javaCharStream0.getBeginColumn());
      assertEquals((-2546), javaCharStream0.getBeginLine());
      assertEquals(121, javaCharStream0.getEndColumn());
      assertEquals(121, javaCharStream0.getColumn());
      assertEquals("+", token4.toString());
      assertNotNull(token4);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("extendZs");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)44;
      byteArray0[4] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)110, (byte)44, (byte)0, (byte)0, (byte)51}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)0, 22);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)110, (byte)44, (byte)0, (byte)0, (byte)51}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)110, (byte)44, (byte)0, (byte)0, (byte)51}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)110, (byte)44, (byte)0, (byte)0, (byte)51}, byteArray0);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(22, token0.endColumn);
      assertEquals(22, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals("n", token0.toString());
      assertArrayEquals(new byte[] {(byte)110, (byte)44, (byte)0, (byte)0, (byte)51}, byteArray0);
      assertNotNull(token0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 8. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("extendZs");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)44;
      byteArray0[4] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)110, (byte)44, (byte)0, (byte)0, (byte)51}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)0, 22);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)110, (byte)44, (byte)0, (byte)0, (byte)51}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)110, (byte)44, (byte)0, (byte)0, (byte)51}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)110, (byte)44, (byte)0, (byte)0, (byte)51}, byteArray0);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(22, token0.endColumn);
      assertEquals(22, token0.beginColumn);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("n", token0.toString());
      assertArrayEquals(new byte[] {(byte)110, (byte)44, (byte)0, (byte)0, (byte)51}, byteArray0);
      assertNotNull(token0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte)110, (byte)44, (byte)0, (byte)0, (byte)51}, byteArray0);
      assertNotNull(javaParserTokenManager2);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(23, token1.beginColumn);
      assertEquals(23, token1.endColumn);
      assertEquals(84, token1.kind);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(23, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals(",", token1.toString());
      assertArrayEquals(new byte[] {(byte)110, (byte)44, (byte)0, (byte)0, (byte)51}, byteArray0);
      assertNotNull(token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token1, token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 24.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l~EkhO?Suo$:2+ki]q(");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 108);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 108, 108);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals('l', char0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)119;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)62, (byte)105, (byte)119}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)62, (byte)105);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)62, (byte)105, (byte)119}, byteArray0);
      assertNotNull(javaCharStream1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)62, (byte)105, (byte)119}, byteArray0);
      assertNotNull(javaCharStream2);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)62, (byte)105, (byte)119}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(124, token0.kind);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals(1, javaCharStream2.getEndColumn());
      assertEquals(1, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(1, javaCharStream2.getColumn());
      assertEquals(">", token0.toString());
      assertArrayEquals(new byte[] {(byte)62, (byte)105, (byte)119}, byteArray0);
      assertNotNull(token0);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, javaCharStream2.getEndColumn());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals(3, javaCharStream2.getColumn());
      assertEquals(2, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals("iw", token1.toString());
      assertArrayEquals(new byte[] {(byte)62, (byte)105, (byte)119}, byteArray0);
      assertNotNull(token1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)90, (byte)90);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader0 = new StringReader("\"static\"");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, 1770);
      assertNotNull(pushbackReader0);
      
      javaCharStream0.inputStream = (Reader) pushbackReader0;
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 12, 83);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(97, token0.endColumn);
      assertEquals(90, token0.endLine);
      assertEquals(90, token0.beginColumn);
      assertEquals(73, token0.kind);
      assertEquals(90, token0.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(97, javaCharStream0.getColumn());
      assertEquals(97, javaCharStream0.getEndColumn());
      assertEquals(90, javaCharStream0.getLine());
      assertEquals("\"static\"", token0.toString());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertNotNull(token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l~EkhO?Suo$:>2+ki]q(");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 65);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 65, 35);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)40;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)40, (byte)105, (byte)40, (byte)40, (byte)40, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)105, (byte)40);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)40, (byte)105, (byte)40, (byte)40, (byte)40, (byte)0}, byteArray0);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)40, (byte)105, (byte)40, (byte)40, (byte)40, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager2);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(65, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(35, token0.beginColumn);
      assertEquals(35, token0.endColumn);
      assertEquals(65, token0.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertEquals(35, javaCharStream0.getColumn());
      assertEquals(35, javaCharStream0.getEndColumn());
      assertEquals(35, javaCharStream0.getBeginColumn());
      assertEquals(65, javaCharStream0.getEndLine());
      assertEquals(65, javaCharStream0.getBeginLine());
      assertEquals(65, javaCharStream0.getLine());
      assertEquals("l", token0.toString());
      assertNotNull(token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      
      Token token1 = javaParserTokenManager2.getNextToken();
      assertEquals(40, token1.beginColumn);
      assertEquals(105, token1.endLine);
      assertEquals(105, token1.beginLine);
      assertEquals(77, token1.kind);
      assertEquals(40, token1.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals("(", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(105, javaCharStream1.getBeginLine());
      assertEquals(40, javaCharStream1.getColumn());
      assertEquals(105, javaCharStream1.getEndLine());
      assertEquals(105, javaCharStream1.getLine());
      assertEquals(40, javaCharStream1.getBeginColumn());
      assertEquals(40, javaCharStream1.getEndColumn());
      assertArrayEquals(new byte[] {(byte)40, (byte)105, (byte)40, (byte)40, (byte)40, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertEquals(65, token2.endLine);
      assertEquals(65, token2.beginLine);
      assertEquals(90, token2.kind);
      assertEquals(36, token2.beginColumn);
      assertEquals(36, token2.endColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertEquals("~", token2.toString());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(36, javaCharStream0.getEndColumn());
      assertEquals(36, javaCharStream0.getColumn());
      assertEquals(65, javaCharStream0.getEndLine());
      assertEquals(65, javaCharStream0.getBeginLine());
      assertEquals(65, javaCharStream0.getLine());
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      
      javaParserTokenManager1.SkipLexicalActions(token2);
      assertEquals(65, token2.endLine);
      assertEquals(65, token2.beginLine);
      assertEquals(90, token2.kind);
      assertEquals(36, token2.beginColumn);
      assertEquals(36, token2.endColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertEquals("~", token2.toString());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(36, javaCharStream0.getEndColumn());
      assertEquals(36, javaCharStream0.getColumn());
      assertEquals(65, javaCharStream0.getEndLine());
      assertEquals(65, javaCharStream0.getBeginLine());
      assertEquals(65, javaCharStream0.getLine());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      
      Token token3 = javaParserTokenManager2.getNextToken();
      assertEquals(105, token3.endLine);
      assertEquals(41, token3.beginColumn);
      assertEquals(74, token3.kind);
      assertEquals(105, token3.beginLine);
      assertEquals(41, token3.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals("i", token3.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(105, javaCharStream1.getBeginLine());
      assertEquals(41, javaCharStream1.getColumn());
      assertEquals(105, javaCharStream1.getEndLine());
      assertEquals(105, javaCharStream1.getLine());
      assertEquals(41, javaCharStream1.getEndColumn());
      assertEquals(41, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)40, (byte)105, (byte)40, (byte)40, (byte)40, (byte)0}, byteArray0);
      assertNotNull(token3);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Cql|+r0dbEF:Wp'Ap?c");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 255, 255);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals('C', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(255, token0.endLine);
      assertEquals(255, token0.beginColumn);
      assertEquals(255, token0.beginLine);
      assertEquals(256, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(255, javaCharStream0.getBeginColumn());
      assertEquals(255, javaCharStream0.getLine());
      assertEquals(255, javaCharStream0.getBeginLine());
      assertEquals(256, javaCharStream0.getEndColumn());
      assertEquals(255, javaCharStream0.getEndLine());
      assertEquals(256, javaCharStream0.getColumn());
      assertEquals("ql", token0.toString());
      assertNotNull(token0);
      
      StringReader stringReader1 = new StringReader("Cql|+r0dbEF:Wp'Ap?c");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      boolean boolean0 = stringReader1.ready();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(boolean0);
      assertNotSame(stringReader1, stringReader0);
      
      javaCharStream0.backup(106);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3991, javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(255, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(255, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertNotSame(stringReader0, stringReader1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)90, (byte)90);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = '<';
      charArray0[2] = 'm';
      charArray0[3] = 'I';
      charArray0[4] = 'M';
      charArray0[5] = '\"';
      charArray0[6] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'d', '<', 'm', 'I', 'M', '\"', 'u'}, charArray0);
      assertNotNull(charArrayReader0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0, 28, 28, (int) (byte)90);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertArrayEquals(new char[] {'d', '<', 'm', 'I', 'M', '\"', 'u'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(28, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(28, token0.endLine);
      assertEquals(28, token0.beginLine);
      assertEquals(28, token0.beginColumn);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(28, javaCharStream0.getColumn());
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals(28, javaCharStream0.getBeginColumn());
      assertEquals(28, javaCharStream0.getEndColumn());
      assertEquals("d", token0.toString());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(28, token1.beginLine);
      assertEquals(28, token1.endLine);
      assertEquals(29, token1.endColumn);
      assertEquals(29, token1.beginColumn);
      assertEquals(88, token1.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertEquals("<", token1.toString());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(29, javaCharStream0.getEndColumn());
      assertEquals(29, javaCharStream0.getColumn());
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals(29, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(28, token2.endLine);
      assertEquals(32, token2.endColumn);
      assertEquals(30, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(28, token2.beginLine);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals("mIM", token2.toString());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals(30, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(11, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-1), (byte)115);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(11, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(11, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(116, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(115, token0.beginColumn);
      assertEquals((-1), token0.endLine);
      assertEquals((-1), token0.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(116, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(115, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(116, javaCharStream1.getEndColumn());
      assertEquals("ss", token0.toString());
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("extendZs");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)110;
      byteArray0[4] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)110, (byte)110, (byte)0, (byte)0, (byte)51}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)0, 22);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)110, (byte)110, (byte)0, (byte)0, (byte)51}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)110, (byte)110, (byte)0, (byte)0, (byte)51}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)110, (byte)110, (byte)0, (byte)0, (byte)51}, byteArray0);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(22, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(23, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(22, javaCharStream0.getBeginColumn());
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals("nn", token0.toString());
      assertArrayEquals(new byte[] {(byte)110, (byte)110, (byte)0, (byte)0, (byte)51}, byteArray0);
      assertNotNull(token0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 8. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)77;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte)77;
      byteArray1[2] = (byte) (-66);
      byteArray1[1] = (byte) (-66);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)77, (byte) (-66), (byte) (-66), (byte)0}, byteArray1);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)77, (-976));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)77, (byte) (-66), (byte) (-66), (byte)0}, byteArray1);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)77, (byte) (-66), (byte) (-66), (byte)0}, byteArray1);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(77, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-976), token0.beginColumn);
      assertEquals((-976), token0.endColumn);
      assertEquals(77, token0.beginLine);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(77, javaCharStream0.getLine());
      assertEquals((-976), javaCharStream0.getBeginColumn());
      assertEquals((-976), javaCharStream0.getColumn());
      assertEquals((-976), javaCharStream0.getEndColumn());
      assertEquals(77, javaCharStream0.getEndLine());
      assertEquals(77, javaCharStream0.getBeginLine());
      assertEquals("M", token0.toString());
      assertArrayEquals(new byte[] {(byte)77, (byte) (-66), (byte) (-66), (byte)0}, byteArray1);
      assertNotNull(token0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)98;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)38, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)98, (byte)38);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)38, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals(98, javaCharStream0.getLine());
      assertEquals(98, javaCharStream0.getEndLine());
      assertEquals(98, javaCharStream0.getBeginLine());
      assertEquals(38, javaCharStream0.getEndColumn());
      assertArrayEquals(new byte[] {(byte)38, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals('&', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals(98, javaCharStream0.getLine());
      assertEquals(98, javaCharStream0.getEndLine());
      assertEquals(98, javaCharStream0.getBeginLine());
      assertEquals(38, javaCharStream0.getEndColumn());
      assertArrayEquals(new byte[] {(byte)38, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(39, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(98, token0.beginLine);
      assertEquals(98, token0.endLine);
      assertEquals(39, token0.endColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(98, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getBeginColumn());
      assertEquals(98, javaCharStream0.getEndLine());
      assertEquals(39, javaCharStream0.getColumn());
      assertEquals(98, javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getEndColumn());
      assertEquals("b", token0.toString());
      assertArrayEquals(new byte[] {(byte)38, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(98, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getBeginColumn());
      assertEquals(98, javaCharStream0.getEndLine());
      assertEquals(39, javaCharStream0.getColumn());
      assertEquals(98, javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getEndColumn());
      assertArrayEquals(new byte[] {(byte)38, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)65}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)65, (byte)65, (byte)65);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)65}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)65}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(65, token0.beginLine);
      assertEquals(65, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(65, token0.endColumn);
      assertEquals(65, token0.beginColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(65, javaCharStream0.getBeginColumn());
      assertEquals(65, javaCharStream0.getEndColumn());
      assertEquals(65, javaCharStream0.getColumn());
      assertEquals(65, javaCharStream0.getLine());
      assertEquals(65, javaCharStream0.getBeginLine());
      assertEquals(65, javaCharStream0.getEndLine());
      assertEquals("A", token0.toString());
      assertArrayEquals(new byte[] {(byte)65}, byteArray0);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l~EkhO?Suo$:2+ki]q(");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 108);
      assertNotNull(bufferedReader0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte) (-15);
      byteArray0[8] = (byte) (-41);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)123, (byte)14, (byte)119, (byte) (-101), (byte) (-64), (byte) (-7), (byte)29, (byte) (-15), (byte) (-41)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)119, (byte)119);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)123, (byte)14, (byte)119, (byte) (-101), (byte) (-64), (byte) (-7), (byte)29, (byte) (-15), (byte) (-41)}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)123, (byte)14, (byte)119, (byte) (-101), (byte) (-64), (byte) (-7), (byte)29, (byte) (-15), (byte) (-41)}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      byteArrayInputStream0.close();
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)123, (byte)14, (byte)119, (byte) (-101), (byte) (-64), (byte) (-7), (byte)29, (byte) (-15), (byte) (-41)}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(79, token0.kind);
      assertEquals(119, token0.beginColumn);
      assertEquals(119, token0.beginLine);
      assertEquals(119, token0.endLine);
      assertEquals(119, token0.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("{", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(119, javaCharStream0.getBeginColumn());
      assertEquals(119, javaCharStream0.getEndColumn());
      assertEquals(119, javaCharStream0.getLine());
      assertEquals(119, javaCharStream0.getBeginLine());
      assertEquals(119, javaCharStream0.getEndLine());
      assertEquals(119, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)123, (byte)14, (byte)119, (byte) (-101), (byte) (-64), (byte) (-7), (byte)29, (byte) (-15), (byte) (-41)}, byteArray0);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("throK|ws");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, (byte)69);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (byte)69, (-2546));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2546), token0.beginColumn);
      assertEquals((-2542), token0.endColumn);
      assertEquals(69, token0.endLine);
      assertEquals(69, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals((-2542), javaCharStream0.getEndColumn());
      assertEquals((-2542), javaCharStream0.getColumn());
      assertEquals((-2546), javaCharStream0.getBeginColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals("throK", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (byte)69);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 69. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)90, (byte)90);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = '<';
      charArray0[2] = 'q';
      charArray0[3] = 'I';
      charArray0[4] = 'M';
      charArray0[5] = '\"';
      charArray0[6] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'d', '<', 'q', 'I', 'M', '\"', 'u'}, charArray0);
      assertNotNull(charArrayReader0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0, (-3), (-3), (int) (byte)90);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertArrayEquals(new char[] {'d', '<', 'q', 'I', 'M', '\"', 'u'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-3), token0.endLine);
      assertEquals((-3), token0.beginLine);
      assertEquals((-3), token0.beginColumn);
      assertEquals((-3), token0.endColumn);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-3), javaCharStream0.getLine());
      assertEquals((-3), javaCharStream0.getEndColumn());
      assertEquals((-3), javaCharStream0.getBeginColumn());
      assertEquals((-3), javaCharStream0.getColumn());
      assertEquals((-3), javaCharStream0.getBeginLine());
      assertEquals((-3), javaCharStream0.getEndLine());
      assertEquals("d", token0.toString());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals((-2), token1.endColumn);
      assertEquals((-2), token1.beginColumn);
      assertEquals(88, token1.kind);
      assertEquals((-3), token1.endLine);
      assertEquals((-3), token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertEquals("<", token1.toString());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-3), javaCharStream0.getLine());
      assertEquals((-2), javaCharStream0.getColumn());
      assertEquals((-2), javaCharStream0.getEndColumn());
      assertEquals((-2), javaCharStream0.getBeginColumn());
      assertEquals((-3), javaCharStream0.getBeginLine());
      assertEquals((-3), javaCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(1, token2.endColumn);
      assertEquals((-1), token2.beginColumn);
      assertEquals((-3), token2.endLine);
      assertEquals((-3), token2.beginLine);
      assertEquals(74, token2.kind);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals("qIM", token2.toString());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-3), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-3), javaCharStream0.getBeginLine());
      assertEquals((-3), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals((-2), token1.endColumn);
      assertEquals((-2), token1.beginColumn);
      assertEquals(88, token1.kind);
      assertEquals((-3), token1.endLine);
      assertEquals((-3), token1.beginLine);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token0));
      assertEquals("<", token1.toString());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-3), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-3), javaCharStream0.getBeginLine());
      assertEquals((-3), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertNotSame(token1, token2);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)122;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)122}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)122, (byte)122);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)122}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)122}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      byteArrayInputStream0.close();
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)122}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(122, token0.endColumn);
      assertEquals(122, token0.endLine);
      assertEquals(122, token0.beginColumn);
      assertEquals(122, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals("z", token0.toString());
      assertArrayEquals(new byte[] {(byte)122}, byteArray0);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(11, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-1), (byte)114);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(11, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(11, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token0.beginLine);
      assertEquals((-1), token0.endLine);
      assertEquals(115, token0.endColumn);
      assertEquals(114, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(115, javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(115, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals(114, javaCharStream1.getBeginColumn());
      assertEquals("rr", token0.toString());
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 920, (byte)95);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(920, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(920, token0.beginLine);
      assertEquals(95, token0.endColumn);
      assertEquals(95, token0.beginColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(95, javaCharStream0.getColumn());
      assertEquals(920, javaCharStream0.getBeginLine());
      assertEquals(920, javaCharStream0.getLine());
      assertEquals(920, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getEndColumn());
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals("_", token0.toString());
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(95, javaCharStream0.getColumn());
      assertEquals(920, javaCharStream0.getBeginLine());
      assertEquals(920, javaCharStream0.getLine());
      assertEquals(920, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getEndColumn());
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(920, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(95, token1.beginColumn);
      assertEquals(95, token1.endColumn);
      assertEquals(920, token1.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(95, javaCharStream0.getColumn());
      assertEquals(920, javaCharStream0.getBeginLine());
      assertEquals(920, javaCharStream0.getLine());
      assertEquals(920, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getEndColumn());
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 920, column 96.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("etendZs");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)76, (byte) (-19), (byte) (-35), (byte)57, (byte)8}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)76, (byte) (-35));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)76, (byte) (-19), (byte) (-35), (byte)57, (byte)8}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)76, (byte) (-19), (byte) (-35), (byte)57, (byte)8}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(76, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-35), token0.beginColumn);
      assertEquals(76, token0.beginLine);
      assertEquals((-35), token0.endColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-35), javaCharStream0.getBeginColumn());
      assertEquals((-35), javaCharStream0.getColumn());
      assertEquals(76, javaCharStream0.getEndLine());
      assertEquals((-35), javaCharStream0.getEndColumn());
      assertEquals(76, javaCharStream0.getBeginLine());
      assertEquals(76, javaCharStream0.getLine());
      assertEquals("L", token0.toString());
      assertArrayEquals(new byte[] {(byte)76, (byte) (-19), (byte) (-35), (byte)57, (byte)8}, byteArray0);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 76, column -34.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lwyyJw@pATR");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-2624), (-2624));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(6, token0.endColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("lwyyJw", token0.toString());
      assertNotNull(token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(86, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(7, token1.endColumn);
      assertEquals(7, token1.beginColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("@", token1.toString());
      assertNotNull(token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)89;
      byteArray0[1] = (byte)89;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)89, (byte)89, (byte)89, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)89, (byte)89);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)89, (byte)89, (byte)89, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)89, (byte)89, (byte)89, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(89, token0.endLine);
      assertEquals(89, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(89, token0.beginLine);
      assertEquals(91, token0.endColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(89, javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(89, javaCharStream0.getBeginLine());
      assertEquals(89, javaCharStream0.getEndLine());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals("YYY", token0.toString());
      assertArrayEquals(new byte[] {(byte)89, (byte)89, (byte)89, (byte)0}, byteArray0);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 89, column 93.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)38;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)38, (byte)38);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(38, token0.beginLine);
      assertEquals(38, token0.beginColumn);
      assertEquals(39, token0.endColumn);
      assertEquals(38, token0.endLine);
      assertEquals(98, token0.kind);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(39, javaCharStream0.getColumn());
      assertEquals(38, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getEndColumn());
      assertEquals(38, javaCharStream0.getEndLine());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals(38, javaCharStream0.getBeginLine());
      assertEquals("&&", token0.toString());
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "|fUF2)hlslc)|<uAV";
      StringReader stringReader0 = new StringReader("|fUF2)hlslc)|<uAV");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 255, 255);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m");
      assertFalse(boolean0);
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals('|', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(255, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(255, token0.beginLine);
      assertEquals(258, token0.endColumn);
      assertEquals(255, token0.beginColumn);
      assertEquals(255, javaCharStream0.getLine());
      assertEquals(258, javaCharStream0.getColumn());
      assertEquals(255, javaCharStream0.getEndLine());
      assertEquals(255, javaCharStream0.getBeginColumn());
      assertEquals(255, javaCharStream0.getBeginLine());
      assertEquals(258, javaCharStream0.getEndColumn());
      assertEquals("fUF2", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        stringReader0.mark((-1834));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PNKTc0Dv_WapfC?");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, (byte)69);
      assertNotNull(bufferedReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[4] = 'j';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'P', 'N', 'K', 'T', 'c', '0'}, charArray0);
      assertEquals(6, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (byte)69, (-2546));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals((-2539), token0.endColumn);
      assertEquals(69, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-2546), token0.beginColumn);
      assertEquals(69, token0.beginLine);
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals((-2539), javaCharStream0.getEndColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals((-2546), javaCharStream0.getBeginColumn());
      assertEquals((-2539), javaCharStream0.getColumn());
      assertEquals("Dv_WapfC", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(69, token1.beginLine);
      assertEquals((-2538), token1.beginColumn);
      assertEquals(69, token1.endLine);
      assertEquals((-2538), token1.endColumn);
      assertEquals(91, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals((-2538), javaCharStream0.getBeginColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals((-2538), javaCharStream0.getEndColumn());
      assertEquals((-2538), javaCharStream0.getColumn());
      assertEquals("?", token1.toString());
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      Token token2 = Token.newToken((-2546));
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNull(token2.toString());
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals((-2538), javaCharStream0.getBeginColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals((-2538), javaCharStream0.getEndColumn());
      assertEquals((-2538), javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fw\u0007MJb'!#W");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, (byte)69);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 108, 108);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals('F', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(108, token0.endLine);
      assertEquals(108, token0.endColumn);
      assertEquals(108, token0.beginLine);
      assertEquals(108, token0.beginColumn);
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(108, javaCharStream0.getColumn());
      assertEquals("w", token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      javaCharStream0.backup(14);
      assertEquals(4082, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = ';';
      charArray0[2] = 'M';
      charArray0[3] = '$';
      charArray0[4] = 'D';
      charArray0[5] = '|';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'g', ';', 'M', '$', 'D', '|'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertArrayEquals(new char[] {'g', ';', 'M', '$', 'D', '|'}, charArray0);
      assertNotNull(lineNumberReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(lineNumberReader0, (byte)69);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertArrayEquals(new char[] {'g', ';', 'M', '$', 'D', '|'}, charArray0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 21, 21);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'g', ';', 'M', '$', 'D', '|'}, charArray0);
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m");
      assertFalse(boolean0);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'g', ';', 'M', '$', 'D', '|'}, charArray0);
      assertEquals('g', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'g', ';', 'M', '$', 'D', '|'}, charArray0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(21, token0.endColumn);
      assertEquals(21, token0.beginLine);
      assertEquals(21, token0.beginColumn);
      assertEquals(83, token0.kind);
      assertEquals(21, token0.endLine);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(21, javaCharStream0.getBeginLine());
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getColumn());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(21, javaCharStream0.getEndLine());
      assertEquals(";", token0.toString());
      assertArrayEquals(new char[] {'g', ';', 'M', '$', 'D', '|'}, charArray0);
      assertNotNull(token0);
      
      StringReader stringReader0 = new StringReader("Fw\u0007MJb'!#W");
      assertNotNull(stringReader0);
      
      boolean boolean1 = stringReader0.ready();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(21, javaCharStream0.getBeginLine());
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getColumn());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(21, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'g', ';', 'M', '$', 'D', '|'}, charArray0);
      
      javaCharStream0.backup(21);
      assertEquals(6123, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(21, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertArrayEquals(new char[] {'g', ';', 'M', '$', 'D', '|'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|fUF2)hlslc)|<uAV");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 108);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 79, (-268));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals('|', char0);
      assertNotSame(stringReader0, stringReader1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-265), token0.endColumn);
      assertEquals(79, token0.beginLine);
      assertEquals((-268), token0.beginColumn);
      assertEquals(79, token0.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(79, javaCharStream0.getLine());
      assertEquals(79, javaCharStream0.getEndLine());
      assertEquals((-268), javaCharStream0.getBeginColumn());
      assertEquals((-265), javaCharStream0.getColumn());
      assertEquals((-265), javaCharStream0.getEndColumn());
      assertEquals(79, javaCharStream0.getBeginLine());
      assertEquals("fUF2", token0.toString());
      assertNotNull(token0);
      assertNotSame(stringReader0, stringReader1);
      
      boolean boolean0 = stringReader1.ready();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(boolean0);
      assertNotSame(stringReader1, stringReader0);
      
      javaCharStream0.backup((-268));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(271, javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals((-268), javaCharStream0.getBeginColumn());
      assertEquals(79, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertNotSame(stringReader0, stringReader1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(79, token1.endLine);
      assertEquals(79, token1.beginLine);
      assertEquals((-259), token1.endColumn);
      assertEquals((-263), token1.beginColumn);
      assertEquals(74, token1.kind);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(79, javaCharStream0.getLine());
      assertEquals(79, javaCharStream0.getEndLine());
      assertEquals((-259), javaCharStream0.getColumn());
      assertEquals((-263), javaCharStream0.getBeginColumn());
      assertEquals(79, javaCharStream0.getBeginLine());
      assertEquals((-259), javaCharStream0.getEndColumn());
      assertEquals("hlslc", token1.toString());
      assertNotNull(token1);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(79, javaCharStream0.getLine());
      assertEquals(79, javaCharStream0.getEndLine());
      assertEquals((-259), javaCharStream0.getColumn());
      assertEquals((-263), javaCharStream0.getBeginColumn());
      assertEquals(79, javaCharStream0.getBeginLine());
      assertEquals((-259), javaCharStream0.getEndColumn());
      assertNotNull(javaParserTokenManager1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(79, token2.endLine);
      assertEquals(79, token2.beginLine);
      assertEquals((-257), token2.beginColumn);
      assertEquals((-257), token2.endColumn);
      assertEquals(106, token2.kind);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals((-257), javaCharStream0.getColumn());
      assertEquals((-257), javaCharStream0.getEndColumn());
      assertEquals(79, javaCharStream0.getLine());
      assertEquals(79, javaCharStream0.getEndLine());
      assertEquals(79, javaCharStream0.getBeginLine());
      assertEquals((-257), javaCharStream0.getBeginColumn());
      assertEquals("|", token2.toString());
      assertNotNull(token2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(79, token3.endLine);
      assertEquals(79, token3.beginLine);
      assertEquals((-255), token3.beginColumn);
      assertEquals((-253), token3.endColumn);
      assertEquals(74, token3.kind);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertEquals((-255), javaCharStream0.getBeginColumn());
      assertEquals(79, javaCharStream0.getLine());
      assertEquals(79, javaCharStream0.getEndLine());
      assertEquals((-253), javaCharStream0.getEndColumn());
      assertEquals(79, javaCharStream0.getBeginLine());
      assertEquals((-253), javaCharStream0.getColumn());
      assertEquals("uAV", token3.toString());
      assertNotNull(token3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)44;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)47, (byte)44, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-976), (byte)110);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)47, (byte)44, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)47, (byte)44, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(104, token0.kind);
      assertEquals((-976), token0.endLine);
      assertEquals(110, token0.endColumn);
      assertEquals((-976), token0.beginLine);
      assertEquals(110, token0.beginColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-976), javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals((-976), javaCharStream0.getBeginLine());
      assertEquals((-976), javaCharStream0.getLine());
      assertEquals("/", token0.toString());
      assertArrayEquals(new byte[] {(byte)47, (byte)44, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-976), javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals((-976), javaCharStream0.getBeginLine());
      assertEquals((-976), javaCharStream0.getLine());
      assertArrayEquals(new byte[] {(byte)47, (byte)44, (byte)0, (byte)0}, byteArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-976), token1.beginLine);
      assertEquals(84, token1.kind);
      assertEquals(111, token1.endColumn);
      assertEquals(111, token1.beginColumn);
      assertEquals((-976), token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-976), javaCharStream0.getEndLine());
      assertEquals(111, javaCharStream0.getBeginColumn());
      assertEquals(111, javaCharStream0.getEndColumn());
      assertEquals(111, javaCharStream0.getColumn());
      assertEquals((-976), javaCharStream0.getBeginLine());
      assertEquals((-976), javaCharStream0.getLine());
      assertEquals(",", token1.toString());
      assertArrayEquals(new byte[] {(byte)47, (byte)44, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-701), 12);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(12, token0.beginColumn);
      assertEquals(12, token0.endColumn);
      assertEquals((-701), token0.beginLine);
      assertEquals(104, token0.kind);
      assertEquals((-701), token0.endLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-701), javaCharStream0.getEndLine());
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals((-701), javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getBeginColumn());
      assertEquals((-701), javaCharStream0.getLine());
      assertEquals(12, javaCharStream0.getColumn());
      assertEquals("/", token0.toString());
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 17);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 17. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)49, (byte)69, (byte)69}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)69, (byte)49);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)49, (byte)69, (byte)69}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 1972, (byte)69, 48);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)49, (byte)69, (byte)69}, byteArray0);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)49, (byte)69, (byte)69}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjmatchedPos = (int) (byte)49;
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1972, token0.endLine);
      assertEquals(71, token0.endColumn);
      assertEquals(69, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1972, token0.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(71, javaCharStream1.getColumn());
      assertEquals(1972, javaCharStream1.getEndLine());
      assertEquals(71, javaCharStream1.getEndColumn());
      assertEquals(1972, javaCharStream1.getBeginLine());
      assertEquals(69, javaCharStream1.getBeginColumn());
      assertEquals(1972, javaCharStream1.getLine());
      assertEquals("1EE", token0.toString());
      assertArrayEquals(new byte[] {(byte)49, (byte)69, (byte)69}, byteArray0);
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(71, token1.endColumn);
      assertEquals(1972, token1.endLine);
      assertEquals(1972, token1.beginLine);
      assertEquals(69, token1.beginColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(71, javaCharStream1.getColumn());
      assertEquals(1972, javaCharStream1.getEndLine());
      assertEquals(71, javaCharStream1.getEndColumn());
      assertEquals(1972, javaCharStream1.getBeginLine());
      assertEquals(69, javaCharStream1.getBeginColumn());
      assertEquals(1972, javaCharStream1.getLine());
      assertEquals("1EE", token1.toString());
      assertArrayEquals(new byte[] {(byte)49, (byte)69, (byte)69}, byteArray0);
      assertNotNull(token1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l~EkhO?Suo$:>2+ki]q(");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)110, (byte)51, (byte)44, (byte)27, (byte)51}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 23, 119);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)110, (byte)51, (byte)44, (byte)27, (byte)51}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-848), (-976), 906);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)110, (byte)51, (byte)44, (byte)27, (byte)51}, byteArray0);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)110, (byte)51, (byte)44, (byte)27, (byte)51}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-975), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-848), token0.endLine);
      assertEquals((-848), token0.beginLine);
      assertEquals((-976), token0.beginColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-976), javaCharStream1.getBeginColumn());
      assertEquals((-848), javaCharStream1.getEndLine());
      assertEquals((-975), javaCharStream1.getColumn());
      assertEquals((-848), javaCharStream1.getBeginLine());
      assertEquals((-848), javaCharStream1.getLine());
      assertEquals((-975), javaCharStream1.getEndColumn());
      assertEquals("n3", token0.toString());
      assertArrayEquals(new byte[] {(byte)110, (byte)51, (byte)44, (byte)27, (byte)51}, byteArray0);
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-976), javaCharStream1.getBeginColumn());
      assertEquals((-848), javaCharStream1.getEndLine());
      assertEquals((-975), javaCharStream1.getColumn());
      assertEquals((-848), javaCharStream1.getBeginLine());
      assertEquals((-848), javaCharStream1.getLine());
      assertEquals((-975), javaCharStream1.getEndColumn());
      assertArrayEquals(new byte[] {(byte)110, (byte)51, (byte)44, (byte)27, (byte)51}, byteArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(84, token1.kind);
      assertEquals((-974), token1.endColumn);
      assertEquals((-974), token1.beginColumn);
      assertEquals((-848), token1.endLine);
      assertEquals((-848), token1.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-974), javaCharStream1.getColumn());
      assertEquals((-848), javaCharStream1.getEndLine());
      assertEquals((-848), javaCharStream1.getBeginLine());
      assertEquals((-974), javaCharStream1.getEndColumn());
      assertEquals((-848), javaCharStream1.getLine());
      assertEquals((-974), javaCharStream1.getBeginColumn());
      assertEquals(",", token1.toString());
      assertArrayEquals(new byte[] {(byte)110, (byte)51, (byte)44, (byte)27, (byte)51}, byteArray0);
      assertNotNull(token1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hQYHky#VO4");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 65);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 8, 2090);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)105;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)105, (byte)40, (byte)105, (byte)40, (byte)40, (byte)40, (byte)105, (byte)105}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, Integer.MAX_VALUE, 97);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)105, (byte)40, (byte)105, (byte)40, (byte)40, (byte)40, (byte)105, (byte)105}, byteArray0);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(8, token0.endLine);
      assertEquals(2090, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(8, token0.beginLine);
      assertEquals(2095, token0.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals("hQYHky", token0.toString());
      assertEquals(8, javaCharStream0.getBeginLine());
      assertEquals(2095, javaCharStream0.getColumn());
      assertEquals(2090, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getEndLine());
      assertEquals(2095, javaCharStream0.getEndColumn());
      assertNotNull(token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 8, column 2096.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)98;
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte)38;
      byteArray1[2] = (byte)98;
      byteArray1[3] = (byte)98;
      byteArray1[4] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)98, (byte)38, (byte)98, (byte)98, (byte)38}, byteArray1);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-367), 15);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)98, (byte)38, (byte)98, (byte)98, (byte)38}, byteArray1);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)98, (byte)38, (byte)98, (byte)98, (byte)38}, byteArray1);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-367), token0.beginLine);
      assertEquals(15, token0.beginColumn);
      assertEquals(15, token0.endColumn);
      assertEquals((-367), token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-367), javaCharStream0.getBeginLine());
      assertEquals((-367), javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals((-367), javaCharStream0.getEndLine());
      assertEquals("b", token0.toString());
      assertArrayEquals(new byte[] {(byte)98, (byte)38, (byte)98, (byte)98, (byte)38}, byteArray1);
      assertNotNull(token0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Zb1DHBK*Ju.[x:");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, (byte)38);
      assertNotNull(bufferedReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0, (byte)38);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, (-2209), (-2546));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      int int0 = bufferedReader0.read();
      assertEquals(90, int0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2546), javaCharStream0.getBeginColumn());
      assertEquals((-2546), javaCharStream0.getColumn());
      assertEquals((-2546), javaCharStream0.getEndColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals('b', char0);
      
      char char1 = File.pathSeparatorChar;
      assertFalse(char1 == char0);
      assertEquals(':', char1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2546), javaCharStream0.getBeginColumn());
      assertEquals((-2546), javaCharStream0.getColumn());
      assertEquals((-2546), javaCharStream0.getEndColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals((-2209), token0.endLine);
      assertEquals((-2545), token0.beginColumn);
      assertEquals((-2209), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-2541), token0.endColumn);
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2541), javaCharStream0.getEndColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals((-2541), javaCharStream0.getColumn());
      assertEquals((-2545), javaCharStream0.getBeginColumn());
      assertEquals("1DHBK", token0.toString());
      assertNotNull(token0);
      
      token0.image = "Zb1DHBK*Ju.[x:";
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2541), javaCharStream0.getEndColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals((-2541), javaCharStream0.getColumn());
      assertEquals((-2545), javaCharStream0.getBeginColumn());
      assertEquals("Zb1DHBK*Ju.[x:", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2541), javaCharStream0.getEndColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals((-2541), javaCharStream0.getColumn());
      assertEquals((-2545), javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(103, token1.kind);
      assertEquals((-2540), token1.endColumn);
      assertEquals((-2209), token1.endLine);
      assertEquals((-2540), token1.beginColumn);
      assertEquals((-2209), token1.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-2540), javaCharStream0.getBeginColumn());
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2540), javaCharStream0.getEndColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals((-2540), javaCharStream0.getColumn());
      assertEquals("*", token1.toString());
      assertNotNull(token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals((-2538), token2.endColumn);
      assertEquals((-2209), token2.beginLine);
      assertEquals((-2209), token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals((-2539), token2.beginColumn);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals((-2538), javaCharStream0.getColumn());
      assertEquals((-2539), javaCharStream0.getBeginColumn());
      assertEquals((-2538), javaCharStream0.getEndColumn());
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals("Ju", token2.toString());
      assertNotNull(token2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals((-2209), token0.endLine);
      assertEquals((-2545), token0.beginColumn);
      assertEquals((-2209), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-2541), token0.endColumn);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
      assertEquals((-2538), javaCharStream0.getColumn());
      assertEquals((-2539), javaCharStream0.getBeginColumn());
      assertEquals((-2538), javaCharStream0.getEndColumn());
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals("Zb1DHBK*Ju.[x:", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Zb1DHBK*Ju.[x:");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, (byte)38);
      assertNotNull(bufferedReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0, (byte)38);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, (-2209), (-2546));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals((-2546), javaCharStream0.getBeginColumn());
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2546), javaCharStream0.getColumn());
      assertEquals((-2546), javaCharStream0.getEndColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals('Z', char0);
      
      char char1 = javaCharStream0.ReadByte();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(char1 == char0);
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals((-2546), javaCharStream0.getBeginColumn());
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2546), javaCharStream0.getColumn());
      assertEquals((-2546), javaCharStream0.getEndColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals('b', char1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals((-2546), javaCharStream0.getBeginColumn());
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2546), javaCharStream0.getColumn());
      assertEquals((-2546), javaCharStream0.getEndColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2545), token0.beginColumn);
      assertEquals((-2209), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-2541), token0.endColumn);
      assertEquals((-2209), token0.beginLine);
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals((-2541), javaCharStream0.getEndColumn());
      assertEquals((-2545), javaCharStream0.getBeginColumn());
      assertEquals((-2541), javaCharStream0.getColumn());
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals("1DHBK", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 54);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 54. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=otzxp");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[1] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)49, (byte)69, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 126, (-2860));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)49, (byte)69, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)49, (byte)69, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-2859), token0.endColumn);
      assertEquals((-2860), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(126, token0.endLine);
      assertEquals(126, token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(126, javaCharStream0.getEndLine());
      assertEquals((-2860), javaCharStream0.getBeginColumn());
      assertEquals((-2859), javaCharStream0.getEndColumn());
      assertEquals((-2859), javaCharStream0.getColumn());
      assertEquals(126, javaCharStream0.getLine());
      assertEquals(126, javaCharStream0.getBeginLine());
      assertEquals("1E", token0.toString());
      assertArrayEquals(new byte[] {(byte)49, (byte)69, (byte)0}, byteArray0);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      StringReader stringReader0 = new StringReader("aTnQ`au*M)'e@Hx*Z");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)90, 18);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(90, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(21, token0.endColumn);
      assertEquals(18, token0.beginColumn);
      assertEquals(90, token0.beginLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals(21, javaCharStream0.getColumn());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(90, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals("aTnQ", token0.toString());
      assertNotNull(token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 90, column 22.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Zb1DHBK*Ju.[x:");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, (byte)38);
      assertNotNull(bufferedReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0, (byte)38);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, (-2209), (-2546));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2546), javaCharStream0.getEndColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2546), javaCharStream0.getBeginColumn());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals((-2546), javaCharStream0.getColumn());
      assertEquals('Z', char0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char char1 = Locale.UNICODE_LOCALE_EXTENSION;
      assertFalse(char1 == char0);
      assertEquals('u', char1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2546), javaCharStream0.getEndColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2546), javaCharStream0.getBeginColumn());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals((-2546), javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-2540), token0.endColumn);
      assertEquals((-2209), token0.beginLine);
      assertEquals((-2545), token0.beginColumn);
      assertEquals((-2209), token0.endLine);
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2540), javaCharStream0.getColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2545), javaCharStream0.getBeginColumn());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals((-2540), javaCharStream0.getEndColumn());
      assertEquals("b1DHBK", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 54);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 54. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Zb1DHBK*Ju.[x:");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, (byte)38);
      assertNotNull(bufferedReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0, (byte)38);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, (-2209), (-2546));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      int int0 = bufferedReader0.read();
      assertEquals(90, int0);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2546), javaCharStream0.getColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2546), javaCharStream0.getEndColumn());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals((-2546), javaCharStream0.getBeginColumn());
      assertEquals('b', char0);
      
      char char1 = File.pathSeparatorChar;
      assertFalse(char1 == char0);
      assertEquals(':', char1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2546), javaCharStream0.getColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2546), javaCharStream0.getEndColumn());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals((-2546), javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals((-2209), token0.beginLine);
      assertEquals((-2209), token0.endLine);
      assertEquals((-2545), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-2541), token0.endColumn);
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2541), javaCharStream0.getEndColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals((-2541), javaCharStream0.getColumn());
      assertEquals((-2545), javaCharStream0.getBeginColumn());
      assertEquals("1DHBK", token0.toString());
      assertNotNull(token0);
      
      token0.image = "Zb1DHBK*Ju.[x:";
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2541), javaCharStream0.getEndColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals((-2541), javaCharStream0.getColumn());
      assertEquals((-2545), javaCharStream0.getBeginColumn());
      assertEquals("Zb1DHBK*Ju.[x:", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2541), javaCharStream0.getEndColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals((-2541), javaCharStream0.getColumn());
      assertEquals((-2545), javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      javaParserTokenManager0.defaultLexState = (-2545);
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2541), javaCharStream0.getEndColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals((-2541), javaCharStream0.getColumn());
      assertEquals((-2545), javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals((-2209), token1.beginLine);
      assertEquals(103, token1.kind);
      assertEquals((-2540), token1.endColumn);
      assertEquals((-2540), token1.beginColumn);
      assertEquals((-2209), token1.endLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2540), javaCharStream0.getEndColumn());
      assertEquals((-2540), javaCharStream0.getBeginColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals((-2540), javaCharStream0.getColumn());
      assertEquals("*", token1.toString());
      assertNotNull(token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals((-2209), token2.beginLine);
      assertEquals((-2209), token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals((-2539), token2.beginColumn);
      assertEquals((-2538), token2.endColumn);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2538), javaCharStream0.getEndColumn());
      assertEquals((-2539), javaCharStream0.getBeginColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals((-2538), javaCharStream0.getColumn());
      assertEquals("Ju", token2.toString());
      assertNotNull(token2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals((-2537), token3.beginColumn);
      assertEquals((-2537), token3.endColumn);
      assertEquals((-2209), token3.endLine);
      assertEquals(85, token3.kind);
      assertEquals((-2209), token3.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals((-2537), javaCharStream0.getColumn());
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2537), javaCharStream0.getEndColumn());
      assertEquals((-2537), javaCharStream0.getBeginColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals(".", token3.toString());
      assertNotNull(token3);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2536), token4.beginColumn);
      assertEquals((-2536), token4.endColumn);
      assertEquals(81, token4.kind);
      assertEquals((-2209), token4.beginLine);
      assertEquals((-2209), token4.endLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertEquals((-2536), javaCharStream0.getColumn());
      assertEquals((-2536), javaCharStream0.getEndColumn());
      assertEquals((-2536), javaCharStream0.getBeginColumn());
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertEquals("[", token4.toString());
      assertNotNull(token4);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertEquals((-2209), token5.beginLine);
      assertEquals((-2535), token5.endColumn);
      assertEquals((-2535), token5.beginColumn);
      assertEquals(74, token5.kind);
      assertEquals((-2209), token5.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals("x", token5.toString());
      assertEquals((-2535), javaCharStream0.getBeginColumn());
      assertEquals((-2535), javaCharStream0.getEndColumn());
      assertEquals((-2209), javaCharStream0.getBeginLine());
      assertEquals((-2535), javaCharStream0.getColumn());
      assertEquals((-2209), javaCharStream0.getLine());
      assertEquals((-2209), javaCharStream0.getEndLine());
      assertNotNull(token5);
      assertNotSame(token5, token2);
      assertNotSame(token5, token0);
      assertNotSame(token5, token4);
      assertNotSame(token5, token3);
      assertNotSame(token5, token1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-480));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -480. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }
}
