/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:39:24 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      DoubleKeyMap<Map<String, String>, Map<String, String>, String> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Map<String, String>, String>((Map<Map<String, String>, Map<Map<String, String>, String>>) null);
      String string0 = doubleKeyMap0.get((Map<String, String>) hashMap1, (Map<String, String>) hashMap1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<String, Object, Map<String, String>> doubleKeyMap0 = new DoubleKeyMap<String, Object, Map<String, String>>();
      DoubleKeyMap<String, Map<String, String>, String> doubleKeyMap1 = new DoubleKeyMap<String, Map<String, String>, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put("us.codecraft.webmagic.utils.MultiKeyMapBase", (Map<Map<String, String>, String>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<Map<String, String>, Map<String, String>, String> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Map<String, String>, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = doubleKeyMap0.get((Map<String, String>) hashMap0, (Map<String, String>) hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      doubleKeyMap0.remove((Object) "");
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put((Object) null, object0, (Object) integer0);
      doubleKeyMap0.put((Object) null, (Object) null, (Object) null);
      Map<Integer, Map<Map<String, String>, Integer>> map0 = doubleKeyMap0.newMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(hashMap0, class0);
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      Object object0 = new Object();
      doubleKeyMap1.remove((Object) ";YludX.3/y", ";YludX.3/y");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      doubleKeyMap1.put((Object) hashMap0, "|qj=", (Object) hashMap1);
      doubleKeyMap0.remove((Object) "|qj=");
      HashMap<Object, Map<Integer, Object>> hashMap2 = new HashMap<Object, Map<Integer, Object>>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, Object>(hashMap2);
      doubleKeyMap1.remove((Object) hashMap2, "|qj=");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      assertEquals(0, hashMap3.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(hashMap0, class0);
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      Object object0 = new Object();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      doubleKeyMap1.put((Object) hashMap0, "|q=", (Object) hashMap1);
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      HashMap<Object, Map<Integer, Object>> hashMap3 = new HashMap<Object, Map<Integer, Object>>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      doubleKeyMap1.remove((Object) hashMap4, "wrong proto type map ");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      assertTrue(hashMap5.equals((Object)hashMap1));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      Object object0 = new Object();
      doubleKeyMap1.remove((Object) "", "");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<Map<String, String>, Map<Map<String, String>, String>> hashMap2 = new HashMap<Map<String, String>, Map<Map<String, String>, String>>();
      HashMap<Map<String, String>, String> hashMap3 = new HashMap<Map<String, String>, String>();
      hashMap2.put(hashMap1, hashMap3);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<String, String>, Map<String, String>, String> doubleKeyMap2 = new DoubleKeyMap<Map<String, String>, Map<String, String>, String>(hashMap2, class0);
      doubleKeyMap2.get((Map<String, String>) hashMap1, (Map<String, String>) hashMap1);
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap3 = null;
      try {
        doubleKeyMap3 = new DoubleKeyMap<Integer, Integer, Object>(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
