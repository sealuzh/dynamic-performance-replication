/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:14:02 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Label;
import wheel.asm.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char char0 = 'V';
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)100;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((byte)100);
      ClassReader classReader0 = new ClassReader(byteArrayInputStream1);
      classReader0.getAccess();
      // Undeclared exception!
      try { 
        classReader0.getItem(105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 105
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      boolean boolean0 = ClassReader.RESIZE;
      classReader0.readLong(247);
      // Undeclared exception!
      try { 
        classReader0.readUTF8(4, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(4);
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = '6';
      // Undeclared exception!
      try { 
        classReader0.readConst(2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(4);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      classReader0.readInt(21);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader("");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      byteArrayInputStream0.markSupported();
      classReader0.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter(4);
      classReader0.accept((ClassVisitor) classWriter0, (int) (byte) (-85));
      // Undeclared exception!
      try { 
        classReader0.readUTF8(1, (char[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65210
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-103);
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, (byte) (-103));
      assertEquals(49, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classAdapter0);
      
      classReader0.accept((ClassVisitor) classWriter0, 2467);
      assertEquals(49, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      assertEquals(49, classReader0.getAccess());
      assertEquals(2765, byteArrayInputStream0.available());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(byteArrayInputStream0);
      
      int int0 = Frame.ARRAY_OF;
      assertEquals(268435456, int0);
      
      boolean boolean1 = byteArrayInputStream0.markSupported();
      assertTrue(boolean1);
      assertEquals(49, classReader0.getAccess());
      assertEquals(2765, byteArrayInputStream0.available());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertTrue(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        classReader0.readShort(268435456);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 268435456
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-85);
      byteArray0[1] = (byte) (-28);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-28);
      byteArray0[6] = (byte)100;
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader0.getAccess());
      assertEquals(1531, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(49, classReader0.getAccess());
      assertEquals(1531, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(stringArray0);
      
      Label[] labelArray0 = new Label[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(18, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(18, byteArrayInputStream0.available());
      
      int int0 = 1577;
      String[] stringArray1 = classReader0.getInterfaces();
      assertEquals(49, classReader0.getAccess());
      assertEquals(1531, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        classReader0.readLabel((byte)100, labelArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        classReader0.readUTF8(33, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-103);
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertNotNull(classReader0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (byte) (-103));
      assertArrayEquals(new byte[] {(byte)54, (byte) (-103), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-103), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-103), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-103), byteArrayInputStream0.available());
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-103), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-103), byteArrayInputStream0.available());
      
      ClassWriter classWriter0 = new ClassWriter(1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classAdapter0);
      
      int int1 = 185;
      classReader0.accept((ClassVisitor) classWriter0, 185);
      assertEquals(49, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      char[] charArray0 = null;
      int int2 = 52;
      // Undeclared exception!
      try { 
        classReader0.readUTF8((byte) (-103), (char[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)54;
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter(4);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classReader0.accept((ClassVisitor) classWriter0, 2446);
      assertEquals(49, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      assertEquals(49, classReader0.getAccess());
      assertEquals(2765, byteArrayInputStream0.available());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(byteArrayInputStream0);
      
      // Undeclared exception!
      try { 
        classReader0.readUTF8(14, (char[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter((-373));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classAdapter0);
      
      classReader0.accept((ClassVisitor) classAdapter0, (int) (byte) (-28));
      assertEquals(49, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classReader0.readConst((-788), (char[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -788
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader0.getAccess());
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader0);
      
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(string0);
      
      boolean boolean0 = ClassReader.FRAMES;
      assertTrue(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      assertEquals(49, classReader0.getAccess());
      assertEquals(2765, byteArrayInputStream0.available());
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(byteArrayInputStream0);
      
      char[] charArray0 = null;
      ClassReader classReader1 = new ClassReader(classReader0.b, 1220, 5);
      assertEquals(49, classReader0.getAccess());
      assertEquals(23041, classReader1.getAccess());
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1278, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotNull(classReader1);
      
      // Undeclared exception!
      try { 
        classReader1.getInterfaces();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 28260
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)54;
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, (byte)0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader1.getAccess());
      assertEquals(1531, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotNull(classReader1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      assertEquals(49, classReader0.getAccess());
      assertEquals(2765, byteArrayInputStream0.available());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertFalse(classReader0.equals((Object)classReader1));
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.reset();
      assertEquals(49, classReader0.getAccess());
      assertEquals(2765, byteArrayInputStream0.available());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertFalse(classReader0.equals((Object)classReader1));
      assertNotSame(classReader0, classReader1);
      
      int int0 = classWriter0.newField("LocalVariableTypeTable", "IknG?P_[hE.i$", "LineNumberTable");
      assertEquals(129, int0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classReader0.equals((Object)classReader1));
      assertNotSame(classReader0, classReader1);
      
      int int1 = byteArrayInputStream0.read();
      assertEquals(202, int1);
      assertEquals(49, classReader0.getAccess());
      assertEquals(2764, byteArrayInputStream0.available());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(int1 == int0);
      assertNotSame(classReader0, classReader1);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(2764, byteArrayInputStream0.available());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertFalse(classReader0.equals((Object)classReader1));
      assertNotSame(classReader0, classReader1);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classReader0.equals((Object)classReader1));
      assertNotNull(classAdapter0);
      
      classReader1.accept((ClassVisitor) classWriter0, 2);
      assertEquals(49, classReader0.getAccess());
      assertEquals(49, classReader1.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1531, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassReader classReader2 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader2.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1531, classReader2.header);
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertNotNull(classReader2);
      
      short short0 = classReader2.readShort(2);
      assertEquals((short) (-17730), short0);
      assertEquals(49, classReader2.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1531, classReader2.header);
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertNotSame(classReader2, classReader0);
      assertNotSame(classReader2, classReader1);
      
      int int2 = classReader0.readUnsignedShort((byte)54);
      assertEquals(2560, int2);
      assertEquals(49, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertFalse(classReader0.equals((Object)classReader2));
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(classReader0, classReader2);
      assertNotSame(classReader0, classReader1);
      
      int int3 = classReader1.readByte(4);
      assertEquals(0, int3);
      assertEquals(49, classReader1.getAccess());
      assertEquals(1531, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(classReader1.equals((Object)classReader2));
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classReader1, classReader2);
      assertNotSame(classReader1, classReader0);
      
      ClassReader classReader3 = null;
      try {
        classReader3 = new ClassReader(classReader0.b, 1773, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 47629
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      assertEquals(49, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, classReader0.b);
      assertFalse(boolean0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b, 268435455, 1);
      assertEquals(49, classReader0.getAccess());
      assertEquals((-268432690), byteArrayInputStream0.available());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(byteArrayInputStream0);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classAdapter0);
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertEquals(33, classReader1.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotNull(classReader1);
      
      String string1 = classReader1.getClassName();
      assertEquals("java/lang/Object", string1);
      assertEquals(33, classReader1.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertFalse(classReader1.equals((Object)classReader0));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(classReader1, classReader0);
      assertNotNull(string1);
      
      classReader1.accept((ClassVisitor) classWriter0, 8);
      assertEquals(49, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      
      // Undeclared exception!
      try { 
        classReader1.readUnsignedShort((-2164));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "wheel.asm.ClassReader";
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(8070, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader0);
      
      int int0 = 22;
      ClassWriter classWriter0 = new ClassWriter(8);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String string1 = classWriter0.thisName;
      assertNull(string1);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, classReader0.b);
      assertFalse(boolean0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(8070, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      
      int int1 = 24;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b, 4, 24);
      assertEquals(33, classReader0.getAccess());
      assertEquals(24, byteArrayInputStream0.available());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(8070, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(byteArrayInputStream0);
      
      ClassWriter classWriter1 = new ClassWriter(22);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotNull(classWriter1);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertNotNull(classAdapter0);
      
      classReader0.accept((ClassVisitor) classWriter0, 1);
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(8070, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertNotSame(classWriter0, classWriter1);
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        classReader0.readUTF8(24, (char[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1531, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      assertEquals(49, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1531, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1531, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(string0);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1531, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classAdapter0);
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertEquals(33, classReader1.getAccess());
      assertEquals(927, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotNull(classReader1);
      
      int int0 = 5;
      classReader1.accept((ClassVisitor) classWriter0, 5);
      assertEquals(49, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1531, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(927, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        classReader0.readUTF8(1, (char[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 9);
      assertEquals(49, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      int int0 = classWriter0.newConst("^=II");
      assertEquals(126, int0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(string0);
      
      String string1 = classWriter0.thisName;
      assertNull(string1);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, classReader0.b);
      assertFalse(boolean0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b, 268435455, 1);
      assertEquals(49, classReader0.getAccess());
      assertEquals((-268432690), byteArrayInputStream0.available());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(byteArrayInputStream0);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classAdapter0);
      
      ClassAdapter classAdapter1 = new ClassAdapter(classWriter0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classAdapter1.equals((Object)classAdapter0));
      assertNotNull(classAdapter1);
      
      ClassAdapter classAdapter2 = new ClassAdapter(classAdapter0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classAdapter0.equals((Object)classAdapter1));
      assertFalse(classAdapter2.equals((Object)classAdapter1));
      assertFalse(classAdapter2.equals((Object)classAdapter0));
      assertNotNull(classAdapter2);
      
      classAdapter1.cv = (ClassVisitor) classAdapter2;
      assertEquals(49, classReader0.getAccess());
      
      classReader0.accept((ClassVisitor) classAdapter1, 3415);
      assertEquals(49, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classAdapter1.equals((Object)classAdapter0));
      assertFalse(classAdapter1.equals((Object)classAdapter2));
      assertNotSame(classAdapter1, classAdapter0);
      assertNotSame(classAdapter1, classAdapter2);
      
      boolean boolean1 = ClassReader.FRAMES;
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ClassAdapter classAdapter3 = new ClassAdapter(classWriter0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classAdapter3.equals((Object)classAdapter1));
      assertFalse(classAdapter3.equals((Object)classAdapter2));
      assertFalse(classAdapter3.equals((Object)classAdapter0));
      assertNotNull(classAdapter3);
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertEquals(33, classReader1.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotNull(classReader1);
      
      ClassWriter classWriter1 = new ClassWriter(classReader1, 7);
      assertEquals(33, classReader1.getAccess());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotNull(classWriter1);
      
      classReader0.accept((ClassVisitor) classAdapter2, 112);
      assertEquals(49, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classAdapter0.equals((Object)classAdapter1));
      assertFalse(classAdapter0.equals((Object)classAdapter3));
      assertFalse(classAdapter0.equals((Object)classAdapter2));
      assertFalse(classAdapter2.equals((Object)classAdapter1));
      assertFalse(classAdapter2.equals((Object)classAdapter3));
      assertFalse(classAdapter2.equals((Object)classAdapter0));
      assertNotSame(classReader0, classReader1);
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(classAdapter0, classAdapter1);
      assertNotSame(classAdapter0, classAdapter3);
      assertNotSame(classAdapter0, classAdapter2);
      assertNotSame(classAdapter2, classAdapter1);
      assertNotSame(classAdapter2, classAdapter3);
      assertNotSame(classAdapter2, classAdapter0);
      
      int int1 = Frame.KIND;
      assertEquals(251658240, int1);
      assertFalse(int1 == int0);
      
      int int2 = 2719;
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(203, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm/ClassReader");
      assertEquals(33, classReader0.getAccess());
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'T';
      charArray0[1] = '\u000F';
      charArray0[2] = 'c';
      int int0 = classReader0.readByte(184);
      assertEquals(0, int0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(33, classReader0.getAccess());
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 22);
      assertEquals(33, classReader0.getAccess());
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, classReader0.b);
      assertFalse(boolean0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      assertEquals(33, classReader0.getAccess());
      assertEquals(31354, byteArrayInputStream0.available());
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(byteArrayInputStream0);
      
      ClassWriter classWriter1 = new ClassWriter(22);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotNull(classWriter1);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertNotNull(classAdapter0);
      
      ClassAdapter classAdapter1 = new ClassAdapter(classAdapter0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classAdapter1.equals((Object)classAdapter0));
      assertNotNull(classAdapter1);
      
      String string0 = "<init>";
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader("<init>");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ClassReader classReader0 = new ClassReader("wheel.asm/ClassReader");
          assertEquals(33, classReader0.getAccess());
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertNotNull(classReader0);
          
          ClassWriter classWriter0 = new ClassWriter(classReader0, 22);
          assertEquals(33, classReader0.getAccess());
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertNotNull(classWriter0);
          
          String string0 = classWriter0.thisName;
          assertNull(string0);
          
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
          assertEquals(33, classReader0.getAccess());
          assertEquals(31354, byteArrayInputStream0.available());
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertNotNull(byteArrayInputStream0);
          
          ClassWriter classWriter1 = new ClassWriter(22);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertFalse(classWriter1.equals((Object)classWriter0));
          assertNotNull(classWriter1);
          
          ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
          assertEquals(33, classReader0.getAccess());
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertFalse(classWriter0.equals((Object)classWriter1));
          assertNotNull(classAdapter0);
          
          classReader0.accept((ClassVisitor) classWriter0, 1);
          assertEquals(33, classReader0.getAccess());
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertFalse(classWriter0.equals((Object)classWriter1));
          assertNotSame(classWriter0, classWriter1);
          
          String string1 = classWriter1.thisName;
          assertNull(string1);
          
          String[] stringArray0 = new String[0];
          // Undeclared exception!
          try { 
            classWriter0.visit(22, 8, (String) null, "H:", "", stringArray0);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("wheel.asm.Item", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader0.getAccess());
      assertEquals(1531, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter(1531);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(1531, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(string0);
      
      ClassWriter classWriter1 = new ClassWriter(classReader0, 4);
      assertEquals(49, classReader0.getAccess());
      assertEquals(1531, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotNull(classWriter1);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter1);
      assertEquals(49, classReader0.getAccess());
      assertEquals(1531, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotNull(classAdapter0);
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertEquals(33, classReader1.getAccess());
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotNull(classReader1);
      
      classReader1.accept((ClassVisitor) classWriter1, 4);
      assertEquals(49, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertEquals(1531, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classReader0, classReader1);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classReader1, classReader0);
      
      char[] charArray0 = null;
      String string1 = classReader0.readUTF8(1531, (char[]) null);
      assertEquals("<init>", string1);
      assertEquals(49, classReader0.getAccess());
      assertEquals(1531, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(classReader0, classReader1);
      assertNotNull(string1);
      
      String[] stringArray0 = classReader1.getInterfaces();
      assertEquals(33, classReader1.getAccess());
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classReader1, classReader0);
      assertNotNull(stringArray0);
      
      classReader0.accept((ClassVisitor) classAdapter0, 4);
      assertEquals(49, classReader0.getAccess());
      assertEquals(1531, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotSame(classReader0, classReader1);
      assertNotSame(classWriter1, classWriter0);
      
      String string2 = classReader1.getSuperName();
      assertEquals(33, classReader1.getAccess());
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classReader1, classReader0);
      assertNull(string2);
      
      ClassReader classReader2 = new ClassReader(classReader1.b);
      assertEquals(33, classReader1.getAccess());
      assertEquals(33, classReader2.getAccess());
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader2.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertNotNull(classReader2);
      
      ClassReader classReader3 = null;
      try {
        classReader3 = new ClassReader("7se_=C1X");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm/ClassReader");
      assertEquals(33, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8070);
      assertEquals(33, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String string0 = classWriter0.thisName;
      assertNull(string0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      assertEquals(33, classReader0.getAccess());
      assertEquals(31354, byteArrayInputStream0.available());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(byteArrayInputStream0);
      
      String string1 = classWriter0.thisName;
      assertNull(string1);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, classReader0.b);
      assertFalse(boolean0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(classReader0.b);
      assertEquals(33, classReader0.getAccess());
      assertEquals(31354, byteArrayInputStream1.available());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      
      ClassWriter classWriter1 = new ClassWriter(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotNull(classWriter1);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotNull(classAdapter0);
      
      classReader0.accept((ClassVisitor) classWriter1, 2);
      classReader0.accept((ClassVisitor) classWriter0, classWriter1.COMPUTE_MAXS);
      classReader0.getSuperName();
      String string2 = classWriter0.thisName;
      int int0 = 58;
      ClassWriter classWriter2 = new ClassWriter(classReader0, int0);
      String string3 = "Exceptions";
      String string4 = "hwuZ@dhw/";
      String string5 = "XG";
      String[] stringArray0 = new String[3];
      stringArray0[0] = string1;
      String string6 = "<init>";
      stringArray0[1] = string6;
      stringArray0[2] = string3;
      classWriter0.visit(classReader0.SKIP_DEBUG, classReader0.SKIP_DEBUG, string5, string2, string4, stringArray0);
  }
}
