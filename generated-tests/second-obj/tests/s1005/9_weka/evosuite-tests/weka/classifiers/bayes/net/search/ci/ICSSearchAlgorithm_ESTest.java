/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:23:09 GMT 2018
 */

package weka.classifiers.bayes.net.search.ci;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiClassClassifier;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instances;
import weka.core.SelectedTag;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ICSSearchAlgorithm_ESTest extends ICSSearchAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.setOptions((String[]) null);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String string0 = iCSSearchAlgorithm0.maxCardinalityTipText();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.getOptions();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      boolean boolean0 = iCSSearchAlgorithm_SeparationSet0.contains(3121);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String[] stringArray0 = new String[1];
      iCSSearchAlgorithm0.setMarkovBlanketClassifier(false);
      ICSSearchAlgorithm.main(stringArray0);
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      boolean boolean0 = iCSSearchAlgorithm_SeparationSet0.contains(0);
      assertTrue(boolean0);
      
      double double0 = KStarConstants.INITIAL_STEP;
      Locale.getISOLanguages();
      String string0 = iCSSearchAlgorithm0.globalInfo();
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", string0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      iCSSearchAlgorithm_SeparationSet0.getRevision();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[2] = (-1);
      iCSSearchAlgorithm_SeparationSet0.m_set = intArray0;
      intArray0[3] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      iCSSearchAlgorithm_SeparationSet0.m_set = intArray0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      iCSSearchAlgorithm_SeparationSet0.contains((-1));
      iCSSearchAlgorithm0.setMaxCardinality((-1));
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.logScore((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "k($sfYUgl-4L1u4";
      stringArray0[1] = "Available from http://www.autonlab.org/autonweb/14665.html";
      stringArray0[2] = "";
      stringArray0[3] = "-cardinality";
      stringArray0[4] = "\tUnsets the class index temporarily before the filter is\n\tapplied to the data.\n\t(default: no)";
      try { 
        iCSSearchAlgorithm0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      binarySparseInstance0.getRevision();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      iCSSearchAlgorithm0.setMaxCardinality((-1695));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(".4%(fqBx<%", linkedList0, 1);
      arrayList1.add(attribute0);
      BayesNet bayesNet0 = new BayesNet();
      String[] stringArray0 = new String[2];
      Instances instances0 = new Instances("@end", arrayList0, 11);
      iCSSearchAlgorithm0.search(bayesNet0, instances0);
      iCSSearchAlgorithm0.getRevision();
      assertEquals((-1695), iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String string0 = iCSSearchAlgorithm0.globalInfo();
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", string0);
      
      boolean[][] booleanArray0 = new boolean[6][6];
      boolean[] booleanArray1 = new boolean[5];
      booleanArray0[0] = booleanArray1;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      SelectedTag selectedTag0 = costSensitiveClassifier0.getCostMatrixSource();
      iCSSearchAlgorithm0.setScoreType(selectedTag0);
      BayesNet bayesNet0 = new BayesNet();
      String string1 = "Qfzk/CBaSh";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(string1, arrayList0, costSensitiveClassifier0.MATRIX_ON_DEMAND);
      iCSSearchAlgorithm0.search(bayesNet0, instances0);
      ICSSearchAlgorithm iCSSearchAlgorithm1 = new ICSSearchAlgorithm();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(costSensitiveClassifier0.MATRIX_SUPPLIED);
      binarySparseInstance0.getRevision();
      int int0 = (-1020);
      iCSSearchAlgorithm0.existsSepSet(int0, costSensitiveClassifier0.MATRIX_SUPPLIED, costSensitiveClassifier0.MATRIX_ON_DEMAND, booleanArray0);
      iCSSearchAlgorithm0.listOptions();
      iCSSearchAlgorithm1.listOptions();
      assertEquals(2, iCSSearchAlgorithm1.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      Attribute attribute0 = new Attribute("cardinality");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      iCSSearchAlgorithm0.setMaxCardinality(0);
      attribute0.getRevision();
      Instances instances0 = new Instances("numeric", arrayList0, 0);
      BayesNet bayesNet0 = new BayesNet();
      try { 
        iCSSearchAlgorithm0.search(bayesNet0, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      Attribute attribute0 = new Attribute("cardinaty");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Instances instances0 = new Instances(". ", arrayList0, 1);
      arrayList0.add(attribute0);
      BayesNet bayesNet0 = new BayesNet();
      try { 
        iCSSearchAlgorithm0.search(bayesNet0, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      Attribute attribute0 = new Attribute("cardinality");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      iCSSearchAlgorithm0.setMaxCardinality((-1));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute1 = new Attribute("@attribute", 1);
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("-cardinality <num>", arrayList0, 2);
      instances0.toArray();
      Instances instances1 = new Instances("date", arrayList0, 0);
      BayesNet bayesNet0 = new BayesNet();
      try { 
        iCSSearchAlgorithm0.search(bayesNet0, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.initAsNaiveBayesTipText();
      boolean[][] booleanArray0 = new boolean[9][6];
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      BayesNet bayesNet0 = new BayesNet();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", arrayList0, 1);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      iCSSearchAlgorithm0.search(bayesNet0, instances0);
      Attribute attribute0 = new Attribute("@data", "");
      bayesNet0.globalInfo();
      BayesNet bayesNet1 = iCSSearchAlgorithm0.m_BayesNet;
      instances0.enumerateAttributes();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.setCostMatrix(costMatrix0);
      double double0 = KStarConstants.ROOT_FINDER_ACCURACY;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      costSensitiveClassifier0.setCostMatrix((CostMatrix) null);
      double double1 = KStarConstants.ROOT_FINDER_ACCURACY;
      BayesNet bayesNet2 = new BayesNet();
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray0 = new ICSSearchAlgorithm.SeparationSet[1][3];
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcVeeNodes(booleanArray0, booleanArray0, iCSSearchAlgorithm_SeparationSetArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      Attribute attribute0 = new Attribute("La*dinality");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      iCSSearchAlgorithm0.setMaxCardinality((-1));
      Attribute attribute1 = new Attribute("@attribute", 1);
      arrayList0.add(attribute1);
      attribute0.equalsMsg(arrayList0);
      Instances instances0 = new Instances("date", arrayList0, 0);
      iCSSearchAlgorithm0.markovBlanketClassifierTipText();
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      BayesNet bayesNet0 = new BayesNet();
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      iCSSearchAlgorithm0.getScoreType();
      try { 
        iCSSearchAlgorithm0.search(bayesNet0, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      Attribute attribute0 = new Attribute("La*dinality");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      attribute0.copy("La*dinality");
      iCSSearchAlgorithm0.setMaxCardinality((-1));
      Attribute attribute1 = new Attribute("@attribute", 1);
      arrayList0.add(attribute1);
      attribute0.equalsMsg(arrayList0);
      Instances instances0 = new Instances("integer", arrayList0, 1);
      iCSSearchAlgorithm0.maxNrOfParentsTipText();
      BayesNet bayesNet0 = new BayesNet();
      arrayList0.add(attribute0);
      arrayList0.add(attribute1);
      try { 
        iCSSearchAlgorithm0.search(bayesNet0, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String string0 = CostMatrix.FILE_EXTENSION;
      boolean[][] booleanArray0 = new boolean[9][6];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".cost");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      BayesNet bayesNet0 = new BayesNet();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(".cost", arrayList0, 1);
      costSensitiveClassifier0.getCostMatrix();
      double double0 = KStarConstants.EPSILON;
      iCSSearchAlgorithm0.search(bayesNet0, instances0);
      Attribute attribute0 = new Attribute(".cost");
      arrayList0.add(attribute0);
      int int0 = GaussianProcesses.FILTER_STANDARDIZE;
      instances0.getRevision();
      costSensitiveClassifier0.costMatrixSourceTipText();
      BayesNet bayesNet1 = iCSSearchAlgorithm0.m_BayesNet;
      bayesNet1.measureBayesScore();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setCostMatrix((CostMatrix) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add(attribute0);
      ICSSearchAlgorithm iCSSearchAlgorithm1 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.next(0, 2, 1, booleanArray0);
      String string1 = "";
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm1.next(1, (-798), 3, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }
}
