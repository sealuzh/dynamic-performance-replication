/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 13:33:08 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      cacheControl0.FORCE_CACHE.headerValue = "";
      Headers headers0 = null;
      // Undeclared exception!
      try { 
        CacheControl.parse((Headers) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.CacheControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.minFresh(412, timeUnit0);
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.maxAge(412, timeUnit0);
      assertSame(cacheControl_Builder1, cacheControl_Builder4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      int int0 = 0;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxAge(0, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      cacheControl_Builder2.noStore();
      cacheControl_Builder1.maxAge(0, timeUnit1);
      cacheControl_Builder1.noCache();
      cacheControl_Builder2.noStore();
      // Undeclared exception!
      try { 
        cacheControl_Builder1.maxStale((-1), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(878, timeUnit0);
      CacheControl cacheControl0 = cacheControl_Builder1.build();
      String string0 = cacheControl0.toString();
      assertNotNull(string0);
      assertEquals("max-stale=3160800", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      boolean boolean0 = cacheControl0.mustRevalidate();
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noCache());
      assertFalse(boolean0);
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(20, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noTransform();
      cacheControl_Builder1.minFresh(20, timeUnit0);
      cacheControl_Builder2.build();
      cacheControl_Builder1.noCache();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "s#oihnM";
      stringArray0[1] = ">dyHar-b";
      stringArray0[2] = "howFPQ";
      stringArray0[3] = "";
      stringArray0[4] = "";
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl.parse(headers0);
      stringArray0[5] = "\"";
      stringArray0[6] = "c^;_o{3t`OAX";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        Headers.of(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected header: : \"
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(15, timeUnit0);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "name is empty";
      stringArray0[1] = "";
      stringArray0[2] = "pWfmnOfYoN";
      stringArray0[3] = "";
      stringArray0[4] = "<8?5H w(8RWdM!q";
      stringArray0[5] = "";
      Headers headers0 = Headers.of(stringArray0);
      headers0.values("+Vc<Y");
      headers0.toMultimap();
      headers0.getDate("<8?5H w(8RWdM!q");
      headers0.newBuilder();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.toString();
      String string0 = cacheControl0.toString();
      assertEquals("", string0);
      
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      cacheControl_Builder1.noStore();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.minFresh(0, timeUnit0);
      cacheControl_Builder2.noStore();
      CacheControl cacheControl1 = cacheControl_Builder2.build();
      cacheControl_Builder2.noStore();
      cacheControl1.isPrivate();
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertEquals(0, cacheControl1.minFreshSeconds());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertTrue(cacheControl1.noStore());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "`ameYAisempty";
      stringArray0[1] = "`ameYAisempty";
      Headers headers0 = Headers.of(stringArray0);
      headers0.names();
      headers0.toString();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noTransform();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.minFresh(Integer.MAX_VALUE, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder2.maxAge(0, timeUnit1);
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.noCache();
      TimeUnit timeUnit2 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder6 = cacheControl_Builder5.minFresh(0, timeUnit2);
      cacheControl_Builder6.noTransform();
      cacheControl_Builder6.noStore();
      TimeUnit timeUnit3 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder7 = cacheControl_Builder6.maxAge(337, timeUnit3);
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl1.toString();
      headers0.toMultimap();
      CacheControl.parse(headers0);
      cacheControl1.FORCE_NETWORK.toString();
      CacheControl.Builder cacheControl_Builder8 = cacheControl_Builder2.noCache();
      cacheControl0.mustRevalidate();
      cacheControl0.noStore();
      cacheControl0.sMaxAgeSeconds();
      cacheControl_Builder5.noTransform();
      cacheControl_Builder3.onlyIfCached();
      CacheControl.Builder cacheControl_Builder9 = cacheControl_Builder7.maxStale(Integer.MAX_VALUE, timeUnit2);
      assertSame(cacheControl_Builder9, cacheControl_Builder8);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(Integer.MAX_VALUE, timeUnit0);
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder1);
      cacheControl0.toString();
      cacheControl0.FORCE_NETWORK.headerValue = "Expected alternating header names and values";
      cacheControl0.sMaxAgeSeconds();
      cacheControl_Builder0.noStore();
      cacheControl0.mustRevalidate();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Expected alternating header names and values";
      stringArray0[1] = "max-stale=2147483";
      stringArray0[2] = "max-stale=2147483";
      stringArray0[3] = "max-stale=2147483";
      stringArray0[4] = "";
      stringArray0[5] = "#[pV";
      stringArray0[6] = "max-stale=2147483";
      stringArray0[7] = "Expected alternating header names and values";
      stringArray0[8] = "Expected alternating header names and values";
      // Undeclared exception!
      try { 
        Headers.of(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected alternating header names and values
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl.parse(headers0);
      cacheControl0.headerValue = "NGeZrFXI.";
      cacheControl0.maxStaleSeconds();
      cacheControl0.minFreshSeconds();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.minFresh((-1), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.toString();
      cacheControl0.FORCE_CACHE.toString();
      cacheControl0.toString();
      cacheControl0.FORCE_NETWORK.toString();
      cacheControl0.maxAgeSeconds();
      cacheControl0.mustRevalidate();
      Headers headers0 = null;
      try {
        headers0 = new Headers((Headers.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.noTransform();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      CacheControl cacheControl1 = cacheControl_Builder0.build();
      cacheControl1.FORCE_NETWORK.toString();
      cacheControl1.toString();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noStore();
      String string0 = cacheControl0.FORCE_NETWORK.toString();
      assertEquals("no-cache", string0);
      
      cacheControl_Builder2.noStore();
      cacheControl_Builder2.noTransform();
      cacheControl_Builder0.noStore();
      cacheControl0.FORCE_CACHE.toString();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      cacheControl_Builder1.maxAge(0, timeUnit0);
      cacheControl1.FORCE_NETWORK.headerValue = "no-cache";
      cacheControl0.mustRevalidate();
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      cacheControl_Builder2.maxAge(1404, timeUnit1);
      cacheControl0.headerValue = "no-cache";
      cacheControl_Builder1.maxStale(0, timeUnit1);
      Headers.Builder headers_Builder0 = new Headers.Builder();
      cacheControl1.FORCE_NETWORK.headerValue = "ZZfHK%B5et;ajO7";
      Headers headers0 = new Headers(headers_Builder0);
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      String string1 = cacheControl2.FORCE_NETWORK.toString();
      assertEquals((-1), cacheControl2.minFreshSeconds());
      assertFalse(cacheControl2.noCache());
      assertEquals("ZZfHK%B5et;ajO7", string1);
      
      cacheControl1.isPrivate();
      cacheControl_Builder1.onlyIfCached();
      cacheControl1.isPublic();
      cacheControl1.maxStaleSeconds();
      cacheControl0.noTransform();
      cacheControl1.noTransform();
      assertEquals((-1), cacheControl1.maxStaleSeconds());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxStale(0, timeUnit0);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.onlyIfCached();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder3);
      cacheControl0.noStore();
      cacheControl0.FORCE_NETWORK.toString();
      cacheControl_Builder1.build();
      cacheControl0.onlyIfCached();
      cacheControl0.sMaxAgeSeconds();
      // Undeclared exception!
      try { 
        cacheControl_Builder2.minFresh((-1), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.noCache();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(Integer.MAX_VALUE, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxAge(3385, timeUnit1);
      CacheControl cacheControl1 = cacheControl_Builder2.build();
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.mustRevalidate());
      assertFalse(cacheControl1.isPrivate());
      assertEquals(Integer.MAX_VALUE, cacheControl1.minFreshSeconds());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.isPublic());
      assertEquals(0, cacheControl1.maxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cache-control";
      stringArray0[1] = "cache-control";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      int int0 = cacheControl0.sMaxAgeSeconds();
      assertEquals((-1), int0);
      
      boolean boolean0 = cacheControl0.noTransform();
      assertFalse(boolean0);
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "cache-control";
      stringArray0[1] = "cache-control";
      stringArray0[2] = "cache-control";
      stringArray0[3] = "cache-control";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cache-control";
      stringArray0[1] = "min-fresh=";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      boolean boolean0 = cacheControl0.onlyIfCached();
      assertFalse(cacheControl0.noTransform());
      assertFalse(boolean0);
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.isPrivate());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cache-control";
      stringArray0[1] = "min-fresh=";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.isPublic();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxAge((-1643), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -1643
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cache-control";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "cache-control";
      stringArray1[1] = "min-fresh=";
      stringArray1[2] = "min-fresh=";
      stringArray1[3] = "min-fresh=";
      stringArray1[4] = "cache-control";
      stringArray1[5] = "public, ";
      Headers headers0 = Headers.of(stringArray1);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      boolean boolean0 = cacheControl0.isPublic();
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.noStore());
      assertTrue(boolean0);
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noTransform());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cache-control";
      stringArray0[1] = "=,;";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
  }
}
