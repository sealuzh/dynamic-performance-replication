/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 17:01:26 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.Locale;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)90;
      ByteString byteString0 = ByteString.of(byteArray0);
      int int0 = byteString0.indexOf(byteArray0, (int) (byte)90);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedOutputStream0.connect(pipedInputStream0);
      byteString0.write(pipedOutputStream0);
      ByteString.encodeUtf8("u@sq3\"hk#{J!PE9.9");
      ByteString byteString1 = byteString0.md5();
      int int1 = ByteString.codePointIndexToCharIndex("u@sq3\"hk#{J!PE9.9", (byte)12);
      assertEquals(12, int1);
      
      int int2 = byteString0.lastIndexOf(byteArray0, 987);
      assertFalse(int2 == int0);
      
      byteString1.internalArray();
      ByteString byteString2 = byteString0.hmacSha256(byteString1);
      boolean boolean1 = byteString2.EMPTY.startsWith(byteArray0);
      assertFalse(boolean1 == boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("u@sq3\"hk#{J!PE9.9");
      ByteString byteString3 = ByteString.of(byteBuffer0);
      ByteString byteString4 = byteString2.toAsciiUppercase();
      byteString2.hmacSha512(byteString3);
      assertNotSame(byteString2, byteString4);
      assertFalse(byteString2.equals((Object)byteString4));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      int int0 = ByteString.codePointIndexToCharIndex("0", 63);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("", 54);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)14;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.of(byteArray0);
      ByteString byteString2 = byteString0.toAsciiUppercase();
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("data");
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        ByteString.read(dataInputStream0, (-1179));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1179
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        ByteString.read(dataInputStream0, 26);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)8;
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)0;
      ByteString.of(byteArray0);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream1.close();
      try { 
        ByteString.read(sequenceInputStream1, 101);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      buffer0.readAndWriteUnsafe();
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      String string0 = byteString0.hex();
      assertEquals("", string0);
      
      String string1 = byteString0.utf8();
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-49);
      boolean boolean0 = byteString0.rangeEquals(1280, byteArray0, 1280, (int) (byte) (-49));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (int) (byte)13, (int) (byte)13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=13 byteCount=13
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = byteString0.EMPTY.sha512();
      byte[] byteArray0 = byteString0.internalArray();
      inflaterSource0.close();
      int int0 = 896;
      byteString1.EMPTY.rangeEquals(896, byteString0, 896, 896);
      ByteString byteString2 = byteString1.hmacSha512(byteString0);
      int int1 = (-3997);
      ByteString byteString3 = ByteString.encodeUtf8("");
      byteString3.endsWith(byteArray0);
      byteString0.rangeEquals((-3997), byteArray0, (-3997), (-3997));
      byteString2.endsWith(byteArray0);
      ByteString byteString4 = byteString1.hmacSha1(byteString0);
      byteString4.utf8 = "";
      byteString2.sha512();
      String string0 = "";
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)55;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.base64();
      assertEquals("RpkAR7I3", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      // Undeclared exception!
      try { 
        byteString0.substring(555);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-89);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.asByteBuffer();
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring(56);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-24);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.indexOf(byteString1, (int) (byte) (-24));
      byteString0.compareTo(byteString1);
      byteString0.hashCode();
      byteString1.rangeEquals((int) (byte) (-24), byteString0, 2048, 2021);
      // Undeclared exception!
      try { 
        byteString1.EMPTY.substring(302);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.EMPTY.equals(byteArray0);
      assertFalse(boolean0);
      
      int int0 = byteString0.compareTo(byteString0);
      assertEquals(0, int0);
      
      Inflater inflater0 = new Inflater(true);
      ByteString byteString1 = byteString0.EMPTY.toAsciiUppercase();
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      byteString0.EMPTY.hashCode();
      // Undeclared exception!
      try { 
        byteString0.substring((-1084));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[text=']", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte) (-127);
      byteArray0[8] = (byte)0;
      byteString0.lastIndexOf(byteArray0);
      byteString0.toString();
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString0.indexOf(byteString1, 0);
      ByteString byteString2 = ByteString.encodeUtf8("[size=0]");
      ByteString.encodeUtf8("");
      byteString2.toString();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("[size=0]", "[size=0]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // [size=0]
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("&b%>h|*x]q`HU}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: &
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "UwS+;e%j%O:UTh.";
      // Undeclared exception!
      try { 
        ByteString.decodeHex("UwS+;e%j%O:UTh.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: UwS+;e%j%O:UTh.
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("^,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: ^
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteString.decodeBase64("closed");
      ByteString byteString0 = ByteString.decodeBase64("VmM_p|[_N/_&C");
      assertNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "";
      ByteString.decodeHex("");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      byteString0.rangeEquals(255, byteArray0, 110, 64);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      byteString0.rangeEquals(255, byteString1, (int) (byte)14, (int) (byte)14);
      ByteString byteString2 = byteString1.hmacSha512(byteString0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString1);
      ByteString byteString3 = hashingSource0.hash();
      byteString3.write(bufferedOutputStream0);
      int int0 = byteString1.compareTo(byteString3);
      assertEquals(1, int0);
      
      boolean boolean0 = byteString3.rangeEquals((-8), byteString1, (int) (byte)14, 1);
      assertFalse(boolean0);
      
      byteString3.hashCode();
      assertFalse(byteString1.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)8;
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.of(byteArray0);
      HashingSink.sha512(buffer0);
      String string0 = byteString0.toString();
      assertEquals("[hex=0800000000000000000000]", string0);
      
      byteString0.asByteBuffer();
      byteString0.EMPTY.base64Url();
      ByteString byteString1 = byteString0.substring((int) (byte)8);
      Buffer buffer1 = new Buffer();
      byteString0.write(buffer0);
      byteString1.lastIndexOf(byteArray0, 50);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(3, byteString1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)90;
      ByteString byteString0 = ByteString.of(byteArray0);
      int int0 = byteString0.indexOf(byteArray0, (int) (byte)90);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedOutputStream0.connect(pipedInputStream0);
      byteString0.write(pipedOutputStream0);
      ByteString byteString1 = ByteString.encodeUtf8("u@sq3\"hk#{J!PE9.9");
      ByteString byteString2 = byteString0.md5();
      int int1 = ByteString.codePointIndexToCharIndex("u@sq3\"hk#{J!PE9.9", (byte)12);
      assertEquals(12, int1);
      
      int int2 = byteString0.lastIndexOf(byteArray0, 987);
      assertEquals(0, int2);
      
      byteString2.internalArray();
      ByteString byteString3 = byteString0.hmacSha256(byteString2);
      ByteString byteString4 = ByteString.encodeUtf8("[hex=");
      boolean boolean1 = byteString4.rangeEquals((int) (byte)12, byteString0, (int) (byte)90, 1276);
      assertFalse(boolean1 == boolean0);
      
      byteString3.asByteBuffer();
      int int3 = byteString4.lastIndexOf(byteString1, 639);
      assertTrue(int3 == int0);
      
      ByteString byteString5 = ByteString.of(byteArray0);
      assertTrue(byteString5.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byteString0.toString();
      ByteString byteString1 = byteString0.sha1();
      // Undeclared exception!
      try { 
        byteString1.EMPTY.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)90;
      ByteString byteString0 = ByteString.of(byteArray0);
      int int0 = byteString0.indexOf(byteArray0, (int) (byte)90);
      assertEquals((-1), int0);
      
      boolean boolean0 = byteString0.endsWith(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedOutputStream0.connect(pipedInputStream0);
      byteString0.write(pipedOutputStream0);
      ByteString.encodeUtf8("u@sq3\"hk#{J!PE9.9");
      ByteString byteString1 = byteString0.md5();
      int int1 = ByteString.codePointIndexToCharIndex("u@sq3\"hk#{J!PE9.9", (byte)12);
      assertEquals(12, int1);
      
      int int2 = byteString0.lastIndexOf(byteArray0, 987);
      assertEquals(0, int2);
      
      byteString1.internalArray();
      ByteString byteString2 = byteString0.hmacSha256(byteString1);
      boolean boolean1 = byteString2.EMPTY.startsWith(byteArray0);
      assertFalse(boolean1 == boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("u@sq3\"hk#{J!PE9.9");
      ByteString byteString3 = ByteString.of(byteArray0);
      byteString0.toByteArray();
      ByteString byteString4 = byteString1.toAsciiLowercase();
      assertNotSame(byteString1, byteString4);
      assertFalse(byteString4.equals((Object)byteString1));
      
      byteString0.size();
      assertTrue(byteString0.equals((Object)byteString3));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-97);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byte[] byteArray1 = byteString1.internalArray();
      assertArrayEquals(new byte[] {(byte)46, (byte)114, (byte) (-39), (byte) (-97)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      int int0 = byteString0.indexOf(byteArray0, (-774));
      assertSame(byteString0, byteString1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)90;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.indexOf(byteArray0, (int) (byte)90);
      byteString0.endsWith(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedOutputStream0.connect(pipedInputStream0);
      byteString0.write(pipedOutputStream0);
      ByteString.encodeUtf8("u@sq3\"hk#{J!PE9.9");
      ByteString byteString1 = byteString0.md5();
      ByteString.codePointIndexToCharIndex("u@sq3\"hk#{J!PE9.9", (byte)12);
      int int0 = 987;
      byteString0.lastIndexOf(byteArray0, 987);
      byteString1.indexOf(byteString0);
      // Undeclared exception!
      try { 
        HashingSource.sha1((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      byteString0.EMPTY.sha256();
      // Undeclared exception!
      try { 
        byteString0.hex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteString1, (int) (byte) (-24));
      assertEquals(0, int0);
      
      ByteString byteString2 = byteString0.substring(0);
      ByteString byteString3 = byteString1.toAsciiUppercase();
      byteString2.size();
      boolean boolean0 = byteString2.startsWith(byteString0);
      assertTrue(boolean0);
      
      byteString2.size();
      ByteString byteString4 = byteString1.hmacSha512(byteString0);
      boolean boolean1 = byteString0.endsWith(byteString3);
      assertTrue(boolean1);
      
      ByteString byteString5 = new ByteString(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteString5.indexOf(byteString2);
      ByteString.encodeUtf8("0O,N[");
      byteString2.rangeEquals(0, byteString0, 2176, 3491);
      byteString0.asByteBuffer();
      int int1 = byteString4.lastIndexOf(byteString1, 2176);
      assertEquals(51, int1);
      assertSame(byteString0, byteString2);
      
      ByteString byteString6 = ByteString.of(byteArray0);
      assertTrue(byteString6.equals((Object)byteString3));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.indexOf(byteString1, 64);
      byteString1.compareTo(byteString0);
      byteString1.hashCode();
      byteString0.substring(4);
      ByteString byteString2 = new ByteString(byteArray0);
      String string0 = byteString1.base64Url();
      assertEquals("AAAAAAA=", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      HashingSource.md5(buffer2);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("60I!14e*$|rQv*/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: I
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.indexOf(byteString1, (int) (byte) (-24));
      ByteString byteString2 = byteString0.substring(0);
      byteString1.toAsciiUppercase();
      byteString2.size();
      boolean boolean0 = byteString2.startsWith(byteString0);
      assertTrue(boolean0);
      
      byteString2.size();
      ByteString byteString3 = byteString1.hmacSha512(byteString0);
      ByteString byteString4 = new ByteString(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString5 = hashingSource0.hash();
      int int0 = byteString3.EMPTY.lastIndexOf(byteString5);
      int int1 = byteString4.indexOf(byteString2);
      assertFalse(int1 == int0);
      
      byteString3.base64Url();
      assertSame(byteString0, byteString2);
      
      int int2 = byteString5.lastIndexOf(byteString1, (-884));
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("at$(Qh5 ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: t
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = byteString0.EMPTY.equals(byteArray0);
      assertFalse(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.encodeUtf8("");
      ByteString byteString2 = byteString1.md5();
      ByteString.codePointIndexToCharIndex("", (byte) (-29));
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-29);
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte) (-29);
      byteArray1[3] = (byte) (-29);
      byteString0.lastIndexOf(byteArray1, (int) (byte) (-29));
      byte[] byteArray2 = byteString0.internalArray();
      byteString0.hmacSha256(byteString2);
      ByteString.of(byteArray2);
      byteString2.toByteArray();
      byteString0.toAsciiLowercase();
      int int0 = byteString2.size();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.md5();
      int int0 = byteString1.EMPTY.indexOf(byteArray0, 535);
      int int1 = byteString0.compareTo(byteString1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      String string0 = byteString0.string(charset0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      BufferedSink bufferedSink0 = buffer0.emit();
      HashingSink hashingSink0 = HashingSink.md5(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      Object object0 = new Object();
      byteString0.equals(object0);
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("A'8.DR Nrn^(hO)lC?", charset0);
      // Undeclared exception!
      try { 
        byteString0.compareTo((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      ByteString byteString0 = ByteString.of(byteArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream0.close();
      int int0 = 101;
      ByteString byteString1 = ByteString.read(sequenceInputStream0, (byte)0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha512(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(2666L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      ByteString byteString1 = realBufferedSource0.readByteString(0L);
      HashingSource hashingSource1 = HashingSource.sha1(buffer0);
      HashingSource hashingSource2 = HashingSource.sha256(hashingSource1);
      ByteString byteString2 = hashingSource2.hash();
      byteString2.compareTo(byteString1);
      ByteString byteString3 = new ByteString(byteArray0);
      assertEquals(1, byteString3.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha1();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=d0390300500b0b0d3055bf0f950010900fd00709]", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)41;
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString byteString3 = hashingSource0.hash();
      boolean boolean0 = byteString2.equals(byteString3);
      assertFalse(boolean0);
      
      ByteString byteString4 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString2);
      assertEquals(1, int0);
      
      ByteString byteString5 = new ByteString((byte[]) null);
      int int1 = byteString2.compareTo(byteString1);
      assertEquals((-1), int1);
      
      int int2 = byteString0.hashCode();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(byteString0.equals((Object)byteString3));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.toAsciiLowercase();
      int int0 = byteString1.EMPTY.indexOf(byteArray0);
      assertEquals((-1), int0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
      
      boolean boolean0 = byteString0.equals(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)8;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.toString();
      byteString0.asByteBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)8, (byte)8);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      try { 
        ByteString.read(dataInputStream0, 1298);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = hashingSink0.hash();
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSource0);
      BufferedSink bufferedSink0 = buffer0.write((Source) hashingSource0, 0L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      BufferedSink bufferedSink1 = realBufferedSink0.emit();
      HashingSink hashingSink0 = HashingSink.sha512(bufferedSink1);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = hashingSink0.hash();
      HashingSink hashingSink1 = HashingSink.hmacSha512(buffer0, byteString1);
      ByteString byteString2 = hashingSink1.hash();
      boolean boolean0 = byteString1.equals(byteString2);
      assertFalse(boolean0);
      assertTrue(byteString1.equals((Object)byteString0));
  }
}
