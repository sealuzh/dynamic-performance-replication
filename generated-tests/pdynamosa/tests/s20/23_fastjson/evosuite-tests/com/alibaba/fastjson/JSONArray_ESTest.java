/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 06:02:51 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ParseProcess;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(100);
      Class<JSONArray> class0 = JSONArray.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(307);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class0, class0, (Field) null, 164, 3301, 100);
      Class<Integer> class1 = Integer.class;
      Class<String> class2 = String.class;
      Class<Integer> class3 = Integer.class;
      FieldInfo fieldInfo1 = new FieldInfo("", class2, class3, fieldInfo0.fieldClass, (Field) null, 3301, 1995, 3387);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo1);
      beanContext0.getField();
      jSONArray0.add((Object) class3);
      ParserConfig.getFieldFromCache("=^-A3J&BNzR<N3-", concurrentHashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3387, (Object) null);
      Class<Annotation> class4 = Annotation.class;
      beanContext0.getAnnation(class4);
      beanContext0.getField();
      jSONArray1.indexOf(fieldInfo1);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) class0);
      // Undeclared exception!
      try { 
        jSONArray2.getShortValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : class java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.indexOf("@type");
      Object object0 = new Object();
      int int0 = jSONArray0.indexOf(object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONArray jSONArray0 = new JSONArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      jSONArray0.setRelatedArray(sequenceInputStream0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = (-786);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-786));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.remove((Object) "AutoCloseSource");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jSONArray0;
      jSONArray0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-4215));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2551);
      SerializeConfig serializeConfig0 = new SerializeConfig(3301, false);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[6];
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "1^ ";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter1;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter2;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[3] = (SerializeFilter) pascalNameFilter0;
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[4] = (SerializeFilter) simplePropertyPreFilter3;
      SimplePropertyPreFilter simplePropertyPreFilter4 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[5] = (SerializeFilter) simplePropertyPreFilter4;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[4] = serializerFeature4;
      JSON.toJSONString((Object) null, serializeConfig0, serializeFilterArray0, (String) null, 3301, serializerFeatureArray0);
      jSONArray0.getComponentType();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      jSONArray0.removeAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getDate(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) iterator0);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(100);
      Class<JSONArray> class0 = JSONArray.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(307);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class0, class0, (Field) null, 164, 3301, 100);
      Class<Integer> class1 = Integer.class;
      Class<String> class2 = String.class;
      Class<Integer> class3 = Integer.class;
      FieldInfo fieldInfo1 = new FieldInfo("", class2, class3, fieldInfo0.fieldClass, (Field) null, 3301, 1995, 3387);
      jSONArray0.add((Object) class3);
      ParserConfig.getFieldFromCache("=^-A3J&BNzR<N3-", concurrentHashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3387, (Object) null);
      JSON.parseObject((String) null, class1);
      jSONArray0.indexOf((Object) null);
      jSONArray0.getDate(161);
      jSONArray1.listIterator();
      boolean boolean0 = jSONArray0.getBooleanValue(3301);
      assertEquals(3388, jSONArray0.size());
      assertFalse(boolean0);
      
      long long0 = jSONArray0.getLongValue(956);
      assertEquals(3388, jSONArray0.size());
      assertEquals(0L, long0);
      
      jSONArray1.addAll((Collection<?>) jSONArray0);
      assertEquals(6776, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      ConcurrentSkipListMap<String, String> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, concurrentSkipListMap0);
      javaBeanSerializer0.getNameFilters();
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(class0);
      JSONArray jSONArray0 = new JSONArray(list0);
      jSONArray0.toJSONString();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-2368));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(164, "1^ ");
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(164);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : 1^ 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("@type");
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      assertSame(jSONArray0, jSONArray1);
      
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(164);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 164, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[7];
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter0;
      Class<Integer> class0 = Integer.class;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter1;
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      serializeFilterArray0[3] = (SerializeFilter) pascalNameFilter1;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[4] = (SerializeFilter) simplePropertyPreFilter2;
      PascalNameFilter pascalNameFilter2 = new PascalNameFilter();
      serializeFilterArray0[5] = (SerializeFilter) pascalNameFilter2;
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[6] = (SerializeFilter) simplePropertyPreFilter3;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.MapSortField;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[8] = serializerFeature8;
      JSON.toJSONBytes((Object) "1.2.46", serializeFilterArray0, serializerFeatureArray0);
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-743), class1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray0.toJavaObject(class0);
      jSONArray0.clone();
      int int0 = (-306);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-306));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(3316, "1^ ");
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.set(3316, jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject((-1117));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShort(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("");
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(3287);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3287, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m{");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "m{");
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(linkedList0);
      boolean boolean0 = jSONArray2.containsAll(linkedList0);
      assertTrue(linkedList0.contains("m{"));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3316, "1^ ");
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray3.contains(jSONArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockDate mockDate0 = new MockDate();
      JSONArray jSONArray4 = jSONArray2.fluentAddAll(3286, (Collection<?>) jSONArray3);
      JSONArray jSONArray5 = jSONArray4.fluentRemove((Object) "com.alibaba.fastjson.JSONArray");
      Integer integer0 = new Integer(164);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[4];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "z0,jQB |O_ U0NcK>u";
      stringArray0[2] = "@type";
      stringArray0[3] = "1.2.46";
      stringArray0[4] = "com.alibaba.fastjson.JSONArray";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[1] = (SerializeFilter) pascalNameFilter0;
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      serializeFilterArray0[2] = (SerializeFilter) pascalNameFilter1;
      PascalNameFilter pascalNameFilter2 = new PascalNameFilter();
      serializeFilterArray0[3] = (SerializeFilter) pascalNameFilter2;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONBytes((Object) integer0, serializeFilterArray0, serializerFeatureArray0);
      jSONArray5.getBigDecimal(222);
      jSONArray2.getJSONArray(3301);
      assertEquals(6634, jSONArray2.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<Object, Integer> concurrentHashMap0 = new ConcurrentHashMap<Object, Integer>();
      BiFunction<Object, Integer, String> biFunction0 = (BiFunction<Object, Integer, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEach((long) 3301, (BiFunction<? super Object, ? super Integer, ? extends String>) biFunction0, (Consumer<? super String>) consumer0);
      jSONArray0.fluentSet(1484, concurrentHashMap0);
      jSONArray0.getBoolean(19);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(1484);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(3301, true);
      jSONObject0.getJSONObject("1.2.46");
      linkedHashSet0.add((JSONObject) null);
      JSONObject jSONObject1 = new JSONObject();
      linkedHashSet0.add(jSONObject1);
      boolean boolean0 = jSONArray0.containsAll(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(567);
      jSONArray0.set(121, integer0);
      jSONArray0.getJSONObject(78);
      jSONArray0.isEmpty();
      jSONArray0.getShort(100);
      assertEquals(122, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3346, "1^ ");
      jSONArray0.getShort(846);
      jSONArray1.addAll(164, (Collection<?>) jSONArray0);
      assertEquals(6694, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((Object) jSONArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-3);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(3275, (Object) pushbackInputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3275, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-67);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)84, (byte)84);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      boolean boolean0 = jSONArray0.add((Object) bufferedInputStream0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(164);
      Collection<Object> collection0 = jSONObject0.values();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-123008), collection0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -123008, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3316, "1^ ");
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      jSONArray1.getFloat(1347);
      jSONArray1.isEmpty();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockDate mockDate0 = new MockDate();
      jSONArray1.getByte(1548);
      jSONArray1.getBooleanValue(3301);
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray2);
      int int0 = jSONArray1.indexOf(jSONArray3);
      assertEquals(3317, jSONArray0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(14);
      JSONArray jSONArray1 = jSONArray0.fluentSet(14, 3301);
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(14, (Collection<?>) jSONArray0);
      jSONArray2.getInteger(14);
      assertEquals(30, jSONArray1.size());
      assertEquals(30, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(2506);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2506, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(368);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 368
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONString((Object) jSONObject0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(4948);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4948, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      String string0 = "g%A[.6R";
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "g%A[.6R");
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.io.SequenceInputStream
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        jSONArray0.set((-314), pipedInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      int int0 = jSONArray0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.remove((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      JSONObject jSONObject0 = new JSONObject();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSONObject0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      // Undeclared exception!
      try { 
        jSONArray0.removeIf(predicate3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(14);
      JSONArray jSONArray1 = jSONArray0.fluentSet(14, 3301);
      jSONArray1.getByte(14);
      assertEquals(15, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray0.set(0, jSONArray1);
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      JSONObject jSONObject0 = new JSONObject(false);
      jSONArray2.fluentSet(1005, jSONObject0);
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        JSON.toJavaObject((JSON) jSONObject0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger(164);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 164, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, (InputStream) null);
      jSONArray0.set(155, sequenceInputStream0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      assertEquals(0, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = JSON.toJSON((Object) pipedInputStream0);
      jSONArray0.fluentSet(164, object0);
      Class<Integer> class0 = Integer.class;
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowComment;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableASM;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowISO8601DateFormat;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.UseObjectArray;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.DisableFieldSmartMatch;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.InitStringFieldAsEmpty;
      featureArray0[6] = feature6;
      // Undeclared exception!
      try { 
        JSON.parseObject("1^ ", class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3301);
      jSONArray0.contains(integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-727));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(61);
      // Undeclared exception!
      try { 
        jSONArray0.subList(61, 61);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 61
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3310, "1^ ");
      jSONArray0.indexOf(jSONArray1);
      Type type0 = jSONArray0.componentType;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(3310, (Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3316, "1^ ");
      ConcurrentHashMap<Object, Integer> concurrentHashMap0 = new ConcurrentHashMap<Object, Integer>();
      jSONArray0.fluentSet(164, jSONArray1);
      // Undeclared exception!
      jSONArray0.getBoolean(164);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(3321);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3321, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-505));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[0];
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      JSON.parse(byteArray0, featureArray0);
      jSONArray0.fluentAdd(0, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-657));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(72);
      Class<JSONArray> class0 = JSONArray.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(307);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class0, class0, (Field) null, 164, 3301, 72);
      Class<Integer> class1 = Integer.class;
      Class<String> class2 = String.class;
      Class<Integer> class3 = Integer.class;
      FieldInfo fieldInfo1 = new FieldInfo("P]", class2, class3, fieldInfo0.fieldClass, (Field) null, 3301, 1995, 3387);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo1);
      beanContext0.getField();
      jSONArray0.add((Object) class3);
      Class<Annotation> class4 = Annotation.class;
      beanContext0.getAnnation(class4);
      ParserConfig.getFieldFromCache("=^-A3J&BNzR<N3-", concurrentHashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3387, (Object) null);
      Class<Annotation> class5 = Annotation.class;
      beanContext0.getAnnation(class5);
      Class<Field> class6 = Field.class;
      jSONArray1.getObject(3387, class6);
      jSONArray1.isEmpty();
      jSONArray1.getBigInteger(3301);
      assertEquals(3388, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1766);
      // Undeclared exception!
      try { 
        jSONArray0.subList((-645), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -645
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(100);
      Class<JSONArray> class0 = JSONArray.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(307);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class0, class0, (Field) null, 164, 3301, 100);
      Class<Integer> class1 = Integer.class;
      Class<String> class2 = String.class;
      Class<Integer> class3 = Integer.class;
      FieldInfo fieldInfo1 = new FieldInfo("", class2, class3, fieldInfo0.fieldClass, (Field) null, 3301, 1995, 3387);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo1);
      beanContext0.getField();
      jSONArray0.isEmpty();
      beanContext0.getField();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3387, (Object) null);
      jSONArray1.getDouble(3387);
      jSONArray0.getBigDecimal(3301);
      short short0 = jSONArray1.getShortValue(3387);
      assertEquals(3388, jSONArray0.size());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSONArray0;
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-1401));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet((-1), integer0);
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray1.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(list0);
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(52);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 52, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Integer integer0 = new Integer(0);
      jSONArray0.fluentSet(0, integer0);
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullStringAsEmpty;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteTabAsSpecial;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteDateUseDateFormat;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNullNumberAsZero;
      SerializerFeature serializerFeature5 = SerializerFeature.BrowserCompatible;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      serializerFeatureArray0[0] = serializerFeature3;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature5;
      serializerFeatureArray0[3] = serializerFeature4;
      serializerFeatureArray0[4] = serializerFeature1;
      serializerFeatureArray0[5] = serializerFeature2;
      serializerFeatureArray0[6] = serializerFeature1;
      JSON.toJSONBytes((Object) serializerFeature2, (SerializeFilter[]) null, serializerFeatureArray0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1991, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1991, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.fluentSet(0, 3301);
      jSONArray0.getInteger(0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(44);
      // Undeclared exception!
      try { 
        jSONArray0.subList(44, 92);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 92
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(3308);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3308, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(1651);
      JSONArray jSONArray1 = new JSONArray(164);
      jSONArray0.set(1651, jSONArray1);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(1651);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1481);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.fluentRetainAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(3346, "1^ ");
      jSONArray0.getJSONObject(1982);
      jSONArray0.getByteValue(1982);
      jSONArray0.isEmpty();
      jSONArray0.getSqlDate(3266);
      jSONArray0.clone();
      assertEquals(3347, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1785);
      int int1 = (-856);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-632));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2551);
      JSONObject jSONObject0 = new JSONObject();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      // Undeclared exception!
      try { 
        jSONArray0.getLong(2014);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2014, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      Collection<JSONObject> collection0 = hashMap0.values();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(collection0);
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Integer integer0 = new Integer(0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, integer0);
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray1.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(list0);
      jSONArray2.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getInteger((-1477));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(true);
      jSONArray0.set(3354, jSONObject0);
      assertEquals(3355, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Integer integer0 = new Integer(164);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-555), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-3182));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.listIterator();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.setComponentType(parameterizedTypeImpl0);
      assertEquals(3301, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46", parserConfig0, 9999999);
      defaultJSONParser0.getFieldTypeResolver();
      JSON.parseObject("", class0, (ParseProcess) null, (Feature[]) null);
      jSONArray1.indexOf((Object) null);
      jSONArray0.contains(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getFloat(940);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 940, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.toArray((JSONArray[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1098);
      // Undeclared exception!
      try { 
        jSONArray0.addAll((-1098), (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1098, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConcurrentHashMap<JSONArray, Integer> concurrentHashMap0 = new ConcurrentHashMap<JSONArray, Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3346, concurrentHashMap0);
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache(" c6:fPsq=PJ`LQ%2'!J", treeMap0);
      jSONArray2.contains((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(3346);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(307);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class0, class0, (Field) null, 164, 3301, 100);
      Class<Integer> class1 = Integer.class;
      Class<String> class2 = String.class;
      Class<Integer> class3 = Integer.class;
      FieldInfo fieldInfo1 = new FieldInfo("", class2, class3, fieldInfo0.fieldClass, (Field) null, 3301, 1995, 3387);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo1);
      beanContext0.getField();
      jSONArray0.add((Object) class3);
      ParserConfig.getFieldFromCache("=^-A3J&BNzR<N3-", concurrentHashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3387, (Object) null);
      Class<Annotation> class4 = Annotation.class;
      beanContext0.getAnnation(class4);
      Class<Field> class5 = Field.class;
      jSONArray1.getObject(3387, class5);
      int int0 = jSONArray1.indexOf(fieldInfo1);
      assertEquals(3388, jSONArray0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[2] = serializerFeature1;
      jSONArray0.indexOf(serializerFeature0);
      jSONArray0.add((Object) serializerFeature0);
      jSONArray0.contains((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      boolean boolean0 = jSONArray0.contains(listIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Field> linkedList0 = new LinkedList<Field>();
      // Undeclared exception!
      try { 
        jSONArray0.addAll((-401), (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -401, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 100;
      JSONArray jSONArray0 = new JSONArray(100);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3346, 3346);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3346, byteArrayInputStream0);
      JSONArray jSONArray2 = jSONArray0.fluentAdd(164, (Object) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getIntValue(164);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.getByte((-1448));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(336);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      JSONArray jSONArray2 = jSONArray0.fluentRemove((Object) jSONArray1);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      Class<JSONObject> class0 = JSONObject.class;
      JSONType jSONType0 = null;
      String string0 = "a[>+q\\@@ePkO8\")\\";
      FieldInfo[] fieldInfoArray0 = new FieldInfo[9];
      String string1 = "CRM\"KfXH5^>/YNTq1";
      Class<JSONArray> class1 = JSONArray.class;
      Class<Integer> class2 = Integer.class;
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.set((-1), "@type");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(100);
      Class<JSONArray> class0 = JSONArray.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(307);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class0, class0, (Field) null, 164, 3301, 100);
      Class<Integer> class1 = Integer.class;
      Class<String> class2 = String.class;
      Class<Integer> class3 = Integer.class;
      FieldInfo fieldInfo1 = new FieldInfo("", class2, class3, fieldInfo0.fieldClass, (Field) null, 3301, 1995, 3387);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo1);
      beanContext0.getField();
      jSONArray0.add((Object) class3);
      ParserConfig.getFieldFromCache("=^-A3J&BNzR<N3-", concurrentHashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3387, (Object) null);
      Class<Annotation> class4 = Annotation.class;
      beanContext0.getAnnation(class4);
      Class<Field> class5 = Field.class;
      jSONArray1.getObject(3387, class5);
      jSONArray1.indexOf(fieldInfo1);
      jSONArray1.getDate(2048);
      assertEquals(3388, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[2] = serializerFeature1;
      jSONArray0.indexOf(serializerFeature0);
      jSONArray0.contains((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object[] objectArray0 = jSONArray0.toArray();
      Object[] objectArray1 = jSONArray0.toArray(objectArray0);
      assertSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "syntax error, position at ");
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(255);
      boolean boolean1 = jSONArray0.equals(integer0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.listIterator(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, JSONObject> function0 = (Function<Object, JSONObject>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ?>) function0);
      unaryOperator0.apply("G55{");
      jSONArray0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSONArray0.toJavaObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.fluentSet(0, 164);
      boolean boolean0 = jSONArray0.isEmpty();
      assertEquals(1, jSONArray0.size());
      assertFalse(boolean0);
      
      jSONArray0.getShortValue(0);
      jSONArray0.toArray();
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.DEFAULT_PARSER_FEATURE = 3301;
      int int0 = (-2550);
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-2550));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3346, "1^ ");
      int int0 = jSONArray1.getIntValue(3301);
      assertEquals(3347, jSONArray0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "@type";
      stringArray0[2] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.setMaxLevel(164);
      simplePropertyPreFilter0.getClazz();
      jSONArray0.setComponentType((Type) null);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class0 = JSONObject.class;
      jSONArray0.toJavaList(class0);
      Object object0 = jSONArray0.getRelatedArray();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(Integer.MIN_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      jSONArray0.hashCode();
      JSONObject[] jSONObjectArray0 = new JSONObject[5];
      JSONObject jSONObject0 = new JSONObject((Map<String, Object>) null);
      jSONObjectArray0[0] = jSONObject0;
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 164, 3307);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(3301, "1^ ");
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getShort(3301);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1^ \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, 3301);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~!g;BTyk.%ly";
      stringArray0[1] = "1^ ";
      jSONArray0.iterator();
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      jSONArray0.setComponentType(class1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      boolean boolean0 = jSONArray0.remove((Object) pushbackInputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2551);
      JSONObject jSONObject0 = new JSONObject();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(2551);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2551, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(512);
      List<Object> list0 = jSONArray0.subList(0, 0);
      assertFalse(list0.contains(512));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3346, "1^ ");
      jSONArray1.getString(0);
      assertEquals(3347, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONString((Object) jSONArray0, serializerFeatureArray0);
      Class<JSONObject> class0 = JSONObject.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, type0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3346, "1^ ");
      jSONArray0.getShort(846);
      boolean boolean0 = jSONArray1.contains((Object) null);
      assertEquals(3347, jSONArray0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3346, "1^ ");
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      jSONArray1.contains(jSONArray2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray3 = jSONArray0.fluentAdd(164, (Object) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray3.getFloat(164);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(jSONArray0);
      jSONArray0.containsAll(list0);
      // Undeclared exception!
      try { 
        jSONArray0.add((-261), (Object) "LSOmLhA4'rX");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -261, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) jSONArray0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.setRelatedArray("1^ ");
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Integer integer0 = new Integer(0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, integer0);
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray1.toJavaList(class0);
      JSONArray jSONArray2 = new JSONArray(list0);
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray3.getFloatValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3316, "1^ ");
      int int0 = 705;
      JSONArray jSONArray2 = jSONArray1.fluentSet(705, jSONArray0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      jSONArray2.contains(jSONArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray1.getDate(3316);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1^ \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3307);
      // Undeclared exception!
      try { 
        jSONArray0.add(3307, (Object) integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3307, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.get((-2177));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(1739);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1739, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONString((Object) null, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.subList((-1440), (-1440));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1440
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-2255));
      jSONArray0.set(3882, integer0);
      boolean boolean0 = jSONArray0.isEmpty();
      assertEquals(3883, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1), (Type) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(567);
      jSONArray0.set(121, integer0);
      jSONArray0.getJSONObject(78);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(4395);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4395, Size: 122
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(156, "");
      jSONArray0.getLong(156);
      assertEquals(157, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(100);
      Class<Integer> class0 = Integer.class;
      jSONArray0.add((Object) class0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.containsAll(jSONArray0);
      boolean boolean0 = jSONArray0.retainAll(jSONArray1);
      assertTrue(jSONArray0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0, parserConfig0);
      jSONArray0.add(0, (Object) jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3346, "1^ ");
      jSONArray0.indexOf("\"uZG7");
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray1.getObject(3301, (Type) parameterizedTypeImpl0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll(164, (Collection<?>) jSONArray0);
      jSONArray0.getBigDecimal(164);
      jSONArray3.listIterator();
      assertEquals(6694, jSONArray1.size());
      assertEquals(6694, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) "#mi6WnO~g>)uI");
      jSONArray2.toArray();
      // Undeclared exception!
      try { 
        jSONArray1.remove(164);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 164, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      Object object0 = new Object();
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONArray0);
      int int0 = (-2242);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAdd((-2242), (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2242, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3346, "1^ ");
      jSONArray1.isEmpty();
      ConcurrentHashMap<Annotation, Annotation> concurrentHashMap0 = new ConcurrentHashMap<Annotation, Annotation>();
      Collection<Annotation> collection0 = concurrentHashMap0.values();
      // Undeclared exception!
      try { 
        jSONArray1.fluentRetainAll(collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3346, "1^ ");
      int int0 = 2347;
      JSONArray jSONArray2 = jSONArray1.fluentRemove(2347);
      jSONArray2.indexOf("\"uZG7");
      Type type0 = jSONArray2.componentType;
      jSONArray1.getObject(3301, (Type) null);
      JSONArray jSONArray3 = new JSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-2099));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-895));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(1983);
      JSONObject jSONObject1 = jSONObject0.fluentRemove(jSONArray0);
      Set<String> set0 = jSONObject1.keySet();
      boolean boolean0 = jSONArray0.addAll(0, (Collection<?>) set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean0 = jSONArray0.addAll((Collection<?>) linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(100);
      Class<JSONArray> class0 = JSONArray.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(307);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class0, class0, (Field) null, 164, 3301, 100);
      Class<Integer> class1 = Integer.class;
      Class<String> class2 = String.class;
      Class<Integer> class3 = Integer.class;
      FieldInfo fieldInfo1 = new FieldInfo("", class2, class3, fieldInfo0.fieldClass, (Field) null, 3301, 1995, 3387);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo1);
      beanContext0.getField();
      jSONArray0.add((Object) class3);
      ParserConfig.getFieldFromCache("=^-A3J&BNzR<N3-", concurrentHashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3387, (Object) null);
      jSONArray1.getDouble(3387);
      jSONArray0.getBigDecimal(3301);
      jSONArray0.getLongValue(164);
      jSONArray0.getShort(3344);
      int int0 = jSONArray0.size();
      assertEquals(3388, int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(100);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(307);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      Class<Integer> class0 = Integer.class;
      jSONArray0.add((Object) class0);
      ParserConfig.getFieldFromCache("=^-A3J&BNzR<N3-", concurrentHashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3387, (Object) null);
      jSONArray1.getBoolean(3372);
      jSONArray0.getDouble(307);
      assertEquals(3388, jSONArray0.size());
      
      jSONArray0.fluentRemove(307);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(3387);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3387, Size: 3387
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(100);
      Class<JSONArray> class0 = JSONArray.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(307);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class0, class0, (Field) null, 164, 3301, 100);
      Class<Integer> class1 = Integer.class;
      Class<String> class2 = String.class;
      Class<Integer> class3 = Integer.class;
      FieldInfo fieldInfo1 = new FieldInfo("", class2, class3, fieldInfo0.fieldClass, (Field) null, 3301, 1995, 3387);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo1);
      beanContext0.getField();
      jSONArray0.add((Object) class3);
      ParserConfig.getFieldFromCache("=^-A3J&BNzR<N3-", concurrentHashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3387, (Object) null);
      Class<Annotation> class4 = Annotation.class;
      beanContext0.getAnnation(class4);
      Class<Field> class5 = Field.class;
      jSONArray1.getObject(3387, class5);
      jSONArray1.indexOf(fieldInfo1);
      jSONArray0.getObject(3301, (Type) class2);
      assertEquals(3388, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(1626, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        jSONArray0.getShort(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(1210);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1210, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(72);
      Class<JSONArray> class0 = JSONArray.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(307);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class0, class0, (Field) null, 164, 3301, 72);
      Class<Integer> class1 = Integer.class;
      Class<String> class2 = String.class;
      Class<Integer> class3 = Integer.class;
      FieldInfo fieldInfo1 = new FieldInfo("P]", class2, class3, fieldInfo0.fieldClass, (Field) null, 3301, 1995, 3387);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo1);
      beanContext0.getField();
      jSONArray0.add((Object) class3);
      ParserConfig.getFieldFromCache("=^-A3J&BNzR<N3-", concurrentHashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3387, (Object) null);
      Class<Annotation> class4 = Annotation.class;
      beanContext0.getAnnation(class4);
      Class<Field> class5 = Field.class;
      jSONArray1.getObject(3387, class5);
      jSONArray1.indexOf(fieldInfo1);
      jSONArray0.getObject(3301, (Type) class2);
      double double0 = jSONArray1.getDoubleValue(3372);
      assertEquals(3388, jSONArray0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3346, "1^ ");
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      jSONArray1.contains(jSONArray2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      float float0 = jSONArray0.getFloatValue(3238);
      assertEquals(3347, jSONArray0.size());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      boolean boolean0 = jSONArray0.equals(jSONArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(10, (Type) parameterizedTypeImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.setComponentType((Type) null);
      int int0 = jSONArray0.lastIndexOf((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(164);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 164, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject((Map<String, Object>) null);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) jSONObject0);
      jSONArray1.removeAll(jSONArray0);
      int int0 = 3354;
      // Undeclared exception!
      try { 
        jSONArray0.get(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3354, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentAddAll((Collection<?>) jSONArray2);
      Object object0 = new Object();
      JSONArray jSONArray4 = jSONArray3.fluentRemove(object0);
      JSONArray jSONArray5 = jSONArray4.fluentAddAll(0, (Collection<?>) jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray5.getIntValue((-1144));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", treeMap0);
      boolean boolean0 = jSONArray0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.remove(100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3346, "1^ ");
      jSONArray1.getDouble(3301);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      jSONArray1.getShort(1735);
      // Undeclared exception!
      try { 
        jSONArray1.getByte(3346);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1^ \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(2916);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.fluentSet(987, integer0);
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-48), (Collection<?>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -48, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(164);
      jSONArray0.fluentSet(2038, integer0);
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-1477));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(3346, "1^ ");
      jSONArray0.getString(3346);
      assertEquals(3347, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(100);
      Class<JSONArray> class0 = JSONArray.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(307);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class0, class0, (Field) null, 164, 3301, 100);
      Class<Integer> class1 = Integer.class;
      Class<String> class2 = String.class;
      Class<Integer> class3 = Integer.class;
      FieldInfo fieldInfo1 = new FieldInfo("", class2, class3, fieldInfo0.fieldClass, (Field) null, 3301, 2018, 3387);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo1);
      beanContext0.getField();
      jSONArray0.add((Object) class3);
      ParserConfig.getFieldFromCache("=^-A3J&BNzR<N3-", concurrentHashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3387, (Object) null);
      jSONArray1.getDouble(3387);
      jSONArray0.getBigDecimal(3301);
      jSONArray0.isEmpty();
      jSONArray1.add(2018, (Object) null);
      jSONArray0.remove(421);
      jSONArray1.remove(3343);
      assertEquals(3387, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(35, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 35, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-1731));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(164);
      jSONArray0.set(164, integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(164);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(Integer.MIN_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(65279);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65279, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.add(3041, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3041, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString((-859));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class0 = JSONObject.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Feature[] featureArray0 = new Feature[0];
      JSON.parseObject("", (Type) null, featureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(4096, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4096, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      Class<JSONArray> class0 = JSONArray.class;
      JSONArray jSONArray1 = jSONArray0.toJavaObject(class0);
      jSONArray0.clone();
      int int0 = (-306);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue((-306));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONArray0.fluentRemoveAll(linkedList0);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.get(20);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 20, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3346, "1^ ");
      jSONArray0.getDouble(3301);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "bUV{gW>a9j53ptjHGu");
      jSONArray0.getShort(846);
      jSONArray1.getByte(132);
      assertEquals(3347, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class0 = JSONObject.class;
      jSONArray0.componentType = (Type) class0;
      List<JSONObject> list0 = jSONArray0.toJavaList(class0);
      int int0 = 3361;
      jSONArray0.containsAll(list0);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(125);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 125, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(1823);
      jSONArray0.set(1, integer0);
      assertEquals(2, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSON.parseArray("", class0);
      // Undeclared exception!
      try { 
        jSONArray0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.remove((-1804));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Integer integer0 = new Integer(0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, integer0);
      Class<Object> class0 = Object.class;
      jSONArray1.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(3301, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3301, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)9;
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.DisableFieldSmartMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreAutoType;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowComment;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.CustomMapDeserializer;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.UseObjectArray;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.SupportAutoType;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.AutoCloseSource;
      featureArray0[6] = feature6;
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : h\t
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(164);
      jSONArray0.set(121, integer0);
      Class<String> class0 = String.class;
      jSONArray0.toJavaList(class0);
      assertEquals(122, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONArray0.listIterator();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[2] = serializerFeature1;
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse("1^ ", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(100);
      Class<JSONArray> class0 = JSONArray.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(307);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class0, class0, (Field) null, 164, 3301, 100);
      Class<Integer> class1 = Integer.class;
      Class<String> class2 = String.class;
      Class<Integer> class3 = Integer.class;
      FieldInfo fieldInfo1 = new FieldInfo("", class2, class3, fieldInfo0.fieldClass, (Field) null, 3301, 1995, 3387);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo1);
      beanContext0.getField();
      jSONArray0.add((Object) class3);
      ParserConfig.getFieldFromCache("=^-A3J&BNzR<N3-", concurrentHashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3387, (Object) null);
      jSONArray1.getDouble(3387);
      jSONArray0.getBigDecimal(3301);
      jSONArray0.equals("@type");
      assertEquals(3388, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3346, "1^ ");
      jSONArray0.contains(jSONArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getLongValue(3346);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : 1^ 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      Class<JSONArray> class1 = JSONArray.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("jZDu!U2iKNsL", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("x~BTp", class0, class1, class1, (Field) null, (-1), 151, 3301);
      Class<Annotation> class2 = Annotation.class;
      fieldInfo0.getAnnation(class2);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray1.retainAll(jSONArray2);
      Object object0 = new Object();
      jSONArray2.indexOf(jSONArray1);
      JSONArray jSONArray3 = jSONArray1.fluentRetainAll(jSONArray2);
      jSONArray2.contains(jSONArray3);
      // Undeclared exception!
      try { 
        jSONArray3.getFloat(164);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 164, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "{";
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        jSONArray0.set((-641), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.listIterator();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>(3301, 212.0F);
      ParserConfig.getFieldFromCache("_$@hvFs`1.n", hashMap0);
      jSONArray0.setRelatedArray((Object) null);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-3477), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(164);
      jSONArray0.lastIndexOf(integer0);
      int int0 = 1124075009;
      // Undeclared exception!
      try { 
        jSONArray0.getByte(1124075009);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1124075009, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)23;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator((-1625));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1625
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Annotation> class0 = Annotation.class;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "@type";
      stringArray0[2] = "1^ ";
      stringArray0[3] = "1.2.46";
      stringArray0[4] = "1^ ";
      stringArray0[5] = "@type";
      stringArray0[6] = "@type";
      stringArray0[7] = "1.2.46";
      stringArray0[8] = "@type";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      Map<String, Object> map0 = javaBeanSerializer0.getFieldValuesMap("@type");
      JSONObject jSONObject0 = new JSONObject(map0);
      jSONObject0.getDoubleValue("1^ ");
      JSONObject jSONObject1 = jSONObject0.fluentPut("@type", "1.2.46");
      jSONArray0.contains(jSONObject1);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(100);
      Class<JSONArray> class0 = JSONArray.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(307);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class0, class0, (Field) null, 164, 3301, 100);
      Class<Integer> class1 = Integer.class;
      Class<String> class2 = String.class;
      Class<Integer> class3 = Integer.class;
      FieldInfo fieldInfo1 = new FieldInfo("", class2, class3, fieldInfo0.fieldClass, (Field) null, 3301, 1995, 100);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo1);
      beanContext0.getField();
      jSONArray0.add((Object) class3);
      ParserConfig.getFieldFromCache("=^-A3J&BNzR<N3-", concurrentHashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1995, (Object) null);
      Class<Annotation> class4 = Annotation.class;
      beanContext0.getAnnation(class4);
      jSONArray1.indexOf(fieldInfo1);
      // Undeclared exception!
      try { 
        jSONArray0.getObject(3301, (Type) class2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3301, Size: 1996
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(3346, "1^ ");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      Feature[] featureArray0 = new Feature[14];
      Feature feature0 = Feature.UseObjectArray;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SortFeidFastMatch;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(3346);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        jSONArray0.addAll(3358, (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3358, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 3301);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      boolean boolean0 = jSONArray0.equals(sequenceInputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte)23;
      byteArray0[8] = (byte) (-24);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      jSONArray1.fluentSet(164, pushbackInputStream0);
      assertEquals(165, jSONArray1.size());
      
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) null);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.fluentRemove(164);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 164, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Annotation> class0 = Annotation.class;
      List<Annotation> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      // Undeclared exception!
      try { 
        jSONArray1.getDouble(3301);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3301, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3316, "1^ ");
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      jSONArray1.contains(jSONArray2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray3 = jSONArray2.fluentSet(3301, jSONArray0);
      Class<Field> class0 = Field.class;
      jSONArray3.getObject(668, class0);
      // Undeclared exception!
      try { 
        jSONArray3.getDoubleValue(3301);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      jSONArray0.set(5284, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(5284);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.io.ByteArrayInputStream@4c3e8f90
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(160);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 160, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(599);
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(0, jSONArray1);
      jSONArray2.getJSONArray(0);
      assertEquals(1, jSONArray1.size());
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.JSONArray";
      // Undeclared exception!
      try { 
        JSON.parseArray("com.alibaba.fastjson.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, 164);
      jSONArray0.isEmpty();
      jSONArray1.removeAll(jSONArray0);
      jSONArray0.set(3301, "");
      assertEquals(3302, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.DisableFieldSmartMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.OrderedField;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.NonStringKeyAsString;
      featureArray0[2] = feature2;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      HashMap<String, Field> hashMap1 = new HashMap<String, Field>(hashMap0);
      ParserConfig.getFieldFromCache("1^ ", hashMap1);
      jSONArray0.add((Object) null);
      Feature feature3 = Feature.IgnoreAutoType;
      featureArray0[3] = feature3;
      // Undeclared exception!
      try { 
        JSON.parse("1.2.46", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(100);
      Class<JSONArray> class0 = JSONArray.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(307);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class0, class0, (Field) null, 164, 3301, 100);
      Class<Integer> class1 = Integer.class;
      Class<String> class2 = String.class;
      Class<Integer> class3 = Integer.class;
      FieldInfo fieldInfo1 = new FieldInfo("", class2, class3, fieldInfo0.fieldClass, (Field) null, 3301, 1995, 3387);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo1);
      beanContext0.getField();
      jSONArray0.add((Object) class3);
      ParserConfig.getFieldFromCache("=^-A3J&BNzR<N3-", concurrentHashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3387, (Object) null);
      Class<Annotation> class4 = Annotation.class;
      beanContext0.getAnnation(class4);
      beanContext0.getField();
      jSONArray1.indexOf(fieldInfo1);
      jSONArray1.getDate(2048);
      jSONArray1.listIterator();
      boolean boolean0 = jSONArray0.getBooleanValue(3301);
      assertEquals(3388, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2551);
      JSONObject jSONObject0 = new JSONObject();
      UnaryOperator.identity();
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      String string0 = "evalSize error : ";
      Class<Object> class1 = Object.class;
      String string1 = "}sMB/`>9(r";
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(3301);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3301, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(164);
      int int0 = 121;
      jSONArray0.set(121, integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(164);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 164, Size: 122
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-3425));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(65);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(38);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 38, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
