/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 14:39:58 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T.(>W67\"");
      assertFalse(boolean0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("T.(>W67\"");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.setExitWhenComplete(true);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("file.separator", "T.(>W67\"");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertNotNull(spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      assertNotNull(multiPagePipeline0);
      
      Spider spider3 = spider2.addPipeline(multiPagePipeline0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertNotNull(spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      
      Spider spider4 = spider3.setScheduler((Scheduler) null);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertNotNull(spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider2, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      
      Spider spider5 = spider4.scheduler((Scheduler) null);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertNotNull(spider5);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider5);
      assertSame(spider1, spider2);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider2, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider5);
      assertSame(spider3, spider4);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider5);
      assertSame(spider5, spider0);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider3);
      assertSame(spider5, spider1);
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(priorityScheduler0);
      
      Request request0 = priorityScheduler0.poll(spider2);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertNull(request0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider5);
      assertSame(spider1, spider2);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider2, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      
      // Undeclared exception!
      try { 
        spider5.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "queue_";
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("queue_");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("queue_", "queue_");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertNotNull(collectorPipeline0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.pipeline(collectorPipeline0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertNotNull(spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider2.setExecutorService((ExecutorService) null);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertNotNull(spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(priorityScheduler0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "queue_");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Spider spider4 = spider3.setScheduler(priorityScheduler0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertNotNull(spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider4, spider2);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      Spider spider5 = spider4.setSpawnUrl(false);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertFalse(spider5.isSpawnUrl());
      assertNotNull(spider5);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertSame(spider1, spider4);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider5);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider4, spider5);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider4, spider2);
      assertSame(spider5, spider3);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      assertSame(spider5, spider1);
      
      Spider spider6 = spider3.setDownloader(phantomJSDownloader0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider6.isExitWhenComplete());
      assertFalse(spider6.isSpawnUrl());
      assertNotNull(spider6);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider6);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertSame(spider1, spider4);
      assertSame(spider1, spider6);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider2, spider6);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider5);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider6);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider6, spider3);
      assertSame(spider6, spider2);
      assertSame(spider6, spider4);
      assertSame(spider6, spider1);
      assertSame(spider6, spider5);
      assertSame(spider6, spider0);
      
      Spider spider7 = spider2.thread((ExecutorService) null, 655);
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertEquals(0L, spider7.getPageCount());
      assertFalse(spider7.isSpawnUrl());
      assertTrue(spider7.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertNotNull(spider7);
      assertSame(spider7, spider1);
      assertSame(spider7, spider0);
      assertSame(spider7, spider4);
      assertSame(spider7, spider5);
      assertSame(spider7, spider2);
      assertSame(spider7, spider3);
      assertSame(spider7, spider6);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider7);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider6);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider7);
      assertSame(spider1, spider5);
      assertSame(spider1, spider4);
      assertSame(spider1, spider6);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider7);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider2, spider6);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      // Undeclared exception!
      try { 
        spider6.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",%<U?CPoNJ7");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(priorityScheduler0);
      
      spider0.uuid = ",%<U?CPoNJ7";
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(",%<U?CPoNJ7");
      assertNotNull(fileCacheQueueScheduler0);
      
      Request request0 = new Request();
      assertNull(request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      assertNotNull(request0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)81;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-113), (byte)58);
      assertEquals(8, byteArray0.length);
      assertEquals(58, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-113), (byte)94, (byte)126, (byte)0, (byte) (-40), (byte)58, (byte)3, (byte)81}, byteArray0);
      
      Request request1 = request0.putExtra(",%<U?CPoNJ7", byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertEquals(58, byteArrayInputStream0.available());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getUrl());
      assertNull(request1.getMethod());
      assertNull(request1.getCharset());
      assertEquals(0L, request1.getPriority());
      assertNull(request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      assertNotNull(request1);
      assertArrayEquals(new byte[] {(byte) (-113), (byte)94, (byte)126, (byte)0, (byte) (-40), (byte)58, (byte)3, (byte)81}, byteArray0);
      assertSame(request1, request0);
      assertSame(request0, request1);
      
      Request request2 = request1.addHeader(",%<U?CPoNJ7", "us.codecraft.webmagic.Request");
      assertEquals(8, byteArray0.length);
      assertEquals(58, byteArrayInputStream0.available());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getUrl());
      assertNull(request1.getMethod());
      assertNull(request1.getCharset());
      assertEquals(0L, request1.getPriority());
      assertFalse(request2.isBinaryContent());
      assertNull(request2.getUrl());
      assertNull(request2.getMethod());
      assertNull(request2.getCharset());
      assertEquals(0L, request2.getPriority());
      assertNull(request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      assertNotNull(request2);
      assertArrayEquals(new byte[] {(byte) (-113), (byte)94, (byte)126, (byte)0, (byte) (-40), (byte)58, (byte)3, (byte)81}, byteArray0);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request2, request0);
      assertSame(request2, request1);
      assertSame(request0, request1);
      assertSame(request0, request2);
      
      fileCacheQueueScheduler0.push(request1, spider0);
      assertEquals(8, byteArray0.length);
      assertEquals(58, byteArrayInputStream0.available());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getUrl());
      assertNull(request1.getMethod());
      assertNull(request1.getCharset());
      assertEquals(0L, request1.getPriority());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertNull(request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      assertArrayEquals(new byte[] {(byte) (-113), (byte)94, (byte)126, (byte)0, (byte) (-40), (byte)58, (byte)3, (byte)81}, byteArray0);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(spider0, spider1);
      assertSame(request0, request1);
      assertSame(request0, request2);
      
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      assertNotNull(duplicateRemover0);
      
      PriorityScheduler priorityScheduler1 = (PriorityScheduler)priorityScheduler0.setDuplicateRemover(duplicateRemover0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(priorityScheduler1);
      assertSame(priorityScheduler0, priorityScheduler1);
      assertSame(priorityScheduler1, priorityScheduler0);
      
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(request1));
      
      Spider spider2 = spider1.startRequest(linkedList0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0, linkedList0.size());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertNotNull(spider2);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(priorityScheduler0, priorityScheduler1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertFalse(linkedList0.contains(request1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.clearPipeline();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Page page0 = new Page();
      assertNull(page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertNotNull(page0);
      
      Page page1 = page0.setSkip(false);
      assertNull(page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getCharset());
      assertTrue(page1.isDownloadSuccess());
      assertNull(page1.getRawText());
      assertNotNull(page1);
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      Page page2 = page1.setRawText("");
      assertEquals("", page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getCharset());
      assertTrue(page1.isDownloadSuccess());
      assertEquals("", page1.getRawText());
      assertTrue(page2.isDownloadSuccess());
      assertNull(page2.getCharset());
      assertEquals("", page2.getRawText());
      assertEquals(200, page2.getStatusCode());
      assertNotNull(page2);
      assertSame(page0, page2);
      assertSame(page0, page1);
      assertSame(page1, page2);
      assertSame(page1, page0);
      assertSame(page2, page1);
      assertSame(page2, page0);
      
      spider1.extractAndAddRequests(page2, false);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals("", page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getCharset());
      assertTrue(page1.isDownloadSuccess());
      assertEquals("", page1.getRawText());
      assertTrue(page2.isDownloadSuccess());
      assertNull(page2.getCharset());
      assertEquals("", page2.getRawText());
      assertEquals(200, page2.getStatusCode());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(page0, page2);
      assertSame(page0, page1);
      assertSame(page1, page2);
      assertSame(page1, page0);
      assertSame(page2, page1);
      assertSame(page2, page0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("content");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.setExitWhenComplete(true);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertNotNull(spider2);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Spider spider3 = spider2.setUUID("content");
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertNotNull(spider3);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      
      Spider spider4 = spider3.setSpawnUrl(true);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertNotNull(spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      
      Spider spider5 = spider4.setPipelines((List<Pipeline>) null);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isSpawnUrl());
      assertNotNull(spider5);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertSame(spider1, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider5);
      assertSame(spider3, spider5);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider4, spider5);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider5, spider1);
      assertSame(spider5, spider0);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider3);
      
      Page page0 = Page.fail();
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      assertFalse(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNotNull(page0);
      
      Page page1 = page0.setSkip(true);
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      assertFalse(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getCharset());
      assertFalse(page1.isDownloadSuccess());
      assertNull(page1.getRawText());
      assertNotNull(page1);
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      // Undeclared exception!
      try { 
        spider5.extractAndAddRequests(page1, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      //  // Unstable assertion: assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertNotNull(spider0);
      
      String string1 = "ZOS>]";
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("ZOS>]");
      //  // Unstable assertion: assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      //  // Unstable assertion: assertNotNull(simplePageProcessor1);
      
      Spider spider1 = Spider.create(simplePageProcessor1);
      //  // Unstable assertion: assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      //  // Unstable assertion: assertFalse(spider1.equals((Object)spider0));
      //  // Unstable assertion: assertEquals(0L, spider1.getPageCount());
      //  // Unstable assertion: assertTrue(spider1.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider1.getStatus());
      //  // Unstable assertion: assertTrue(spider1.isSpawnUrl());
      //  // Unstable assertion: assertNotNull(spider1);
      //  // Unstable assertion: assertNotSame(simplePageProcessor1, simplePageProcessor0);
      //  // Unstable assertion: assertNotSame(spider1, spider0);
      
      Spider spider2 = spider0.setExitWhenComplete(true);
      //  // Unstable assertion: assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      //  // Unstable assertion: assertFalse(spider0.equals((Object)spider1));
      //  // Unstable assertion: assertFalse(spider2.equals((Object)spider1));
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertTrue(spider2.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider2.getPageCount());
      //  // Unstable assertion: assertTrue(spider2.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider2.getStatus());
      //  // Unstable assertion: assertNotNull(spider2);
      //  // Unstable assertion: assertNotSame(simplePageProcessor0, simplePageProcessor1);
      //  // Unstable assertion: assertSame(spider0, spider2);
      //  // Unstable assertion: assertNotSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider2, spider0);
      //  // Unstable assertion: assertNotSame(spider2, spider1);
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean0);
      
      Spider spider3 = spider2.addUrl(stringArray0);
      //  // Unstable assertion: assertEquals(0, stringArray0.length);
      //  // Unstable assertion: assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      //  // Unstable assertion: assertFalse(spider0.equals((Object)spider1));
      //  // Unstable assertion: assertFalse(spider2.equals((Object)spider1));
      //  // Unstable assertion: assertFalse(spider3.equals((Object)spider1));
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertTrue(spider2.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider2.getPageCount());
      //  // Unstable assertion: assertTrue(spider2.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider2.getStatus());
      //  // Unstable assertion: assertEquals(0L, spider3.getPageCount());
      //  // Unstable assertion: assertTrue(spider3.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider3.getStatus());
      //  // Unstable assertion: assertTrue(spider3.isSpawnUrl());
      //  // Unstable assertion: assertNotNull(spider3);
      //  // Unstable assertion: assertNotSame(simplePageProcessor0, simplePageProcessor1);
      //  // Unstable assertion: assertSame(spider0, spider2);
      //  // Unstable assertion: assertSame(spider0, spider3);
      //  // Unstable assertion: assertNotSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider2, spider0);
      //  // Unstable assertion: assertNotSame(spider2, spider1);
      //  // Unstable assertion: assertSame(spider2, spider3);
      //  // Unstable assertion: assertSame(spider3, spider0);
      //  // Unstable assertion: assertNotSame(spider3, spider1);
      //  // Unstable assertion: assertSame(spider3, spider2);
      
      Spider spider4 = spider3.clearPipeline();
      //  // Unstable assertion: assertEquals(0, stringArray0.length);
      //  // Unstable assertion: assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      //  // Unstable assertion: assertFalse(spider0.equals((Object)spider1));
      //  // Unstable assertion: assertFalse(spider2.equals((Object)spider1));
      //  // Unstable assertion: assertFalse(spider3.equals((Object)spider1));
      //  // Unstable assertion: assertFalse(spider4.equals((Object)spider1));
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertTrue(spider2.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider2.getPageCount());
      //  // Unstable assertion: assertTrue(spider2.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider2.getStatus());
      //  // Unstable assertion: assertEquals(0L, spider3.getPageCount());
      //  // Unstable assertion: assertTrue(spider3.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider3.getStatus());
      //  // Unstable assertion: assertTrue(spider3.isSpawnUrl());
      //  // Unstable assertion: assertTrue(spider4.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider4.getPageCount());
      //  // Unstable assertion: assertTrue(spider4.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider4.getStatus());
      //  // Unstable assertion: assertNotNull(spider4);
      //  // Unstable assertion: assertNotSame(simplePageProcessor0, simplePageProcessor1);
      //  // Unstable assertion: assertSame(spider0, spider2);
      //  // Unstable assertion: assertSame(spider0, spider4);
      //  // Unstable assertion: assertSame(spider0, spider3);
      //  // Unstable assertion: assertNotSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider2, spider0);
      //  // Unstable assertion: assertNotSame(spider2, spider1);
      //  // Unstable assertion: assertSame(spider2, spider4);
      //  // Unstable assertion: assertSame(spider2, spider3);
      //  // Unstable assertion: assertSame(spider3, spider0);
      //  // Unstable assertion: assertNotSame(spider3, spider1);
      //  // Unstable assertion: assertSame(spider3, spider2);
      //  // Unstable assertion: assertSame(spider3, spider4);
      //  // Unstable assertion: assertNotSame(spider4, spider1);
      //  // Unstable assertion: assertSame(spider4, spider3);
      //  // Unstable assertion: assertSame(spider4, spider0);
      //  // Unstable assertion: assertSame(spider4, spider2);
      
      Spider spider5 = spider4.addPipeline((Pipeline) null);
      //  // Unstable assertion: assertEquals(0, stringArray0.length);
      //  // Unstable assertion: assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      //  // Unstable assertion: assertFalse(spider0.equals((Object)spider1));
      //  // Unstable assertion: assertFalse(spider2.equals((Object)spider1));
      //  // Unstable assertion: assertFalse(spider3.equals((Object)spider1));
      //  // Unstable assertion: assertFalse(spider4.equals((Object)spider1));
      //  // Unstable assertion: assertFalse(spider5.equals((Object)spider1));
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertTrue(spider2.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider2.getPageCount());
      //  // Unstable assertion: assertTrue(spider2.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider2.getStatus());
      //  // Unstable assertion: assertEquals(0L, spider3.getPageCount());
      //  // Unstable assertion: assertTrue(spider3.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider3.getStatus());
      //  // Unstable assertion: assertTrue(spider3.isSpawnUrl());
      //  // Unstable assertion: assertTrue(spider4.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider4.getPageCount());
      //  // Unstable assertion: assertTrue(spider4.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider4.getStatus());
      //  // Unstable assertion: assertTrue(spider5.isSpawnUrl());
      //  // Unstable assertion: assertEquals(0L, spider5.getPageCount());
      //  // Unstable assertion: assertTrue(spider5.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider5.getStatus());
      //  // Unstable assertion: assertNotNull(spider5);
      //  // Unstable assertion: assertNotSame(simplePageProcessor0, simplePageProcessor1);
      //  // Unstable assertion: assertSame(spider0, spider2);
      //  // Unstable assertion: assertSame(spider0, spider4);
      //  // Unstable assertion: assertSame(spider0, spider3);
      //  // Unstable assertion: assertNotSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider0, spider5);
      //  // Unstable assertion: assertSame(spider2, spider0);
      //  // Unstable assertion: assertNotSame(spider2, spider1);
      //  // Unstable assertion: assertSame(spider2, spider5);
      //  // Unstable assertion: assertSame(spider2, spider4);
      //  // Unstable assertion: assertSame(spider2, spider3);
      //  // Unstable assertion: assertSame(spider3, spider0);
      //  // Unstable assertion: assertNotSame(spider3, spider1);
      //  // Unstable assertion: assertSame(spider3, spider2);
      //  // Unstable assertion: assertSame(spider3, spider5);
      //  // Unstable assertion: assertSame(spider3, spider4);
      //  // Unstable assertion: assertNotSame(spider4, spider1);
      //  // Unstable assertion: assertSame(spider4, spider3);
      //  // Unstable assertion: assertSame(spider4, spider0);
      //  // Unstable assertion: assertSame(spider4, spider5);
      //  // Unstable assertion: assertSame(spider4, spider2);
      //  // Unstable assertion: assertNotSame(spider5, spider1);
      //  // Unstable assertion: assertSame(spider5, spider2);
      //  // Unstable assertion: assertSame(spider5, spider4);
      //  // Unstable assertion: assertSame(spider5, spider3);
      //  // Unstable assertion: assertSame(spider5, spider0);
      
      spider2.runAsync();
      //  // Unstable assertion: assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      //  // Unstable assertion: assertFalse(spider0.equals((Object)spider1));
      //  // Unstable assertion: assertFalse(spider2.equals((Object)spider1));
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(Spider.Status.Running, spider0.getStatus());
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertTrue(spider2.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider2.getPageCount());
      //  // Unstable assertion: assertTrue(spider2.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Running, spider2.getStatus());
      //  // Unstable assertion: assertNotSame(simplePageProcessor0, simplePageProcessor1);
      //  // Unstable assertion: assertSame(spider0, spider2);
      //  // Unstable assertion: assertSame(spider0, spider4);
      //  // Unstable assertion: assertSame(spider0, spider3);
      //  // Unstable assertion: assertNotSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider0, spider5);
      //  // Unstable assertion: assertSame(spider2, spider0);
      //  // Unstable assertion: assertNotSame(spider2, spider1);
      //  // Unstable assertion: assertSame(spider2, spider5);
      //  // Unstable assertion: assertSame(spider2, spider4);
      //  // Unstable assertion: assertSame(spider2, spider3);
      
      Date date0 = spider5.getStartTime();
      //  // Unstable assertion: assertEquals(0, stringArray0.length);
      //  // Unstable assertion: assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      //  // Unstable assertion: assertFalse(spider0.equals((Object)spider1));
      //  // Unstable assertion: assertFalse(spider2.equals((Object)spider1));
      //  // Unstable assertion: assertFalse(spider3.equals((Object)spider1));
      //  // Unstable assertion: assertFalse(spider4.equals((Object)spider1));
      //  // Unstable assertion: assertFalse(spider5.equals((Object)spider1));
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(Spider.Status.Running, spider0.getStatus());
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertTrue(spider2.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider2.getPageCount());
      //  // Unstable assertion: assertTrue(spider2.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Running, spider2.getStatus());
      //  // Unstable assertion: assertEquals(0L, spider3.getPageCount());
      //  // Unstable assertion: assertTrue(spider3.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(Spider.Status.Running, spider3.getStatus());
      //  // Unstable assertion: assertTrue(spider3.isSpawnUrl());
      //  // Unstable assertion: assertTrue(spider4.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider4.getPageCount());
      //  // Unstable assertion: assertTrue(spider4.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Running, spider4.getStatus());
      //  // Unstable assertion: assertTrue(spider5.isSpawnUrl());
      //  // Unstable assertion: assertEquals(0L, spider5.getPageCount());
      //  // Unstable assertion: assertTrue(spider5.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(Spider.Status.Running, spider5.getStatus());
      //  // Unstable assertion: assertNull(date0);
      //  // Unstable assertion: assertNotSame(simplePageProcessor0, simplePageProcessor1);
      //  // Unstable assertion: assertSame(spider0, spider2);
      //  // Unstable assertion: assertSame(spider0, spider4);
      //  // Unstable assertion: assertSame(spider0, spider3);
      //  // Unstable assertion: assertNotSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider0, spider5);
      //  // Unstable assertion: assertSame(spider2, spider0);
      //  // Unstable assertion: assertNotSame(spider2, spider1);
      //  // Unstable assertion: assertSame(spider2, spider5);
      //  // Unstable assertion: assertSame(spider2, spider4);
      //  // Unstable assertion: assertSame(spider2, spider3);
      //  // Unstable assertion: assertSame(spider3, spider0);
      //  // Unstable assertion: assertNotSame(spider3, spider1);
      //  // Unstable assertion: assertSame(spider3, spider2);
      //  // Unstable assertion: assertSame(spider3, spider5);
      //  // Unstable assertion: assertSame(spider3, spider4);
      //  // Unstable assertion: assertNotSame(spider4, spider1);
      //  // Unstable assertion: assertSame(spider4, spider3);
      //  // Unstable assertion: assertSame(spider4, spider0);
      //  // Unstable assertion: assertSame(spider4, spider5);
      //  // Unstable assertion: assertSame(spider4, spider2);
      //  // Unstable assertion: assertNotSame(spider5, spider1);
      //  // Unstable assertion: assertSame(spider5, spider2);
      //  // Unstable assertion: assertSame(spider5, spider4);
      //  // Unstable assertion: assertSame(spider5, spider3);
      //  // Unstable assertion: assertSame(spider5, spider0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      //  // Unstable assertion: assertNotNull(forkJoinPool0);
      
      int int0 = forkJoinPool0.getParallelism();
      //  // Unstable assertion: assertEquals(32, int0);
      
      // Undeclared exception!
      try { 
        spider2.setExecutorService(forkJoinPool0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("waitNewUrl - interrupted, error {}");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.setSpawnUrl(false);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("waitNewUrl - interrupted, error {}");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider2 = spider1.scheduler(fileCacheQueueScheduler0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertNotNull(spider2);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Spider spider3 = spider2.setDownloader((Downloader) null);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isSpawnUrl());
      assertNotNull(spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Spider spider4 = spider3.setPipelines(linkedList0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertFalse(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertNotNull(spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      
      Spider spider5 = spider4.clearPipeline();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertFalse(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertNotNull(spider5);
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider2);
      assertSame(spider1, spider5);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider5);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider4, spider5);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider5, spider3);
      assertSame(spider5, spider2);
      assertSame(spider5, spider1);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      
      // Undeclared exception!
      try { 
        spider5.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("cd )7.7*@154");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("cd )7.7*@154");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      boolean boolean0 = spider1.isExitWhenComplete();
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(boolean0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "M=n[$ea";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("M=n[$ea");
      assertNotNull(simplePageProcessor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M=n[$ea");
      assertFalse(boolean0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertNotNull(spider0);
      
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      assertEquals(0, stringArray0.length);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertNotNull(spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider2.thread((ExecutorService) null, 30000);
      assertEquals(0, stringArray0.length);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertNotNull(spider3);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      
      Spider spider4 = spider3.setSpawnUrl(false);
      assertEquals(0, stringArray0.length);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isSpawnUrl());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertNotNull(spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(39);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      assertNotNull(blockingQueue0);
      
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(2, 2, 1735L, timeUnit0, blockingQueue0);
      assertNotNull(threadPoolExecutor0);
      
      Spider spider5 = spider4.setExecutorService(threadPoolExecutor0);
      assertEquals(0, stringArray0.length);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isSpawnUrl());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(0L, spider5.getPageCount());
      assertFalse(spider5.isSpawnUrl());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertNotNull(spider5);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider3, spider5);
      assertSame(spider4, spider5);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      assertSame(spider5, spider4);
      assertSame(spider5, spider3);
      assertSame(spider5, spider1);
      
      List<SpiderListener> list0 = spider5.getSpiderListeners();
      assertEquals(0, stringArray0.length);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isSpawnUrl());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(0L, spider5.getPageCount());
      assertFalse(spider5.isSpawnUrl());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider3, spider5);
      assertSame(spider4, spider5);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      assertSame(spider5, spider4);
      assertSame(spider5, spider3);
      assertSame(spider5, spider1);
      
      Spider spider6 = spider3.addUrl(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(spider6.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider6.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isSpawnUrl());
      assertNotNull(spider6);
      assertSame(spider6, spider4);
      assertSame(spider6, spider1);
      assertSame(spider6, spider5);
      assertSame(spider6, spider2);
      assertSame(spider6, spider0);
      assertSame(spider6, spider3);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider6);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider6);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider6);
      assertSame(spider3, spider1);
      assertSame(spider3, spider6);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider3, spider5);
      
      // Undeclared exception!
      try { 
        spider4.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("PK\"lI/evW$X.pZvrx");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(priorityScheduler0);
      
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.clearPipeline();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertNotNull(spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Spider spider3 = spider1.setUUID("PK\"lI/evW$X.pZvrx");
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertNotNull(spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      
      spider3.startRequests = null;
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      
      Spider spider4 = spider3.scheduler(priorityScheduler0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertNotNull(spider4);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PriorityScheduler priorityScheduler1 = (PriorityScheduler)spider0.getScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(priorityScheduler1);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(priorityScheduler1, priorityScheduler0);
      
      Spider spider5 = spider0.setScheduler(priorityScheduler1);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertNotNull(spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(priorityScheduler1, priorityScheduler0);
      assertSame(spider5, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      
      Spider spider6 = spider5.setSpawnUrl(false);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertFalse(spider5.isSpawnUrl());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertFalse(spider6.isSpawnUrl());
      assertTrue(spider6.isExitWhenComplete());
      assertEquals(0L, spider6.getPageCount());
      assertNotNull(spider6);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider6);
      assertSame(priorityScheduler1, priorityScheduler0);
      assertSame(spider5, spider6);
      assertSame(spider5, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      assertSame(spider6, spider1);
      assertSame(spider6, spider0);
      assertSame(spider6, spider4);
      assertSame(spider6, spider5);
      assertSame(spider6, spider2);
      assertSame(spider6, spider3);
      
      int int0 = priorityScheduler0.getLeftRequestsCount(spider6);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertFalse(spider5.isSpawnUrl());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertFalse(spider6.isSpawnUrl());
      assertTrue(spider6.isExitWhenComplete());
      assertEquals(0L, spider6.getPageCount());
      assertEquals(0, int0);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider6);
      assertSame(priorityScheduler0, priorityScheduler1);
      assertSame(priorityScheduler1, priorityScheduler0);
      assertSame(spider5, spider6);
      assertSame(spider5, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      assertSame(spider6, spider1);
      assertSame(spider6, spider0);
      assertSame(spider6, spider4);
      assertSame(spider6, spider5);
      assertSame(spider6, spider2);
      assertSame(spider6, spider3);
      
      Spider spider7 = spider1.scheduler(priorityScheduler1);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider7.getPageCount());
      assertTrue(spider7.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertFalse(spider7.isSpawnUrl());
      assertNotNull(spider7);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider6);
      assertSame(spider0, spider7);
      assertSame(priorityScheduler0, priorityScheduler1);
      assertSame(spider1, spider6);
      assertSame(spider1, spider7);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(priorityScheduler1, priorityScheduler0);
      assertSame(spider7, spider1);
      assertSame(spider7, spider4);
      assertSame(spider7, spider6);
      assertSame(spider7, spider5);
      assertSame(spider7, spider0);
      assertSame(spider7, spider2);
      assertSame(spider7, spider3);
      
      Locale locale0 = new Locale("PK\"lI/evW$X.pZvrx");
      assertEquals("", locale0.getVariant());
      assertEquals("pk\"li/evw$x.pzvrx", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("pk\"li/evw$x.pzvrx", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("", locale0.getVariant());
      assertEquals("pk\"li/evw$x.pzvrx", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("pk\"li/evw$x.pzvrx", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("PK\"lI/evW$X.pZvrx"));
      
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Spider.Status[] spider_StatusArray0 = Spider.Status.values();
      assertEquals(3, spider_StatusArray0.length);
      assertNotNull(spider_StatusArray0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertNotNull(spider0);
      
      Date date0 = spider0.getStartTime();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertNull(date0);
      
      spider0.sleep(3);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Z71VtlhMgHE");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertNotNull(spider0);
      
      Spider.Status spider_Status0 = spider0.getStatus();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Spider.Status[] spider_StatusArray0 = Spider.Status.values();
      assertEquals(3, spider_StatusArray0.length);
      assertNotNull(spider_StatusArray0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/Q-=.=7|_3$=nz\"+GH");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertNotNull(spider0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/Q-=.=7|_3$=nz\"+GH";
      stringArray0[1] = "/Q-=.=7|_3$=nz\"+GH";
      stringArray0[2] = "/Q-=.=7|_3$=nz\"+GH";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/Q-=.=7|_3$=nz\"+GH");
      assertFalse(boolean0);
      
      int int0 = spider0.getThreadAlive();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, int0);
      
      stringArray0[3] = "/Q-=.=7|_3$=nz\"+GH";
      stringArray0[4] = "/Q-=.=7|_3$=nz\"+GH";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "@YaaKmf+!:E@m8v>:c)";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("@YaaKmf+!:E@m8v>:c)");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      assertNotNull(consolePipeline0);
      
      Spider spider1 = spider0.pipeline(consolePipeline0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertNotNull(spider2);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertNull(list0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertNotNull(spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      
      int int0 = 1386;
      Spider spider4 = spider3.thread(1386);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertNotNull(spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider3, spider4);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      
      // Undeclared exception!
      try { 
        spider4.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("{+V}I;n{R{}&s");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.thread((ExecutorService) null, 30000);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Request[] requestArray0 = new Request[2];
      Request request0 = new Request();
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getCharset());
      assertNull(request0.getUrl());
      assertNull(request0.getMethod());
      assertEquals(0L, request0.getPriority());
      assertNotNull(request0);
      
      Request request1 = request0.setMethod("{+V}I;n{R{}&s");
      assertFalse(request0.isBinaryContent());
      assertEquals("{+V}I;n{R{}&s", request0.getMethod());
      assertNull(request0.getCharset());
      assertNull(request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertNull(request1.getUrl());
      assertEquals("{+V}I;n{R{}&s", request1.getMethod());
      assertNull(request1.getCharset());
      assertEquals(0L, request1.getPriority());
      assertFalse(request1.isBinaryContent());
      assertNotNull(request1);
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      requestArray0[0] = request1;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Request request2 = request0.setExtras(hashMap0);
      assertFalse(request0.isBinaryContent());
      assertEquals("{+V}I;n{R{}&s", request0.getMethod());
      assertNull(request0.getCharset());
      assertNull(request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{+V}I;n{R{}&s", request2.getMethod());
      assertNull(request2.getUrl());
      assertNull(request2.getCharset());
      assertEquals(0L, request2.getPriority());
      assertFalse(request2.isBinaryContent());
      assertNotNull(request2);
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request2, request0);
      assertSame(request2, request1);
      
      Request request3 = request2.addHeader("_cycle_tried_times", "");
      assertFalse(request0.isBinaryContent());
      assertEquals("{+V}I;n{R{}&s", request0.getMethod());
      assertNull(request0.getCharset());
      assertNull(request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{+V}I;n{R{}&s", request2.getMethod());
      assertNull(request2.getUrl());
      assertNull(request2.getCharset());
      assertEquals(0L, request2.getPriority());
      assertFalse(request2.isBinaryContent());
      assertNull(request3.getCharset());
      assertFalse(request3.isBinaryContent());
      assertEquals("{+V}I;n{R{}&s", request3.getMethod());
      assertNull(request3.getUrl());
      assertEquals(0L, request3.getPriority());
      assertNotNull(request3);
      assertSame(request0, request3);
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request2, request0);
      assertSame(request2, request3);
      assertSame(request2, request1);
      assertSame(request3, request2);
      assertSame(request3, request0);
      assertSame(request3, request1);
      
      requestArray0[1] = request3;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Spider.Status spider_Status0 = Spider.Status.fromValue((-958));
      assertEquals(Spider.Status.Init, spider_Status0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      boolean boolean1 = false;
      spider0.exitWhenComplete = false;
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Page page0 = new Page();
      assertNull(page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getCharset());
      assertNotNull(page0);
      
      Page page1 = page0.setSkip(false);
      assertNull(page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getCharset());
      assertNull(page1.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertTrue(page1.isDownloadSuccess());
      assertNull(page1.getCharset());
      assertNotNull(page1);
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertNotNull(spider0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) forkJoinPool0, (-4104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertNotNull(spider0);
      
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      assertEquals(0, requestArray0.length);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Page page0 = Page.fail();
      assertFalse(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertNotNull(page0);
      
      List<Request> list0 = page0.getTargetRequests();
      assertFalse(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Spider spider2 = spider1.startRequest(list0);
      assertEquals(0, requestArray0.length);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertNotNull(spider2);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Spider spider3 = spider2.setSpawnUrl(false);
      assertEquals(0, requestArray0.length);
      assertFalse(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertNotNull(spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.setUUID("");
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Page page0 = Page.fail();
      assertNull(page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertFalse(page0.isDownloadSuccess());
      assertNull(page0.getCharset());
      assertNotNull(page0);
      
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertNotNull(spider0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      spider0.stop();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      
      spider0.checkIfRunning();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      
      boolean boolean1 = spider0.isSpawnUrl();
      assertFalse(boolean1 == boolean0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(boolean1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Spider spider1 = spider0.startUrls(linkedList0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertFalse(linkedList0.contains(""));
      
      FilePipeline filePipeline0 = new FilePipeline("");
      assertEquals("/", filePipeline0.getPath());
      assertNotNull(filePipeline0);
      
      Spider spider2 = spider1.pipeline(filePipeline0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals("/", filePipeline0.getPath());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertNotNull(spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertFalse(linkedList0.contains(""));
      
      Spider spider3 = spider2.downloader((Downloader) null);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals("/", filePipeline0.getPath());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertNotNull(spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertFalse(linkedList0.contains(""));
      
      Spider spider4 = Spider.create(simplePageProcessor0);
      assertFalse(spider4.equals((Object)spider2));
      assertFalse(spider4.equals((Object)spider3));
      assertFalse(spider4.equals((Object)spider0));
      assertFalse(spider4.equals((Object)spider1));
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertNotNull(spider4);
      assertNotSame(spider4, spider2);
      assertNotSame(spider4, spider3);
      assertNotSame(spider4, spider0);
      assertNotSame(spider4, spider1);
      
      // Undeclared exception!
      try { 
        spider3.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Spider spider1 = spider0.setPipelines(linkedList0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      assertNotNull(hashSetDuplicateRemover0);
      
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = queueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      assertNotNull(duplicateRemovedScheduler0);
      assertSame(queueScheduler0, duplicateRemovedScheduler0);
      assertSame(duplicateRemovedScheduler0, queueScheduler0);
      
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertNotNull(spider2);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(queueScheduler0, duplicateRemovedScheduler0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Spider spider3 = spider2.clearPipeline();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertNotNull(spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(queueScheduler0, duplicateRemovedScheduler0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      
      Spider spider4 = spider3.scheduler(queueScheduler0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertNotNull(spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(queueScheduler0, duplicateRemovedScheduler0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      Spider spider5 = spider3.downloader(phantomJSDownloader0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isSpawnUrl());
      assertNotNull(spider5);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(queueScheduler0, duplicateRemovedScheduler0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider3, spider5);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      assertSame(spider5, spider1);
      assertSame(spider5, spider2);
      
      Spider spider6 = spider4.setExitWhenComplete(false);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertTrue(spider6.isSpawnUrl());
      assertFalse(spider6.isExitWhenComplete());
      assertEquals(0L, spider6.getPageCount());
      assertNotNull(spider6);
      assertSame(spider0, spider2);
      assertSame(spider0, spider6);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider6);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(queueScheduler0, duplicateRemovedScheduler0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider6);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider3, spider5);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider6);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider4, spider1);
      assertSame(spider4, spider6);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider6, spider5);
      assertSame(spider6, spider4);
      assertSame(spider6, spider1);
      assertSame(spider6, spider2);
      assertSame(spider6, spider3);
      assertSame(spider6, spider0);
      
      Spider spider7 = spider6.scheduler(duplicateRemovedScheduler0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertTrue(spider6.isSpawnUrl());
      assertFalse(spider6.isExitWhenComplete());
      assertEquals(0L, spider6.getPageCount());
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertTrue(spider7.isSpawnUrl());
      assertEquals(0L, spider7.getPageCount());
      assertFalse(spider7.isExitWhenComplete());
      assertNotNull(spider7);
      assertSame(spider0, spider2);
      assertSame(spider0, spider6);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider7);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider1, spider7);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider6);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(queueScheduler0, duplicateRemovedScheduler0);
      assertSame(duplicateRemovedScheduler0, queueScheduler0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider7);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider6);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider3, spider5);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider6);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider7);
      assertSame(spider4, spider1);
      assertSame(spider4, spider6);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider7);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider6, spider5);
      assertSame(spider6, spider4);
      assertSame(spider6, spider7);
      assertSame(spider6, spider1);
      assertSame(spider6, spider2);
      assertSame(spider6, spider3);
      assertSame(spider6, spider0);
      assertSame(spider7, spider1);
      assertSame(spider7, spider3);
      assertSame(spider7, spider6);
      assertSame(spider7, spider0);
      assertSame(spider7, spider4);
      assertSame(spider7, spider2);
      assertSame(spider7, spider5);
      
      spider6.setEmptySleepTime(2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertTrue(spider6.isSpawnUrl());
      assertFalse(spider6.isExitWhenComplete());
      assertEquals(0L, spider6.getPageCount());
      assertSame(spider0, spider2);
      assertSame(spider0, spider6);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider7);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider1, spider7);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider6);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(queueScheduler0, duplicateRemovedScheduler0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider7);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider6);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider3, spider5);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider6);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider7);
      assertSame(spider4, spider1);
      assertSame(spider4, spider6);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider7);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider6, spider5);
      assertSame(spider6, spider4);
      assertSame(spider6, spider7);
      assertSame(spider6, spider1);
      assertSame(spider6, spider2);
      assertSame(spider6, spider3);
      assertSame(spider6, spider0);
      
      long long0 = spider2.getPageCount();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, long0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider6);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider7);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider1, spider7);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider6);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(queueScheduler0, duplicateRemovedScheduler0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider7);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider6);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      
      boolean boolean0 = spider6.isSpawnUrl();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertTrue(spider6.isSpawnUrl());
      assertFalse(spider6.isExitWhenComplete());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(boolean0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider6);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider7);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider1, spider7);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider6);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(queueScheduler0, duplicateRemovedScheduler0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider7);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider6);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider3, spider5);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider6);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider7);
      assertSame(spider4, spider1);
      assertSame(spider4, spider6);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider7);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider6, spider5);
      assertSame(spider6, spider4);
      assertSame(spider6, spider7);
      assertSame(spider6, spider1);
      assertSame(spider6, spider2);
      assertSame(spider6, spider3);
      assertSame(spider6, spider0);
      
      Site site0 = spider7.getSite();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertTrue(spider6.isSpawnUrl());
      assertFalse(spider6.isExitWhenComplete());
      assertEquals(0L, spider6.getPageCount());
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertTrue(spider7.isSpawnUrl());
      assertEquals(0L, spider7.getPageCount());
      assertFalse(spider7.isExitWhenComplete());
      assertEquals(5000, site0.getTimeOut());
      assertTrue(site0.isUseGzip());
      assertEquals(0, site0.getRetryTimes());
      assertEquals(0, site0.getCycleRetryTimes());
      assertFalse(site0.isDisableCookieManagement());
      assertNull(site0.getUserAgent());
      assertNull(site0.getCharset());
      assertEquals(5000, site0.getSleepTime());
      assertEquals(1000, site0.getRetrySleepTime());
      assertNull(site0.getDomain());
      assertNotNull(site0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider6);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider7);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider1, spider7);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider6);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(queueScheduler0, duplicateRemovedScheduler0);
      assertSame(duplicateRemovedScheduler0, queueScheduler0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider7);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider6);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider3, spider5);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider6);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider7);
      assertSame(spider4, spider1);
      assertSame(spider4, spider6);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider7);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider6, spider5);
      assertSame(spider6, spider4);
      assertSame(spider6, spider7);
      assertSame(spider6, spider1);
      assertSame(spider6, spider2);
      assertSame(spider6, spider3);
      assertSame(spider6, spider0);
      assertSame(spider7, spider1);
      assertSame(spider7, spider3);
      assertSame(spider7, spider6);
      assertSame(spider7, spider0);
      assertSame(spider7, spider4);
      assertSame(spider7, spider2);
      assertSame(spider7, spider5);
      
      Json json0 = new Json("");
      assertNotNull(json0);
      
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "+b!:@";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("+b!:@");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertNotNull(spider0);
      
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Spider spider1 = spider0.startRequest(linkedList0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      // Undeclared exception!
      try { 
        simplePageProcessor0.process((Page) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.processor.SimplePageProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",qh:TzF)uX");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Spider spider1 = spider0.setPipelines(linkedList0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setSpawnUrl(true);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertNotNull(spider2);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      assertNotNull(multiPagePipeline0);
      
      Spider spider3 = spider2.addPipeline(multiPagePipeline0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(1, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertNotNull(spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      
      boolean boolean0 = linkedList0.add((Pipeline) multiPagePipeline0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean0);
      
      Spider spider4 = spider3.clearPipeline();
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(2, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertNotNull(spider4);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider0);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(",qh:TzF)uX"));
      
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.selector.RegexSelector");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = true;
      Spider spider1 = spider0.setExitWhenComplete(true);
      Spider spider2 = spider1.thread(2);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("us.codecraft.webmagic.selector.RegexSelector");
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      spider0.thread((ExecutorService) forkJoinPool0, 2);
      Spider spider3 = spider2.setScheduler(fileCacheQueueScheduler0);
      Spider spider4 = spider3.scheduler(fileCacheQueueScheduler0);
      spider4.setSpawnUrl(true);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3);
      spider4.setExecutorService(scheduledThreadPoolExecutor0);
      String string0 = "";
      Request request0 = new Request("");
      scheduledThreadPoolExecutor0.toString();
      Request request1 = request0.setPriority(3);
      spider0.setExecutorService(scheduledThreadPoolExecutor0);
      // Undeclared exception!
      try { 
        spider3.onError(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider.create(simplePageProcessor0);
      String string0 = "";
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "$d0oDg8!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$d0oDg8!");
      // Undeclared exception!
      try { 
        simplePageProcessor0.process((Page) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.processor.SimplePageProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("._dx,dZV?");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("._dx,dZV?", "cpb!Syr+pqD zAkL(");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = spider0.getAll((Collection<String>) linkedHashSet0);
      spider1.startUrls(list0);
      Spider.create(simplePageProcessor0);
      int int0 = (-1574);
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool((-1574));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'iq_1#+&");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider2 = spider1.pipeline(consolePipeline0);
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      Spider spider3 = spider2.setSpiderListeners(linkedList1);
      Spider spider4 = spider3.setUUID("'iq_1#+&");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{2B<";
      stringArray0[1] = "'iq_1#+&";
      stringArray0[2] = "'iq_1#+&";
      stringArray0[3] = "'iq_1#+&";
      stringArray0[4] = "'iq_1#+&";
      stringArray0[5] = "qOw7`";
      stringArray0[6] = "'iq_1#+&";
      stringArray0[7] = "'iq_1#+&";
      stringArray0[8] = "'iq_1#+&";
      // Undeclared exception!
      try { 
        spider4.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.selector.Selectors");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      Spider spider2 = spider1.setExitWhenComplete(true);
      Request[] requestArray0 = new Request[1];
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider2);
      requestArray0[0] = null;
      // Undeclared exception!
      try { 
        spider2.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("N$\"G\"wm!*hs");
      Spider spider0 = new Spider(simplePageProcessor0);
      Json json0 = new Json((List<String>) null);
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      // Undeclared exception!
      try { 
        spider1.thread((-2087));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "Spider is already running!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider is already running!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(3056);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Spider is already running!";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }
}
