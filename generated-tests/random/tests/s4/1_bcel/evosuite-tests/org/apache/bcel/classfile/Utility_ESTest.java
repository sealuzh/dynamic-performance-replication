/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 12:50:06 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, false);
      Utility.accessToString((-124), false);
      Utility.accessToString((-124), false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)39, (int) (byte) (-53));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Kel*hSpN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Kel*hSpN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "#!oZ[rFKw";
      try { 
        Utility.typeOfSignature("#!oZ[rFKw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #!oZ[rFKw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      String string0 = ")=J!SEZe^8hL";
      try { 
        Utility.typeOfSignature(")=J!SEZe^8hL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )=J!SEZe^8hL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.replace("org.apache.bcel.classfile.ConstantInteger", " ", " ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-14);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, 1, 1, true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Utility$1";
      boolean boolean0 = true;
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)49;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "XxB";
      try { 
        Utility.typeOfSignature("XxB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XxB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-69);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 287);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2b
         // 1:    nop
         // 2:    <illegal opcode>
         // 3:    ret\t\t%33
         // 5:    return
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.searchOpcode(";");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "impdep1");
      String string0 = "LME)T:lOK\"W1+nO%4W@;V";
      Utility.getSignature("LME)T:lOK\"W1+nO%4W@;V");
      int int0 = (-1941);
      Utility.clearBit((-1941), (-1941));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.methodSignatureReturnType("LLME)T:lOK\"W1+nO%4W@;V;", false);
      Utility.fillup("LME)T:lOK\"W1+nO%4W@;V", (-3989), false, 'Q');
      MockPrintStream mockPrintStream0 = new MockPrintStream("double");
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "LME)T:lOK\"W1+nO%4W@;V", (int) (short) (-1), 1787);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "b~NbP%0#b}HOS|";
      Utility.searchOpcode("b~NbP%0#b}HOS|");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte)48;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[6] = (byte) (-113);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.isJavaIdentifierPart('l');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1900, (int) (byte) (-122), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.compactClassName("V=>X\"Y.9", "monitorexit", true);
      Utility.format(74, 75, true, 'X');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)16;
      byteArray0[8] = (byte)49;
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-93), (byte)16);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(184, (byte)49);
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1438, 58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)63;
      Utility.equals(byteArray0, byteArray0);
      Utility.fillup("0/[{<,nnX>I", (byte)63, true, 'h');
      String string0 = "G%k^G";
      try { 
        Utility.typeOfSignature("G%k^G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G%k^G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)24;
      byte byte0 = (byte)106;
      byteArray0[1] = (byte)106;
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString(2260, true);
      Utility.accessToString((-2539));
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, (-2539), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)121;
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(3, (-924));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantMethodref constantMethodref2 = new ConstantMethodref((byte)81, (-924));
      constantArray0[1] = (Constant) constantMethodref2;
      ConstantDouble constantDouble0 = new ConstantDouble(2279.802229);
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 41, 248, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = Utility.compactClassName("YQ", "YQ", false);
      assertEquals("YQ", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fadd", string1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-42);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(579, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("public private volatile interface");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "public private volatile interface";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "public private volatile interface";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      String string0 = "Ml3'nv#/s";
      Utility.convertString("Ml3'nv#/s");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)38;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 36, (int) (byte) (-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-47);
      byteArray0[7] = (byte)75;
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-63));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantInteger constantInteger1 = new ConstantInteger(103);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4149, 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 58004. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("/d");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)66;
      byteArray0[0] = (byte)66;
      byte byte1 = (byte)37;
      byteArray0[1] = (byte)37;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)66, (-1460), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("=Fh5}", "=Fh5}", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte) (-49);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 14851. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ":";
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utility.convertString("getstatic");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte) (-33);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte)95);
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)99, (int) (byte) (-55));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Utility.getSignature(")\n");
      Utility.searchOpcode("");
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-53);
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)77;
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-53);
      byteArray1[1] = (byte)47;
      byteArray1[2] = (byte)47;
      byteArray1[3] = (byte)77;
      byteArray1[4] = (byte)94;
      byteArray1[5] = (byte)47;
      byteArray1[6] = (byte)25;
      byteArray1[7] = (byte)77;
      Utility.encode(byteArray1, false);
      try { 
        Utility.decode("$cb$_$_M$5e$_$ZM", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = Utility.replace("impdep1", "org.apache.commons.io.filefilter.CanWriteFileFilter", "impdep1");
      assertEquals("impdep1", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((byte)99);
      constantArray0[0] = (Constant) constantLong0;
      ConstantClass constantClass0 = new ConstantClass(1192);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[1] = (Constant) constantClass1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)12);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("dadd", string1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-64);
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-64);
      byteArray1[1] = (byte) (-64);
      byteArray1[2] = (byte) (-40);
      byteArray1[3] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)26;
      byte byte0 = (byte)77;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-2);
      byte byte1 = (byte)46;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(512);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byteSequence0.skipBytes(1349);
      byteSequence0.reset();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("istore_3", "", "anewarray", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: istore_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.compactClassName("\tv{U#SEGvS", "\tv{U#SEGvS", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)20;
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((-2642L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1778), (int) (byte)20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fconst_2
         // 1:    lload\t\t%146
         // 3:    <illegal opcode>
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "E%P&,0*mfeZJ0$&Cj");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)81, (int) (byte)81, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 169, (int) (byte) (-97), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)102;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, (-3191), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)72;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)17, 45);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)41, (-1468));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 51181. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)47;
      byte byte0 = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)48;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, (int) (byte)10, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byte byte0 = (byte)76;
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)90;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-97), (int) (byte) (-97));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)76;
      Utility.printArray(objectArray0, true);
      Utility.isSet(1118, (byte)90);
      try { 
        Utility.methodSignatureArgumentTypes("0:    astore_1\n1:    if_icmpeq\t\t#-18085\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    astore_1
         // 1:    if_icmpeq\t\t#-18085
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    nop
         // 9:    nop
         // 10:   nop
         // 11:   nop
         // 12:   nop
         // 13:   nop
         // 14:   nop
         // 15:   nop
         // 16:   nop
         // 17:   nop
         // 18:   nop
         // 19:   nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)116;
      byteArray0[7] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-353), 70, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    goto\t\t#18018
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-23);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 8, (-3200));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "?w}Vv?:q^n:";
      try { 
        Utility.typeOfSignature("?w}Vv?:q^n:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?w}Vv?:q^n:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.classOrInterface(40);
      Utility.replace("class", "class", ".zip");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) ".zip";
      objectArray0[3] = (Object) ".zip";
      objectArray0[4] = (Object) ".zip";
      objectArray0[5] = (Object) ".zip";
      objectArray0[6] = (Object) "class";
      objectArray0[7] = (Object) ".zip";
      Utility.printArray(objectArray0);
      Utility.compactClassName("RuntimeInvisibleAnnotations");
      Utility.classOrInterface(3135);
      Utility.classOrInterface(3135);
      Utility.printArray(objectArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-117);
      byteArray1[1] = (byte)68;
      byteArray1[2] = (byte)107;
      byteArray1[3] = (byte)7;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 40, 13, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("4V24z%&z]@MUpf8", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "void";
      stringArray0[1] = "4V24z%&z]@MUpf8";
      stringArray0[2] = "4V24z%&z]@MUpf8";
      stringArray0[3] = "\"";
      stringArray0[4] = "void";
      stringArray0[5] = "4V24z%&z]@MUpf8";
      stringArray0[6] = "4V24z%&z]@MUpf8";
      stringArray0[7] = "CLASSPATH component ";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.convertString("getstatic");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte) (-33);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte)95);
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)99, (int) (byte) (-55));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 29482. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-31);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte) (-5);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.classOrInterface(2481);
      try { 
        Utility.methodSignatureArgumentTypes("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = Utility.clearBit(7, 69);
      assertEquals(7, int0);
      
      String string0 = Utility.convertString("U\"DTVwz3");
      assertEquals("U\\\"DTVwz3", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte)114);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iadd", string1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "The suffix must not be null";
      Utility.compactClassName("The suffix must not be null", "The suffix must not be null", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-27);
      byte byte0 = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte) (-14);
      byteArray0[8] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)52, 122, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-84);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-4257), (-738));
      assertEquals("0:    imul\n1:    ddiv\n2:    if_icmpgt\t\t#15885\n5:    ireturn\n", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Constant$1";
      Utility.replace("org.apache.bcel.classfile.Constant$1", "org.apache.bcel.classfile.Constant$1", (String) null);
      try { 
        Utility.typeOfSignature("=k/]X1D-j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =k/]X1D-j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = Utility.decode("Z1i@a~", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 256, (-2005), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)104;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte)30;
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)60;
      byteArray1[2] = (byte)30;
      byteArray1[4] = (byte) (-58);
      byteArray1[5] = (byte) (-58);
      byteArray1[6] = (byte) (-102);
      byteArray1[7] = (byte) (-86);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-102), 2524);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    istore_1
         // 1:    istore_1
         // 2:    lload_0
         // 3:    nop
         // 4:    ifnull\t\t#-14690
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)107;
      byte byte0 = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-68);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = (-5007);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      constantPool0.copy();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPool0.accept(descendingVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-5007), 127);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aload_2
         // 1:    d2i
         // 2:    dmul
         // 3:    dcmpl
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 91, (int) (byte) (-97));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "&?g)8i[)<`ql8:hkz";
      try { 
        Utility.typeOfSignature("&?g)8i[)<`ql8:hkz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &?g)8i[)<`ql8:hkz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = Utility.isSet(2261, 2261);
      assertFalse(boolean0);
      
      String string0 = Utility.accessToString(12);
      assertEquals("protected static", string0);
      
      Utility.replace("[S.", "protected static", " reaching EOF");
      String string1 = Utility.format((byte)47, 71, false, 'c');
      assertEquals("ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc47", string1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "[S.";
      objectArray0[1] = (Object) (byte)83;
      objectArray0[2] = (Object) "[S.";
      objectArray0[3] = (Object) (byte) (-121);
      objectArray0[4] = (Object) (byte)118;
      String string2 = Utility.printArray(objectArray0, true);
      assertNotNull(string2);
      assertEquals("{[S., 83, [S., -121, 118}", string2);
      
      byte byte0 = Utility.typeOfSignature("[S.");
      assertEquals((byte)13, byte0);
      
      String string3 = Utility.replace("74Y3I*", "lor", "LC6wn#9L./");
      assertEquals("74Y3I*", string3);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.methodTypeToSignature("multianewarray", (String[]) null);
      Utility.typeOfMethodSignature("()Lmultianewarray;");
      int int0 = 18;
      Utility.accessToString(18);
      String string0 = "KWvp";
      String string1 = "LMMg-p*y";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("KWvp", "LMMg-p*y", "multianewarray", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KWvp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      try { 
        Utility.decode("$)(6", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "<";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<");
      String string1 = "@ MXFFMcMn";
      try { 
        Utility.typeOfSignature("@ MXFFMcMn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @ MXFFMcMn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "NS8-ThuN(pno#N";
      try { 
        Utility.typeOfSignature("NS8-ThuN(pno#N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NS8-ThuN(pno#N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.printArray((Object[]) null, false);
      Utility.typeOfSignature("Fe{LOx)5s17TT%wnD");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "invokespecial";
      stringArray0[1] = "Fe{LOx)5s17TT%wnD";
      stringArray0[2] = "invokespecial";
      stringArray0[3] = "invokespecial";
      stringArray0[4] = "Fe{LOx)5s17TT%wnD";
      stringArray0[5] = "Fe{LOx)5s17TT%wnD";
      stringArray0[6] = "`";
      stringArray0[7] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("invokespecial", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)76;
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)90;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (int) (byte) (-128));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)76;
      Utility.printArray(objectArray0, true);
      Utility.isSet(1108, (byte)90);
      try { 
        Utility.methodSignatureArgumentTypes("0:    astore_1\n1:    ior\n2:    ireturn\n3:    dup_x1\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    astore_1
         // 1:    ior
         // 2:    ireturn
         // 3:    dup_x1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte) (-41);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)84, (int) (byte)71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "73nsTIxU5?";
      Utility.convertString("73nsTIxU5?");
      boolean boolean0 = true;
      Utility.compactClassName("73nsTIxU5?", true);
      Utility.convertString("m ,_.+-W9|t");
      try { 
        Utility.typeOfSignature("73nsTIxU5?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 73nsTIxU5?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = ";{i@`";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";{i@`");
      try { 
        Utility.typeOfSignature(";{i@`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;{i@`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = Utility.replace("Invalid type: ", "Invalid type: ", "~:`R");
      assertEquals("~:`R", string0);
      
      String string1 = Utility.accessToString(164);
      assertEquals("protected synchronized transient", string1);
      
      String string2 = Utility.compactClassName("6o7QI-F");
      assertEquals("6o7QI-F", string2);
      
      boolean boolean0 = Utility.isSet(185, 162);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string3 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("if_icmpne\t\t#6946", string3);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-4);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1690, 1836);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Qr24kR;lc*)<$[F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qr24kR;lc*)<$[F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      Utility.printArray((Object[]) null, true, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-39);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.printArray((Object[]) null);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.classOrInterface(1024);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), 167);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fload_0
         // 1:    lstore_2
         // 2:    ixor
         // 3:    lreturn
         // 4:    impdep2
         // 5:    wide\t(wide)
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.classOrInterface(2101);
      Utility.convertString("\nAnnotation(s):\n");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)10;
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)33, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3 94O9r3`Ka%M ");
      Utility.searchOpcode("3 94O9r3`Ka%M ");
      String string0 = "8";
      Utility.fillup("8", (short) (-1), false, '.');
      try { 
        Utility.typeOfSignature("8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)118, 183);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      Constant constant0 = constantInterfaceMethodref1.copy();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.findClass("yXpwuGR%(Dx");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constant0.accept(descendingVisitor0);
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)123;
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantLong constantLong0 = new ConstantLong(989L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 247, 226, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "invokeinterface";
      Utility.convertString("invokeinterface");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "invokeinterface";
      objectArray0[1] = (Object) "invokeinterface";
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "invokeinterface";
      objectArray0[4] = (Object) "invokeinterface";
      objectArray0[5] = (Object) "invokeinterface";
      objectArray0[6] = (Object) "invokeinterface";
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = Utility.decode("jsr", false);
      ConstantPool constantPool0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 3;
      Utility.codeToString(byteArray0, (ConstantPool) null, 3, 3);
      try { 
        Utility.methodSignatureReturnType("Tcl]Ff+{/Zo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Tcl]Ff+{/Zo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "65WM94";
      try { 
        Utility.typeOfSignature("65WM94");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 65WM94
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte) (-103);
      byteArray0[8] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(5748, (byte) (-67));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantClass constantClass0 = new ConstantClass(2);
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utility.setBit(170, 170);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<^z64u3u";
      stringArray0[1] = "<^z64u3u";
      stringArray0[2] = "<^z64u3u";
      stringArray0[3] = "<^z64u3u";
      Utility.methodTypeToSignature("<^z64u3u", stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) stringArray0);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("(L<^z64u3u;L<^z64u3u;L<^z64u3u;L<^z64u3u;)L<^z64u3u;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<^z64u3u;L<^z64u3u;L<^z64u3u;L<^z64u3u;)L<^z64u3u;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)113;
      Constant[] constantArray0 = new Constant[1];
      String string0 = "=class ";
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("=class ");
      constantUtf8_0.clone();
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)113, 103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "Only element values of type enum can be built with this ctor - type specified: ";
      try { 
        Utility.typeOfSignature("Only element values of type enum can be built with this ctor - type specified: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Only element values of type enum can be built with this ctor - type specified: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)6;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)6, 3, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.methodSignatureReturnType("Invalid signature: `", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "athrow";
      stringArray0[1] = "Invalid signature: `";
      stringArray0[2] = "Invalid signature: `";
      stringArray0[3] = "int";
      stringArray0[4] = "putfield";
      Utility.methodTypeToSignature("int", stringArray0);
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(Lathrow;LInvalid;LInvalid;ILputfield;)I");
      Utility.methodTypeToSignature("(Lathrow;LInvalid;LInvalid;ILputfield;)I", stringArray1);
      Utility.searchOpcode("wiFVv2");
      try { 
        Utility.methodSignatureReturnType("if_icmplt", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_icmplt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arraylength");
      String string0 = "%m)Opa<R/#1LI{JoA";
      try { 
        Utility.typeOfSignature("%m)Opa<R/#1LI{JoA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %m)Opa<R/#1LI{JoA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      byte byte0 = (byte) (-2);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)70;
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "3zh]Uq$";
      try { 
        Utility.typeOfSignature("3zh]Uq$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3zh]Uq$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("putfield");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-127);
      mockPrintStream0.write(byteArray0, (int) (byte)48, 2389);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "putfield";
      objectArray0[1] = (Object) "putfield";
      objectArray0[2] = (Object) "putfield";
      objectArray0[3] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("putfield", objectArray0);
      Object[] objectArray1 = new Object[9];
      Object object0 = new Object();
      objectArray1[0] = object0;
      Object object1 = new Object();
      objectArray1[1] = object1;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      objectArray1[2] = (Object) mockPrintStream0;
      objectArray1[3] = (Object) "putfield";
      objectArray1[4] = (Object) printStream0;
      objectArray1[5] = (Object) mockPrintStream0;
      mockPrintStream0.println(objectArray1[4]);
      mockPrintStream0.append((CharSequence) "putfield");
      objectArray1[6] = (Object) printStream0;
      objectArray1[7] = (Object) printStream0;
      objectArray1[8] = (Object) mockPrintStream0;
      Utility.printArray(printStream0, objectArray1);
      String string0 = Utility.format(60, 60, false, 'T');
      assertEquals("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT60", string0);
      
      byte byte0 = Utility.typeOfSignature("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT60");
      assertEquals((byte)14, byte0);
      
      String string1 = Utility.fillup("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT60", (-2593), false, 'T');
      assertEquals("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT60", string1);
      
      String string2 = Utility.replace("putfield", "b2feB~I+gTHRMc", "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT60");
      assertEquals("putfield", string2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "Unreachable default case reached!";
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "Q9p5[ITMa77GOH$]Fp%";
      Utility.getSignature("Q9p5[ITMa77GOH$]Fp%");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Q9p5[ITMa77GOH$]Fp%", "Q9p5[ITMa77GOH$]Fp%", "impdep1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q9p5[ITMa77GOH$]Fp%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, 65535);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = Utility.isSet(55, (-2160));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-4);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ixor", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Utility.setBit(2515, 60);
      Utility.clearBit((-337), (-917));
      String string0 = "F&0Q;aI6O*";
      boolean boolean0 = false;
      Utility.signatureToString("F&0Q;aI6O*", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `float'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)18;
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utility.fillup("GH1;SsRaA+", (-2300), false, 'N');
      // Undeclared exception!
      try { 
        Utility.signatureToString("GH1;SsRaA+", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GH1;SsRaA+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)121;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-74), 79, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 57166. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("b^! c");
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFileOutputStream0;
      Locale locale1 = Locale.FRENCH;
      locale0.getDisplayVariant(locale1);
      objectArray0[1] = (Object) "_;:*'";
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "_;:*'", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      PrintStream printStream1 = mockPrintStream1.format("if_acmpne", objectArray0);
      Utility.printArray(printStream1, objectArray0);
      try { 
        Utility.typeOfSignature("YXI-9h]VN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YXI-9h]VN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = Utility.accessToString(859, false);
      assertEquals("public private static final volatile native interface", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)39;
      byteArray0[2] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("frem", string1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte) (-61);
      byteArray0[8] = (byte) (-104);
      String string0 = Utility.toHexString(byteArray0);
      String string1 = Utility.replace("0c 45 fc 1f 0e ef be c3 98", "0c 45 fc 1f 0e ef be c3 98", "0c 45 fc 1f 0e ef be c3 98");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.compactClassName("0c 45 fc 1f 0e ef be c3 98", false);
      assertEquals("0c 45 fc 1f 0e ef be c3 98", string2);
      
      byte byte0 = Utility.typeOfSignature("Z[$3F*K//Yop N!");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[1] = object1;
      Object object2 = new Object();
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, false);
      Utility.accessToString(1184);
      Utility.accessToString(1184);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-69);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)14, (int) (byte) (-69), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-65);
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)33, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.setBit((-1585), (-3170));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)122;
      byteArray0[7] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)42, (-885), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",!#dTsTUS");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byte byte0 = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)107;
      Constant[] constantArray0 = new Constant[1];
      String string0 = "wide";
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("wide");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantUtf8_0.clone();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (-805), (int) (byte)11);
      String string1 = "G\"+wTE[|3TDCPl2$4";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("G\"+wTE[|3TDCPl2$4", "wide", "0:    fconst_0\n1:    fconst_0\n2:    ifge\t\t#10861\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G\"+wTE[|3TDCPl2$4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.fillup("S", (-730), true, 'w');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byteSequence0.read();
      int int0 = Utility.clearBit((byte)43, (byte)88);
      assertEquals(43, int0);
      
      String string0 = Utility.getSignature("<illegal opcode>");
      assertEquals("L<illegal;", string0);
      
      byte byte0 = Utility.typeOfSignature("S");
      assertEquals((byte)9, byte0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-28), 156, true);
      assertEquals("0:    <illegal opcode>\n1:    aload_1\n2:    pop2\n3:    lconst_1\n", string1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.methodTypeToSignature("putstatic", stringArray0);
      Utility.printArray((Object[]) stringArray0);
      Utility.classOrInterface((-222));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">lvtrKJ;EunTGm");
      try { 
        Utility.typeOfSignature("()Lputstatic;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ()Lputstatic;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte)69;
      byteArray0[8] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("lstore\t\t%204", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = Utility.setBit(192, 192);
      assertEquals(193, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte) (-15);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-88), 6, false);
      assertEquals("0:    jsr\t\t#-1346\n3:    iconst_0\n4:    ifle\t\t#-17751\n7:    aload_2\n8:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)34;
      Constant[] constantArray0 = new Constant[1];
      int int0 = (-8);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.getConstant(0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/**k>|2XC-/";
      stringArray0[1] = "/**k>|2XC-/";
      stringArray0[2] = "/**k>|2XC-/";
      stringArray0[3] = "/**k>|2XC-/";
      stringArray0[4] = "/**k>|2XC-/";
      stringArray0[5] = "/**k>|2XC-/";
      Utility.methodTypeToSignature("/**k>|2XC-/", stringArray0);
      char char0 = '';
      Utility.isJavaIdentifierPart('');
      try { 
        Utility.typeOfSignature("/**k>|2XC-/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /**k>|2XC-/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char char0 = 'M';
      String string0 = Utility.format(4, 1508, true, 'M');
      boolean boolean0 = true;
      Utility.compactClassName(string0, true);
      try { 
        Utility.methodSignatureReturnType("RuntimeInvisibleAnnotations", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeInvisibleAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      try { 
        Utility.typeOfSignature("HXJv.<g~lf%)ed9C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HXJv.<g~lf%)ed9C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Utility.compactClassName(")s^0{}.+Nw3@\".#~&", false);
      assertEquals(")s^0{}.+Nw3@\".#~&", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)73, 59);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("fload_1", string1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "58\"v_U1";
      try { 
        Utility.typeOfSignature("58\"v_U1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 58\"v_U1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("", "bf+[[x.s}n1!xS(", false);
      Utility.compactClassName("org.apache.bcel.util.SyntheticRepository", "", true);
      Utility.accessToString(20);
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.bcel.classfile.Field", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Field
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)107;
      byte byte0 = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-19);
      byte byte1 = (byte)89;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), 250);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)36;
      byte byte0 = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)65;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)36, (-1355), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, 65535);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.typeOfSignature("VF2Dqc,");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.signatureToString("VF2Dqc,");
      Utility.clearBit(2847, 79);
      Utility.compactClassName("VF2Dqc,", true);
      try { 
        Utility.methodSignatureArgumentTypes("VF2Dqc,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: VF2Dqc,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte) (-27);
      Utility.toHexString(byteArray0);
      String string0 = "H8";
      try { 
        Utility.methodSignatureReturnType("H8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)91;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)69, 120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "E(fO*icLPO%F-PH,b9b";
      try { 
        Utility.typeOfSignature("E(fO*icLPO%F-PH,b9b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E(fO*icLPO%F-PH,b9b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.clearBit(25, 25);
      Utility.accessToString(2218);
      Utility.typeOfSignature("D7>E.q<x:2c&<");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)7;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)103, (int) (byte)7, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Utility.accessToString(158);
      Utility.classOrInterface(1550);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-91);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(452);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-90), (int) (byte) (-83));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lreturn
         // 1:    if_acmpne\t\t#17323
         // 4:    iconst_0
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2d", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte) (-17);
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fdiv", string1);
      
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = object3;
      objectArray1[1] = (Object) (byte)0;
      objectArray1[2] = (Object) (byte)110;
      objectArray1[3] = (Object) (byte)57;
      objectArray1[4] = (Object) byteSequence0;
      objectArray1[5] = (Object) "{java.lang.Object@2908332a, java.lang.Object@4899c7aa, java.lang.Object@448e5283, java.lang.Object@37e79b49, java.lang.Object@5f9e6ffc}";
      objectArray1[6] = (Object) (byte) (-62);
      objectArray1[7] = object2;
      String string2 = Utility.printArray(objectArray1, true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte) (-107);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 8, 8, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte byte1 = (byte)12;
      byteArray0[1] = (byte)12;
      byte byte2 = (byte)42;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byteSequence0.readUnsignedShort();
      try { 
        byteSequence0.readUnsignedShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isSet(316, 316);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-123);
      byteArray0[8] = (byte) (-29);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)118, (-207));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)75;
      byte byte0 = (byte)71;
      byteArray0[4] = (byte)71;
      byte byte1 = (byte)59;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte)93;
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)93;
      byteArray1[1] = (byte)93;
      byteArray1[2] = (byte)59;
      byteArray1[3] = (byte)71;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 87, 4014);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2l", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "2+M`dLTQp=U9";
      try { 
        Utility.typeOfSignature("2+M`dLTQp=U9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2+M`dLTQp=U9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(61, charArrayWriter0.size());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)78;
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-4600), 231);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-81), 2159, true);
      assertEquals("0:    impdep2\n1:    lload_2\n2:    astore_2\n3:    dreturn\n4:    astore_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)100, (int) (byte)82, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = Utility.compactClassName("putfield", "putfield", true);
      assertEquals("", string0);
      
      int int0 = Utility.clearBit(86, 86);
      assertEquals(86, int0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{, }", string1);
      assertNotNull(string1);
      
      byte byte0 = Utility.typeOfSignature("JIr#68%a=ME`r@");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format(84, 84, true, '*');
      Utility.typeOfSignature("Invalid signature: `");
      Utility.convertString("84**********************************************************************************");
      String string0 = "`Z#0,mcMlS^";
      Utility.convertString("`Z#0,mcMlS^");
      Utility.compactClassName("|jLPzmkZ", "Invalid signature: `", true);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("D4PQ{.En", true);
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      MockFile mockFile0 = new MockFile("dup_x1");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      mockFile0.getAbsolutePath();
      byteSequence0.read(byteArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      constantPool0.dump(dataOutputStream0);
      Utility.replace("getstatic", "dup_x1", "dup_x1");
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-39), (int) (byte)102);
      Utility.toHexString(byteArray0);
      String string1 = Utility.format(55, 1509, true, 'D');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "array";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "array");
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)95;
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)68;
      byte byte1 = (byte) (-15);
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte) (-120);
      Utility.encode(byteArray0, false);
      String string1 = "QjSAAM";
      boolean boolean0 = false;
      int int0 = 90;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("QjSAAM", "QjSAAM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"QjSAAM\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)49;
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-61);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("\b Z@2p17kuA:IM9");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantUtf8_0.clone();
      ConstantUtf8.getCachedInstance("\b Z@2p17kuA:IM9");
      ConstantPool constantPool1 = constantPool0.copy();
      MockPrintStream mockPrintStream0 = new MockPrintStream("AbBs'DI`1Py");
      PrintStream printStream0 = mockPrintStream0.append('3');
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      constantPool1.dump(dataOutputStream0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1143, 1143, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)32;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.encode(byteArray0, false);
      Utility.isSet((byte) (-118), (byte) (-110));
      Utility.replace("$3e$bf$83$8a$92$m", "O", "void");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      Constant constant0 = constantClass0.copy();
      constantArray0[1] = constant0;
      ConstantInteger constantInteger0 = new ConstantInteger(43);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("lxor", string0);
      
      String[] stringArray0 = new String[0];
      Utility.compactClassName("O", "void", true);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals("l2d", string1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4BTXG]2v_<=zQNu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4BTXG]2v_<=zQNu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)102;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte) (-42);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      int int0 = (-1903);
      boolean boolean0 = false;
      byteSequence0.readChar();
      try { 
        DataInputStream.readUTF((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)80, (int) (byte) (-61), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)49;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = 1414;
      Utility.accessToString(1414);
      try { 
        Utility.typeOfSignature("*pX=IAF[hT<#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: pX=IAF[hT<#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)89;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$7c$f6sY", string0);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)115, (byte)0);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-3125));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-3302), 1225);
      assertEquals("0:    nop\n1:    iushr\n2:    <illegal opcode>\n3:    drem\n4:    dup\n", string1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)0;
      Utility.encode(byteArray0, true);
      Utility.replace(">SWRv39+%zPXwI", "X6S", "+09DB^2m");
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.decode("h1{R{$", false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h1{R{$");
      String string0 = "[]";
      String string1 = "anewarray";
      Utility.compactClassName("[]", "anewarray", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "K&K)";
      try { 
        Utility.typeOfSignature("K&K)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K&K)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte)30;
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)60;
      byteArray1[2] = (byte)30;
      byteArray1[3] = (byte) (-102);
      byteArray1[4] = (byte) (-58);
      byteArray1[5] = (byte) (-58);
      byteArray1[6] = (byte) (-102);
      byteArray1[7] = (byte) (-86);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-102), 2524);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    istore_1
         // 1:    istore_1
         // 2:    lload_0
         // 3:    ifne\t\t#-14647
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = ">x5MR!d)![T5eUhe";
      try { 
        Utility.typeOfSignature(">x5MR!d)![T5eUhe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >x5MR!d)![T5eUhe
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Utility.compactClassName("long", true);
      Utility.replace("", "\t\t", (String) null);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = Utility.clearBit((-1675), (-2961));
      assertEquals((-34443), int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("idiv", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)30;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)85;
      byteArray1[1] = (byte)86;
      byteArray1[2] = (byte)3;
      byteArray1[3] = (byte)85;
      byteArray1[4] = (byte)86;
      byteArray1[5] = (byte)3;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 7;
      Utility.isSet(7, 532);
      Utility.clearBit(7, 7);
      String string0 = "Pf#nrP'.FX3}H ";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Pf#nrP'.FX3}H ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pf#nrP'.FX3}H '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('@');
      String string0 = "<Z?]&v/v";
      try { 
        Utility.typeOfSignature("<Z?]&v/v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <Z?]&v/v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      try { 
        Utility.typeOfSignature("0kl(fO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0kl(fO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = ".4cC_";
      try { 
        Utility.typeOfSignature(".4cC_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .4cC_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.compactClassName("PMGClass(", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("!/3q,B~c/", "\t(wide)", "g+<~\"BJcR", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: !/3q,B~c/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = Utility.accessToString(8);
      assertEquals("static", string0);
      
      String string1 = Utility.accessToString(7);
      assertEquals("public private protected", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dload_3", string2);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Utility.replace("\r", "\r", "\r");
      Utility.convertString("\r");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byte byte0 = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte) (-6);
      byte byte1 = (byte) (-85);
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      Constant constant0 = constantString0.copy();
      constantArray0[0] = constant0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-6));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantClass constantClass0 = new ConstantClass((byte)34);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[2] = (Constant) constantClass1;
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong((ConstantLong) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = Utility.compactClassName("YQ", "YQ", false);
      assertEquals("YQ", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2", string1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.compactClassName("-nIx\"[^!c92N{J1Ke(", "-nIx\"[^!c92N{J1Ke(", false);
      int int0 = 729;
      Utility.setBit(729, 5060);
      Utility.convertString("-nIx\"[^!c92N{J1Ke(");
      int int1 = 36;
      Utility.setBit((-4019), 36);
      String string0 = "QcKtZ6@{hqz";
      // Undeclared exception!
      try { 
        Utility.signatureToString("QcKtZ6@{hqz", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QcKtZ6@{hqz'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "-";
      try { 
        Utility.typeOfSignature("-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)3;
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)3;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[1] = (Object) (byte) (-59);
      objectArray0[2] = (Object) (byte)3;
      objectArray0[3] = (Object) (byte)3;
      objectArray0[4] = (Object) (byte) (-59);
      objectArray0[5] = (Object) (byte)2;
      objectArray0[6] = (Object) (byte) (-59);
      objectArray0[7] = (Object) (byte)2;
      Object object0 = new Object();
      objectArray0[8] = object0;
      Utility.printArray(objectArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 56066. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "uQ>c]]1MjYq");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-79);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)123;
      Utility.equals(byteArray0, byteArray0);
      Utility.decode("org.apache.bcel.classfile.Utility", false);
      Utility.typeOfSignature("Dont call getValueString() on a non STRING ElementValue");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\r", ", low = ", "org.apache.bcel.classfile.Utility", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.signatureToString("JCb0?,qLo");
      String string0 = "invokedynamic";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("invokedynamic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokedynamic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)90;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)101, 119);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(36, 4725);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 126, 2100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-82);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, 201, false);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      constantPool1.setConstantPool(constantArray0);
      constantPool0.toString();
      String string0 = "iload_1";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    nop\n1:    freturn\n", "iload_1", "iload_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    freturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "E@*^2~Z.<07ZV`";
      stringArray0[1] = "E@*^2~Z.<07ZV`";
      stringArray0[2] = "E@*^2~Z.<07ZV`";
      stringArray0[3] = "E@*^2~Z.<07ZV`";
      Utility.methodTypeToSignature("E@*^2~Z.<07ZV`", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(4711);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 31272. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)116;
      byteArray0[7] = (byte)34;
      Constant[] constantArray0 = new Constant[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-504), (byte)116);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-843), (-1710));
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)2, (-1710));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[3] = (Constant) constantMethodHandle1;
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle((-802), 70);
      constantArray0[4] = (Constant) constantMethodHandle2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 486, (-802));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("swap", string1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("T=K{=tO4qEbr^2]m9pM", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T=K{=tO4qEbr^2]m9pM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      try { 
        Utility.methodSignatureReturnType("Q<^w={,CaE{g", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q<^w={,CaE{g'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)34;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)2, (int) (byte)34, false);
      Utility.fillup("R=VoPk.-p^< %w", (byte) (-120), false, '*');
      Utility.isSet(3, (byte)2);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      Utility.equals(byteArray0, byteArray0);
      Utility.format(48, (byte)100, true, '`');
      Utility.printArray(objectArray0, true, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)100);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = 170;
      boolean boolean0 = false;
      Utility.accessToString(170, false);
      try { 
        Utility.typeOfSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "fneg";
      Utility.compactClassName("fneg", false);
      String string1 = "`;`WkKG)L'65_* #'\"0";
      try { 
        Utility.methodSignatureReturnType("`;`WkKG)L'65_* #'\"0", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L'65_* #'\"0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = Utility.accessToString(859, false);
      assertEquals("public private static final volatile native interface", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lstore_0", string1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('/');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)112;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 8, 97, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Pq:qUZWmaK\\";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Pq:qUZWmaK");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("Pq:qUZWmaK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Pq:qUZWmaK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "9~b'";
      Utility.convertString("9~b'");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.accessToString(2511, true);
      Utility.compactClassName("public private protected static volatile transient native strictfp");
      Utility.accessToString(2511);
      // Undeclared exception!
      try { 
        Utility.signatureToString(">BljL9]Pw7BGrY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>BljL9]Pw7BGrY'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)4;
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble((-1570.02366586));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("w[Tz");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(86);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-51), 72);
      assertEquals("0:    <illegal opcode>\n1:    pop\n2:    if_icmpge\t\t#-13050\n", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.convertString(";");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)83;
      byteArray0[0] = (byte)83;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-32), false);
      String[] stringArray0 = null;
      Utility.methodTypeToSignature(";", (String[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        DataInputStream.readUTF((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)59;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte)30;
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)60;
      byteArray1[2] = (byte)59;
      byteArray1[3] = (byte) (-102);
      byteArray1[4] = (byte) (-58);
      byteArray1[5] = (byte) (-58);
      byteArray1[6] = (byte) (-102);
      byteArray1[7] = (byte) (-86);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-102), 2524);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    istore_1
         // 1:    istore_1
         // 2:    istore_0
         // 3:    ifne\t\t#-14647
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("B6 0");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)40;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 83, (int) (byte) (-120));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Eq@;8z";
      stringArray0[1] = "Eq@;8z";
      stringArray0[2] = "Eq@;8z";
      stringArray0[3] = "Eq@;8z";
      stringArray0[4] = "}7";
      stringArray0[5] = "Eq@;8z";
      stringArray0[6] = "Eq@;8z";
      String string0 = Utility.methodTypeToSignature("Eq@;8z", stringArray0);
      assertEquals("(LEq@;8z;LEq@;8z;LEq@;8z;LEq@;8z;L}7;LEq@;8z;LEq@;8z;)LEq@;8z;", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_acmpeq\t\t#9588", string1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Warning: Padding byte != 0 in ";
      stringArray0[1] = "";
      stringArray0[2] = "Warning: Padding byte != 0 in ";
      stringArray0[3] = "[|7Yjb:|dMP,$q1=k:";
      stringArray0[4] = "Warning: Padding byte != 0 in ";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("Warning: Padding byte != 0 in ", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [|7Yjb:|dMP,$q1=k:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byte byte0 = (byte)38;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)43;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "u5SXjU+s76/p6p");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "imul");
      Utility.printArray((Object[]) constantArray0, true, true);
      Utility.printArray((Object[]) constantArray0);
      try { 
        Utility.methodSignatureArgumentTypes("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "Re0\"";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Re0\"");
      Utility.clearBit(105, 105);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)112;
      byteArray0[0] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("Re0\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Re0\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = Utility.format(1980, 1980, true, '\"');
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.signatureToString("VZo5Ugl]9K0{k2>,+B");
      Utility.accessToString(2456);
      String string0 = Utility.format(2456, 2456, true, 'r');
      String string1 = null;
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = string0;
      stringArray0[2] = "static final transient native strictfp";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\t\t<";
      stringArray0[1] = "\t\t<";
      String string0 = "class";
      stringArray0[2] = "class";
      stringArray0[3] = "char";
      Utility.methodTypeToSignature("\t\t<", stringArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\t\t<";
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureArgumentTypes("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L\";V");
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature("~z1(i3Bz'rxv|\"IutEI");
      assertEquals("L~z1(i3Bz'rxv|\"IutEI;", string1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.convertString("7 |+:1~6");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7 |+:1~6";
      stringArray0[1] = "7 |+:1~6";
      Utility.methodTypeToSignature("7 |+:1~6", stringArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte)89;
      Utility.toHexString(byteArray0);
      boolean boolean0 = true;
      Utility.format((byte)88, 11, true, '');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)9, 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.isJavaIdentifierPart('3');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)9;
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)3, 1062, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "+'z'Dga+s";
      Utility.methodTypeToSignature("+'z'Dga+s", stringArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.methodSignatureToString("(L+'z'Dga+s;)L+'z'Dga+s;", (String) null, "+'z'Dga+s");
      Utility.classOrInterface((-2236));
      // Undeclared exception!
      try { 
        Utility.signatureToString("+'z'Dga+s", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+'z'Dga+s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "athrow";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "athrow");
      String string1 = "ishr";
      Utility.compactClassName("ishr", false);
      Utility.compactClassName(" ");
      try { 
        Utility.methodSignatureReturnType(")O2Q2j^", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O2Q2j^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "\"@R<M-#YxBb2Y%)";
      Utility.compactClassName("\"@R<M-#YxBb2Y%)");
      try { 
        Utility.typeOfSignature("\"@R<M-#YxBb2Y%)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"@R<M-#YxBb2Y%)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = "N";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("N", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.signatureToString("ZPu%F~BJ}gBwHD6");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -85
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Utility.searchOpcode("$VALUES");
      Utility.methodSignatureReturnType("CONSTANT_NameAndType");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "$VALUES";
      Utility.printArray(objectArray0);
      Utility.typeOfSignature("CONSTANT_NameAndType");
      Utility.isJavaIdentifierPart('R');
      Utility.accessToString(46, false);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit((-3511), 3968);
      Utility.convertString("g4u;Y");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.compactClassName("<$\u0000W.");
      int int0 = 95;
      Utility.accessToString(95);
      boolean boolean0 = false;
      Utility.compactClassName("public private protected static final volatile", "ifnonnull", false);
      Utility.accessToString(95);
      Utility.accessToString(95);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("<$\u0000W.", "", "public private protected static final volatile");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <$\u0000W.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(3G&9o*njP1q9i", "(3G&9o*njP1q9i", "^R\"~]9adU_.*:{", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `3G&9o*njP1q9i'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Yi", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yi'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'");
      Utility.setBit(76, 76);
      Utility.compactClassName("");
      Utility.searchOpcode("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-111);
      byte byte0 = (byte)32;
      byteArray0[4] = (byte)32;
      Utility.encode(byteArray0, false);
      char char0 = 'c';
      Utility.fillup("qB", (byte) (-65), false, 'c');
      Utility.isJavaIdentifierPart('c');
      Utility.searchOpcode("{go\"5");
      Utility.compactClassName("", "$qO$bf$91$m", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -111
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)60;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte)102;
      byteArray1[3] = (byte)80;
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("putfield", "putfield", ";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.getSignature("&%1%");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "L&%1%;";
      Utility.printArray(objectArray0, false, false);
      Utility.typeOfSignature("L&%1%;");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("iq{#'9kZ8", "checkcast");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"checkcast\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-22);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fsub", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.replace("o:l(x", "o:l(x", "o:l(x");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("o:l(x", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: o:l(x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = Utility.setBit(2478, 2478);
      assertEquals(18862, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('h');
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString(2174, true);
      assertEquals("private protected static final volatile strictfp", string0);
      
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, true);
      String string1 = Utility.compactClassName("PD=M1eLY2[9-", true);
      assertEquals("PD=M1eLY2[9-", string1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int1 = Utility.clearBit((-1247), 89);
      assertEquals((-33555679), int1);
      
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{}", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.methodTypeToSignature("putstatic", stringArray0);
      Utility.printArray((Object[]) stringArray0);
      Utility.classOrInterface((-222));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">lvtrKJ;EunTGm");
      try { 
        Utility.typeOfSignature("MY\"?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MY\"?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.isJavaIdentifierPart('3');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte)83);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "invokevirtual";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokevirtual");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "(9";
      int int0 = (-1);
      Utility.fillup("(9", (-1), true, 'M');
      String string2 = "WZm4]P!KK@n3H-tU=";
      // Undeclared exception!
      try { 
        Utility.signatureToString("WZm4]P!KK@n3H-tU=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WZm4]P!KK@n3H-tU='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)77, (byte)77);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(196, 2);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("astore_2", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "putstatic");
      boolean boolean0 = Utility.isSet((-246), (-246));
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("putstatic", true);
      assertEquals("putstatic", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 2254;
      Utility.isSet(2254, 2254);
      String string0 = "cXAmBJf)UPm9bfTJ'";
      Utility.fillup("cXAmBJf)UPm9bfTJ'", 2254, true, '\\');
      try { 
        Utility.methodSignatureReturnType("cXAmBJf)UPm9bfTJ'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UPm9bfTJ''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "byte";
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      try { 
        Utility.decode("byte", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "!aWP]9V)}`o[^R";
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("!aWP]9V)}`o[^R", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[^R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = Utility.signatureToString("CONSTANT_String");
      assertEquals("char", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "char";
      objectArray0[1] = (Object) "char";
      objectArray0[2] = (Object) "char";
      objectArray0[3] = (Object) "CONSTANT_String";
      objectArray0[4] = (Object) "CONSTANT_String";
      objectArray0[5] = (Object) "char";
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertEquals("{char, char, char, CONSTANT_String, CONSTANT_String, char}", string1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sL|DA~^[");
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.typeOfSignature("sL|DA~^[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: sL|DA~^[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = "SYSTEM";
      Utility.decode("SYSTEM", false);
      Utility.signatureToString("SYSTEM");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("SYSTEM", "SYSTEM", "short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: SYSTEM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = "[i2CR~x1hk4E=";
      try { 
        Utility.methodSignatureReturnType("[i2CR~x1hk4E=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `i2CR~x1hk4E='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("M0_NTqTU", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M0_NTqTU'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~&O'aoD");
      String string0 = "aY}U;\"ie/%QdcvO";
      Utility.replace("~&O'aoD", "aY}U;\"ie/%QdcvO", "~&O'aoD");
      Utility.classOrInterface((-1701));
      MockPrintStream mockPrintStream0 = new MockPrintStream("i5J}QVa+>RrGUNv\"f$?");
      mockPrintStream0.append('M');
      mockPrintStream0.write(84);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "aY}U;\"ie/%QdcvO";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "~&O'aoD";
      objectArray0[3] = (Object) "i5J}QVa+>RrGUNv\"f$?";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      Utility.accessToString((-1701));
      String string1 = "\\9j=R2%p~,";
      boolean boolean0 = true;
      int int0 = 512;
      int int1 = 1024;
      MockFile mockFile0 = new MockFile((File) null, "public private static final volatile native strictfp synthetic annotation enum");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      byteSequence0.readFully(byteArray0, (int) (byte)0, 2);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.util.ByteSequence$ByteArrayStream", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.util.ByteSequence$ByteArrayStream'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("monitorexit");
      String string0 = "getstatic";
      Utility.getSignature("getstatic");
      Utility.searchOpcode("dreturn");
      try { 
        Utility.methodSignatureArgumentTypes("Lgetstatic;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Lgetstatic;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.searchOpcode("\t<");
      String string0 = "java.lang.Integer";
      try { 
        Utility.typeOfMethodSignature("java.lang.Integer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Integer
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      boolean boolean0 = true;
      Utility.format((-572), 11, true, ',');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte) (-79);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.toHexString(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("M?\u0003gv7kRr`B8=`", "-572,,,,,,,", "}!%*<td\"$s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M?\u0003gv7kRr`B8=`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = "java.lang.dup2_x1";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.dup2_x1");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "java.lang.dup2_x1";
      objectArray0[2] = (Object) "java.lang.dup2_x1";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "java.lang.dup2_x1";
      objectArray0[6] = (Object) "java.lang.dup2_x1";
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) null;
      Utility.printArray(objectArray0, true);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("+$");
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("", false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "8m|1~2E-6jd`";
      Utility.methodTypeToSignature("java.lang.", stringArray0);
      Utility.convertString("");
      Utility.replace("sS%P?", "java.lang.MWCh8|1H9G'_qQ<.6", "E@A;YJ');");
      Utility.replace("sS%P?", "R4;6l3K", "java.lang.");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart(':');
      Utility.classOrInterface((-1332));
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      int int0 = Utility.clearBit(102, 102);
      assertEquals(38, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-8);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("6d 06 7a 1b 4f 3b f8", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      int int0 = (-617);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.\"");
      Utility.setBit((-617), (-617));
      Utility.methodSignatureReturnType("BQ[}$Vxo8W=(`m;`");
      Utility.compactClassName("java.lang.\"", false);
      byte[] byteArray0 = Utility.decode("java.lang.\"", false);
      MockFile mockFile0 = new MockFile("byte");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "java.lang.\"");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "java.lang.\"";
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "java.lang.\"";
      Utility.printArray(printStream0, objectArray0);
      Utility.equals(byteArray0, byteArray0);
      String string0 = "double";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("double", "4%90(bekKo@c*WS", "3-X(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Utility.compactClassName("\"");
      Utility.isJavaIdentifierPart('F');
      Utility.setBit(513, 1333);
      Utility.isJavaIdentifierPart('F');
      try { 
        Utility.methodSignatureReturnType("\"", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "64Kq@H9sK>]+47:8%K";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "64Kq@H9sK>]+47:8%K");
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.decode("char", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("char", "char", "1@E\"", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = Utility.replace("long", "E@A;YJ');", "E@A;YJ');");
      assertEquals("long", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "E@A;YJ');";
      String string1 = Utility.methodTypeToSignature("long", stringArray0);
      assertEquals("(LE@A;YJ');;)J", string1);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Utility.isSet(2425, 2425);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("dup2_x1", true);
      Utility.format((-2446), 2425, false, '\'');
      String string0 = "double";
      Utility.compactClassName("#@,.NbFnEEt", "double", true);
      Utility.compactClassName("dup2_x1");
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "E6?J0.M*Wq>xt";
      try { 
        Utility.methodSignatureReturnType("E6?J0.M*Wq>xt", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E6?J0.M*Wq>xt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("X`EqY`");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "X`EqY`";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("X`EqY`", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X`EqY`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "1E^@'&Pk!_EeBt t+";
      boolean boolean0 = false;
      Utility.compactClassName("1E^@'&Pk!_EeBt t+", "\"K", false);
      int int0 = 91;
      Utility.clearBit(91, 91);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("+$");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "+$";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) "+$";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Utility.compactClassName(")+Ep$4:h(!:", true);
      Utility.fillup("\t\t%", (-215), false, 'O');
      try { 
        Utility.methodSignatureReturnType("xjn__Dq#~[9#\"2$4EN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `xjn__Dq#~[9#\"2$4EN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      Utility.compactClassName("", "", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)60;
      Utility.toHexString(byteArray0);
      Utility.setBit((byte) (-106), (-1072));
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Utility.setBit(1526, 1526);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0);
      Utility.getSignature("{java.lang.Object@1d527a7e, java.lang.Object@a592706, java.lang.Object@3ec7886d, java.lang.Object@735f5bc, java.lang.Object@9bafeae, java.lang.Object@4a188988, java.lang.Object@489ef446, java.lang.Object@60ae60fc, java.lang.Object@3e3fadc9}");
      try { 
        Utility.typeOfMethodSignature("<BX;4etZ+9)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <BX;4etZ+9)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = "V";
      try { 
        Utility.methodSignatureArgumentTypes("V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("MWCh8|1H9G'_qQ<.6", true);
      int int0 = (-430);
      Utility.accessToString((-430), true);
      try { 
        Utility.methodSignatureReturnType("private final volatile abstract strictfp synthetic annotation enum", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `private final volatile abstract strictfp synthetic annotation enum'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte)73;
      byteArray0[8] = (byte) (-14);
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("");
      Utility.compactClassName("");
      Utility.compactClassName("", "", true);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      Utility.compactClassName("");
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString(251, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-112);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1465, 3114, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-33);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)65, (int) (byte)4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = Utility.getSignature("|XrN'# Ie X^zlO");
      assertEquals("L|XrN'#;", string0);
      
      Utility.signatureToString("L|XrN'#;");
      int int0 = Utility.setBit(2, (-190));
      assertEquals(6, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)68;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      boolean boolean0 = true;
      Utility.format(0, 0, true, 'q');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      byte byte0 = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)90, (byte)56);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[2] = (Constant) constantString0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType((byte) (-104), (-2564));
      constantArray0[3] = (Constant) constantNameAndType1;
      ConstantNameAndType constantNameAndType2 = null;
      try {
        constantNameAndType2 = new ConstantNameAndType(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Utility.compactClassName("#c_'8No");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)127;
      byteArray0[8] = (byte)76;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "X,e-'D?0)+su(");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1269, (int) (byte) (-113), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Utility.methodSignatureReturnType("InnerClasses(");
      try { 
        Utility.methodSignatureArgumentTypes("gPHyz>", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: gPHyz>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Utility.compactClassName("+9~/A>3KjdOr4", "+9~/A>3KjdOr4", false);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "+9~/A>3KjdOr4";
      objectArray0[2] = (Object) "+9~/A>3KjdOr4";
      objectArray0[3] = (Object) "+9~.A>3KjdOr4";
      Utility.printArray(objectArray0);
      String string0 = "iload_0";
      Utility.convertString("iload_0");
      try { 
        Utility.typeOfSignature("+9~.A>3KjdOr4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9~.A>3KjdOr4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("<illegal opcode>", "<illegal opcode>", "<illegal opcode>", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
