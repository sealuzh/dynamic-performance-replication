/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 17:01:57 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.lang.reflect.Member;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.BootstrapMethod;
import org.apache.bcel.classfile.BootstrapMethods;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ConstantValue;
import org.apache.bcel.classfile.Deprecated;
import org.apache.bcel.classfile.ExceptionTable;
import org.apache.bcel.classfile.InnerClass;
import org.apache.bcel.classfile.InnerClasses;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LineNumber;
import org.apache.bcel.classfile.LineNumberTable;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTypeTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Unknown;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.LDC;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.SWITCH;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.ExecutionVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("~>2HB0z\u0006K2", "~>2HB0z\u0006K2", "~>2HB0z\u0006K2");
      constantPoolGen0.setConstant(4, (Constant) null);
      assertEquals(5, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("", "", "");
      constantPoolGen0.getFinalConstantPool();
      int int0 = 1246;
      constantPoolGen0.lookupMethodref("org.apache.bcel.verifier.exc.StructuralCodeConstraintException", "", "");
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref("h\"Gg@0h]?lexy,4?D|5", (String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.CLASS;
      int int0 = constantPoolGen0.addClass(objectType0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
      
      int int1 = constantPoolGen0.addFieldref("", "", "");
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(6, int1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.constants = constantArray0;
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref("/)", "Wi", "2^UF[");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(2536.10589061);
      int int0 = constantPoolGen0.lookupNameAndType("KU9('R}JCJQ7^g2Hts", "KU9('R}JCJQ7^g2Hts");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-168);
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)nu)l\n8)nill\n9)null610)null\n11)null\n2)null13)null\n14)nul\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)nu)l\n8)nill\n9)null610)null\n11)null\n2)null13)null\n14)nul\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)nu)l\n8)nill\n9)null610)null\n11)null\n2)null13)null\n14)nul\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = 0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(0, 0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        constantInvokeDynamic1.getClass(constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2811, 2811);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref1, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2811
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "%";
      int int0 = (-5187);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-74), (-956));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -74
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "Sz";
      constantPoolGen0.lookupMethodref("Sz", "Sz", "Sz");
      String string1 = "";
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(118, 118);
      constantInvokeDynamic0.clone();
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-883), (-883));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantClass constantClass0 = new ConstantClass(174);
      constantArray0[0] = (Constant) constantClass0;
      ConstantLong constantLong0 = new ConstantLong((-539L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2458), 0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantLong constantLong2 = new ConstantLong(constantLong1);
      constantArray0[3] = (Constant) constantLong2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Constant constant0 = constantPool0.getConstant(0);
      constantArray0[4] = constant0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2458
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantString constantString0 = new ConstantString(957);
      constantArray0[1] = (Constant) constantString0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(957, 957);
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 957
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      constantPoolGen0.lookupInterfaceMethodref("Z5S<MA5 T\"RNpf", "Z5S<MA5 T\"RNpf", "Operand of LDC or LDC_W must be one of CONSTANT_Integer, CONSTANT_Float or CONSTANT_String, but is '");
      constantPoolGen0.addMethodref("", "", "");
      constantPoolGen0.addNameAndType("nZQokl5<`,]h>(43b-a", "MW1eT`;TiW`R&8r{y_");
      constantPoolGen0.addMethodref("[>Ysi34mMdeJe$T", "[>Ysi34mMdeJe$T", "c8V");
      constantPoolGen0.toString();
      constantPoolGen0.addInteger(4);
      constantPoolGen0.getConstantPool();
      constantPoolGen0.lookupDouble(12);
      constantPoolGen0.lookupNameAndType("z<*2Ex@y!FQ$o", (String) null);
      constantPoolGen0.lookupString("7$^0:L.9:");
      constantPoolGen0.lookupClass("Z5S<MA5 T\"RNpf");
      int int0 = constantPoolGen0.lookupNameAndType("Z5S<MA5 T\"RNpf", "~z4aSCu1");
      assertEquals(14, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("\n");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen0);
      int int0 = constantPoolGen0.lookupInteger(708);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupString(":");
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(11);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addDouble(11);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-34L));
      int int0 = constantPoolGen0.lookupLong(3515L);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.lookupLong(3515L);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2064888092), (-2064888092));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addLong((-2064888092));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-883), (-883));
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addUtf8("Ooops, what primitive type is ");
      int int0 = constantPoolGen0.lookupLong(1L);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      String string0 = "vYiPGozJtf[Io|Pl<M";
      constantPoolGen0.addString("vYiPGozJtf[Io|Pl<M");
      String string1 = "Unexpected constant type: ";
      constantPoolGen0.lookupString("Unexpected constant type: ");
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref("", (String) null, "Unexpected constant type: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayType arrayType0 = new ArrayType((byte)8, (byte)8);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      int int1 = constantPoolGen0.addString("c78V");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("&");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantInteger constantInteger0 = new ConstantInteger(3);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantLong constantLong0 = new ConstantLong(3);
      constantArray0[2] = (Constant) constantLong0;
      ConstantLong constantLong1 = new ConstantLong((-3060L));
      constantArray0[3] = (Constant) constantLong1;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("&");
      constantArray0[4] = (Constant) constantUtf8_2;
      ConstantClass constantClass0 = new ConstantClass(0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[5] = (Constant) constantClass1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.setConstant(0, constantArray0[0]);
      assertEquals(6, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("/)");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" 7m");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantUtf8_0.toString();
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(" 7m");
      ConstantClass constantClass0 = new ConstantClass(0);
      ConstantClass constantClass1 = new ConstantClass(0);
      Constant[] constantArray1 = new Constant[2];
      constantArray1[0] = (Constant) constantUtf8_0;
      constantArray1[1] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray1);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "";
      constantPoolGen0.addFieldref("k! *X", "k! *X", "");
      constantPoolGen0.toString();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      BCELComparator bCELComparator0 = MethodGen.getComparator();
      constantPoolGen0.addInteger(0);
      Constant.setComparator(bCELComparator0);
      constantMethodType1.clone();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodType1, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodType[16](descriptor_index = 0)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2064888072), (-2064888072));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addFieldref("dq", "dq", "dq");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(3765.58);
      constantPoolGen0.addFieldref("uGhUlUP", "\n", "\n");
      constantPoolGen0.addInterfaceMethodref("", "", "class_index");
      constantPoolGen0.lookupInteger((-2317));
      constantPoolGen0.addInterfaceMethodref("d2f", "", "\n");
      constantPoolGen0.lookupMethodref("", "java.ext.dirs", ".]");
      constantPoolGen0.addInteger((-1));
      constantPoolGen0.addDouble((-1699.557));
      constantPoolGen0.getSize();
      constantPoolGen0.adjustSize();
      constantPoolGen0.lookupFieldref("m2H&py)E", "&", "java.ext.dirs");
      // Undeclared exception!
      try { 
        constantPoolGen0.getConstant((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("h-");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(0.0);
      constantPoolGen0.lookupString("\n");
      int int0 = constantPoolGen0.lookupDouble(1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addInterfaceMethodref("&", "&", "&");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantClass constantClass0 = new ConstantClass(4712);
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(4712);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantInteger constantInteger0 = new ConstantInteger(4712);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(")");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[4] = (Constant) constantMethodType1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1631), 850);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[5] = (Constant) constantInterfaceMethodref1;
      ConstantMethodType constantMethodType2 = new ConstantMethodType(4712);
      constantArray0[6] = (Constant) constantMethodType2;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1631
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addFloat(1792.018F);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupFloat(1.0F);
      assertEquals((-1), int0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Constant[] constantArray0 = new Constant[5];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1610612716), 3481);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType((-1610612716), (-1610612716));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.toString();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantNameAndType1, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1610612716
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[9];
      ConstantDouble constantDouble0 = new ConstantDouble(3);
      constantArray0[3] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constantDouble0, constantPoolGen1);
      Attribute[] attributeArray0 = new Attribute[4];
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 290;
      ExceptionTable exceptionTable0 = new ExceptionTable(2263, 1061, intArray0, constantPool0);
      ExceptionTable exceptionTable1 = new ExceptionTable(exceptionTable0);
      attributeArray0[0] = (Attribute) exceptionTable1;
      BootstrapMethod[] bootstrapMethodArray0 = new BootstrapMethod[7];
      BootstrapMethod bootstrapMethod0 = new BootstrapMethod(1139, intArray0);
      BootstrapMethod bootstrapMethod1 = new BootstrapMethod(bootstrapMethod0);
      bootstrapMethodArray0[0] = bootstrapMethod1;
      BootstrapMethod bootstrapMethod2 = new BootstrapMethod(1061, intArray0);
      bootstrapMethodArray0[1] = bootstrapMethod2;
      BootstrapMethod bootstrapMethod3 = new BootstrapMethod(119, intArray0);
      bootstrapMethodArray0[2] = bootstrapMethod3;
      BootstrapMethod bootstrapMethod4 = new BootstrapMethod(bootstrapMethod0);
      bootstrapMethodArray0[3] = bootstrapMethod4;
      BootstrapMethod bootstrapMethod5 = new BootstrapMethod((-1), intArray0);
      bootstrapMethodArray0[4] = bootstrapMethod5;
      BootstrapMethod bootstrapMethod6 = new BootstrapMethod(bootstrapMethod5);
      bootstrapMethodArray0[5] = bootstrapMethod6;
      BootstrapMethod bootstrapMethod7 = new BootstrapMethod(bootstrapMethod1);
      bootstrapMethodArray0[6] = bootstrapMethod7;
      BootstrapMethods bootstrapMethods0 = new BootstrapMethods(0, (-1238), bootstrapMethodArray0, constantPool0);
      attributeArray0[1] = (Attribute) bootstrapMethods0;
      Deprecated deprecated0 = new Deprecated(2263, 918, byteArray0, constantPool0);
      attributeArray0[2] = (Attribute) deprecated0;
      LineNumber[] lineNumberArray0 = new LineNumber[0];
      LineNumberTable lineNumberTable0 = new LineNumberTable(7, 1139, lineNumberArray0, constantPool0);
      attributeArray0[3] = (Attribute) lineNumberTable0;
      Method method0 = new Method(1, 1995, (-2536), attributeArray0, constantPool0);
      String string0 = "3";
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(method0, "3", constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -2536. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = Member.DECLARED;
      constantPoolGen0.addInterfaceMethodref("Unexpected constant type: ", "R", "");
      constantPoolGen1.addClass("R");
      ObjectType objectType0 = Type.OBJECT;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      constantPoolGen0.lookupDouble((-256.003));
      // Undeclared exception!
      try { 
        constantPoolGen1.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("&");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantLong constantLong0 = new ConstantLong(3);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.lookupInterfaceMethodref("R", "*' 0l#`", "*' 0l#`");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.addConstant(constantUtf8_1, constantPoolGen1);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPoolGen0.addInteger(0);
      constantPoolGen0.adjustSize();
      constantPoolGen0.addFloat(0);
      constantPoolGen0.addClass(";0yH~F");
      int int0 = constantPoolGen0.addFloat(2);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantFloat constantFloat0 = new ConstantFloat(1308.2F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantFloat1, constantPoolGen1);
      int int0 = constantPoolGen0.lookupFloat(1308.2F);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("&");
      ConstantLong constantLong0 = new ConstantLong(4660499013064363868L);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.lookupInterfaceMethodref("R", "8:OD&Mw z5V1", (String) null);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen2.addConstant(constantLong0, constantPoolGen1);
      assertEquals(8, constantPoolGen2.getSize());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger((-3961));
      ObjectType objectType0 = Type.CLASS;
      int int0 = constantPoolGen0.lookupInteger((-1590));
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantClass constantClass0 = new ConstantClass(4712);
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(4712);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantInteger constantInteger0 = new ConstantInteger(4712);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(")");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addUtf8(")");
      constantPoolGen0.addInterfaceMethodref("1s]-*pQ%uQuv(W%f", "Unknown constant type ", ")");
      int int0 = constantPoolGen0.addInteger(3);
      assertEquals(13, constantPoolGen0.getSize());
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(957, 957);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodref1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 957
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool2);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1260), (-1260));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1260
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(":q8PO\"E?-/#vby?L");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = 3724;
      ConstantInteger constantInteger0 = new ConstantInteger(3724);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantInteger1, constantPoolGen1);
      int int1 = (-1064);
      int int2 = (-2082408384);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1064), (-2082408384));
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      int int3 = 96;
      Attribute[] attributeArray0 = new Attribute[5];
      LocalVariable[] localVariableArray0 = new LocalVariable[3];
      LocalVariableTypeTable localVariableTypeTable0 = mock(LocalVariableTypeTable.class, new ViolatedAssumptionAnswer());
      doReturn((ConstantPool) null).when(localVariableTypeTable0).getConstantPool();
      doReturn(0).when(localVariableTypeTable0).getLength();
      doReturn(0).when(localVariableTypeTable0).getNameIndex();
      doReturn((LocalVariable[]) null).when(localVariableTypeTable0).getLocalVariableTypeTable();
      LocalVariableTypeTable localVariableTypeTable1 = new LocalVariableTypeTable(localVariableTypeTable0);
      // Undeclared exception!
      try { 
        localVariableTypeTable1.getLocalVariable(3724);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTypeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantString constantString0 = new ConstantString(957);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupInterfaceMethodref("aobd", "L*{a(Y wA%D`}9", "");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 957
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte byte0 = (byte)4;
      ArrayType arrayType0 = new ArrayType((byte)4, (byte)4);
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("nZq 6Xa3w_-uwJ");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantLong constantLong0 = new ConstantLong(3);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(" not found: ");
      ConstantClass constantClass0 = new ConstantClass(3);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantClass1.copy();
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantUtf8_1;
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3);
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addString(" not found: ");
      int int0 = constantPoolGen1.lookupClass("nZq 6Xa3w_-uwJ");
      assertEquals(6, constantPoolGen1.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantClass constantClass0 = new ConstantClass(4706);
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(4706);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupInterfaceMethodref("RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "E%N/j#=");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPoolGen0.constants = constantArray0;
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4706
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("1V*m|'#");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantUtf8.getInstance("1V*m|'#");
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantFloat constantFloat0 = new ConstantFloat(400.61F);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(256, 256);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[2] = (Constant) constantMethodHandle1;
      constantUtf8_1.toString();
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.getConstant((-3028));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3028
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(1382);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2064888121), (-2064888121));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      ConstantFloat constantFloat0 = new ConstantFloat((-2064888121));
      int int0 = constantPoolGen2.addConstant(constantFloat0, constantPoolGen1);
      assertEquals(2, constantPoolGen2.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addClass("u'hCkUwDq_y~?a#");
      ARETURN aRETURN0 = new ARETURN();
      Type type0 = aRETURN0.getType(constantPoolGen0);
      InstructionList instructionList0 = new InstructionList(aRETURN0);
      MethodGen methodGen0 = new MethodGen(2, type0, type0.NO_ARGS, (String[]) null, "u'hCkUwDq_y~?a#", "u'hCkUwDq_y~?a#", instructionList0, constantPoolGen0);
      constantPoolGen0.lookupMethodref(methodGen0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref("u'hCkUwDq_y~?a#", (String) null, "u'hCkUwDq_y~?a#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("java.class.path");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_1);
      constantUtf8_2.toString();
      ConstantUtf8 constantUtf8_3 = new ConstantUtf8("d2f##\n");
      int int0 = 0;
      ConstantClass constantClass0 = new ConstantClass(0);
      ConstantClass constantClass1 = new ConstantClass(0);
      Constant constant0 = constantClass0.copy();
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantUtf8_2;
      constantArray0[1] = constant0;
      constantArray0[2] = (Constant) constantUtf8_2;
      constantArray0[3] = (Constant) constantUtf8_2;
      constantArray0[4] = constant0;
      constantArray0[5] = (Constant) constantClass0;
      constantArray0[6] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int1 = 18;
      Type type0 = null;
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = null;
      typeArray0[1] = null;
      BasicType basicType0 = Type.SHORT;
      typeArray0[2] = (Type) basicType0;
      typeArray0[3] = null;
      LDC lDC0 = new LDC();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        lDC0.getType(constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown or invalid constant type at 0
         //
         verifyException("org.apache.bcel.generic.LDC", e);
      }
  }
}
