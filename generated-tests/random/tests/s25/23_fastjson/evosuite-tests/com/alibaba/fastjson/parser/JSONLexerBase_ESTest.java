/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 09:41:04 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 4;
      JSONScanner jSONScanner0 = new JSONScanner("LhjtRnYD\"._p", 4);
      jSONScanner0.nextIdent();
      jSONScanner0.bytesValue();
      jSONScanner0.np = 4;
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = '4';
      charArray0[2] = 'K';
      charArray0[3] = 'r';
      charArray0[4] = 'k';
      charArray0[5] = ';';
      charArray0[6] = 'F';
      charArray0[7] = '.';
      jSONScanner0.scanFieldDouble(charArray0);
      char char0 = 'e';
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n^jFYV*=_6I,", 1337);
      jSONReaderScanner0.scanFloat('A');
      jSONReaderScanner0.matchStat = 1337;
      jSONReaderScanner0.tokenName();
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      jSONScanner0.np = 1337;
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy((-293), charArray0, (-3817), 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = 'Y';
      charArray0[2] = '9';
      charArray0[3] = 'u';
      charArray0[4] = '|';
      charArray0[5] = 'J';
      charArray0[6] = '5';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 32, 32);
      jSONReaderScanner0.scanFieldInt(charArray0);
      char char0 = '9';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - , info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "-dS3 O}%[[";
      StringReader stringReader0 = new StringReader("-dS3 O}%[[");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.ready();
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.TAIWAN;
      timeZone0.getDisplayName(locale0);
      jSONReaderScanner0.setTimeZone(timeZone0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "new";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONReaderScanner0.isEnabled(feature0);
      int int0 = (-1093);
      jSONReaderScanner0.nextToken((-1093));
      jSONReaderScanner0.scanDouble('W');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-341), (-32));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -32
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ", 85);
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[4];
      jSONScanner0.scanFloat('5');
      charArray0[0] = 'r';
      charArray0[1] = 'i';
      charArray0[2] = 'p';
      jSONScanner0.longValue();
      charArray0[3] = 'q';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.next();
      jSONScanner0.resetStringPosition();
      jSONScanner0.nextIdent();
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      jSONScanner0.close();
      assertEquals(85, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("LqZCr$sv2|(zyz%KjR", 26);
      jSONReaderScanner0.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "-A\"F8-b2bbV~Jz3X";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-A\"F8-b2bbV~Jz3X", 4096);
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      jSONReaderScanner0.scanFloat('\'');
      charArray0[1] = 'X';
      char char0 = '(';
      SymbolTable symbolTable0 = new SymbolTable(91);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, (-1211), 1446);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1211
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("<Da_4!-oK2BNcAV_!");
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray1);
      JSONScanner.checkDate('c', 'c', 'b', 'g', 'g', 'c', (-1), 11);
      jSONReaderScanner0.indexOf('z', 11);
      JSONScanner jSONScanner0 = new JSONScanner("<Da_4!-oK2BNcAV_!");
      jSONScanner0.bp = 11;
      jSONScanner0.longValue();
      jSONScanner0.isEOF();
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NG+q(CLP\"l%v2", (-3822));
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[1] = '{';
      charArray0[2] = 'D';
      charArray0[3] = '>';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26, 26);
      jSONReaderScanner0.sub_chars(113, 26);
      jSONReaderScanner0.stringDefaultValue();
      jSONReaderScanner0.scanString('>');
      int int0 = 105;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 105);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("p#K=do2Fd", (-3311));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = '{';
      charArray0[2] = 'u';
      charArray0[3] = 'J';
      charArray0[4] = '^';
      charArray0[5] = 'I';
      int int0 = 1891;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1891, 1891);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("96");
      jSONReaderScanner0.features = 1284;
      Charset charset0 = Charset.defaultCharset();
      char char0 = '7';
      jSONReaderScanner0.scanFloat('7');
      Set<String> set0 = charset0.aliases();
      char char1 = 'o';
      jSONReaderScanner0.scanStringArray(set0, 'o');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse true");
      char[] charArray0 = null;
      int int0 = 2433;
      jSONScanner0.nextToken(17);
      SymbolTable symbolTable0 = new SymbolTable(17);
      String string0 = "m";
      jSONScanner0.intValue();
      int int1 = 27;
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol((char[]) null, 0, 868);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = '8';
      charArray0[2] = 'i';
      charArray0[3] = 'U';
      charArray0[4] = 'P';
      int int0 = 25;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 25, 16);
      char[] charArray1 = new char[1];
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'i');
      jSONReaderScanner0.scanLong('[');
      charArray1[0] = 'P';
      jSONReaderScanner0.charArrayCompare(charArray1);
      jSONReaderScanner0.bp = 4886;
      int int1 = 2964;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = " 5Fs#Q=W7\\{2&da";
      int int0 = (-1312);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" 5Fs#Q=W7{2&da", (-1312));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-1312));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 5, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-{@&aQhA{]Mp");
      jSONReaderScanner0.isRef();
      Locale locale0 = jSONReaderScanner0.getLocale();
      char char0 = '8';
      Feature feature0 = Feature.InternFieldNames;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.scanDecimal('8');
      jSONReaderScanner0.setLocale(locale0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("-{@&aQhA{]Mp");
      jSONReaderScanner0.scanStringArray(arrayList0, '8');
      jSONReaderScanner0.nextToken(91);
      jSONReaderScanner0.nextToken(1398);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("OG;<wQ$x5");
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = 's';
      charArray0[2] = '!';
      charArray0[3] = '8';
      charArray0[4] = 'w';
      JSONLexerBase.readString(charArray0, 0);
      charArray0[5] = 'Y';
      charArray0[6] = '/';
      charArray0[7] = '\"';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanDouble('%');
      jSONScanner0.scanInt('o');
      jSONScanner0.matchField2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = 'l';
      charArray0[0] = 'l';
      charArray0[1] = '#';
      charArray0[2] = 'c';
      int int0 = 78;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 78, 78);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 50;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 50, 50);
      jSONReaderScanner0.getTimeZone();
      JSONScanner jSONScanner0 = new JSONScanner(", ", 0);
      jSONScanner0.close();
      jSONScanner0.stringDefaultValue = "unclosed string : ";
      jSONScanner0.nextToken();
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanNumber();
      int int1 = 50;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 437;
      JSONScanner jSONScanner0 = new JSONScanner("+B7v#eW1.9+JT", 437);
      char[] charArray0 = new char[0];
      boolean boolean0 = false;
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.scanFieldFloat(charArray0);
      int int1 = 1004;
      jSONScanner0.nextToken(1004);
      char[] charArray1 = null;
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((char[]) null, 437, 605);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4?MdT T8#R{[/En:.P", 4237);
      char[] charArray0 = new char[6];
      jSONScanner0.scanFieldUUID(charArray0);
      charArray0[0] = 'K';
      jSONScanner0.scanISO8601DateIfMatch();
      charArray0[1] = 'q';
      jSONScanner0.nextToken();
      charArray0[2] = 'U';
      jSONScanner0.decimalValue(true);
      char char0 = 'x';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(396);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ?, info : pos 1, json : 4?MdT T8#R{[/En:.P
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "scan null error";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan null error");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      char char0 = 'b';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uD?QxZroP,;");
      char char0 = 'a';
      jSONScanner0.resetStringPosition();
      jSONScanner0.tokenName();
      jSONScanner0.nextToken((-432));
      jSONScanner0.scanString('a');
      jSONScanner0.scanNumber();
      System.setCurrentTimeMillis((-1));
      jSONScanner0.isBlankInput();
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = 'a';
      charArray0[4] = 'a';
      charArray0[5] = 'a';
      charArray0[6] = 'a';
      jSONScanner0.scanFieldSymbol(charArray0);
      int int0 = (-541);
      jSONScanner0.scanFieldBoolean(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "";
      int int0 = (-5366);
      JSONScanner jSONScanner0 = new JSONScanner("", (-5366));
      char[] charArray0 = null;
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-{@&aQhA{]Mp");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.getLocale();
      char char0 = '8';
      Feature feature0 = Feature.InternFieldNames;
      SymbolTable symbolTable0 = new SymbolTable(68);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 117;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xzizO", 117);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. z
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = '^';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 17);
      jSONReaderScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 425);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2l<l-Zq(kX#|#8~");
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, 115);
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONScanner1.newCollectionByType(class0);
      jSONScanner0.scanStringArray(collection0, '\"');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = '#';
      charArray0[2] = '`';
      charArray0[3] = '2';
      charArray0[4] = '\'';
      charArray0[5] = 'X';
      charArray0[6] = '`';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9999);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.setToken(9999);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 102, 102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 20;
      JSONScanner jSONScanner0 = new JSONScanner("true", 20);
      jSONScanner0.nextToken();
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = '!';
      charArray0[2] = 'k';
      charArray0[3] = 'n';
      charArray0[4] = '\'';
      int int0 = (-2066);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 108, (-2066));
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.getTimeZone();
      SymbolTable symbolTable0 = new SymbolTable(39);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", 92);
      jSONScanner0.scanIdent();
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = '~';
      charArray0[2] = '\'';
      charArray0[3] = '1';
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.integerValue();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = '>';
      charArray0[2] = 'L';
      charArray0[3] = '?';
      charArray0[4] = 'X';
      charArray0[5] = '|';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 60, 634);
      char[] charArray1 = new char[6];
      jSONReaderScanner0.intValue();
      charArray1[0] = '3';
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanLong('?');
      charArray1[1] = '>';
      jSONReaderScanner0.hasSpecial = true;
      jSONReaderScanner0.resetStringPosition();
      charArray1[2] = '?';
      charArray1[3] = 'L';
      charArray1[4] = 'L';
      charArray1[5] = '?';
      jSONReaderScanner0.scanFieldDecimal(charArray1);
      jSONReaderScanner0.getCurrent();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray1, 60, 88);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      char char0 = '(';
      jSONScanner0.scanDecimal('(');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \", info : pos 0, json : \":\"
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "tQl77,bonV>;Q";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tQl77,bonV>;Q");
      char char0 = 'N';
      jSONReaderScanner0.nextToken(18);
      jSONReaderScanner0.scanDate('N');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = '{';
      charArray0[2] = '9';
      charArray0[3] = 'B';
      charArray0[4] = 's';
      charArray0[5] = 'X';
      charArray0[6] = 'B';
      charArray0[7] = '1';
      charArray0[8] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1516);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.np = 1516;
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(1224, (-2486));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2486
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000");
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      char[] charArray1 = new char[1];
      charArray1[0] = '\'';
      jSONReaderScanner0.scanFieldBigInteger(charArray1);
      JSONLexerBase.isWhitespace('@');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDecimal('\'');
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      char char0 = 'D';
      charArray0[1] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 37);
      jSONReaderScanner0.np = 41;
      jSONReaderScanner0.nextTokenWithChar('d');
      int int0 = 78;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 78, 79);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = 'Y';
      charArray0[2] = 'M';
      charArray0[3] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '4';
      charArray0[6] = '?';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2239);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.subString(2239, 2239);
      jSONReaderScanner0.matchStat();
      jSONReaderScanner0.skipWhitespace();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = 'L';
      charArray0[2] = 'v';
      charArray0[3] = '\"';
      charArray0[4] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2098, 2098);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanDecimal('D');
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(2098);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'J');
      jSONReaderScanner0.scanFloat('L');
      jSONReaderScanner0.isEnabled(2098, 2098);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) "lemur";
      objectArray0[2] = (Object) '\"';
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) '\"';
      objectArray0[5] = (Object) 'D';
      objectArray0[6] = (Object) '\"';
      objectArray0[7] = (Object) 'F';
      jSONReaderScanner0.lexError("lemur", objectArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse new");
      jSONScanner0.scanNumber();
      int int0 = (-757790320);
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = '&';
      charArray0[2] = '=';
      charArray0[3] = 'I';
      charArray0[4] = 'p';
      charArray0[5] = 'i';
      charArray0[6] = '/';
      charArray0[7] = 'X';
      charArray0[8] = 'g';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-827));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4?MdT T8#R{[/En:.P", 4237);
      char[] charArray0 = new char[6];
      jSONScanner0.scanFieldUUID(charArray0);
      charArray0[0] = 'K';
      jSONScanner0.scanISO8601DateIfMatch();
      charArray0[1] = 'q';
      jSONScanner0.nextToken();
      charArray0[2] = 'U';
      jSONScanner0.decimalValue(false);
      char char0 = 'x';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(396);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ?, info : pos 1, json : 4?MdT T8#R{[/En:.P
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!.f");
      char char0 = '?';
      jSONScanner0.scanFloat('?');
      char char1 = 'O';
      int int0 = 6;
      jSONScanner0.matchStat = 6;
      jSONScanner0.scanDecimal('O');
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = '?';
      jSONScanner0.scanISO8601DateIfMatch(false);
      int int1 = 80;
      int int2 = 9;
      SymbolTable symbolTable0 = new SymbolTable(6);
      String string0 = "'xE7)b+{OPJ*";
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("ltjA2b", 80, (-1), (-1), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 4050;
      JSONScanner jSONScanner0 = new JSONScanner("]ln^}DnHa.3s~:", 4050);
      jSONScanner0.features = 4050;
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      int int1 = 2692;
      SymbolTable symbolTable0 = new SymbolTable(2692);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 2692, 1374);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2692
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.getTimeZone();
      JSONScanner jSONScanner0 = new JSONScanner("7G^aehwIH7RxLM~2,i<", 0);
      jSONReaderScanner0.matchField(charArray0);
      jSONScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.subString(1120, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("t[e+u8SxEA");
      jSONScanner0.isBlankInput();
      char[] charArray0 = new char[9];
      charArray0[0] = 'E';
      charArray0[1] = '5';
      charArray0[2] = 'F';
      charArray0[3] = 'F';
      charArray0[4] = 'r';
      charArray0[5] = '[';
      charArray0[6] = 'l';
      char char0 = '|';
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = '<';
      charArray0[2] = '|';
      charArray0[3] = 'q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 127, 108);
      JSONScanner jSONScanner0 = new JSONScanner("\"[Y^FO2{z+43", 108);
      int int0 = 125;
      jSONScanner0.charAt(125);
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(125);
      // Undeclared exception!
      jSONScanner0.scanEnum(class0, symbolTable0, '0');
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = 'L';
      charArray0[2] = '0';
      charArray0[3] = 'b';
      charArray0[4] = ';';
      charArray0[5] = '8';
      charArray0[6] = 'p';
      charArray0[7] = '!';
      charArray0[8] = '+';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 95, 26);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanString('E');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(95, (-172));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -172
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'k';
      charArray0[1] = 't';
      charArray0[2] = 'F';
      charArray0[3] = '3';
      charArray0[4] = 'c';
      char char0 = 'D';
      charArray0[5] = 'D';
      int int0 = 200;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 200);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-1));
      jSONScanner0.matchField2(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      char char1 = 'M';
      jSONScanner0.scanInt('M');
      jSONScanner0.sbuf = charArray0;
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('c', '3', '0');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[8];
      jSONScanner0.sp = 97;
      charArray0[0] = '`';
      charArray0[1] = 'q';
      charArray0[2] = '8';
      charArray0[3] = 'n';
      charArray0[4] = 'b';
      char char0 = 'X';
      charArray0[5] = 'X';
      char char1 = 'V';
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", 83);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.matchStat = 83;
      jSONReaderScanner0.pos = 83;
      jSONReaderScanner0.putChar('L');
      jSONReaderScanner0.matchStat();
      char char0 = 'l';
      String string0 = "NkUx`t8?=)V7Xz/F";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) string0;
      jSONReaderScanner0.lexError(string0, objectArray0);
      JSONLexerBase.isWhitespace(char0);
      String string1 = "-RXSz'YKH7riS\"F";
      JSONScanner jSONScanner0 = new JSONScanner(string1);
      jSONScanner0.scanISO8601DateIfMatch();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // undefined\u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      charArray0[1] = '2';
      charArray0[2] = 'd';
      charArray0[3] = 'B';
      charArray0[4] = '@';
      charArray0[5] = 'i';
      charArray0[6] = 'o';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 32);
      SymbolTable symbolTable0 = new SymbolTable(36);
      jSONReaderScanner0.addSymbol(59, 2062, 59, symbolTable0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      char char0 = '*';
      charArray0[1] = '*';
      char char1 = 'k';
      charArray0[2] = 'k';
      int int0 = 18;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18);
      Class<Object> class0 = Object.class;
      char char2 = '8';
      jSONReaderScanner0.ch = '8';
      jSONReaderScanner0.skipComment();
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", 1480);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      jSONReaderScanner0.calendar = (Calendar) gregorianCalendar0;
      Feature feature0 = Feature.IgnoreNotMatch;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.isEOF();
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = '?';
      charArray0[2] = 'v';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("`$~p[L\"7O|", 5);
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      char char0 = 'm';
      charArray0[1] = 'm';
      char char1 = 'u';
      charArray0[2] = 'u';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      charArray0[3] = 'S';
      jSONReaderScanner0.matchField(charArray0);
      char char2 = 'P';
      jSONReaderScanner0.scanUUID('P');
      int int0 = 126;
      SymbolTable symbolTable0 = new SymbolTable(5);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol(5, (-1), 126, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '9';
      charArray0[1] = '6';
      charArray0[2] = 'u';
      charArray0[3] = 'Y';
      charArray0[4] = 'M';
      charArray0[5] = '9';
      charArray0[6] = 'd';
      charArray0[7] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 91, 127);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[dqh~\"OU#?BeE^:-hS#", (-2304));
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) '+';
      objectArray0[2] = (Object) "[dqh~\"OU#?BeE^:-hS#";
      jSONScanner0.lexError("7~{KV(P", objectArray0);
      objectArray0[3] = (Object) jSONScanner0;
      objectArray0[4] = (Object) "[dqh~\"OU#?BeE^:-hS#";
      Object object1 = new Object();
      objectArray0[5] = object1;
      jSONScanner0.lexError("illegal state. ", objectArray0);
      charArray0[1] = 'p';
      Feature feature0 = Feature.DisableFieldSmartMatch;
      jSONScanner0.config(feature0, true);
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.nextToken(397);
      assertEquals('d', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 's';
      charArray0[2] = 'M';
      charArray0[3] = 'w';
      charArray0[4] = '0';
      charArray0[5] = 'a';
      charArray0[6] = 'C';
      charArray0[7] = '<';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 110);
      SymbolTable symbolTable0 = new SymbolTable(557);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      SymbolTable symbolTable1 = new SymbolTable(49);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable1, '-');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("treeset");
      int int0 = 117;
      jSONScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "\"D,s&iHqI,X'kemb,";
      int int0 = 835;
      JSONScanner jSONScanner0 = new JSONScanner("\"D,s&iHqI,X'kemb,", 835);
      char[] charArray0 = new char[0];
      char char0 = 'q';
      // Undeclared exception!
      try { 
        jSONScanner0.scanUUID('q');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = (-1249);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nA3gRlL", (-1249));
      char char0 = 'h';
      jSONReaderScanner0.scanString('h');
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = '|';
      charArray0[2] = '#';
      char char0 = 'd';
      charArray0[3] = 'd';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3484, 3484);
      int int0 = 48;
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.nextToken(48);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.hasSpecial = false;
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 48, 2418);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '+';
      charArray0[1] = 'P';
      charArray0[2] = 'H';
      charArray0[3] = 'p';
      charArray0[4] = '6';
      charArray0[5] = 'u';
      charArray0[6] = '(';
      charArray0[7] = 'u';
      charArray0[8] = 'p';
      int int0 = 2833;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2833);
      jSONReaderScanner0.timeZone = null;
      jSONReaderScanner0.putChar('V');
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "java.awt.Rectangle";
      int int0 = 1926;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.awt.Rectangle", 1926);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 66, 1926);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Q$E:lshJro32T7[Xcr", 34);
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      char[] charArray1 = new char[1];
      jSONReaderScanner0.matchField(charArray1);
      jSONReaderScanner0.scanLong('@');
      charArray1[0] = 'G';
      jSONReaderScanner0.scanFieldIntArray(charArray1);
      jSONReaderScanner0.stringDefaultValue = "Q$E:lshJro32T7[Xcr";
      int int0 = 82;
      jSONReaderScanner0.indexOf('n', 82);
      // Undeclared exception!
      jSONReaderScanner0.nextIdent();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanDouble('s');
      jSONReaderScanner0.isBlankInput();
      JSONScanner jSONScanner0 = new JSONScanner("", Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('s', 's', 'U', 'U', 'w', ' ');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 2104;
      JSONScanner jSONScanner0 = new JSONScanner("false", 2104);
      jSONScanner0.scanIdent();
      SymbolTable symbolTable0 = new SymbolTable(256);
      char char0 = 'g';
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'g');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      char char0 = '0';
      charArray0[1] = '0';
      charArray0[2] = '\'';
      charArray0[3] = ']';
      charArray0[4] = ';';
      charArray0[5] = 's';
      pipedWriter0.write(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(pipedReader0);
      char[] charArray1 = new char[2];
      charArray1[0] = '&';
      charArray1[1] = 'k';
      SymbolTable symbolTable0 = new SymbolTable(8);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray1, 3436, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new", 2311);
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = '@';
      charArray0[2] = '~';
      jSONScanner0.resetStringPosition();
      charArray0[3] = '-';
      charArray0[4] = 'f';
      charArray0[5] = 'i';
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.nextIdent();
      jSONScanner0.stringVal();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("?+)O@){W`Z");
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      charArray0[1] = '+';
      charArray0[2] = 'S';
      jSONScanner0.sbuf = charArray0;
      int int0 = jSONScanner0.getFeatures();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("create instance error", 92);
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = 'C';
      charArray0[2] = 'b';
      charArray0[3] = '`';
      charArray0[4] = 'O';
      charArray0[5] = '%';
      charArray0[6] = 'j';
      charArray0[7] = '~';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanDate('i');
      jSONReaderScanner0.scanInt('K');
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "HGf";
      JSONScanner jSONScanner0 = new JSONScanner("HGf");
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      jSONScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '}';
      charArray0[0] = '}';
      int int0 = 19;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 19);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[dqh~\"OU#?BeE^:-hS#", (-2304));
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) '+';
      objectArray0[2] = (Object) "[dqh~\"OU#?BeE^:-hS#";
      objectArray0[3] = (Object) jSONScanner0;
      objectArray0[4] = (Object) "[dqh~\"OU#?BeE^:-hS#";
      Object object1 = new Object();
      objectArray0[5] = object1;
      jSONScanner0.lexError("illegal state. ", objectArray0);
      charArray0[1] = 'p';
      Feature feature0 = Feature.DisableFieldSmartMatch;
      jSONScanner0.config(feature0, true);
      charArray0[2] = '-';
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.getCalendar();
      jSONReaderScanner0.isEnabled((-271), (-271));
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.token();
      SymbolTable symbolTable0 = new SymbolTable(1464);
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = '&';
      charArray0[2] = 'C';
      symbolTable0.addSymbol(charArray0, 0, 0, 8);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'R');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "null";
      int int0 = 76;
      JSONScanner jSONScanner0 = new JSONScanner("null", 76);
      jSONScanner0.scanStringArray((Collection<String>) null, '(');
      jSONScanner0.scanDouble('(');
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      int int1 = 66;
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      StringReader stringReader0 = new StringReader("TreeSet");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-1288));
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      charArray0[0] = '@';
      charArray0[1] = 'J';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.isBlankInput();
      Locale locale0 = Locale.JAPANESE;
      jSONScanner0.setLocale(locale0);
      jSONScanner0.getCalendar();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(115, (-1288), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("oracle.sql.TIMESTAMP");
      char char0 = 'b';
      jSONScanner0.scanSymbol((SymbolTable) null);
      jSONScanner0.np = 1632;
      jSONScanner0.isRef();
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, 'b');
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 353;
      JSONScanner jSONScanner0 = new JSONScanner("BeanToArray", 353);
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = '.';
      Feature feature0 = Feature.SupportArrayToBean;
      jSONScanner0.config(feature0, false);
      charArray0[2] = 'w';
      charArray0[3] = 's';
      charArray0[4] = 'k';
      charArray0[5] = '^';
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanBoolean('K');
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanDate('e');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("treeset", 2293);
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[2];
      jSONReaderScanner0.charArrayCompare(charArray0);
      charArray0[0] = '*';
      charArray0[1] = '0';
      char[] charArray1 = new char[4];
      charArray1[0] = '*';
      charArray1[1] = 'N';
      charArray1[2] = '0';
      charArray1[3] = '0';
      jSONReaderScanner0.matchField(charArray1);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol(2293, 2293, (-1399), (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AutoCloseSource", (-2977));
      jSONReaderScanner0.intValue();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2977));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new", 2311);
      jSONScanner0.nextIdent();
      jSONScanner0.stringVal();
      assertEquals(9, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("create instance error", 92);
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = 'C';
      charArray0[2] = 'b';
      charArray0[3] = '`';
      charArray0[4] = 'O';
      charArray0[5] = '%';
      charArray0[6] = 'j';
      charArray0[7] = '~';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('i');
      int int0 = jSONReaderScanner0.scanInt('P');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = 'a';
      charArray0[2] = '2';
      charArray0[3] = 'Y';
      charArray0[4] = '6';
      charArray0[5] = '1';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 41, (-874));
      jSONReaderScanner0.scanDate('6');
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.Instant", 122);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      jSONScanner0.nextIdent();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = '^';
      charArray0[2] = '>';
      charArray0[3] = '\"';
      charArray0[4] = 'N';
      charArray0[5] = 'M';
      JSONScanner.charArrayCompare("PmFYH", 12, charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("encodeUTF8 error", 416);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('j');
      Locale locale0 = Locale.PRC;
      jSONScanner0.setLocale(locale0);
      assertEquals(416, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*knK", (-221));
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '&';
      charArray0[2] = 'R';
      charArray0[3] = ']';
      charArray0[4] = 'k';
      charArray0[5] = 'i';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 103);
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = '}';
      charArray0[2] = '7';
      charArray0[3] = 's';
      charArray0[4] = '*';
      charArray0[5] = 'o';
      charArray0[6] = 'X';
      charArray0[7] = '~';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1379);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      jSONReaderScanner0.setTimeZone(timeZone0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fD#>3SGfWN");
      char[] charArray0 = new char[3];
      char char0 = 'h';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", ");
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = '2';
      charArray0[2] = 'G';
      charArray0[3] = 'X';
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("IgnoreNotMatch");
      jSONScanner0.nextToken(40);
      jSONScanner0.scanBoolean('j');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      jSONScanner0.lexError((String) null, objectArray0);
      jSONScanner0.ch = '1';
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, 'r');
      jSONScanner0.scanType("TreeSet");
      jSONScanner0.scanNumber();
      jSONScanner0.longValue();
      jSONScanner0.scanDecimal('j');
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'n';
      charArray0[2] = '<';
      charArray0[3] = '_';
      charArray0[4] = 'r';
      charArray0[5] = '1';
      charArray0[6] = 'n';
      charArray0[7] = 'r';
      jSONScanner0.scanFieldStringArray(charArray0, 66, (SymbolTable) null);
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.isEnabled(4209);
      jSONReaderScanner0.getTimeZone();
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) jSONScanner0;
      objectArray0[2] = (Object) "Set";
      objectArray0[3] = (Object) jSONScanner0;
      objectArray0[4] = (Object) '`';
      objectArray0[5] = (Object) jSONScanner0;
      objectArray0[6] = (Object) '`';
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) "Set";
      jSONScanner0.lexError("Set", objectArray0);
      charArray0[1] = '@';
      jSONScanner0.scanFieldDate(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = '}';
      charArray0[2] = 'L';
      charArray0[3] = 'B';
      charArray0[4] = 'm';
      charArray0[5] = 'O';
      charArray0[6] = '(';
      charArray0[7] = 'J';
      charArray0[8] = '!';
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")mMT$U");
      char[] charArray0 = new char[6];
      charArray0[0] = 'n';
      charArray0[1] = 'O';
      char char0 = 'M';
      charArray0[2] = 'M';
      SymbolTable symbolTable0 = new SymbolTable(23);
      jSONScanner0.scanSymbol(symbolTable0, 'M');
      charArray0[3] = 'X';
      jSONScanner0.bp = 123;
      charArray0[4] = 'A';
      charArray0[5] = 'M';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.putChar('@');
      char[] charArray1 = new char[1];
      charArray1[0] = char0;
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray1, class0);
      char[] charArray2 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.charArrayCompare(charArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str");
      jSONScanner0.isBlankInput();
      jSONScanner0.bp = 7283;
      jSONScanner0.scanFloat('');
      jSONScanner0.charAt(49);
      jSONScanner0.scanISO8601DateIfMatch(false);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("DU#1E>AlH", 7283);
      jSONReaderScanner0.scanString('p');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(7283);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - u, info : pos 7283, json : unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '';
      charArray0[0] = '';
      int int0 = 84;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 84);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.isBlankInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("z");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'F';
      charArray0[1] = 'q';
      charArray0[2] = 'e';
      charArray0[3] = 'U';
      charArray0[4] = 'B';
      charArray0[5] = 'm';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 51068, 51068);
      jSONReaderScanner0.locale = null;
      jSONReaderScanner0.setToken(51068);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-675));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - F, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("LqZCr$v2|(zyz%KjR", 26);
      jSONReaderScanner0.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EwW5]ar0", (-710));
      jSONReaderScanner0.getCurrent();
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      int int0 = (-607);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-607), (-607));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONScanner0.scanStringArray(set0, '@');
      assertEquals((-1), jSONScanner0.matchStat);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[1] = 's';
      charArray0[2] = '@';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 44, 41);
      jSONReaderScanner0.isEOF();
      assertEquals(41, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[1] = '1';
      charArray0[2] = '!';
      charArray0[3] = 'M';
      charArray0[4] = 'S';
      charArray0[5] = '8';
      charArray0[6] = '\'';
      int int0 = 986;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 986);
      jSONReaderScanner0.scanDouble('D');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-642));
      char char0 = 'a';
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      jSONScanner0.scanFieldFloatArray(charArray0);
      char[] charArray1 = new char[1];
      charArray1[0] = 'a';
      jSONScanner0.scanFieldDouble(charArray1);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('a', 'a', 'a', 'a', 'a');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 92);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str", 90);
      jSONScanner0.scanDate('C');
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = ".L2<Zon+2I=)y\"";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".L2<Zon+2I=)y\"");
      char[] charArray0 = new char[5];
      jSONReaderScanner0.scanString();
      charArray0[0] = 'R';
      charArray0[1] = 'S';
      charArray0[2] = 'Z';
      char char0 = '=';
      charArray0[3] = '=';
      jSONReaderScanner0.token = 70;
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) '=';
      objectArray0[2] = (Object) '=';
      objectArray0[3] = (Object) '=';
      objectArray0[4] = (Object) 'Z';
      objectArray0[5] = (Object) 'Z';
      objectArray0[6] = (Object) '=';
      objectArray0[7] = (Object) '=';
      jSONReaderScanner0.lexError(".L2<Zon+2I=)y\"", objectArray0);
      jSONReaderScanner0.pos = 101;
      charArray0[4] = 'K';
      jSONReaderScanner0.pos = 70;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = '/';
      charArray0[0] = '/';
      charArray0[1] = 'h';
      charArray0[2] = '\"';
      charArray0[3] = 'I';
      charArray0[4] = 'V';
      charArray0[5] = ']';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2329, 2329);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '/';
      jSONReaderScanner0.lexError("fs&DSqJ?$", objectArray0);
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. /
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new", (-5277));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = 'r';
      charArray0[0] = 'r';
      charArray0[1] = ',';
      charArray0[2] = 'L';
      int int0 = 83;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      int int1 = 49;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 49, 49);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("?:3vJk^%D(F:PaUJ#vX");
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      Locale locale0 = jSONScanner0.getLocale();
      jSONScanner0.locale = locale0;
      charArray0[1] = 'K';
      charArray0[2] = 'a';
      charArray0[3] = 'l';
      jSONScanner0.charArrayCompare(charArray0);
      int int0 = jSONScanner0.pos();
      assertEquals(0, int0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "new";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      Class<Object> class0 = Object.class;
      char[] charArray0 = new char[7];
      jSONReaderScanner0.scanLong('[');
      int int0 = 117;
      jSONReaderScanner0.pos = 117;
      charArray0[0] = '4';
      char char0 = '7';
      charArray0[1] = '7';
      charArray0[2] = 'a';
      charArray0[3] = ';';
      charArray0[4] = '4';
      charArray0[5] = '0';
      charArray0[6] = 'M';
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.newCollectionByType(class0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = 'Y';
      charArray0[2] = 'M';
      charArray0[3] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '4';
      charArray0[6] = '?';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2239);
      jSONReaderScanner0.subString(2239, 2239);
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals(0, int0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M%DxxI)n.=");
      jSONScanner0.close();
      int int0 = (-2256);
      int int1 = 115;
      int int2 = 665;
      SymbolTable symbolTable0 = new SymbolTable(665);
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("com.alibaba.fastjson.parser.JSONLexerBase", (-2433), (-2116), 1764);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = (-2516);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")CT.%iC9A", (-2516));
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.Period");
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      charArray0[1] = 'B';
      charArray0[2] = '/';
      charArray0[3] = 'C';
      jSONScanner0.scanString('B');
      charArray0[4] = '}';
      charArray0[5] = 'g';
      jSONScanner0.scanFieldStringArray(charArray0, 0, (SymbolTable) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.Period", (-2064));
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt(50900);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'G';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1687, 4096);
      jSONReaderScanner0.sp = 1687;
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.subString(1687, 4096);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 311;
      JSONScanner jSONScanner0 = new JSONScanner("#yBPNZ` HP>P", 311);
      char[] charArray0 = new char[2];
      jSONScanner0.np = 311;
      char char0 = '6';
      jSONScanner0.scanBoolean('6');
      char char1 = 'b';
      charArray0[0] = 'b';
      jSONScanner0.info();
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanType("pos 0, json : #yBPNZ` HP>P");
      jSONScanner0.scanString('(');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - #, info : pos 0, json : #yBPNZ` HP>P
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char char0 = ',';
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = ',';
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = 'd';
      charArray0[2] = 'M';
      charArray0[3] = '@';
      charArray0[4] = '*';
      charArray0[5] = 'z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 57);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("i&rY1]2_");
      int int0 = 16;
      jSONScanner0.timeZone = null;
      int int1 = 5373;
      jSONScanner0.sp = 5373;
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      jSONScanner0.skipWhitespace();
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      jSONScanner0.ch = 'X';
      charArray0[3] = 'X';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanDouble('X');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - X, info : pos 0, json : i&rY1]2_
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.concurrent.atomic.LongAdder");
      jSONScanner0.next();
      jSONScanner0.isBlankInput();
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "illegal state. ";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state. ");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. i
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":sr-ZHuPayc)", 91);
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "scan true error";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan true error", 589);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.bp = 589;
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[5];
      jSONReaderScanner0.isBlankInput();
      charArray0[0] = 'e';
      char char0 = 'a';
      jSONReaderScanner0.features = 0;
      charArray0[1] = 'a';
      charArray0[2] = 'L';
      charArray0[3] = 'd';
      charArray0[4] = ' ';
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 79);
      jSONReaderScanner0.isRef();
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2158));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = '\\';
      charArray0[2] = '';
      charArray0[3] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2041);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanInt('w');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      char char0 = 'j';
      charArray0[1] = 'j';
      char char1 = '-';
      charArray0[2] = '-';
      char char2 = '<';
      charArray0[3] = '<';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 14);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = null;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, 745);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = (-363);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-363));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "q^=*K@S}p-Y";
      StringReader stringReader0 = new StringReader("q^=*K@S}p-Y");
      stringReader0.skip((-214748364L));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-240));
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-240), 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#AiC;h>`pmc}09");
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextIdent();
      JSONScanner jSONScanner0 = new JSONScanner("Unknown", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("string", 60);
      jSONReaderScanner0.setToken(60);
      jSONReaderScanner0.next();
      JSONScanner jSONScanner0 = new JSONScanner("string", 60);
      char char0 = 'B';
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }
}
