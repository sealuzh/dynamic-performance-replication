/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 00:24:03 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte((-3480));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Pipe pipe0 = new Pipe(4278190080L);
      String string0 = "7\\uwbz5 |";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, string0);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeShort(93);
      assertFalse(buffer0.exhausted());
      
      buffer1.readShort();
      buffer0.skip((-294L));
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeUtf8("<Vr\"w0J}`<");
      buffer1.outputStream();
      Buffer buffer2 = buffer1.writeByte(1553);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("<Vr\"w0J}`<");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      long long0 = buffer2.indexOf(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = 100000000000000L;
      Pipe pipe0 = new Pipe(100000000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(100000000000000L);
      buffer0.outputStream();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("4yZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: 4yZ
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(65280L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeByte(40);
      pipe0.sourceClosed = true;
      Buffer buffer2 = buffer0.writeInt(5);
      Buffer buffer3 = buffer2.writeIntLe(5);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte) (-45);
      byteArray0[8] = (byte) (-120);
      ByteBuffer.wrap(byteArray0);
      ByteString byteString0 = ByteString.EMPTY;
      buffer3.indexOfElement(byteString0, 1419L);
      buffer2.indexOf((byte)12, 65280L);
      buffer0.rangeEquals(65280L, (ByteString) null, 5, 5);
      buffer2.size();
      buffer2.readInt();
      buffer1.writeInt(40);
      assertEquals(9L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(356L);
      Source source0 = pipe0.source();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer();
      buffer0.sha1();
      Buffer buffer1 = buffer0.writeDecimalLong(356L);
      buffer1.sha1();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer2 = (Buffer)buffer1.write((Source) null, (-3L));
      buffer2.readDecimalLong();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = 65L;
      Pipe pipe0 = new Pipe(65L);
      Sink sink0 = pipe0.sink();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.toString();
      Buffer buffer0 = realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      realBufferedSink0.closed = true;
      buffer0.completeSegmentByteCount();
      buffer_UnsafeCursor0.buffer.segmentSizes();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      realBufferedSink0.buffer.readFrom((InputStream) dataInputStream0);
      realBufferedSink0.buffer.writeShort((-1));
      realBufferedSink0.buffer.snapshot();
      buffer_UnsafeCursor0.buffer.segmentSizes();
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = 8L;
      Pipe pipe0 = new Pipe(8L);
      pipe0.sinkClosed = true;
      pipe0.sinkClosed = true;
      pipe0.sinkClosed = false;
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLongLe(8L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      pipe0.sourceClosed = false;
      buffer0.buffer();
      buffer0.readLongLe();
      // Undeclared exception!
      try { 
        buffer1.snapshot(323);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=323
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Pipe pipe0 = new Pipe(3L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      GzipSource gzipSource0 = new GzipSource(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)1;
      buffer0.write(byteArray0);
      byte[] byteArray1 = realBufferedSource0.readByteArray((long) (byte)1);
      ByteString byteString0 = ByteString.of(byteArray1);
      buffer0.rangeEquals(3L, byteString0);
      buffer0.sha1();
      buffer0.completeSegmentByteCount();
      HashingSource hashingSource0 = HashingSource.hmacSha256(realBufferedSource0, byteString0);
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      buffer0.write((Source) hashingSource1, 0L);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer1.writeDecimalLong(16711678L);
      assertEquals(8L, buffer1.size());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)44;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      realBufferedSink0.buffer.readFrom((InputStream) byteArrayInputStream0);
      assertFalse(buffer0.equals((Object)buffer2));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Pipe pipe0 = new Pipe(1273L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.writeLongLe(1000000L);
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte) (-1);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      realBufferedSource0.buffer.indexOf(byteString0);
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.sha256();
      realBufferedSource0.buffer.readUnsafe();
      realBufferedSource0.buffer.writeShortLe((-1));
      MockPrintStream mockPrintStream0 = new MockPrintStream("&CeNWrib 8E");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      mockPrintStream0.println(0.0F);
      mockPrintStream0.append('8');
      gzipSource0.timeout();
      realBufferedSource0.exhausted();
      long long0 = (-367L);
      Buffer buffer2 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        gzipSource0.read(buffer2, (-367L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -367
         //
         verifyException("okio.GzipSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      BufferedSink bufferedSink0 = buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer1.writeLongLe(284L);
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong((-474L));
      try { 
        buffer0.write((Source) buffer2, 284L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Pipe pipe0 = new Pipe(979L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer;
      GzipSink gzipSink0 = new GzipSink(realBufferedSource0.buffer);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iY");
      pipe0.sourceClosed = false;
      gzipSink0.timeout();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HashingSink hashingSink0 = HashingSink.md5(gzipSink0);
      ByteString byteString0 = hashingSink0.hash();
      realBufferedSource0.inputStream();
      Buffer buffer1 = buffer0.write(byteString0);
      Buffer buffer2 = buffer0.emitCompleteSegments();
      gzipSink0.flush();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSource0.buffer.indexOf((byte) (-1), 1504L, 1932L);
      ByteString byteString1 = buffer1.hmacSha256(byteString0);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteString0.write(realBufferedSource0.buffer);
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      Buffer buffer3 = realBufferedSource0.buffer.writeIntLe(0);
      buffer2.readShort();
      buffer3.toString();
      buffer0.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readFully(buffer0, (-922337203685477580L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.writeHexadecimalUnsignedLong((-745L));
      buffer0.indexOfElement(byteString0);
      // Undeclared exception!
      try { 
        buffer0.getByte((-745L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=16 offset=-745 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte)127;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = null;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null, (-68), (-68));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(1000000L);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer0.read(buffer1, 1000000L);
      String string0 = "~\\NB";
      // Undeclared exception!
      try { 
        Charset.forName("~NB");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ~NB
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer0.read((Buffer) null, 60L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      Buffer buffer2 = buffer0.writeLongLe((-3773L));
      buffer0.timeout();
      buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      Buffer buffer3 = buffer2.copyTo(outputStream0);
      Buffer buffer4 = buffer3.writeLong((-3773L));
      ByteString byteString0 = ByteString.encodeUtf8(" > ");
      buffer3.rangeEquals((-1162L), byteString0);
      ByteString byteString1 = buffer4.hmacSha1(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer1.writeAll(realBufferedSink0.buffer);
      buffer4.indexOf((byte)63);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      buffer_UnsafeCursor0.buffer.select(options0);
      buffer2.rangeEquals((long) (byte)63, byteString0, (int) (byte)63, (-1));
      buffer1.readInt();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 25;
      int int1 = 1;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, 25, 1, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      String string0 = "Gp(^WZY2I=j-\\9z>>";
      realBufferedSink0.writeIntLe(101);
      ByteString byteString0 = ByteString.encodeUtf8("Gp(^WZY2I=j-9z>>");
      // Undeclared exception!
      try { 
        buffer1.indexOf(byteString0, (-3142L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "e_XKr(F)B0w;*T_~e6T");
      buffer0.writeShortLe((-4767));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      buffer0.copyTo((OutputStream) byteArrayOutputStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeLong(356L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-15);
      Buffer buffer2 = buffer0.writeByte((byte) (-15));
      buffer2.indexOf((byte) (-15));
      buffer1.toString();
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)56;
      byte byte0 = (byte)84;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)17;
      byteArray0[8] = (byte)31;
      // Undeclared exception!
      try { 
        buffer1.read(byteArray0, (int) (byte) (-15), (int) (byte) (-15));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=9 offset=-15 byteCount=-15
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Pipe pipe0 = new Pipe(4278190080L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      realBufferedSink0.buffer.selectPrefix(options0);
      Buffer buffer0 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        pipe_PipeSink0.write(buffer0, 4278190080L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=4278190080
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      BufferedSink bufferedSink0 = buffer0.emit();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.readAll(bufferedSink0);
      buffer0.completeSegmentByteCount();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(0L);
      buffer1.size = 0L;
      // Undeclared exception!
      try { 
        buffer1.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = (-65271L);
      buffer0.writeDecimalLong((-65271L));
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray1 = new byte[4];
      // Undeclared exception!
      try { 
        ByteString.decodeHex(";')84N(f3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: ;')84N(f3
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[2];
      HashingSink hashingSink0 = HashingSink.sha256(realBufferedSource0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      byteStringArray0[0] = byteString0;
      ByteString byteString1 = ByteString.encodeUtf8("~d}pvKM\"");
      byteStringArray0[1] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.clear();
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(5484);
      buffer0.readUtf8Line();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte)81;
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, (int) (byte)113, (int) (byte)113);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=113 byteCount=113
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writableSegment(1908874353);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(2483L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      ByteString.decodeBase64("r'SW029-");
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = null;
      byteStringArray0[1] = null;
      byteStringArray0[2] = null;
      byteStringArray0[3] = null;
      byteStringArray0[4] = null;
      byteStringArray0[5] = null;
      byteStringArray0[6] = null;
      byteStringArray0[7] = null;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer0.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.toString();
      buffer0.request((-1));
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = 2065629183L;
      Pipe pipe0 = new Pipe(2065629183L);
      Buffer buffer0 = pipe0.buffer;
      String string0 = " !Qpv?:&:|5~G";
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString(" !Qpv?:&:|5~G", 1610612736, 97, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 97 < 1610612736
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.segmentSizes();
      buffer0.writeShort((-1762));
      ByteString byteString0 = buffer0.snapshot();
      byteString0.toAsciiLowercase();
      buffer0.indexOfElement(byteString0);
      buffer0.getByte(0L);
      try { 
        buffer0.skip(16711680L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      InputStream inputStream0 = buffer0.inputStream();
      // Undeclared exception!
      buffer0.readFrom(inputStream0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(65280L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeByte(40);
      pipe0.sourceClosed = true;
      Buffer buffer2 = buffer0.writeInt(5);
      buffer2.writeIntLe(5);
      buffer2.indexOf((byte)12, 65280L);
      buffer0.rangeEquals(65280L, (ByteString) null, 5, 5);
      buffer2.size();
      buffer2.readInt();
      buffer0.hashCode();
      buffer1.writeInt(40);
      assertEquals(9L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(1001);
      buffer1.md5();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xffffffe9
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.request(10000000000000L);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "offset=%s > size=%s");
      buffer0.rangeEquals(100000000000000L, byteString0, (-2324), (-2324));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer0.write(buffer1, 100000000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=100000000000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      boolean boolean0 = buffer0.rangeEquals(1000000000000000000L, byteString0, 1040, (-2713));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte) (-127);
      Buffer buffer3 = buffer2.write(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 33);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      buffer3.readFrom((InputStream) dataInputStream0, (long) (byte)1);
      buffer3.writableSegment((byte)1);
      try { 
        buffer2.skip(2065719295L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      BufferedSink bufferedSink0 = buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer2 = buffer1.write(byteString0);
      buffer2.sha1();
      // Undeclared exception!
      try { 
        buffer1.writeString("okio.Buffer$1", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[0];
      int int0 = 1842;
      String string0 = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.writeString("", charset0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1842, 1842);
      byteArrayInputStream0.skip(4278190080L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = buffer1.readFrom((InputStream) byteArrayInputStream0);
      buffer2.writeUtf8CodePoint(1842);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffdc
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Pipe pipe0 = new Pipe(65536L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G#DA_fuq");
      pipe0.sourceClosed = false;
      pipe0.sinkClosed = false;
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer_UnsafeCursor0.buffer.writeInt((-644));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeString("", (-1), (-1887), (Charset) null);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.snapshot();
      buffer0.segmentSizes();
      buffer0.indexOfElement(byteString0, 1058L);
      MockFile mockFile0 = new MockFile("DeflaterSink(", "DeflaterSink(");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.release();
      Buffer buffer1 = buffer0.copyTo((OutputStream) mockFileOutputStream0, 0L, 0L);
      // Undeclared exception!
      try { 
        buffer1.copyTo((OutputStream) mockFileOutputStream0, 10000000L, (-906L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=10000000 byteCount=-906
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = 2065629183L;
      Buffer buffer1 = buffer0.writeLongLe(2065629183L);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      buffer1.indexOf(byteString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.md5();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)45;
      buffer0.readFully(byteArray0);
      buffer0.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer1.readFully(buffer0, 2065629183L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.equals(buffer0);
      buffer1.readByteString();
      Buffer buffer2 = buffer1.clone();
      buffer_UnsafeCursor1.buffer.md5();
      buffer_UnsafeCursor0.next();
      buffer2.exhausted();
      // Undeclared exception!
      buffer_UnsafeCursor0.resizeBuffer(2147483647L);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sC|3Q3YAj_");
      buffer0.size = 943L;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.buffer.inputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.writeLong(943L);
      long long0 = new Integer((-1));
      realBufferedSource0.buffer.toString();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer_UnsafeCursor0.buffer.segmentSizes();
      ByteString byteString0 = ByteString.decodeHex("");
      long long1 = 926L;
      byteString0.hashCode = (-1);
      // Undeclared exception!
      try { 
        buffer2.indexOf((byte) (-95), 926L, (-1096L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=926 toIndex=-1096
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer1.writeString("-/+\br=AC%5'", 2147221535, 2147221535, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 2147221535 > 11
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeShortLe(53);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSink hashingSink0 = HashingSink.sha256(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      buffer1.indexOf(byteString0);
      buffer1.emit();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = (-1047L);
      Buffer buffer1 = buffer0.writeDecimalLong((-1047L));
      buffer0.md5();
      // Undeclared exception!
      try { 
        buffer1.write((Source) buffer0, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(248);
      Buffer buffer2 = buffer1.clone();
      // Undeclared exception!
      try { 
        buffer2.indexOf((byte) (-1), (long) (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=4 fromIndex=-1 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("@IFV{M-4", charset0);
      buffer1.toString();
      buffer1.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      long long0 = 65280L;
      realBufferedSource0.buffer.size = 9223372036854775807L;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readUtf8LineStrict(65280L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      gzipSink0.flush();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Buffer buffer1 = realBufferedSink0.buffer;
      long long0 = 32L;
      realBufferedSink0.writeDecimalLong(32L);
      realBufferedSink0.buffer.inputStream();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      gzipSink0.flush();
      ByteString byteString0 = null;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.indexOf((ByteString) null, 32L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.equals((Object) null);
      long long0 = 1000000L;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1000000L);
      // Undeclared exception!
      try { 
        buffer1.writeAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = false;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.readAll(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.buffer.indexOf((byte)127, (long) (byte)127);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      hashingSink0.toString();
      ByteString byteString0 = hashingSink0.hash();
      buffer0.readUtf8Line();
      ByteString byteString1 = buffer1.hmacSha256(byteString0);
      realBufferedSource0.buffer.completeSegmentByteCount();
      byteString1.lastIndexOf(byteString0);
      buffer0.writeAll(realBufferedSource0);
      buffer1.hmacSha1(byteString1);
      buffer0.writeUtf8("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)127;
      byteArray0[8] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)122, (byte)127);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      try { 
        buffer0.readFrom((InputStream) pushbackInputStream0, (long) (byte)71);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(1029L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertTrue(buffer0.exhausted());
      
      inflaterSource0.refill();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      boolean boolean0 = buffer1.equals(buffer0);
      assertTrue(boolean0);
      
      buffer1.sha512();
      assertTrue(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HashingSink hashingSink1 = HashingSink.sha256(hashingSink0);
      GzipSink gzipSink0 = new GzipSink(hashingSink1);
      gzipSink0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.segmentSizes();
      ByteString byteString0 = hashingSink0.hash();
      buffer1.indexOfElement(byteString0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      realBufferedSink0.buffer.emit();
      gzipSink0.timeout();
      byteString0.hex();
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.copyTo(outputStream0, (-1L), (-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.clone();
      Buffer buffer2 = buffer0.writeLongLe((-978L));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)108;
      buffer0.readFully(byteArray0);
      Buffer buffer3 = buffer1.buffer();
      ByteString byteString0 = ByteString.encodeUtf8("");
      ByteString byteString1 = byteString0.toAsciiLowercase();
      buffer0.indexOfElement(byteString0);
      buffer3.require((-978L));
      buffer0.sha1();
      long long0 = (-1617L);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        buffer2.indexOf(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      try { 
        buffer0.readFully(buffer1, 1000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      buffer0.readFrom((InputStream) dataInputStream0, 0L);
      // Undeclared exception!
      try { 
        dataInputStream0.readShort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000L);
      pipe0.sourceClosed = true;
      Buffer buffer0 = pipe0.buffer;
      Segment segment0 = new Segment();
      Segment segment1 = new Segment();
      segment1.sharedCopy();
      segment0.next = segment1;
      ByteString byteString0 = buffer0.md5();
      buffer0.head = segment0;
      buffer0.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        buffer0.hmacSha256(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Integer integer0 = new Integer(341);
      boolean boolean0 = buffer1.equals(integer0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(boolean0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(2147483647L);
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeUtf8("D'ZVKsYfu.aYQ");
      buffer2.readHexadecimalUnsignedLong();
      buffer2.emitCompleteSegments();
      assertEquals(12L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000L);
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        buffer0.copyTo((Buffer) null, 100000L, (-1537L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.readUnsafe();
      String string0 = "";
      ByteString byteString0 = ByteString.decodeHex("");
      buffer_UnsafeCursor0.buffer.rangeEquals((-3702L), byteString0, 387, (-1));
      // Undeclared exception!
      try { 
        buffer1.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = 1765L;
      Pipe pipe0 = new Pipe(1765L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.readUtf8();
      buffer_UnsafeCursor0.buffer.indexOf((byte)97, 60L, 1765L);
      buffer_UnsafeCursor0.buffer.sha512();
      buffer_UnsafeCursor0.resizeBuffer(1765L);
      pipe0.sinkClosed = true;
      pipe0.sourceClosed = false;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOf((byte) (-15), (long) (byte) (-15));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=1765 fromIndex=-15 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = 2565L;
      buffer0.writeDecimalLong(2565L);
      int int0 = 97;
      buffer0.writableSegment(97);
      buffer0.inputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.readUtf8Line();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("2565", "2565");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 2565
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer2.writeUtf8("", (-498), 1019);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -498
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sC|3Q3YAj_");
      buffer0.size = 943L;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.buffer.inputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer1.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong(943L);
      // Undeclared exception!
      try { 
        buffer0.readAll(bufferedSink0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Pipe pipe0 = new Pipe(723L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readFully((Buffer) null, 1168L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Buffer buffer0 = pipe0.buffer;
      String string0 = "okio.ByteString";
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("okio.ByteString", charset0);
      pipe0.sinkClosed = false;
      buffer0.snapshot();
      pipe0.sinkClosed = false;
      buffer0.readShortLe();
      buffer0.flush();
      buffer0.readByteString();
      int int0 = (-1997);
      buffer1.writeInt((-1997));
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("okio.ByteString", "okio.ByteString");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // okio.ByteString
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-3494L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-3494 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Pipe pipe0 = new Pipe(1767L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9O\")H>0JEx");
      byteArray0[0] = (byte) (-30);
      buffer1.inputStream();
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-93);
      byte byte0 = (byte)111;
      // Undeclared exception!
      try { 
        inflater0.setDictionary(byteArray0, (int) (byte)111, (-3784));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Inflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+");
      Buffer buffer0 = new Buffer();
      int int0 = 943;
      buffer0.writeIntLe(943);
      try { 
        buffer0.readUtf8LineStrict(1875L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=4 content=af030000\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Pipe pipe0 = new Pipe(1321L);
      Buffer buffer0 = pipe0.buffer;
      BufferedSink bufferedSink0 = buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line(1321L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=1320 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.readByteArray();
      realBufferedSource0.buffer.writeLong((-1689L));
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer1, (-37L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-37
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("bT@");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      long long0 = 10000L;
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) dataOutputStream0, 10000L, 10000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=10000 byteCount=10000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)0;
      byteString1.lastIndexOf(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString1, (-4011L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer_UnsafeCursor0.next();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        buffer2.copyTo((OutputStream) null, 23L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Pipe pipe0 = new Pipe(256L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = true;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.sha512();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeLongLe(256L);
      buffer2.readIntLe();
      // Undeclared exception!
      try { 
        buffer2.copyTo(buffer0, (long) (-1), 13L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=-1 byteCount=13
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      inflaterSource0.timeout();
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      long long0 = buffer_UnsafeCursor0.buffer.indexOfElement((ByteString) null);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1L), long0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Pipe pipe0 = new Pipe(790L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(2L);
      // Undeclared exception!
      try { 
        buffer1.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long long0 = 4L;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(4L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.writeLongLe(1000000000000000L);
      realBufferedSink0.writeLong(4L);
      int int0 = (-2147483646);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeUtf8(":c", 70, (-2147483646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -2147483646 < 70
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wR{");
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)48;
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer0.readUtf8CodePoint();
      buffer0.writeShort((byte) (-85));
      // Undeclared exception!
      try { 
        buffer1.writeTo((OutputStream) null, (-3974L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        buffer2.copyTo((OutputStream) null, 23L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      inflaterSource0.refill();
      hashingSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      realBufferedSource0.buffer.toString();
      ByteString byteString0 = hashingSource1.hash();
      realBufferedSource0.buffer.hmacSha512(byteString0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        buffer1.getByte(0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9iovhi=jd");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "O");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|W-l;f");
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeLong(1168L);
      buffer_UnsafeCursor0.start = (-289);
      Charset charset0 = Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.readString(charset0);
      buffer_UnsafeCursor0.buffer.hashCode();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      long long0 = (-572L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-572L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -572
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      // Undeclared exception!
      try { 
        hashingSource0.read(buffer0, (-4011L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -4011
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.request(2147483647L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Pipe pipe0 = new Pipe(107L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      Buffer buffer0 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("?Y!$o_w#&7S,i", 13, (-2147483646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -2147483646 < 13
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.hashCode();
      MockFile mockFile0 = new MockFile("");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.segmentSizes();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(9223372036854775807L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)87;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.encodeUtf8("bytes is empty");
      byteString0.indexOf(byteString1, 1530);
      ByteString byteString2 = buffer0.hmacSha256(byteString0);
      assertNotSame(byteString0, byteString2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = 1766L;
      Pipe pipe0 = new Pipe(1766L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha1(pipe_PipeSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.buffer.outputStream();
      Buffer buffer0 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(2147483647L);
      buffer1.writeUtf8("Tid]VivWF5,]|");
      assertEquals(23L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = 100L;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte) (-112);
      byteArray0[7] = (byte) (-69);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Pipe pipe0 = new Pipe(100L);
      Buffer buffer0 = pipe0.buffer;
      int int0 = 97;
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream(97);
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0, 100L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      BufferedSink bufferedSink0 = buffer0.emit();
      buffer0.readAll(bufferedSink0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-106);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 989, (byte)53);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      Buffer buffer1 = buffer0.readFrom((InputStream) pushbackInputStream0);
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = true;
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      pipe0.sourceClosed = true;
      pipe0.sinkClosed = false;
      buffer0.indexOf((byte)38, (long) (byte)38);
      Buffer buffer1 = realBufferedSink0.buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/Pl");
      Segment segment0 = buffer1.writableSegment(1906);
      buffer0.head = segment0;
      buffer0.clear();
      assertTrue(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      // Undeclared exception!
      try { 
        buffer1.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.buffer.write((Source) buffer0, 100000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha1();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.writeUtf8("charset == null");
      buffer0.toString();
      buffer0.timeout();
      assertEquals(15L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.close();
      int int0 = 111;
      PipedInputStream pipedInputStream0 = new PipedInputStream(111);
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((InputStream) null, pipedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      buffer0.writeUtf8("charset == null");
      // Undeclared exception!
      try { 
        buffer0.readFrom(inputStream0, (-3555L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3555
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      inflaterSource0.refill();
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.sha256();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readByteString(845L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=845
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      buffer0.readAndWriteUnsafe();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        buffer0.writableSegment((-798));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Charset charset0 = Charset.defaultCharset();
      buffer1.writeString("okio.GzipSource", charset0);
      assertEquals(15L, buffer1.size());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte)122;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      Buffer buffer2 = realBufferedSource0.buffer.readFrom((InputStream) pushbackInputStream0);
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)9;
      byte byte0 = (byte)21;
      byteArray0[3] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      int int0 = (-1509);
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null, (-1509), (-1509));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      int int0 = 9;
      buffer_UnsafeCursor0.start = 9;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.buffer.clear();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=9 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      ByteString byteString0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      Buffer buffer1 = buffer0.writeShort((-2680));
      Buffer buffer2 = buffer1.writeShortLe((-2680));
      // Undeclared exception!
      try { 
        buffer2.readByteArray((long) (-2680));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=0 byteCount=-2680
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Pipe pipe0 = new Pipe(2619L);
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeIntLe(74);
      buffer0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer1.writeUtf8("", 74, 1610612736);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 1610612736 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(5091L);
      buffer1.equals(buffer0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer1.writeString((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Pipe pipe0 = new Pipe(4340L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.toString();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "!mJ9'o|Z9(@#,W";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!mJ9'o|Z9(@#,W");
      Pipe pipe0 = new Pipe(5091L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      long long0 = 1169L;
      String string0 = null;
      File file0 = MockFile.createTempFile("ID1ID2", (String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      buffer1.writeTo((OutputStream) mockFileOutputStream0);
      try { 
        buffer1.readUtf8LineStrict(1169L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000L);
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      buffer0.snapshot();
      Buffer buffer1 = buffer0.buffer();
      // Undeclared exception!
      try { 
        buffer1.readByteArray(60L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=60
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.snapshot((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Pipe pipe0 = new Pipe(6L);
      Buffer buffer0 = pipe0.buffer;
      ByteString[] byteStringArray0 = new ByteString[4];
      ByteString byteString0 = ByteString.EMPTY;
      byteStringArray0[0] = byteString0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteStringArray0[1] = byteString1;
      ByteString byteString2 = ByteString.EMPTY;
      byteStringArray0[2] = byteString2;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8CodePoint((-138));
      HashingSink hashingSink0 = HashingSink.sha512(bufferedSink0);
      HashingSink.sha512(realBufferedSink0);
      ByteString byteString3 = hashingSink0.hash();
      byteStringArray0[3] = byteString3;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      buffer0.writeUtf8("Dp+T5\"$gg(`|H3v@_");
      try { 
        realBufferedSink0.buffer.require(5091L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cd");
      Pipe pipe0 = new Pipe(1000000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000000L);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte)23;
      byteArray0[8] = (byte)95;
      buffer0.write(byteArray0);
      buffer1.sha512();
      byte[] byteArray1 = new byte[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray1[0] = (byte) (-4);
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)59;
      // Undeclared exception!
      try { 
        buffer1.write(byteArray1, (int) (byte)59, (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=59 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(1246);
      buffer0.emit();
      long long0 = 1698L;
      long long1 = 100000000000L;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-65);
      buffer0.readInt();
      byteArray0[2] = (byte)90;
      Buffer buffer2 = buffer1.write(byteArray0);
      buffer2.outputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer2.write(byteArray0, 2, 5182);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=2 byteCount=5182
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = 1L;
      Pipe pipe0 = new Pipe(1L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer0.readByteString();
      realBufferedSink0.writeIntLe(0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line((-3026L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=0 byteCount=-3026
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      inflaterSource0.refill();
      InflaterSource inflaterSource1 = new InflaterSource(inflaterSource0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource1);
      Buffer buffer1 = realBufferedSource0.buffer;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-85);
      ByteString byteString0 = ByteString.decodeBase64("SHA-256");
      buffer1.hmacSha1(byteString0);
      byteArray0[2] = (byte)51;
      realBufferedSource0.buffer.sha512();
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)100;
      try { 
        buffer1.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer2.readFully(realBufferedSource0.buffer, (-2855L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.buffer.readUtf8();
      Buffer buffer2 = buffer0.clone();
      Charset charset0 = Charset.defaultCharset();
      buffer2.readString(0L, charset0);
      buffer1.close();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)114;
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.end = 0;
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1912));
      buffer1.writeShortLe((-1912));
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      buffer0.outputStream();
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)32;
      byteString0.indexOf(byteArray0, 6);
      buffer0.hmacSha512(byteString0);
      buffer0.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer1.readUtf8LineStrict((long) (-1912));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1912
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashingSource.md5((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = 22L;
      try { 
        buffer0.readUtf8LineStrict(22L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-2953L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -2953
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(356L);
      Source source0 = pipe0.source();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer();
      buffer0.sha1();
      Buffer buffer1 = buffer0.writeDecimalLong(356L);
      buffer1.sha1();
      Buffer buffer2 = buffer1.writeUtf8(")+");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer3 = (Buffer)buffer2.write((Source) null, (-3L));
      buffer3.readDecimalLong();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Pipe pipe0 = new Pipe(65280L);
      pipe0.sourceClosed = true;
      Buffer buffer0 = pipe0.buffer;
      try { 
        buffer0.skip(65280L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeUtf8CodePoint(325);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.next();
      ByteString byteString0 = ByteString.EMPTY;
      buffer_UnsafeCursor0.buffer.writeShortLe(2);
      Buffer buffer3 = new Buffer();
      SegmentPool.byteCount = (long) 0;
      buffer3.rangeEquals(2994L, byteString0);
      buffer_UnsafeCursor0.buffer.readByte();
      buffer_UnsafeCursor0.buffer.indexOf((byte)4, 1024L);
      buffer1.size();
      buffer0.read(buffer_UnsafeCursor0.data);
      buffer0.writeShort(2);
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
