/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 03:59:29 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Logger;
import java.io.ByteArrayInputStream;
import java.io.PipedOutputStream;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Html;
import us.codecraft.webmagic.selector.Json;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "HSMp");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.setExitWhenComplete(false);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Request request0 = new Request("HSMp");
      request0.setPriority(35);
      spider2.setUUID("HSMp");
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "k?/#JX";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("k?/#JX");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("k?/#JX");
      Spider spider0 = Spider.create(simplePageProcessor1);
      spider0.setUUID("");
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        simplePageProcessor1.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = ">^aIsPP1B!_";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(">^aIsPP1B!_");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request("@-17@Vy`C${uZ");
      Page page0 = new Page();
      page0.getJson();
      spider0.setScheduler((Scheduler) null);
      spider0.scheduler((Scheduler) null);
      // Undeclared exception!
      try { 
        spider0.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(">^aIsPP1B!_");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request("@-17@Vy`C${uZ");
      Page page0 = new Page();
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("page status code error, page {} , code: {}", "_cycle_tried_times");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider0.test(stringArray0);
      Spider.Status spider_Status0 = spider0.getStatus();
      assertEquals(Spider.Status.Init, spider_Status0);
      
      Spider spider2 = spider1.clearPipeline();
      long long0 = spider2.getPageCount();
      assertEquals(0L, long0);
      
      Random.setNextRandom((-1778));
      spider1.close();
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 18;
      Spider.Status.fromValue(18);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("crawl.js ");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("crawl.js ");
      SimplePageProcessor simplePageProcessor2 = new SimplePageProcessor("_plus");
      Spider spider0 = new Spider(simplePageProcessor2);
      Page page0 = new Page();
      page0.getJson();
      page0.getJson();
      spider0.getSpiderListeners();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(18, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      Spider spider1 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.scheduler(queueScheduler0);
      spider2.getSpiderListeners();
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      spider3.thread(18);
      String[] stringArray0 = new String[0];
      spider2.addUrl(stringArray0);
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0aG/4v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.sleep(39);
      Spider spider1 = spider0.setUUID("#;nh)uz0aG/4v|`h");
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      
      Spider.Status spider_Status0 = spider1.getStatus();
      assertEquals(Spider.Status.Init, spider_Status0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0aG/4v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("#;nh)uz0aG/4v|`h");
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request("waitNewUrl - interrupted, error {}");
      Page page0 = new Page();
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      spider0.getSpiderListeners();
      spider0.setSpiderListeners((List<SpiderListener>) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_cycle_tried_times";
      stringArray0[1] = "waitNewUrl - interrupted, error {}";
      stringArray0[2] = "";
      stringArray0[3] = "3#+xz00:wM._+7E+X";
      stringArray0[4] = "_cycle_tried_times";
      stringArray0[5] = null;
      stringArray0[6] = "3#+xz00:wM._+7E+X";
      stringArray0[7] = "3#+xz00:wM._+7E+X";
      stringArray0[8] = null;
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Spider.Status.fromValue(18);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("zE}8FS)j");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      Locale locale0 = Locale.FRENCH;
      locale0.hasExtensions();
      locale0.getUnicodeLocaleKeys();
      spider1.thread(18);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("zE}8FS)j");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider2 = spider0.setScheduler(duplicateRemovedScheduler0);
      spider2.sleep(30000);
      spider1.setSpawnUrl(true);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        spider2.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;n h3uz0aG/v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      spider1.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("58{ t!<%x%>");
      Spider spider2 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("58{ t!<%x%>", "4;u[");
      phantomJSDownloader0.setRetryNum(2304);
      spider1.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.startRequest(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Spider spider3 = spider2.startUrls(linkedList1);
      Spider spider4 = spider0.setSpawnUrl(false);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2669, threadFactory0);
      spider4.setExecutorService(scheduledThreadPoolExecutor0);
      Spider spider5 = spider0.startRequest(linkedList0);
      ForkJoinTask.getPool();
      spider2.setExecutorService((ExecutorService) null);
      LinkedList<Pipeline> linkedList2 = new LinkedList<Pipeline>();
      spider3.getAll((Collection<String>) linkedList1);
      spider2.setUUID("HSMp");
      spider5.setEmptySleepTime((-1995));
      assertEquals(Spider.Status.Stopped, spider5.getStatus());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/vg`myn/C})4VkX3[M*");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request();
      Request request1 = request0.setBinaryContent(false);
      request1.setUrl("");
      Request request2 = request1.setMethod("");
      // Undeclared exception!
      try { 
        spider0.onError(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request("Ys");
      Request request1 = request0.setPriority(0L);
      requestArray0[0] = request1;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Spider.Status.fromValue(18);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("bE}JFS)j");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop fail!", "");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      ForkJoinTask.getPool();
      Spider spider2 = spider1.thread((ExecutorService) null, 18);
      Request[] requestArray0 = new Request[0];
      Spider spider3 = spider2.addRequest(requestArray0);
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      spider3.setSpiderListeners(linkedList1);
      Spider spider4 = spider0.clearPipeline();
      spider4.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList2 = new LinkedList<Request>();
      Spider spider5 = spider4.setUUID("bE}JFS)j");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      spider2.startUrls(linkedList3);
      spider5.setSpawnUrl(true);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader((String) null, " stop fail!");
      // Undeclared exception!
      try { 
        spider1.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("4>6e[?kV%m");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("4>6e[?kV%m");
      ForkJoinTask.getPool();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      AtomicInteger atomicInteger0 = spider1.stat;
      spider1.setExecutorService((ExecutorService) null);
      Spider spider2 = spider1.setUUID("");
      spider2.getUUID();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y8@-(]/SWKI3;gO>", "");
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.startRequest(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Y8@-(]/SWKI3;gO>";
      stringArray0[1] = "Y8@-(]/SWKI3;gO>";
      stringArray0[2] = "Y8@-(]/SWKI3;gO>";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        phantomJSDownloader0.download("Thread interrupted when sleep", "Y8@-(]/SWKI3;gO>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0aG/4v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Logger logger0 = (Logger)spider0.logger;
      spider0.logger = (org.slf4j.Logger) logger0;
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      spider1.thread(3271);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        spider1.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Spider.Status.fromValue(18);
      String string0 = "zE}8FS)j";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("zE}8FS)j");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("S:M 8XZS");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.checkIfRunning();
      Page page0 = Page.fail();
      page0.getTargetRequests();
      Json json0 = page0.getJson();
      Class<Pipeline> class0 = Pipeline.class;
      json0.toList(class0);
      Spider spider2 = spider0.setPipelines((List<Pipeline>) null);
      Spider spider3 = spider2.downloader((Downloader) null);
      spider3.clearPipeline();
      // Undeclared exception!
      try { 
        spider2.get("S:M 8XZS");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Spider.Status.fromValue(18);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("bE}JFS)j");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop fail!", "");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      spider1.getSpiderListeners();
      spider0.setSpiderListeners((List<SpiderListener>) null);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("", (String) null);
      spider0.setDownloader(phantomJSDownloader1);
      String[] stringArray0 = new String[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = " stop fail!";
      stringArray0[1] = "";
      stringArray0[2] = " stop fail!";
      stringArray0[3] = null;
      stringArray0[4] = "";
      stringArray0[5] = "3#+xz00:wM._+7E+X";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop success!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID(" stop success!");
      boolean boolean0 = true;
      spider1.setSpawnUrl(true);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "5?>!+}/s|,v?";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5?>!+}/s|,v?");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("cxqAL7O7QH[");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Page page0 = new Page();
      ResultItems resultItems0 = page0.getResultItems();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-101);
      byteArray0[8] = (byte)116;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ResultItems resultItems1 = resultItems0.put("", byteArrayInputStream0);
      Request request0 = new Request();
      Request request1 = request0.addHeader((String) null, "cxqAL7O7QH[");
      ResultItems resultItems2 = resultItems1.setRequest(request1);
      ResultItems resultItems3 = resultItems2.setSkip(true);
      consolePipeline0.process(resultItems3, spider0);
      Spider spider1 = spider0.pipeline(consolePipeline0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request("Ys");
      spider0.getThreadAlive();
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.clearPipeline();
      spider1.start();
      assertEquals(Spider.Status.Init, spider1.getStatus());
      
      Spider spider2 = Spider.create(simplePageProcessor0);
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Bh/RE");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Bh/RE", "");
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(871);
      Spider spider1 = spider0.thread(871);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request("Bh/RE");
      requestArray0[0] = request0;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Spider.Status.fromValue(31);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("zE}8FS)j");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setSpawnUrl(true);
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(">L2WQrT");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      spider0.startRequest(list0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(">L2WQrT");
      spider0.scheduler(fileCacheQueueScheduler0);
      Spider.create(simplePageProcessor0);
      int int0 = (-2975);
      int int1 = (-1937);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">L2WQrT";
      stringArray0[1] = ">L2WQrT";
      stringArray0[2] = ">L2WQrT";
      stringArray0[3] = ">L2WQrT";
      stringArray0[4] = ">L2WQrT";
      stringArray0[5] = ">L2WQrT";
      stringArray0[6] = ">L2WQrT";
      stringArray0[7] = ">L2WQrT";
      stringArray0[8] = ">L2WQrT";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("4>6e[?kV%m");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("4>6e[?kV%m");
      ForkJoinTask.getPool();
      Spider spider2 = spider1.thread((ExecutorService) null, 17);
      Spider spider3 = spider2.setExitWhenComplete(false);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider4 = spider3.addPipeline(collectorPipeline0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>(set0);
      // Undeclared exception!
      try { 
        spider4.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = false;
      Spider spider1 = spider0.setSpawnUrl(false);
      Json json0 = new Json((String) null);
      Class<Request> class0 = Request.class;
      json0.toList(class0);
      Spider spider2 = spider1.startRequest((List<Request>) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider1.pipeline(resultItemsCollectorPipeline0);
      spider2.setSpawnUrl(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider2.startUrls(linkedList0);
      spider1.getPageCount();
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Bh/RE");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Bh/RE", "");
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(871);
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 200);
      Spider spider2 = spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider2.test(stringArray0);
      spider2.run();
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = spider2.getAll((Collection<String>) set0);
      List<String> list1 = spider1.getAll((Collection<String>) list0);
      spider0.startUrls(list1);
      spider0.addPipeline(collectorPipeline0);
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.destroyWhenExit = false;
      Request request0 = new Request("Ys");
      Logger logger0 = (Logger)spider0.logger;
      spider0.logger = (org.slf4j.Logger) logger0;
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.pipeline(resultItemsCollectorPipeline0);
      boolean boolean0 = spider1.isSpawnUrl();
      assertTrue(boolean0);
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "HSMp");
      spider0.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.startRequest(linkedList0);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("", "");
      spider1.setDownloader(phantomJSDownloader1);
      spider0.run();
      spider1.getCollectorPipeline();
      spider1.getThreadAlive();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "HSMp");
      Spider spider2 = spider0.setDownloader(phantomJSDownloader0);
      spider0.runAsync();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider3 = spider1.startRequest(linkedList0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      spider0.setExitWhenComplete(false);
      spider2.getSpiderListeners();
      spider1.setSpiderListeners((List<SpiderListener>) null);
      String string0 = null;
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("HSMp", (String) null);
      spider3.pipeline((Pipeline) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Spider.Status.fromValue(18);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("zE}8FS)j");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      Page page1 = page0.setSkip(true);
      Json json0 = page0.getJson();
      Page page2 = page1.setSkip(true);
      page2.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("XPath can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).", "us.codecraft.webmagic.selector.AbstractSelectable");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider.Status.fromValue(3);
      spider1.getStatus();
      // Undeclared exception!
      try { 
        spider2.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) null, (-1703));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0aG/4v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", (String) null);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(871);
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 3);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      spider2.test(stringArray0);
      Spider.Status spider_Status0 = spider1.getStatus();
      assertEquals(Spider.Status.Init, spider_Status0);
      
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
      
      spider1.getThreadAlive();
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.fromValue(31);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`,}h>\"");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.thread(31);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider0.getScheduler();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("HSMp");
      Spider spider2 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "");
      Spider spider3 = spider1.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider4 = spider2.startRequest(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      spider0.setSpawnUrl(false);
      spider3.extractAndAddRequests((Page) null, false);
      Spider spider5 = spider4.startRequest(linkedList0);
      spider5.getCollectorPipeline();
      spider3.start();
      spider3.start();
      assertEquals(Spider.Status.Running, spider3.getStatus());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("8>V#}fP6");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("8>V#}fP6");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider2 = spider1.pipeline(filePipeline0);
      Spider spider3 = spider1.clearPipeline();
      Spider spider4 = spider1.scheduler(fileCacheQueueScheduler0);
      spider4.setSpawnUrl(true);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider5 = spider2.startUrls(linkedList0);
      spider0.getPageCount();
      spider3.clearPipeline();
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      Spider spider6 = spider5.startRequest(linkedList1);
      // Undeclared exception!
      try { 
        spider6.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0aG/4v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      spider0.getSpiderListeners();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("#;nh)uz0aG/4v|`h", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("HSMp");
      Spider spider2 = spider0.clearPipeline();
      String string0 = "";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "");
      spider1.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider2.startRequest(linkedList0);
      Locale locale0 = Locale.US;
      locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        spider2.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "");
      Spider spider2 = spider0.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider3 = spider1.startRequest(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      spider2.startUrls(linkedList1);
      Spider spider4 = spider0.setSpawnUrl(false);
      spider2.extractAndAddRequests((Page) null, false);
      Spider spider5 = spider3.startRequest(linkedList0);
      spider5.getCollectorPipeline();
      List<Pipeline> list0 = spider2.getAll((Collection<String>) linkedList1);
      spider4.setPipelines(list0);
      spider1.startUrls(linkedList1);
      Spider spider6 = spider5.setDownloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider6.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("q?N$", "Ys");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.startRequest(linkedList0);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("q?N$", "q?N$");
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "write file error";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("write file error");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("HSMp");
      assertTrue(spider1.isSpawnUrl());
      
      spider0.setSpawnUrl(false);
      Spider spider2 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "");
      Spider spider3 = spider1.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider4 = spider2.startRequest(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      spider3.startUrls(linkedList1);
      spider0.setSpawnUrl(false);
      spider3.extractAndAddRequests((Page) null, false);
      Spider spider5 = spider4.startRequest(linkedList0);
      spider5.getCollectorPipeline();
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(79, 79, 0L, timeUnit0, linkedBlockingDeque0);
      spider4.setExecutorService(threadPoolExecutor0);
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request("Ys");
      spider0.getSite();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Spider.Status.fromValue(32);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`,}h>\"");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      Spider spider2 = spider0.thread(32);
      spider0.clearPipeline();
      Spider spider3 = spider1.setExecutorService((ExecutorService) null);
      spider3.thread(17);
      spider2.thread(2);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("uu%S+2zT+'AWY?UH|}m", "p~?yS$ 8Tj*(=t%TzS8");
      spider2.downloader(phantomJSDownloader0);
      spider1.clearPipeline();
      // Undeclared exception!
      try { 
        spider0.get(":");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("LP>wR");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.get("LP>wR");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0aG/4v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      spider1.clearPipeline();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("#;nh)uz0aG/4v|`h", "#;nh)uz0aG/4v|`h");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // #;nh)uz0aG/4v|`h
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Ys");
      spider0.setScheduler(fileCacheQueueScheduler0);
      Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[3];
      Request request0 = new Request();
      requestArray0[0] = request0;
      Request request1 = request0.setPriority(0L);
      requestArray0[1] = request1;
      Request request2 = new Request("T257~TjG{%SyuP");
      Request request3 = request2.setMethod("_cycle_tried_times");
      requestArray0[2] = request3;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(833);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ys";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Spider.Status.fromValue(29);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`,}h>\"");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      spider0.thread(29);
      spider1.getThreadAlive();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      String[] stringArray0 = new String[0];
      spider1.addUrl(stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "`,}h>\"";
      // Undeclared exception!
      try { 
        spider0.test(stringArray1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0yG/4v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("#;nh)uz0yG/4v|`h");
      Spider spider1 = spider0.setExitWhenComplete(true);
      spider1.scheduler = (Scheduler) fileCacheQueueScheduler0;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider0.startUrls(linkedList0);
      spider0.getPageCount();
      spider0.clearPipeline();
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Spider.Status.fromValue(18);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("bE}JFS)j");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop fail!", "");
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      String string0 = "];I!w4M/Hc7j\\u~";
      Page page0 = Page.fail();
      page0.setHtml((Html) null);
      page0.setSkip(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = "pHCH{(0v/";
      stringArray0[2] = " stop fail!";
      stringArray0[3] = "";
      stringArray0[4] = "bE}JFS)j";
      stringArray0[5] = "bE}JFS)j";
      stringArray0[6] = string0;
      stringArray0[7] = " stop fail!";
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      FilePipeline filePipeline0 = new FilePipeline(string0);
      Spider spider3 = spider2.addPipeline(filePipeline0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(18, 1829, 1829, timeUnit0, linkedBlockingDeque0, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      Spider spider4 = spider3.setExecutorService(threadPoolExecutor0);
      Spider spider5 = spider4.setUUID("iok5MwC;,V9:_");
      spider5.setSpiderListeners((List<SpiderListener>) null);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.fromValue(18);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("zE}8FS)j");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("zE}8FS)j", "set_");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.startRequest(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      spider1.startUrls(linkedList1);
      Spider spider3 = spider0.setSpawnUrl(true);
      spider2.extractAndAddRequests((Page) null, false);
      spider1.getCollectorPipeline();
      Spider spider4 = spider3.setScheduler((Scheduler) null);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.sleep((-2825));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isExitWhenComplete();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      
      // Undeclared exception!
      try { 
        spider0.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor1);
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
      
      spider0.isExitWhenComplete();
      Spider spider1 = spider0.downloader((Downloader) null);
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Spider.Status.fromValue(18);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".]Si;c.\"q9EY(");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor(".]Si;c.\"q9EY(");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      Page page1 = page0.setSkip(true);
      page1.getJson();
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("3#+xz00:wM._+7E+X", "");
      spider1.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider.Status spider_Status0 = Spider.Status.fromValue(3);
      Spider.Status spider_Status1 = spider0.getStatus();
      assertSame(spider_Status1, spider_Status0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0aG/4v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("#;nh)uz0aG/4v|`h");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      spider0.addPipeline((Pipeline) null);
      spider0.pipeline((Pipeline) null);
      Spider spider1 = spider0.clearPipeline();
      long long0 = spider1.getPageCount();
      assertEquals(0L, long0);
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 29;
      String string0 = "`,}h>\"";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`,}h>\"");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.startRequest(linkedList0);
      Request request0 = new Request("`,}h>\"");
      String string1 = "aKJiiB&uP3n2|+zz||";
      // Undeclared exception!
      try { 
        spider0.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0aG/4v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0aG/4v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      spider1.getSite();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0aG/4v|`h");
      Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider0 = Spider.create(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider0.pipeline(resultItemsCollectorPipeline0);
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0aG/4v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      Spider spider1 = spider0.setSpawnUrl(true);
      spider1.sleep(39);
      Spider spider2 = spider1.thread(39);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "HSMp";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "HSMp");
      spider0.setDownloader(phantomJSDownloader0);
      spider0.runAsync();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      spider1.startRequest(linkedList1);
      ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) null, (-281));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Spider.Status.fromValue(29);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`,}h>\"");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider1 = spider0.scheduler(queueScheduler0);
      spider0.thread(29);
      Spider spider2 = spider0.setScheduler(queueScheduler0);
      Spider spider3 = spider1.setExecutorService((ExecutorService) null);
      spider0.getPageCount();
      spider3.exitWhenComplete = false;
      Spider spider4 = spider2.thread((ExecutorService) null, 2);
      spider3.clearPipeline();
      // Undeclared exception!
      try { 
        spider4.get("`,}h>\"");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Spider.Status.fromValue((-1015));
      String string0 = "us.codecraft.webmagic.Spider$Status";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<Pipeline> list0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(list0);
      spider1.getPageCount();
      String string1 = "//title";
      Spider spider2 = spider1.setUUID("//title");
      spider2.startRequest((List<Request>) null);
      spider1.getCollectorPipeline();
      // Undeclared exception!
      try { 
        Charset.forName("//title");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // //title
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("HSMp");
      spider1.checkIfRunning();
      spider1.exitWhenComplete = false;
      Page page0 = Page.fail();
      page0.setSkip(false);
      Spider spider2 = spider1.clearPipeline();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider2.pipeline(resultItemsCollectorPipeline0);
      spider0.checkIfRunning();
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Json json0 = new Json(list0);
      Class<Pipeline> class0 = Pipeline.class;
      json0.toList(class0);
      spider2.setPipelines((List<Pipeline>) null);
      spider0.checkIfRunning();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Spider.Status.fromValue((-2213));
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QyfxbA4;zP@r'8hP");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("QyfxbA4;zP@r'8hP");
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider2 = spider1.addPipeline(consolePipeline0);
      Spider spider3 = spider2.setSpawnUrl(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "QyfxbA4;zP@r'8hP";
      stringArray0[1] = "QyfxbA4;zP@r'8hP";
      stringArray0[2] = "QyfxbA4;zP@r'8hP";
      stringArray0[3] = "QyfxbA4;zP@r'8hP";
      stringArray0[4] = "QyfxbA4;zP@r'8hP";
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0aG/4v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setPipelines((List<Pipeline>) null);
      Spider spider2 = spider1.clearPipeline();
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0aG/4v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "HSMp");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      List<Request> list1 = spider0.getAll((Collection<String>) list0);
      spider0.startRequest(list1);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("HSMp", "HSMp");
      Spider spider3 = spider0.setDownloader(phantomJSDownloader0);
      spider2.run();
      spider3.getCollectorPipeline();
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setEmptySleepTime(801);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(795);
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request("Ys");
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;n h3uz0aG/v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      Spider spider2 = spider1.thread(3271);
      Spider spider3 = spider2.setScheduler(queueScheduler0);
      Spider spider4 = spider3.setExecutorService((ExecutorService) null);
      // Undeclared exception!
      try { 
        spider4.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_plus");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("zE}8FS)j");
      Spider spider0 = new Spider(simplePageProcessor1);
      Page page0 = new Page();
      page0.getJson();
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      spider0.getSpiderListeners();
      spider0.setSpiderListeners((List<SpiderListener>) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "eXdRm!fMu";
      stringArray0[1] = "_plus";
      stringArray0[2] = "page status code error, page {} , code: {}";
      stringArray0[3] = "_plus";
      stringArray0[4] = "#;n h3uz0aG/v|`h";
      stringArray0[5] = "#;n h3uz0aG/v|`h";
      stringArray0[6] = "#;n h3uz0aG/v|`h";
      stringArray0[8] = "#;n h3uz0aG/v|`h";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.monitor.SpiderMonitor");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(927);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider0.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Bh/RE");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Bh/RE", "");
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 182);
      Spider spider2 = spider0.setDownloader(phantomJSDownloader0);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("", "Bh/RE");
      Spider spider3 = spider1.setDownloader(phantomJSDownloader0);
      spider2.run();
      spider2.getCollectorPipeline();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider4 = spider2.setSpiderListeners(linkedList0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      List<SpiderListener> list0 = spider4.getAll((Collection<String>) linkedTransferQueue0);
      spider3.setSpiderListeners(list0);
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(182);
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("S:M 8XZS");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.setSpawnUrl(false);
      Spider spider3 = spider2.clearPipeline();
      Spider spider4 = spider3.setPipelines((List<Pipeline>) null);
      // Undeclared exception!
      try { 
        spider4.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(">^aIsPP1B!_");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request("@-17@Vy`C${uZ");
      spider0.spawnUrl = true;
      Page page0 = new Page();
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      spider0.getSpiderListeners();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("page status code error, page {} , code: {}", "_cycle_tried_times");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider1.test(stringArray0);
      spider1.getPageCount();
      spider1.run();
      spider1.getCollectorPipeline();
      spider1.isExitWhenComplete();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Spider spider0 = null;
      try {
        spider0 = new Spider((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("HSMp");
      Spider spider2 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "");
      Spider spider3 = spider1.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider4 = spider2.startRequest(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      spider3.startUrls(linkedList1);
      Spider spider5 = spider0.setSpawnUrl(false);
      spider3.extractAndAddRequests((Page) null, false);
      Spider spider6 = spider4.startRequest(linkedList0);
      spider6.getCollectorPipeline();
      List<Pipeline> list0 = spider3.getAll((Collection<String>) linkedList1);
      spider5.setPipelines(list0);
      spider2.startUrls(linkedList1);
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page.fail();
      // Undeclared exception!
      try { 
        spider0.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Spider.Status.fromValue(18);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("bE}JFS)j");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop fail!", "");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.startRequests = (List<Request>) linkedList0;
      Spider spider2 = spider0.thread(18);
      spider0.setSpawnUrl(false);
      spider2.isSpawnUrl();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedList1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Spider.Status.fromValue(18);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".]Si;c.\"q9EY(");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor(".]Si;c.\"q9EY(");
      Spider spider0 = new Spider(simplePageProcessor1);
      Spider spider1 = spider0.setSpawnUrl(false);
      Locale locale0 = Locale.FRENCH;
      locale0.getUnicodeLocaleKeys();
      Spider spider2 = spider0.thread(1846);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(".]Si;c.\"q9EY(");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      HashSetDuplicateRemover hashSetDuplicateRemover1 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover1);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider3 = spider2.thread((ExecutorService) forkJoinPool0, 1846);
      hashSetDuplicateRemover1.resetDuplicateCheck(spider3);
      Spider spider4 = spider1.setScheduler(duplicateRemovedScheduler0);
      // Undeclared exception!
      try { 
        spider4.sleep((-1717));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0aG/4v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      long long0 = spider0.getPageCount();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("cxqAL7O7QH[");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Page page0 = new Page();
      ResultItems resultItems0 = page0.getResultItems();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-101);
      byteArray0[8] = (byte)116;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      resultItems0.put("", byteArrayInputStream0);
      Request request0 = new Request();
      Request request1 = request0.addHeader((String) null, "cxqAL7O7QH[");
      ResultItems resultItems1 = resultItems0.setRequest(request1);
      resultItems1.setSkip(true);
      consolePipeline0.process(resultItems0, spider0);
      spider0.pipeline(consolePipeline0);
      Spider spider1 = spider0.setPipelines((List<Pipeline>) null);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$VALUES");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      assertTrue(spider1.isSpawnUrl());
      
      Spider spider2 = spider1.setSpawnUrl(false);
      spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("O#:nvI%pV-BJ}", "|E");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider4 = spider1.startRequest(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      spider3.startUrls(linkedList1);
      spider2.setSpawnUrl(false);
      spider4.extractAndAddRequests((Page) null, false);
      spider2.getCollectorPipeline();
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("?HSMp");
      Spider.Status spider_Status0 = Spider.Status.Init;
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("(?is)<style.*?>.*?</style>");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider0.getStartTime();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`,}h>\"");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      spider0.setSpiderListeners((List<SpiderListener>) null);
      Spider spider1 = spider0.setUUID("`,}h>\"");
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = ", extras=";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", extras=");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(", extras=");
      spider0.setScheduler(fileCacheQueueScheduler0);
      int int0 = 223;
      long long0 = 0L;
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      spider1.pageProcessor = (PageProcessor) simplePageProcessor0;
      int int0 = (-608);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-608));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(">^aIsPP1B!_");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request("@-17@Vy`C${uZ");
      spider0.spawnUrl = true;
      Page page0 = new Page();
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      spider0.getSpiderListeners();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("page status code error, page {} , code: {}", "_cycle_tried_times");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider1.test(stringArray0);
      spider1.getPageCount();
      assertEquals(Spider.Status.Init, spider1.getStatus());
      
      spider1.run();
      spider1.getStatus();
      long long0 = spider1.getPageCount();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0aG/4v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      spider0.getSpiderListeners();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", (String) null);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(871);
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 3);
      spider1.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "page status code error, page {} , code: {}";
      stringArray0[1] = "#;nh)uz0aG/4v|`h";
      stringArray0[2] = "";
      stringArray0[3] = "page status code error, page {} , code: {}";
      stringArray0[4] = "";
      stringArray0[5] = "page status code error, page {} , code: {}";
      stringArray0[6] = "";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0aG/4v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#;nh)uz0aG/4v|`h";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "HSMp");
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "HSMp";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "HSMp");
      spider0.setDownloader(phantomJSDownloader0);
      spider0.runAsync();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      // Undeclared exception!
      try { 
        spider2.thread((-3443));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("*)3z!,j");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      int int0 = 936;
      Spider spider2 = spider1.thread(936);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider2.scheduler(duplicateRemovedScheduler0);
      Request[] requestArray0 = new Request[9];
      Request request0 = new Request();
      Request request1 = request0.putExtra((String) null, (Object) null);
      Request request2 = request1.addHeader("!4", "_cycle_tried_times");
      requestArray0[0] = request2;
      Request request3 = request1.setPriority(936);
      requestArray0[1] = request3;
      String string0 = "=]";
      Request request4 = request0.addHeader("=]", "");
      requestArray0[2] = request4;
      Request request5 = request0.setCharset("");
      requestArray0[3] = request5;
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider1);
      requestArray0[4] = null;
      Request request6 = request0.setUrl("_cycle_tried_times");
      requestArray0[5] = request6;
      Request request7 = new Request();
      requestArray0[6] = request7;
      Request request8 = request0.putExtra("(?is)<!--.*?-->", priorityScheduler0);
      requestArray0[7] = request8;
      Request request9 = request0.addCookie("_cycle_tried_times", "duxNe)*");
      requestArray0[8] = request9;
      // Undeclared exception!
      try { 
        spider2.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("cxqAL7O7QH[");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Page page0 = new Page();
      page0.getResultItems();
      Request request0 = new Request();
      Class<SpiderListener> class0 = SpiderListener.class;
      Json json0 = page0.getJson();
      json0.toList(class0);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      spider1.extractAndAddRequests(page0, false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "_cycle_tried_times");
      Spider spider2 = spider0.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider.Status spider_Status0 = Spider.Status.fromValue((-1));
      Spider.Status spider_Status1 = spider2.getStatus();
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider_Status1, spider_Status0);
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      spider1.pipelines = null;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "HSMp");
      spider0.setDownloader(phantomJSDownloader0);
      spider1.getUUID();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.startRequest(linkedList0);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("HSMp", "i+");
      spider0.setDownloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider1.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Spider.Status.fromValue(18);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop fail!", "");
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      ForkJoinTask.getPool();
      Request[] requestArray0 = new Request[0];
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("rn_DYrFLb@mC:3Jt");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.startRequest(linkedList0);
      Spider spider3 = spider2.setExecutorService((ExecutorService) null);
      Spider spider4 = spider3.setUUID("#\"t9w.H");
      Spider spider5 = spider4.addPipeline((Pipeline) null);
      spider5.getStartTime();
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0aG/4v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Logger logger0 = (Logger)spider0.logger;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("#;nh)uz0aG/4v|`h", "");
      Spider spider1 = spider0.setDownloader((Downloader) null);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.startRequest(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Spider spider2 = spider0.startUrls(linkedList1);
      Spider spider3 = spider1.setSpawnUrl(false);
      Spider spider4 = spider2.setExitWhenComplete(true);
      spider4.startRequest(linkedList0);
      ForkJoinTask.getPool();
      spider3.setExecutorService((ExecutorService) null);
      LinkedList<Pipeline> linkedList2 = new LinkedList<Pipeline>();
      // Undeclared exception!
      try { 
        spider4.getAll((Collection<String>) linkedList1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Spider.Status.fromValue(31);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("zE}8FS)j");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      spider0.setSpiderListeners((List<SpiderListener>) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "zE}8FS)j";
      stringArray0[1] = "page status code error, page {} , code: {}";
      stringArray0[2] = "zE}8FS)j";
      stringArray0[3] = "zE}8FS)j";
      stringArray0[4] = "zE}8FS)j";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "HSMp");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Request request0 = new Request();
      Request request1 = request0.addHeader("HSMp", "M");
      Request request2 = request1.setExtras((Map<String, Object>) null);
      Request request3 = request2.putExtra("_cycle_tried_times", "M");
      Request request4 = request3.setMethod("HSMp");
      linkedList0.add(request4);
      spider0.startRequest(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        spider1.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Spider.Status.fromValue(18);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("zE}8FS)j");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      Locale locale0 = Locale.FRENCH;
      locale0.getUnicodeLocaleKeys();
      Spider spider2 = spider1.thread(18);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("zE}8FS)j");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider3 = spider0.setScheduler(duplicateRemovedScheduler0);
      spider3.sleep(30000);
      spider2.setExecutorService((ExecutorService) null);
      // Undeclared exception!
      try { 
        spider0.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request("waitNewUrl - interrupted, error {}");
      Page page0 = new Page();
      page0.toString();
      page0.getJson();
      spider0.getSpiderListeners();
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(", json=", "waitNewUrl - interrupted, error {}");
      Spider spider1 = spider0.addPipeline((Pipeline) null);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("cxqAL7O7QH[");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Page page0 = new Page();
      ResultItems resultItems0 = page0.getResultItems();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-121);
      byteArray0[8] = (byte) (-1);
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-101);
      byteArray0[8] = (byte)116;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ResultItems resultItems1 = resultItems0.put("", byteArrayInputStream0);
      Request request0 = new Request();
      Request request1 = request0.addHeader((String) null, "cxqAL7O7QH[");
      ResultItems resultItems2 = resultItems1.setRequest(request1);
      ResultItems resultItems3 = resultItems2.setSkip(true);
      consolePipeline0.process(resultItems3, spider0);
      Spider spider1 = spider0.pipeline(consolePipeline0);
      spider1.setEmptySleepTime((byte)109);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0aG/4v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getCollectorPipeline();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Bh/RE");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Bh/RE", "");
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(871);
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 200);
      Spider spider2 = spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider2.test(stringArray0);
      Spider.Status spider_Status0 = spider1.getStatus();
      assertEquals(Spider.Status.Init, spider_Status0);
      
      long long0 = spider1.getPageCount();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("S:M 8XZS");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.setSpawnUrl(false);
      Spider spider3 = spider2.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("O#:nvI%pV-BJ}", "S:M 8XZS");
      spider0.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider4 = spider3.startRequest(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      spider2.startUrls(linkedList1);
      spider3.setSpawnUrl(false);
      spider4.extractAndAddRequests((Page) null, false);
      spider2.getCollectorPipeline();
      assertFalse(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "HSMp");
      Request[] requestArray0 = new Request[1];
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(">^aIsPP1B!_");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request("@-17@Vy`C${uZ");
      Page page0 = new Page();
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("page status code error, page {} , code: {}", "_cycle_tried_times");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider1.test(stringArray0);
      long long0 = spider1.getPageCount();
      assertEquals(0L, long0);
      
      spider0.getStartTime();
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5{;*hp]CY~H<");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Page page0 = new Page();
      ResultItems resultItems0 = page0.getResultItems();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ResultItems resultItems1 = resultItems0.put("5{;*hp]CY~H<", byteArrayInputStream0);
      Request request0 = new Request();
      Request request1 = request0.addHeader("#;n h3uz0aG/v|`h", "waitNewUrl - interrupted, error {}");
      resultItems1.setRequest(request1);
      ResultItems resultItems2 = resultItems0.setSkip(true);
      ConsolePipeline consolePipeline1 = new ConsolePipeline();
      consolePipeline1.process(resultItems2, spider0);
      spider0.pipeline(consolePipeline0);
      Spider.Status spider_Status0 = Spider.Status.fromValue((-2111));
      assertEquals(Spider.Status.Init, spider_Status0);
      
      long long0 = spider0.getPageCount();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "allText";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("allText");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      System.setCurrentTimeMillis((-755L));
      String string0 = ",x/%cv&dE(G!h+$*";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",x/%cv&dE(G!h+$*");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setSpawnUrl(false);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider0);
      // Undeclared exception!
      try { 
        spider0.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "HSMp");
      Spider spider2 = spider0.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.startRequest(linkedList0);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("HSMp", "i+");
      spider2.setUUID("HSMp");
      spider1.run();
      spider1.getCollectorPipeline();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getUUID();
      spider0.getThreadAlive();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Ys");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      spider1.sleep(0);
      spider1.clearPipeline();
      // Undeclared exception!
      try { 
        spider1.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getThreadAlive();
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertFalse(resultItemsCollectorPipeline0.equals((Object)collectorPipeline0));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("4>6e[?kV%m");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("4>6e[?kV%m");
      ForkJoinTask.getPool();
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      spider2.setExecutorService((ExecutorService) null);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider3 = Spider.create(simplePageProcessor0);
      spider3.setPipelines(linkedList0);
      spider3.setPipelines(linkedList0);
      spider3.setEmptySleepTime(0);
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0aG/4v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread((ExecutorService) null, 2);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.startRequest(linkedList0);
      Spider spider2 = spider1.clearPipeline();
      // Undeclared exception!
      try { 
        spider2.get("#;nh)uz0aG/4v|`h");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "HSMp");
      spider0.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.startRequest(linkedList0);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("HSMp", "i+");
      spider0.setDownloader(phantomJSDownloader0);
      spider1.run();
      spider1.getCollectorPipeline();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Bh/RE");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Bh/RE", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.run();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-1760));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(1466);
      FilePipeline filePipeline0 = new FilePipeline("");
      Spider spider2 = spider1.addPipeline(filePipeline0);
      spider2.pipeline(filePipeline0);
      String string0 = null;
      String string1 = " RH%OR5amazP";
      // Undeclared exception!
      try { 
        spider2.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uzaG/4v|`S");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.model.HttpRequestBody", "us.codecraft.webmagic.model.HttpRequestBody");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider.Status spider_Status0 = spider0.getStatus();
      assertEquals(Spider.Status.Init, spider_Status0);
      
      spider1.getPageCount();
      spider0.run();
      spider1.getCollectorPipeline();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Bh/RE");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Bh/RE", "");
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(871);
      spider0.thread(871);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider1.test(stringArray0);
      spider0.run();
      spider1.clearPipeline();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request("Ys");
      spider0.getThreadAlive();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        spider0.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string0 = spider0.getUUID();
      assertNull(string0);
      
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Ys");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      spider1.sleep(0);
      spider0.site = null;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", ", resultItems=");
      spider1.setDownloader(phantomJSDownloader0);
      String string1 = spider0.getUUID();
      assertNotNull(string1);
      
      spider1.clearPipeline();
      spider1.initComponent();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("56T");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("z`w|=U*kl4r$UzPKi");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      Spider spider2 = spider1.setExitWhenComplete(true);
      Spider spider3 = spider2.setUUID((String) null);
      Spider spider4 = spider3.setSpawnUrl(true);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider5 = spider4.scheduler(priorityScheduler0);
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("4>6e[?kV%m");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("4>6e[?kV%m");
      ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0aG/4v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      spider0.getSpiderListeners();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("VuZ,~FQlZX");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider0.scheduler(duplicateRemovedScheduler0);
      Request request0 = new Request("VuZ,~FQlZX");
      Request request1 = request0.addHeader("#;nh)uz0aG/4v|`h", (String) null);
      Request request2 = request1.setBinaryContent(true);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request3 = request2.setExtras(hashMap0);
      Request request4 = request3.addCookie("#;nh)uz0aG/4v|`h", "_cycle_tried_times");
      // Undeclared exception!
      try { 
        spider0.onSuccess(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("4>6e[?kV%m");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Locale locale0 = Locale.FRENCH;
      locale0.getUnicodeLocaleKeys();
      Spider spider2 = spider1.thread(30000);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("4>6e[?kV%m");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider3 = spider2.setScheduler(duplicateRemovedScheduler0);
      spider3.sleep(30000);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      MockThread.getDefaultUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(30000, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, true);
      spider2.setExecutorService(forkJoinPool0);
      // Undeclared exception!
      try { 
        spider1.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("|W*,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.setScheduler(priorityScheduler0);
      assertTrue(spider2.isSpawnUrl());
      
      Spider spider3 = spider2.setSpawnUrl(false);
      Spider spider4 = spider3.setSpiderListeners((List<SpiderListener>) null);
      String[] stringArray0 = new String[0];
      Spider spider5 = spider4.addUrl(stringArray0);
      spider5.getSite();
      assertFalse(spider2.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "HSMp");
      spider0.setDownloader(phantomJSDownloader0);
      spider1.stop();
      FilePipeline filePipeline0 = new FilePipeline("HSMp");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider1.pipeline(resultItemsCollectorPipeline0);
      Request request0 = new Request();
      ResultItems resultItems0 = new ResultItems();
      Map<String, Object> map0 = resultItems0.getAll();
      Request request1 = request0.setExtras(map0);
      Request request2 = request1.setPriority(3225L);
      Request request3 = request2.setUrl(":`t/Z");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Request request4 = request3.putExtra("_cycle_tried_times", pipedOutputStream0);
      // Undeclared exception!
      try { 
        spider1.onError(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("HSMp");
      Spider spider2 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "");
      Spider spider3 = spider1.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider2.startRequest(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      spider3.startUrls(linkedList1);
      spider0.setSpawnUrl(false);
      // Undeclared exception!
      try { 
        spider3.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = new Spider(simplePageProcessor0);
      ForkJoinTask.getPool();
      int int0 = 1;
      spider0.thread((ExecutorService) null, 1);
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      spider2.uuid = "download page {} error";
      spider0.setExecutorService((ExecutorService) null);
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) null, (-281));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "HSMp";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("HSMp");
      spider1.checkIfRunning();
      spider1.exitWhenComplete = false;
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(false);
      List<Request> list0 = page1.getTargetRequests();
      spider0.startRequests = list0;
      Spider spider2 = spider0.downloader((Downloader) null);
      Spider spider3 = spider2.clearPipeline();
      // Undeclared exception!
      try { 
        spider3.get("HSMp");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6;n/)u-0aG/4vXmh");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getPageCount();
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "HSMp");
      Spider spider1 = spider0.setUUID("HSMp");
      spider1.setDownloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider1.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getUUID();
      spider0.thread((ExecutorService) null, 2);
      spider0.clearPipeline();
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("O'd^j,AQh3,Q");
      spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("O'd^j,AQh3,Q", "O'd^j,AQh3,Q");
      Spider spider2 = spider0.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider2.startRequest(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      spider1.startUrls(linkedList1);
      spider0.setSpawnUrl(true);
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(false);
      Page page2 = page1.setRawText((String) null);
      // Undeclared exception!
      try { 
        spider2.extractAndAddRequests(page2, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = false;
      Spider spider1 = spider0.setSpawnUrl(false);
      Json json0 = new Json((String) null);
      Class<Request> class0 = Request.class;
      json0.toList(class0);
      Spider spider2 = spider1.startRequest((List<Request>) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider3 = spider2.setScheduler(duplicateRemovedScheduler0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider4 = spider3.pipeline(resultItemsCollectorPipeline0);
      Spider spider5 = spider4.clearPipeline();
      spider2.setSpawnUrl(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider5.startUrls(linkedList0);
      spider1.getPageCount();
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.setScheduler(queueScheduler0);
      Spider.create(simplePageProcessor0);
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "HSMp");
      Spider spider2 = spider0.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.startRequest(linkedList0);
      spider2.getSpiderListeners();
      String string0 = "";
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("HSMp", "");
      spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[26];
      stringArray0[0] = "";
      stringArray0[1] = "HSMp";
      stringArray0[2] = "HSMp";
      Request request0 = new Request();
      Request request1 = request0.setCharset((String) null);
      Request request2 = request1.setPriority((-1027L));
      Request request3 = request2.addHeader("HSMp", "e!U^");
      Request request4 = request3.setBinaryContent(true);
      // Undeclared exception!
      try { 
        spider2.onError(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("HSMp");
      spider1.checkIfRunning();
      spider1.exitWhenComplete = false;
      spider0.thread(2407);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover((DuplicateRemover) null);
      Spider spider2 = spider0.setScheduler(duplicateRemovedScheduler0);
      spider2.setExecutorService((ExecutorService) null);
      // Undeclared exception!
      try { 
        spider2.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)Xuz0aG/4v|`h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      boolean boolean0 = true;
      Page page0 = null;
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Spider.Status.fromValue(18);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("bE}JFS)j");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop fail!", "");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      ForkJoinTask.getPool();
      Spider spider2 = spider1.thread((ExecutorService) null, 18);
      Request[] requestArray0 = new Request[0];
      Spider spider3 = spider2.addRequest(requestArray0);
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      spider3.setSpiderListeners(linkedList1);
      Spider spider4 = spider0.clearPipeline();
      spider4.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList2 = new LinkedList<Request>();
      Spider spider5 = spider4.setUUID("bE}JFS)j");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      spider2.startUrls(linkedList3);
      spider5.setSpawnUrl(true);
      // Undeclared exception!
      try { 
        spider4.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider1.addPipeline(resultItemsCollectorPipeline0);
      Spider spider3 = spider2.scheduler((Scheduler) null);
      Spider spider4 = spider3.pipeline(resultItemsCollectorPipeline0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        spider4.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#;nh)uz0aG/4v|`h");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = Page.fail();
      spider0.extractAndAddRequests(page0, false);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("HSMp");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Spider spider2 = spider0.setSpawnUrl(false);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider2.pipelines = (List<Pipeline>) linkedList0;
      Spider spider3 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "");
      Spider spider4 = spider1.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      Spider spider5 = spider3.startRequest(linkedList1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      spider4.startUrls(linkedList2);
      spider0.setSpawnUrl(false);
      spider4.runAsync();
      spider4.extractAndAddRequests((Page) null, false);
      //  // Unstable assertion: assertEquals(Spider.Status.Stopped, spider4.getStatus());
      
      Spider spider6 = spider5.startRequest(linkedList1);
      spider6.getCollectorPipeline();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(79, 79, 79, timeUnit0, linkedBlockingDeque0);
      // Undeclared exception!
      try { 
        spider5.setExecutorService(threadPoolExecutor0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "Z~\\r<yWr";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Z~\r<yWr");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("4>6e[?kV%m");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setUUID("4>6e[?kV%m");
      ForkJoinTask.getPool();
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      FilePipeline filePipeline0 = new FilePipeline("4>6e[?kV%m");
      linkedList0.offer(filePipeline0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      spider1.setPipelines(linkedList0);
      spider1.setPipelines(linkedList0);
      spider1.setEmptySleepTime(0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.fromValue(31);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`,}h>\"");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      spider0.thread(31);
      Spider spider2 = spider0.setScheduler(queueScheduler0);
      spider1.setExecutorService((ExecutorService) null);
      Spider spider3 = spider2.thread((ExecutorService) null, 2);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider4 = spider3.pipeline(resultItemsCollectorPipeline0);
      spider4.checkIfRunning();
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.destroyWhenExit = false;
      Request request0 = new Request("Ys");
      Page page0 = new Page();
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("3#+xz00:wM._+7E+X", "Ys");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider1.test(stringArray0);
      Spider.Status spider_Status0 = spider1.getStatus();
      assertEquals(Spider.Status.Init, spider_Status0);
      
      long long0 = spider2.getPageCount();
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, long0);
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ys");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      spider0.destroyWhenExit = false;
      Request request0 = new Request("Ys");
      Request request1 = request0.setPriority(0L);
      spider0.getUUID();
      spider0.getThreadAlive();
      requestArray0[0] = request1;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Spider.Status.fromValue(0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("}^wMk`NA11/A9al_:");
      SimplePageProcessor simplePageProcessor1 = null;
      try {
        simplePageProcessor1 = new SimplePageProcessor((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getThreadAlive();
      // Undeclared exception!
      try { 
        spider0.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("@");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.setExitWhenComplete(true);
      Spider spider3 = Spider.create(simplePageProcessor0);
      spider3.setSpawnUrl(true);
      spider2.clearPipeline();
      spider1.setPipelines((List<Pipeline>) null);
      spider0.thread(275);
      // Undeclared exception!
      try { 
        spider0.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HSMp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HSMp", "HSMp");
      Spider spider2 = spider0.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.startRequest(linkedList0);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("", "");
      spider1.setDownloader(phantomJSDownloader1);
      spider0.run();
      spider1.getCollectorPipeline();
      spider2.initComponent();
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }
}
