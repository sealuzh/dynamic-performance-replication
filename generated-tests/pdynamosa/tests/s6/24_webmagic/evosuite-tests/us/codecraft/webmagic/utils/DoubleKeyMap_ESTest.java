/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 14:35:04 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<HashMap<Object, Map<String, Object>>, Map<HashMap<Object, String>, Map<String, Object>>> hashMap0 = new HashMap<HashMap<Object, Map<String, Object>>, Map<HashMap<Object, String>, Map<String, Object>>>();
      HashMap<Object, Map<String, Object>> hashMap1 = new HashMap<Object, Map<String, Object>>();
      HashMap<String, Map<Map<String, Object>, HashMap<Object, String>>> hashMap2 = new HashMap<String, Map<Map<String, Object>, HashMap<Object, String>>>();
      DoubleKeyMap<String, Map<String, Object>, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, Map<String, Object>, HashMap<Object, String>>(hashMap2);
      Map<HashMap<Object, String>, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      hashMap0.put(hashMap1, map0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Map<String, Object>>, HashMap<Object, String>, Map<String, Object>> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Map<String, Object>>, HashMap<Object, String>, Map<String, Object>>(hashMap0, class0);
      Map<HashMap<Object, String>, Map<String, Object>> map1 = doubleKeyMap1.remove(hashMap1);
      assertTrue(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(class0);
      Integer integer0 = new Integer(1368);
      doubleKeyMap0.put(integer0, (Object) class0, "us.codecraft.webmagic.utils.DoubleKeyMap");
      Map<Object, String> map0 = doubleKeyMap0.remove(integer0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(class0);
      Map<String, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(map0, class0);
      Object object0 = new Object();
      Object object1 = doubleKeyMap1.remove((String) null, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<Integer, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Integer, Object>, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.remove(object0, (HashMap<Integer, Object>) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Object, Map<String, HashMap<String, Object>>> hashMap0 = new HashMap<Object, Map<String, HashMap<String, Object>>>();
      DoubleKeyMap<Object, String, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<String, Object>>(hashMap0, class0);
      Map<String, HashMap<String, Object>> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      Object object0 = new Object();
      DoubleKeyMap<Object, HashMap<Object, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, Integer>, Object>(class0);
      Map<HashMap<Object, Integer>, Object> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      Integer integer0 = new Integer(1368);
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(class0);
      String string0 = doubleKeyMap0.put(integer0, "", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, Map<Object, Object>> hashMap0 = new HashMap<Integer, Map<Object, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(hashMap0, class0);
      Integer integer0 = new Integer(378);
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put(integer0, object0, (Object) integer0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Object, Map<String, Object>, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, Object>, HashMap<Object, String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Object, String> hashMap1 = doubleKeyMap0.put((Object) null, (Map<String, Object>) null, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(class0);
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(hashMap0, class0);
      Object object0 = new Object();
      Object object1 = doubleKeyMap1.put((Object) doubleKeyMap0, "", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>(class0);
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      String string0 = doubleKeyMap1.get((Object) class0, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      Integer integer0 = new Integer((-567));
      HashMap<Map<String, Object>, Map<Integer, String>> hashMap0 = new HashMap<Map<String, Object>, Map<Integer, String>>();
      DoubleKeyMap<Map<String, Object>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Map<String, Object>, Integer, String>(hashMap0, class0);
      String string0 = doubleKeyMap0.get((Map<String, Object>) null, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(class0);
      HashMap<Object, Map<Map<Integer, Object>, Integer>> hashMap0 = new HashMap<Object, Map<Map<Integer, Object>, Integer>>();
      DoubleKeyMap<Object, Map<Integer, Object>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Integer, Object>, Integer>(hashMap0);
      Integer integer0 = doubleKeyMap1.get((Object) doubleKeyMap0, (Map<Integer, Object>) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(class0);
      Map<Object, Object> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, HashMap<Object, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Integer, HashMap<Object, String>>((Map<Object, Map<Integer, HashMap<Object, String>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, String, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(class0);
      Map<String, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(map0, class0);
      Object object0 = new Object();
      doubleKeyMap1.put("", (Object) "", object0);
      doubleKeyMap1.remove("", (Object) null);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>();
      doubleKeyMap1.put("f=.2NI+%cuUGo<", "", (Object) doubleKeyMap0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = doubleKeyMap1.put("f=.2NI+%cuUGo<", "f=.2NI+%cuUGo<", (Object) hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Map<String, Object>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Map<String, Object>, Integer, String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = new Integer((-1));
      doubleKeyMap0.put((Map<String, Object>) hashMap0, integer0, "");
      String string0 = doubleKeyMap0.get((Map<String, Object>) hashMap0, integer0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(hashMap0);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map0, class0);
      Map<Object, Object> map1 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map1);
  }
}
