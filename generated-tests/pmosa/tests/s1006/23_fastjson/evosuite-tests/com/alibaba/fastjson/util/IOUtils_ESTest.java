/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 05:55:27 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.Closeable;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.nio.charset.IllegalCharsetNameException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IOUtils.getStringProperty("hly(li");
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)16, (int) (byte) (-128), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -129
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = IOUtils.isIdent('_');
      assertTrue(boolean0);
      
      IOUtils.loadPropertiesFromFile();
      int int0 = IOUtils.stringSize(13);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IOUtils.isIdent('U');
      byte byte0 = (byte)65;
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)65, (int) (byte)65, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      IOUtils.decodeBase64("");
      int int0 = 0;
      IOUtils.stringSize(0);
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      InputStream inputStream0 = null;
      InputStreamReader inputStreamReader0 = null;
      try {
        inputStreamReader0 = new InputStreamReader((InputStream) null, iOUtils0.UTF8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[5];
      byte[] byteArray0 = IOUtils.decodeBase64("", (int) '\u0000', (int) '\u0000');
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = IOUtils.firstIdentifier(')');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IOUtils.isIdent('i');
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder", (-2447), (-2447));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("o,~$hV6YDu", 2475, (-659));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('p');
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("fastjson.compatibleWithJavaBean");
      String string0 = IOUtils.readAll(stringReader0);
      assertEquals("fastjson.compatibleWithJavaBean", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[5];
      byte[] byteArray0 = IOUtils.decodeBase64("", (int) '\u0000', (int) '\u0000');
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = IOUtils.firstIdentifier('T');
      assertTrue(boolean0);
      
      int int0 = IOUtils.stringSize((-1242L));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "<1P6g7T";
      StringReader stringReader0 = new StringReader("<1P6g7T");
      IOUtils.readAll(stringReader0);
      stringReader0.markSupported();
      stringReader0.reset();
      IOUtils.stringSize((-2152L));
      IOUtils.close(stringReader0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        uTF8Decoder0.replaceWith("fastjson.properties");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Replacement too long
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOUtils.close(pipedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      int int0 = 2746;
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = 'c';
      charArray0[2] = '@';
      // Undeclared exception!
      try { 
        IOUtils.getChars(2746, 2746, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2745
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOUtils.isIdent('g');
      IOUtils.stringSize(0);
      byte[] byteArray0 = IOUtils.decodeBase64("");
      IOUtils.stringSize((long) 1);
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      charArray0[4] = 'g';
      charArray0[5] = 'g';
      int int0 = (-705);
      IOUtils.encodeUTF8(charArray0, 1, (-705), byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.getChars(0L, 0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.encodeUTF8(iOUtils0.ASCII_CHARS, 0, 0, iOUtils0.specicalFlags_singleQuotes);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-2051));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IOUtils.decodeBase64(" p");
      String string0 = IOUtils.FASTJSON_PROPERTIES;
      assertEquals("fastjson.properties", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IOUtils.decodeBase64("fastjson.compatibleWithFieldName");
      long long0 = (-1L);
      int int0 = 2299;
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      char char0 = 'd';
      charArray0[1] = 'd';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-1L), 2299, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2298
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.decodeBase64("UTF-8");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IOUtils.isValidJsonpQueryParam("-QT(0bt+$p");
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("+KYBu&.wTjAqz");
      assertFalse(boolean0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("+KYBu&.wTjAqz");
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = 'L';
      charArray0[2] = 'O';
      charArray0[3] = '<';
      charArray0[4] = '/';
      charArray0[5] = '*';
      charArray0[6] = '%';
      charArray0[7] = 'G';
      int int0 = IOUtils.encodeUTF8(charArray0, 0, 0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte) (-90), (byte)1, (byte) (-1), (byte) (-1), (byte) (-16), (byte)78, (byte)48, (byte)42}, byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IOUtils.isIdent('}');
      IOUtils.stringSize(0);
      IOUtils.firstIdentifier(' ');
      String string0 = null;
      URI uRI0 = MockURI.URI((String) null, (String) null, (String) null, (String) null, (String) null);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IOUtils.firstIdentifier('^');
      String string0 = "";
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("", (-659), 255);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.decodeBase64(iOUtils0.DIGITS, 5, 5);
      IOUtils.getChars(5, 5, iOUtils0.ASCII_CHARS);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("fastjson.compatibleWithFieldName", 2460, 712);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.encodeUTF8(iOUtils0.ASCII_CHARS, 0, 0, iOUtils0.specicalFlags_singleQuotes);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = uTF8Decoder0.malformedInputAction();
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("");
      CharBuffer charBuffer0 = iOUtils0.UTF8.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = iOUtils0.UTF8.encode(charBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer1, charBuffer0);
      IOUtils.stringSize((-972));
      IOUtils.stringSize((-2723L));
      IOUtils.isIdent('q');
      IOUtils.stringSize((-2560));
      IOUtils.getChars(0, 1, iOUtils0.replaceChars);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils.firstIdentifier('Y');
      int int0 = 104;
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64((char[]) null, 104, 104);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.decodeUTF8(iOUtils0.specicalFlags_singleQuotes, 1, (-2374), iOUtils0.DIGITS);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte byte0 = (byte)58;
      IOUtils.getChars((byte)58, (int) (byte)58, iOUtils0.CA);
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = '7';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'V';
      charArray0[5] = 'E';
      charArray0[6] = '6';
      charArray0[7] = 'l';
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(iOUtils0.specicalFlags_doubleQuotes, 0, 1023, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      char[] charArray0 = new char[1];
      char char0 = '{';
      charArray0[0] = '{';
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(iOUtils0.specicalFlags_singleQuotes, 5, 5, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars((byte)58, (int) (byte)58, iOUtils0.CA);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("fastjson.compatibleWithJavaBean", 923, 84);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IOUtils.stringSize((-3675));
      IOUtils.stringSize(488L);
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = 'h';
      // Undeclared exception!
      try { 
        IOUtils.getChars(1, (-3675), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3676
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 65536, (-2530));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 63005
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char char0 = 'f';
      IOUtils.isIdent('f');
      IOUtils.isIdent('f');
      char[] charArray0 = new char[6];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      int int0 = 52;
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 0, 52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = 'G';
      charArray0[2] = 'R';
      charArray0[3] = 'E';
      charArray0[4] = ',';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, (-191), (-1648));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1840
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = IOUtils.stringSize((-3710));
      assertEquals(1, int0);
      
      int int1 = IOUtils.stringSize(488L);
      assertEquals(3, int1);
      
      IOUtils iOUtils0 = new IOUtils();
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("fastjson.properties");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IOUtils.firstIdentifier('^');
      IOUtils.stringSize(114);
      IOUtils.stringSize((long) 3);
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = '^';
      // Undeclared exception!
      try { 
        IOUtils.getChars(3, 17, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        IOUtils.getChars(2146L, 2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.stringSize(0L);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(", true);
      char[] charArray0 = new char[4];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = '^';
      IOUtils.getChars((long) 1, 1, charArray0);
      String string0 = "Q=2pg";
      IOUtils.getStringProperty("Q=2pg");
      IOUtils.getChars(1, 1, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.getChars(0L, 56, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 55
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.DIGITS, 5, 5);
      assertArrayEquals(new byte[] {(byte) (-29)}, byteArray0);
      
      IOUtils.getChars((long) 5, 5, iOUtils0.CA);
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[8];
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 6, 6, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IOUtils.stringSize((long) (-3675));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(", true);
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      outputStreamWriter0.write(1587);
      IOUtils.close((Closeable) null);
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      // Undeclared exception!
      try { 
        IOUtils.getStringProperty("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("hly(li", 4, 255);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder", 2, 2);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      IOUtils.getStringProperty("UTF-8");
      int int0 = IOUtils.stringSize((long) 2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("8N");
      assertArrayEquals(new byte[] {(byte) (-16)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOUtils.decodeBase64("|tnI6\"RO5I 5");
      String string0 = IOUtils.FASTJSON_PROPERTIES;
      assertEquals("fastjson.properties", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("|tnI6\"RO5I 5", 2, 2);
      assertArrayEquals(new byte[] {(byte) (-100)}, byteArray0);
      
      IOUtils.getStringProperty("|tnI6\"RO5I 5");
      int int0 = IOUtils.stringSize(1025L);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("|tnI6\"RO5I 5", 2, 2);
      assertArrayEquals(new byte[] {(byte) (-100)}, byteArray0);
      
      IOUtils.getStringProperty("|tnI6\"RO5I 5");
      boolean boolean0 = IOUtils.firstIdentifier('E');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IOUtils.getStringProperty("Ap>");
      IOUtils.isValidJsonpQueryParam((String) null);
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'y';
      charArray0[3] = '`';
      charArray0[4] = 'D';
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-101), (int) (byte) (-101), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -102
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IOUtils.stringSize(0L);
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      char char0 = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'u';
      charArray0[3] = 'c';
      charArray0[4] = '3';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-151L), 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IOUtils.decodeBase64(" ");
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars((byte)58, (int) (byte)58, iOUtils0.CA);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.replaceChars, 0, 84);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1503
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars((byte)33, (int) (byte)33, iOUtils0.CA);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.replaceChars, 0, 84);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1503
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = 2;
      IOUtils.decodeUTF8(iOUtils0.specicalFlags_doubleQuotes, 2, 2, iOUtils0.ASCII_CHARS);
      CharsetDecoder charsetDecoder0 = iOUtils0.UTF8.newDecoder();
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("fastjson.properties");
      byteBuffer0.asFloatBuffer();
      CharBuffer charBuffer0 = iOUtils0.UTF8.decode(byteBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      IOUtils.decodeBase64(iOUtils0.replaceChars, 2, 2);
      int int1 = 2608;
      // Undeclared exception!
      try { 
        IOUtils.getChars((-2300), 2608, iOUtils0.replaceChars);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2607
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 1, 6);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 36, 4);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)89, (byte) (-89)}, byteArray0);
      
      boolean boolean0 = IOUtils.firstIdentifier('9');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 36, 5);
      // Undeclared exception!
      try { 
        IOUtils.getChars((-2652L), (-2145100202), (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = 'P';
      charArray0[2] = '1';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[3] = 'B';
      charArray0[4] = 'f';
      charArray0[5] = 'q';
      charArray0[6] = 'C';
      charArray0[7] = ']';
      charArray0[8] = 'R';
      int int0 = IOUtils.decodeUTF8(byteArray0, 41, 41, charArray0);
      assertArrayEquals(new char[] {'n', 'P', '1', 'B', 'f', 'q', 'C', ']', 'R'}, charArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("yYwNx=_");
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-116), (byte)13}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = IOUtils.decodeBase64("uafmUd5TngjM~=");
      assertArrayEquals(new byte[] {(byte) (-71), (byte) (-89), (byte) (-26), (byte)81, (byte) (-34), (byte)83, (byte) (-98), (byte)8, (byte) (-52)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      IOUtils.firstIdentifier('\u00C6');
      String string0 = IOUtils.FASTJSON_PROPERTIES;
      int int0 = IOUtils.stringSize((-258L));
      assertEquals(1, int0);
      
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = '\u00C6';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-54);
      int int1 = IOUtils.encodeUTF8(charArray0, 1, 1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-61), (byte) (-122), (byte)31, (byte) (-54)}, byteArray0);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = IOUtils.FASTJSON_COMPATIBLEWITHFIELDNAME;
      IOUtils.firstIdentifier('\u0107');
      char[] charArray0 = new char[8];
      charArray0[0] = '\u0107';
      charArray0[1] = '\u0107';
      int int0 = 999;
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 556, 999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 556
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)111;
      char[] charArray0 = new char[6];
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)1, (byte)111, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'o', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-87);
      char[] charArray0 = new char[6];
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)1, (byte)111, charArray0);
      assertArrayEquals(new char[] {'o', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-90);
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = 'l';
      charArray0[2] = '1';
      charArray0[3] = ' ';
      charArray0[4] = 'N';
      charArray0[5] = 'v';
      charArray0[6] = 'f';
      charArray0[7] = 'n';
      IOUtils.decodeUTF8(byteArray0, (byte)1, 4032, charArray0);
      IOUtils.stringSize((-1112));
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 1257, (byte)119, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1257
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = IOUtils.isIdent('\u010A');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean1 = IOUtils.firstIdentifier(' ');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      byte[] byteArray1 = IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 8, 52);
      char[] charArray0 = new char[3];
      int int0 = IOUtils.decodeUTF8(byteArray1, 15, 52, charArray0);
      assertArrayEquals(new char[] {'q', '\u05DF', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-10);
      char[] charArray0 = new char[8];
      IOUtils.decodeUTF8(byteArray0, (byte)1, (byte)119, charArray0);
      IOUtils.loadPropertiesFromFile();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      String string0 = "";
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)0;
      char[] charArray0 = new char[5];
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)1, (byte)119, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)1;
      byteArray0[9] = (byte)119;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-90);
      char[] charArray0 = new char[8];
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)1, (byte)119, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      int int1 = IOUtils.stringSize((int) (byte)0);
      assertEquals(1, int1);
      
      IOUtils.loadPropertiesFromFile();
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("hSWmN`c(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-90);
      char[] charArray0 = new char[8];
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)1, (byte)119, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int1 = IOUtils.stringSize((long) (byte) (-19));
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte) (-19);
      byteArray0[7] = (byte) (-90);
      char[] charArray0 = new char[8];
      IOUtils.decodeUTF8(byteArray0, (byte)1, (byte)119, charArray0);
      IOUtils.stringSize((int) (byte)0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.loadPropertiesFromFile();
  }
}
