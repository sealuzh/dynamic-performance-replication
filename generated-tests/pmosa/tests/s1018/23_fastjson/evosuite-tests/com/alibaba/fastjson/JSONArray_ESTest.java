/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 13:47:22 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.ParseProcess;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.Month;
import java.time.Period;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.time.chrono.HijrahDate;
import java.time.chrono.IsoChronology;
import java.time.temporal.TemporalAccessor;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll(3089, (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      Object object0 = new Object();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONString(object0, serializeFilterArray0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentClear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      Object object0 = new Object();
      Object object1 = new Object();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[7] = serializerFeature7;
      JSON.toJSONString(object1, serializerFeatureArray0);
      jSONArray0.lastIndexOf(object0);
      LinkedList<MockThaiBuddhistDate> linkedList0 = new LinkedList<MockThaiBuddhistDate>();
      jSONArray0.containsAll(linkedList0);
      Integer integer0 = new Integer((-1));
      jSONArray0.remove((Object) integer0);
      // Undeclared exception!
      try { 
        jSONArray0.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Method> class0 = Method.class;
      List<Method> list0 = jSONArray0.toJavaList(class0);
      boolean boolean0 = jSONArray0.containsAll(list0);
      assertTrue(boolean0);
      
      boolean boolean1 = jSONArray0.retainAll(list0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Set<String> set0 = charset0.aliases();
      jSONArray0.addAll((Collection<?>) set0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove(0);
      int int0 = 1444;
      JSONObject jSONObject0 = new JSONObject();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSON.toJSONString((Object) mockJapaneseDate0, true);
      jSONArray1.set(989, jSONObject0);
      JSON.DEFFAULT_DATE_FORMAT = "1.2.46";
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJSONString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(952);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-36), object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : PascalCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSON.DEFAULT_TYPE_KEY = "u4#n#GcZ";
      Locale locale0 = Locale.FRENCH;
      Locale.setDefault(jSONArray0.defaultLocale);
      JSON.defaultLocale = locale0;
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(1764);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1764, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(163);
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Object object0 = new Object();
      List<Object> list0 = javaBeanSerializer0.getFieldValues(object0);
      JSONArray jSONArray0 = new JSONArray(list0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(1657, (Object) mockMinguoDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1657, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, hijrahDate0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray2.fluentRemove((Object) mockMinguoDate0);
      jSONArray0.getByteValue(0);
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : Hijrah-umalqura AH 1435-04-14
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(9922, mockJapaneseDate0);
      boolean boolean0 = jSONArray1.getBooleanValue(1224);
      assertEquals(9923, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(9, "1.2.46");
      jSONArray0.getComponentType();
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = '<';
      charArray0[2] = 'l';
      charArray0[3] = '[';
      charArray0[4] = 'z';
      charArray0[5] = '(';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 885);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      JSONArray jSONArray2 = jSONArray0.fluentSet(973, hijrahDate0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray1.fluentRemove((Object) jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-725));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "";
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(false);
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSONObject1);
      predicate0.negate();
      jSONArray0.removeIf(predicate0);
      jSONArray0.clone();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, hijrahDate0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray2.fluentRemove((Object) mockMinguoDate0);
      jSONArray0.getByteValue(0);
      jSONArray2.clear();
      jSONArray0.containsAll(jSONArray2);
      Locale locale0 = JSON.defaultLocale;
      Chronology chronology0 = Chronology.ofLocale(locale0);
      chronology0.dateNow();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(3089);
      // Undeclared exception!
      try { 
        chronology0.date((TemporalAccessor) localTime0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain LocalDate from TemporalAccessor: 00:51:29 of type java.time.LocalTime
         //
         verifyException("java.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getRelatedArray();
      boolean boolean0 = jSONArray0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = (-359);
      JSONArray jSONArray0 = new JSONArray();
      Month month0 = Month.AUGUST;
      int int1 = 238;
      // Undeclared exception!
      try { 
        jSONArray0.remove((-1097));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1097
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(952);
      Integer integer0 = new Integer(3089);
      jSONArray0.setRelatedArray(integer0);
      jSONArray0.size();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-594));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, hijrahDate0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray3 = jSONArray2.fluentRemove((Object) mockMinguoDate0);
      ZoneId zoneId0 = ZoneId.systemDefault();
      Clock clock0 = MockClock.tickMinutes(zoneId0);
      MockMinguoDate.now(clock0);
      jSONArray0.getByteValue(0);
      jSONArray2.clear();
      jSONArray0.equals(jSONArray3);
      jSONArray2.getRelatedArray();
      jSONArray3.fluentAddAll((Collection<?>) jSONArray0);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      List<PropertyNamingStrategy> list0 = jSONArray3.toJavaList(class0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, linkedHashSet0);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll(1294, (Collection<?>) linkedList0);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray0);
      MockHijrahDate.now();
      JSONArray jSONArray5 = jSONArray1.fluentSet(989, jSONArray3);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Integer integer0 = new Integer(53);
      JSONArray jSONArray6 = jSONArray5.fluentRemove((Object) integer0);
      byte byte0 = jSONArray5.getByteValue(989);
      jSONArray5.clear();
      jSONArray6.containsAll(jSONArray2);
      Locale locale0 = JSON.defaultLocale;
      Chronology chronology0 = Chronology.ofLocale(jSONArray3.defaultLocale);
      ChronoLocalDate chronoLocalDate0 = chronology0.dateNow();
      MockLocalTime.ofSecondOfDay(jSONArray5.DEFAULT_PARSER_FEATURE);
      ChronoLocalDate chronoLocalDate1 = chronology0.date((TemporalAccessor) chronoLocalDate0);
      chronoLocalDate1.getChronology();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray4.indexOf(mockJapaneseDate0);
      jSONArray2.size();
      jSONArray5.fluentAddAll((int) byte0, (Collection<?>) jSONArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(90);
      jSONArray0.indexOf((Object) null);
      jSONArray0.clear();
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      linkedHashSet0.retainAll(jSONArray0);
      jSONArray0.containsAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        JSON.parseArray("8Y?i<%x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual int, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedList<JSONPath.Operator> linkedList0 = new LinkedList<JSONPath.Operator>();
      jSONArray0.removeAll(linkedList0);
      Feature feature0 = Feature.SupportNonPublicField;
      Feature feature1 = Feature.IgnoreNotMatch;
      Feature feature2 = Feature.DisableFieldSmartMatch;
      JSONArray jSONArray1 = new JSONArray(0);
      Feature[] featureArray0 = new Feature[4];
      featureArray0[0] = feature2;
      featureArray0[1] = feature2;
      featureArray0[2] = feature0;
      featureArray0[3] = feature1;
      JSON.parseObject("", featureArray0);
      jSONArray0.indexOf("");
      jSONArray1.clear();
      jSONArray0.containsAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll((-1480), (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1480, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Month month0 = Month.OCTOBER;
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-3907));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(5);
      String string0 = "";
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowComment;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.OrderedField;
      featureArray0[2] = feature2;
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.add((-352), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -352, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(6);
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, hijrahDate0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray(989);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONObject cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(952);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(952);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 952, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(90);
      // Undeclared exception!
      try { 
        jSONArray0.subList((-225), 159);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -225
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, hijrahDate0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray3 = jSONArray2.fluentRemove((Object) mockMinguoDate0);
      ZoneId zoneId0 = ZoneId.systemDefault();
      Clock clock0 = MockClock.tickMinutes(zoneId0);
      MockMinguoDate.now(clock0);
      jSONArray0.getByteValue(0);
      jSONArray2.clear();
      jSONArray2.getRelatedArray();
      jSONArray3.fluentAddAll((Collection<?>) jSONArray0);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      jSONArray3.toJavaList(class0);
      boolean boolean0 = jSONArray1.retainAll(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(933);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(933);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 933, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(952);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShort(935);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 935, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-2212));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(952);
      jSONArray0.setRelatedArray(989);
      int int0 = 126;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("B$^dn/[o u1h", concurrentHashMap0);
      concurrentHashMap0.size();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.addAll(952, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 952, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSONArray0;
      objectArray0[1] = (Object) jSONArray0;
      objectArray0[2] = (Object) jSONArray0;
      Object[] objectArray1 = jSONArray0.toArray(objectArray0);
      assertSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-1002));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedList<JSONPath.Operator> linkedList0 = new LinkedList<JSONPath.Operator>();
      jSONArray0.removeAll(linkedList0);
      Feature feature0 = Feature.SupportNonPublicField;
      Feature feature1 = Feature.IgnoreNotMatch;
      Feature feature2 = Feature.DisableFieldSmartMatch;
      Feature[] featureArray0 = new Feature[4];
      featureArray0[0] = feature2;
      featureArray0[1] = feature2;
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_LIKE;
      linkedList0.add(jSONPath_Operator0);
      featureArray0[2] = feature0;
      featureArray0[3] = feature1;
      JSON.parseObject("", featureArray0);
      jSONArray0.indexOf("");
      jSONArray0.clear();
      jSONArray0.containsAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-1480), (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1480, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = new ParserConfig(true);
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      boolean boolean0 = jSONArray0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONString();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(946);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 946, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(973);
      MockDate mockDate0 = new MockDate(989, 989, 973, 973, 973);
      System.setCurrentTimeMillis(973);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      boolean boolean0 = jSONArray0.contains(mockJapaneseDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(1429);
      jSONArray0.setRelatedArray(jSONObject0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      int int0 = jSONArray0.indexOf(mockThaiBuddhistDate0);
      int int1 = jSONArray0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.toJSONString((Object) jSONArray0, true);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray0.setComponentType((Type) null);
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      List<JSONPath.Operator> list0 = jSONArray0.toJavaList(class0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(980, mockJapaneseDate0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(980);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@28ad5f0c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray(671);
      assertTrue(jSONArray0.isEmpty());
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      boolean boolean0 = jSONArray1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Period period0 = Period.ofWeeks(1);
      Period period1 = period0.plusYears(1191L);
      IsoChronology isoChronology0 = period1.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      jSONArray0.fluentSet(9968, localDate0);
      jSONArray0.getObject(989, (Type) null);
      assertEquals(9969, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(3043, (Object) null);
      double double0 = jSONArray0.getDoubleValue(199);
      assertEquals(3044, jSONArray0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(9922, mockJapaneseDate0);
      jSONArray1.getDoubleValue(989);
      jSONArray1.getJSONObject(989);
      jSONArray1.hashCode();
      assertEquals(9923, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2002, object0);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(2002);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.Object@251c6ae1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(9922, mockJapaneseDate0);
      short short0 = jSONArray1.getShortValue(1);
      assertEquals(9923, jSONArray0.size());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(9891, mockJapaneseDate0);
      jSONArray1.getBoolean(3089);
      assertEquals(9892, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.fluentSet(9922, mockJapaneseDate0);
      Integer integer0 = new Integer(3089);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(9922);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@770aaa02
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.fluentSet(9922, mockJapaneseDate0);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(9922);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@26884d2d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
