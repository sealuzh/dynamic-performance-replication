/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 05:39:42 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.LocalVariableTypeTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger((-6520));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.printArray((Object[]) constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("i2d", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$F#I";
      stringArray0[1] = "Illegally nested brackets:";
      stringArray0[2] = "$F#I";
      stringArray0[3] = "AyPhj}%E";
      String string0 = Utility.methodTypeToSignature("$F#I", stringArray0);
      assertEquals("(L$F#I;LIllegally;L$F#I;LAyPhj}%E;)L$F#I;", string0);
      
      String string1 = Utility.classOrInterface((-1397));
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)109, 189, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-39);
      String string0 = Utility.encode(byteArray0, true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[1] = "`n!";
      stringArray0[2] = "f2l";
      stringArray0[3] = "f2l";
      stringArray0[4] = "f2l";
      stringArray0[5] = "f2l";
      stringArray0[6] = "f2l";
      Utility.methodTypeToSignature("f2l", stringArray0);
      String string1 = Utility.fillup("`n!", (byte)0, true, '&');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.compactClassName("java.lang.");
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.convertString("@Eg\"8<1F{_!Und");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)98;
      Utility.codeToString(byteArray0, constantPool0, (-2), (int) (byte)98);
      Utility.isSet(2920, (byte)98);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    fadd\n1:    fadd\n2:    fadd\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", "lreturn", "lreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    fadd
         // 1:    fadd
         // 2:    fadd
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      int int0 = 0;
      byte byte0 = (byte) (-30);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("");
      try { 
        Utility.methodSignatureArgumentTypes("[d3*lODwLkZCs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [d3*lODwLkZCs
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("\tdefault = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \tdefault = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "7f_)Ry$^";
      try { 
        Utility.typeOfSignature("7f_)Ry$^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7f_)Ry$^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)42;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-36), (int) (byte)42, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)42, (-1530));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      byte[] byteArray1 = Utility.decode("java.lang.Z", false);
      assertEquals(11, byteArray1.length);
      
      String string0 = Utility.accessToString(213, false);
      assertEquals("public protected final volatile transient", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger((-6520));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-42);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-42), 150);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence2, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.setBit(3039, 2204);
      // Undeclared exception!
      try { 
        Utility.signatureToString("T08 /", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T08 /
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = Utility.replace(")YU=Ad$lv\"se:7J", ")YU=Ad$lv\"se:7J", ")YU=Ad$lv\"se:7J");
      assertEquals(")YU=Ad$lv\"se:7J", string0);
      
      int int0 = Utility.clearBit(311, (-2506));
      assertEquals(311, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-79);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-79), (-811));
      assertEquals("0:    faload\n1:    lstore_3\n2:    jsr\t\t#21171\n", string1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      try { 
        Utility.typeOfSignature("MUjKX!J+kV8G.)73|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MUjKX!J+kV8G.)73|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger((-6520));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantInteger0;
      constantArray0[4] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lsub", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)16;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-20);
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      Utility.toHexString(byteArray0);
      Utility.searchOpcode("");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte) (-97);
      objectArray0[1] = (Object) (byte) (-20);
      objectArray0[2] = (Object) (byte) (-20);
      objectArray0[3] = (Object) (byte) (-97);
      objectArray0[4] = (Object) "9f ec 00";
      objectArray0[5] = (Object) (byte) (-20);
      objectArray0[6] = (Object) "9f ec 00";
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte) (-57);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utility.getSignature("YKJ6&NN8%.o~t xS");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-117);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("i2b", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2M-C#%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2M-C#%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger((-6520));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantInteger0;
      constantArray0[4] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-77);
      byte byte0 = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      try { 
        Utility.typeOfSignature("N?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger((-6520));
      Constant[] constantArray0 = new Constant[5];
      constantInteger0.copy();
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-128);
      constantInteger0.copy();
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)65;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.bcel.classfile.EmptyVisitor";
      stringArray0[1] = "org.apache.bcel.classfile.EmptyVisitor";
      stringArray0[2] = "org.apache.bcel.classfile.EmptyVisitor";
      stringArray0[3] = "org.apache.bcel.classfile.EmptyVisitor";
      stringArray0[4] = "h1t_|joqx*go(";
      stringArray0[5] = "org.apache.bcel.classfile.EmptyVisitor";
      String string0 = Utility.format((byte)0, (byte) (-128), true, 'R');
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = "BkN";
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "BkN", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.isJavaIdentifierPart('J');
      try { 
        Utility.typeOfSignature("6Gl&m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6Gl&m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('z');
      Utility.classOrInterface(107);
      Utility.compactClassName("class", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-12);
      byteArray0[8] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(dataInputStream0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantLong constantLong0 = new ConstantLong((byte)36);
      constantArray0[1] = (Constant) constantLong0;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(171, (byte) (-73));
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      DataInputStream dataInputStream1 = new DataInputStream(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass(dataInputStream1);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[3] = (Constant) constantClass1;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -73
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Utility.replace("Invalid signature: ", "iDIV6lM!nUE", "Invalid signature: ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Invalid signature: ";
      String string0 = Utility.printArray(objectArray0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) "Invalid signature: ";
      objectArray1[1] = (Object) "Invalid signature: ";
      Object object0 = new Object();
      objectArray1[2] = object0;
      objectArray1[3] = (Object) "Invalid signature: ";
      objectArray1[4] = (Object) "Invalid signature: ";
      objectArray1[5] = (Object) "{Invalid signature: }";
      objectArray1[6] = (Object) "{Invalid signature: }";
      objectArray1[7] = (Object) "{Invalid signature: }";
      objectArray1[8] = (Object) "Invalid signature: ";
      String string1 = Utility.printArray(objectArray1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[4] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(180);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantString1;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.typeOfSignature("dup_x2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup_x2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)49;
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      Utility.getSignature("eXUW^ZL?zh@ipS");
      String string0 = "VQSSat4*;qQXp";
      String string1 = "NhUwCUp&%XKMC+b%>9";
      boolean boolean0 = false;
      int int0 = 0;
      int int1 = 255;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 34
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = Utility.clearBit(84, 84);
      assertEquals(84, int0);
      
      String string0 = Utility.getSignature("char");
      assertEquals("C", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = Utility.getSignature("}@|)\t");
      assertEquals("L}@|);", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("3E*)kaBe(pH6", "<{$R~+-[it8", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-63);
      byteArray0[4] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)106);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ifle\t\t#-24895
         // 3:    nop
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.compactClassName("java.lang.YUM=d$lQv\"s:7J");
      String string0 = Utility.printArray((Object[]) null, false, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ddiv", (String) null, "ddiv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ddiv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(176, 176);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(176, 47);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantUtf8.getCachedInstance("FN+O{<iK$6m2T");
      ConstantInteger constantInteger0 = new ConstantInteger(8);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfSignature("impdep2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: impdep2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("idiv", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("UQdk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UQdk'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object object0 = new Object();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("ifeq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifeq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.signatureToString("SYS_]", true);
      try { 
        Utility.methodSignatureReturnType("putstatic", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `putstatic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*:3<]shKWo7 m&hK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :3<]shKWo7 m&hK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)122;
      boolean boolean0 = true;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-73);
      byteArray1[1] = (byte) (-66);
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(1920, 677);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString(">jO|.@neH6\"&^yD", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>jO|.@neH6\"&^yD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger((-6520));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantInteger0;
      constantArray0[4] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-128);
      constantInteger0.copy();
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)65;
      int int0 = 3530;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)62, 3530, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-e'{;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -e'{;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = Utility.replace("java.lang.YUM=d$lQv\"se:7J", "java.lang.YUM=d$lQv\"se:7J", "java.lang.YUM=d$lQv\"se:7J");
      assertEquals("java.lang.YUM=d$lQv\"se:7J", string0);
      
      String string1 = Utility.compactClassName("java.lang.YUM=d$lQv\"se:7J");
      assertEquals("YUM=d$lQv\"se:7J", string1);
      
      byte[] byteArray0 = new byte[9];
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 43, false);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iinc\t\t%188\t-126", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = ", low = ";
      try { 
        Utility.typeOfSignature(", low = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , low = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utility.accessToString(525, false);
      Utility.getSignature("public protected static interface");
      Utility.setBit((-2533), (-2533));
      Utility.clearBit(525, (-2533));
      Utility.setBit(0, 91);
      try { 
        Utility.methodSignatureReturnType("public protected static interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public protected static interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*;#7@#L3e/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;#7@#L3e/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      try { 
        Utility.typeOfSignature("03Ji(v%%M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 03Ji(v%%M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = new Object();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      int int0 = Utility.clearBit((byte) (-90), (byte)0);
      assertEquals((-90), int0);
      
      String string0 = Utility.compactClassName("O@)B", "arraylength", true);
      assertEquals("O@)B", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature(";u/w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;u/w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$F#I";
      stringArray0[1] = "Illegally nested brackets:";
      stringArray0[2] = "$F#I";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifne\t\t#6935", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("L8OhIjva4@OZ5wwys");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(re|~ference_kind = ", "(re|~ference_kind = ", "synthetic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `re|~ference_kind = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.codeToString(byteSequence1, constantPool0, false);
      try { 
        Utility.methodSignatureReturnType("new");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `new'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.compactClassName("YvM=dPlZv\"seq7J");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-82);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.format(77, 784, true, '4');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-98);
      byteArray1[1] = (byte)7;
      byteArray1[2] = (byte) (-120);
      byteArray1[3] = (byte)35;
      byteArray1[4] = (byte) (-120);
      byteArray1[5] = (byte)7;
      byteArray1[6] = (byte)41;
      byteArray1[7] = (byte)4;
      byteArray1[8] = (byte)35;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("ifle\t\t#1928", string0);
      
      boolean boolean0 = Utility.isSet((byte)35, (byte)4);
      assertFalse(boolean0);
      
      int int0 = Utility.setBit((byte)7, (-184));
      assertEquals(263, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.compactClassName("YUM=Ad$lQv\"se:7J");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)80;
      byteArray0[8] = (byte) (-83);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.format(41, 123, true, '\'');
      assertEquals("41'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''", string1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("| !S,d2)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: | !S,d2)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.methodSignatureReturnType("J:;9R4=c");
      String[] stringArray0 = new String[20];
      stringArray0[0] = "J:;9R4=c";
      stringArray0[1] = "J:;9R4=c";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)54;
      byteArray0[8] = (byte)91;
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(1009);
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 163, (-2604));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      Utility.accessToString((int) (byte)105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace("jsr_w", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/@&0JS7Fe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /@&0JS7Fe
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.convertString("fload_3");
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("C:q34)x%;YiX_c");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      Utility.compactClassName("IuH7RrQ|N;\"gq#q");
      byte byte0 = (byte)48;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = Utility.replace("java.lang.YUM=d$lQv\"se:7J", "java.lang.YUM=d$lQv\"se:7J", "java.lang.YUM=d$lQv\"se:7J");
      assertEquals("java.lang.YUM=d$lQv\"se:7J", string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.YUM=d$lQv\"se:7J");
      String string1 = Utility.fillup("@#![yUM8=N", (-1366), false, '3');
      assertEquals("@#![yUM8=N", string1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = Utility.convertString("YUM=d$lQv\"se:7J");
      assertEquals("YUM=d$lQv\\\"se:7J", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.getSignature("' at index ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)69;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)99;
      byteArray0[8] = (byte)3;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 908, (int) (byte)3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.replace("I;#W@#L3|/", "I;#W@#L3|/", "I;#W@#L3|/");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-73);
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "55");
      byteSequence0.available();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      Utility.compactClassName("", true);
      // Undeclared exception!
      try { 
        Utility.compactClassName("{java.lang.Object@63073c1d, java.lang.Object@67a4c25d, java.lang.Object@563737a2, java.lang.Object@64394307, java.lang.Object@3e847c49, java.lang.Object@7f73e7ee}", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)72;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `int'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteSequence0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Utility.convertString("b`dz:");
      assertEquals("b`dz:", string0);
      
      String string1 = Utility.accessToString(0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.compactClassName("\t\t%", "", true);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
      
      String string1 = Utility.getSignature("");
      assertEquals("L;", string1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fsub", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "/";
      Utility.compactClassName("/");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)52;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)34;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-26), (int) (byte)6, false);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "java.lanh.YUM=d$lQv\"s:7J";
      Utility.compactClassName("java.lanh.YUM=d$lQv\"s:7J");
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("java.lanh.YUM=d$lQv\"s:7J");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      constantArray0[1] = (Constant) constantDouble0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1929), (-1929));
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1929), (-1929));
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)81;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)60, 3106);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte)81;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)81, (int) (byte)81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-102);
      byteArray0[4] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifne\t\t#-8933", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)61;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)61;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)124, (int) (byte)124, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-123);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("d2i", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)30;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-47);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte)0);
      constantClass0.setNameIndex(238);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)47, (byte) (-47), (LocalVariable[]) null, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("nop", "nop", "Xja@", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "SYS_]";
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.Utility", (String) null, "org.apache.bcel.classfile.Utility", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = Utility.fillup("\t\t#", 174, false, 'Q');
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ\t\t#", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Utility.signatureToString("Invalid Stack map table tag: ");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("? extends ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `? extends '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("J:;9R4=c");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.accessToString((-2), false);
      Utility.searchOpcode("#sN:^Xe");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = Utility.signatureToString("CI");
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Utility.searchOpcode("Jcu6GH ?Y0ZBO");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Jcu6GH ?Y0ZBO";
      objectArray0[1] = (Object) "Jcu6GH ?Y0ZBO";
      objectArray0[2] = (Object) "Jcu6GH ?Y0ZBO";
      Utility.printArray(objectArray0, true, true);
      Utility.clearBit((short) (-1), 152);
      Utility.compactClassName("{\"Jcu6GH ?Y0ZBO\", \"Jcu6GH ?Y0ZBO\", \"Jcu6GH ?Y0ZBO\"}", true);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$A", string0);
      
      String string1 = Utility.fillup("", (-3646), true, 'o');
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte byte0 = (byte)73;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)73;
      byteArray0[8] = (byte)73;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.decode("II$a1III$a3II", false);
      String string0 = "W$w~?`";
      String string1 = "I";
      int int0 = (-2052);
      int int1 = 173;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)73;
      byteArray1[1] = (byte) (-95);
      byteArray1[2] = (byte)73;
      byte byte1 = (byte) (-26);
      byteArray1[3] = (byte) (-26);
      byteArray1[4] = (byte)73;
      byteArray1[5] = (byte)73;
      byteArray1[6] = (byte)73;
      byteArray1[7] = (byte) (-93);
      CodeException[] codeExceptionArray0 = new CodeException[2];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (byte) (-93));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.getSignature("\t\t%");
      Utility.clearBit((-3029), 44);
      try { 
        Utility.typeOfSignature("\t\t%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      int int0 = 0;
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Yq{89XwARcwoK7vr", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yq{89XwARcwoK7vr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Utility.compactClassName(">zd;NNyZ(");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte)13);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-107);
      Utility.convertString("");
      String string1 = Utility.accessToString(61, true);
      assertEquals("public protected static final", string1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.compactClassName("lI?eby+-`");
      // Undeclared exception!
      try { 
        Utility.signatureToString("L8OhIjva4@", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L8OhIjva4@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(reference_kind = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (reference_kind = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      try { 
        Utility.typeOfSignature("K/_g9+u05%rO25");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K/_g9+u05%rO25
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = Utility.getSignature("java.lang.YUM=d$lQv\"se:7J");
      assertEquals("Ljava/lang/YUM=d$lQv\"se:7J;", string0);
      
      String string1 = Utility.signatureToString("Ljava/lang/YUM=d$lQv\"se:7J;");
      assertEquals("YUM=d$lQv\"se:7J", string1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)25;
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) (byte)25;
      objectArray0[6] = (Object) "aload\t\t%193";
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Utility.clearBit(197, 197);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)19;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1482, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Utility.typeOfSignature("BaAQQG");
      byte byte0 = Utility.typeOfSignature("BaAQQG");
      assertEquals((byte)8, byte0);
      
      String string0 = Utility.fillup("drem", 20, true, 'z');
      assertEquals("dremzzzzzzzzzzzzzzzz", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "zub_I<Br*nW1p!0n{P2";
      stringArray0[1] = "JnD/b\"Q/fn}:l&z/";
      String string0 = "breakpoint";
      stringArray0[2] = "breakpoint";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[3] = "zub_I<Br*nW1p!0n{P2";
      stringArray0[4] = "zvXF?Ytuk>-Rj-)}_tp";
      stringArray0[5] = "zub_I<Br*nW1p!0n{P2";
      stringArray0[6] = "zub_I<Br*nW1p!0n{P2";
      Utility.methodTypeToSignature("zub_I<Br*nW1p!0n{P2", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(Lzub_I<Br*nW1p!0n{P2;LJnD/b\"Q/fn}:l&z/;Lbreakpoint;Lzub_I<Br*nW1p!0n{P2;LzvXF?Ytuk>-Rj-)}_tp;Lzub_I<Br*nW1p!0n{P2;Lzub_I<Br*nW1p!0n{P2;)Lzub_I<Br*nW1p!0n{P2;", "breakpoint", "anewarray", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `r*nW1p!0n{P2;LJnD/b\"Q/fn}:l&z/;Lbreakpoint;Lzub_I<Br*nW1p!0n{P2;LzvXF?Ytuk>-Rj-)}_tp;Lzub_I<Br*nW1p!0n{P2;Lzub_I<Br*nW1p!0n{P2;)Lzub_I<Br*nW1p!0n{P2;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)81;
      byteArray1[1] = (byte)16;
      byteArray1[2] = (byte)81;
      byteArray1[3] = (byte)9;
      byteArray1[4] = (byte)81;
      byteArray1[5] = (byte)81;
      byteArray1[6] = (byte)81;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("fastore", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1rOX+d kQ_?nB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1rOX+d kQ_?nB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = Utility.replace("I;#W@#L3|/", "I;#W@#L3|/", "I;#W@#L3|/");
      assertEquals("I;#W@#L3|/", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)66;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-102), (int) (byte) (-102));
      assertEquals("0:    ifne\t\t#-31448\n3:    iconst_m1\n4:    lstore_3\n", string1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.replace("I;#W@#L3|/", "I;#W@#L3|/", "I;#W@#L3|/");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)66;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte) (-73));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = Utility.accessToString(483, false);
      assertEquals("public private synchronized volatile transient native", string0);
      
      String string1 = Utility.accessToString((-1400));
      assertEquals("static transient interface strictfp synthetic annotation enum", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("ab 55 00 3c d4 5d 00 00 00", string2);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      try { 
        Utility.typeOfSignature("O(}S:eT?MRl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O(}S:eT?MRl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = Utility.compactClassName("YUM=d$lQv\"se:7J");
      assertEquals("YUM=d$lQv\"se:7J", string0);
      
      Utility.compactClassName("void", false);
      String string1 = Utility.compactClassName("YUM=d$lQv\"se:7J");
      assertEquals("YUM=d$lQv\"se:7J", string1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("X\"~822~u{D{}\"sG\"", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X\"~822~u{D{}\"sG\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(re|~ference_kind = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (re|~ference_kind = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)106;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$v$A$mj", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.isSet(1923, 0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte) (-4);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(0, 65);
      constantArray0[1] = (Constant) constantMethodHandle2;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("constant pool\t\t");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.compactClassName("");
      Utility.printArray((Object[]) null);
      try { 
        Utility.decode("Y_s'", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("D7=-iD%T?v3*H");
      assertEquals((byte)7, byte0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "D7=-iD%T?v3*H";
      stringArray0[1] = "D7=-iD%T?v3*H";
      String string0 = Utility.methodTypeToSignature("D7=-iD%T?v3*H", stringArray0);
      assertEquals("(LD7=-iD%T?v3*H;LD7=-iD%T?v3*H;)LD7=-iD%T?v3*H;", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)40;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-4295), 1284, true);
      assertEquals("0:    iconst_4\n1:    iconst_4\n2:    iconst_4\n3:    iconst_4\n4:    iconst_4\n5:    iconst_4\n6:    iconst_4\n7:    iconst_4\n8:    dload_2\n", string1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `int'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)72;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-55);
      byteArray1[1] = (byte)72;
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte)72;
      byteArray1[4] = (byte) (-70);
      byteArray1[5] = (byte)72;
      byteArray1[6] = (byte)72;
      byteArray1[7] = (byte)72;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("jsr_w\t\t#1208764602", string0);
      
      String string1 = Utility.classOrInterface(44);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Id");
      assertEquals((byte)10, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('1');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-109);
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      try { 
        Utility.typeOfSignature("E:~1K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E:~1K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[2] = (byte)106;
      byteArray0[4] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      boolean boolean0 = Utility.isSet((byte)106, (byte)106);
      assertFalse(boolean0);
      
      String string1 = Utility.replace("if_icmpne\t\t#106", "putfield", "org.apache.bcel.util.ClassPath$1");
      assertTrue(string1.equals((Object)string0));
      
      int int0 = Utility.clearBit(1601, (byte) (-96));
      assertEquals(1600, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-120);
      byteArray0[6] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, constantPool0, true);
      boolean boolean0 = Utility.isJavaIdentifierPart(';');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)40;
      byte byte0 = (byte) (-119);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-100);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)40, (int) (byte) (-100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "qq.(]9f(]':", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)3;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)3, (int) (byte)81, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("bipush\t\t81", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      short short0 = Utility.searchOpcode("_icmpyt");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.signatureToString("FzxVghi", true);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.replace(",Fk+n=%:<4[XZ", "Hr-DH#5TS38", "\t(wi.e)");
      try { 
        Utility.methodSignatureArgumentTypes(",Fk+n=%:<4[XZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,Fk+n=%:<4[XZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("E1MFozU}x", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E1MFozU}x'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Utility.compactClassName(">zd;NNyZ(");
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-214), (-214));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Utility.convertString(")\n");
      Utility.format(795, 78, false, '+');
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      EnclosingMethod enclosingMethod0 = null;
      try {
        enclosingMethod0 = new EnclosingMethod(78, 78, byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = ", index = ";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "_[8o*sz^yd>_";
      stringArray0[1] = ", index = ";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("land", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `land'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      Utility.methodTypeToSignature("", stringArray0);
      Utility.setBit(0, 0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = Utility.getSignature("P}");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((byte) (-111));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)8;
      Utility.encode(byteArray0, true);
      Utility.accessToString(4034);
      // Undeclared exception!
      try { 
        Utility.signatureToString("private volatile transient native interface abstract strictfp", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `private volatile transient native interface abstract strictfp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("i2c", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Ky}`[97?Qv@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ky}`[97?Qv@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      try { 
        Utility.typeOfSignature("UQdk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UQdk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-117);
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = Utility.isSet((byte)0, (byte) (-117));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = Utility.compactClassName("YUM=Ad$lQv\"se:7J");
      assertEquals("YUM=Ad$lQv\"se:7J", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte) (-109);
      byteArray0[8] = (byte)11;
      Utility.toHexString(byteArray0);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("0a 30 2f 41 96 2f e4 93 0b", string1);
      
      int int0 = Utility.setBit((byte) (-28), 99);
      assertEquals((-20), int0);
      
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$K0$_A$96$_$e4$93$L", string2);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Utility.getSignature("java.lang.YUM=d$lQv\"se:7J");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte)7;
      Constant[] constantArray0 = new Constant[16];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1313, 236);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (int) (byte)7, (-1469));
      Utility.replace("=R`dr+", "java.lang.YUM=d$lQv\"se:7J", "7:    iconst_4\n");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, 1861, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-128);
      byteArray0[8] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object object0 = new Object();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("astore_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: astore_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "Warning: Padding byte != 0 in ";
      String string1 = "File ";
      Utility.compactClassName("File ", "File ", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3z;zC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3z;zC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L8OhIjva4@", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L8OhIjva4@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("AnnojtationDefaclt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AnnojtationDefaclt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)27;
      byteArray1[1] = (byte)97;
      byteArray1[2] = (byte) (-102);
      byteArray1[3] = (byte)27;
      byteArray1[4] = (byte)97;
      byteArray1[5] = (byte) (-102);
      byteArray1[6] = (byte)23;
      byteArray1[7] = (byte)27;
      byteArray1[8] = (byte)27;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.close();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("iload_1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iload_1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)29;
      // Undeclared exception!
      try { 
        Utility.signatureToString("G,", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-61);
      byteArray0[3] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2829, (int) (byte)51, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      String string0 = Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-117);
      byteArray2[1] = (byte) (-117);
      byteArray2[2] = (byte) (-28);
      byteArray2[3] = (byte)65;
      byteArray2[4] = (byte)48;
      byteArray2[5] = (byte) (-88);
      byteArray2[6] = (byte) (-28);
      ByteSequence byteSequence1 = new ByteSequence(byteArray2);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      boolean boolean0 = Utility.isSet(89, 79);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = 1495;
      Utility.classOrInterface(1495);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("class", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = true;
      Utility.signatureToString("ZII.2$8yHZn[Fm", true);
      try { 
        Utility.typeOfSignature("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.typeOfSignature("F-9^c\"nQ\"P");
      try { 
        Utility.methodSignatureReturnType("%d3uXv8]{j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `%d3uXv8]{j'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Utility.isJavaIdentifierPart('R');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(">{#D@;", ">{#D@;", "if_acmpne", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >{#D@;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)97;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$ada", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.replace("nHOKMne:&-oTveNZJ-", "nHOKMne:&-oTveNZJ-", " j;");
      Utility.compactClassName("", " j;", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("getstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `getstatic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("J:;9R4=c");
      assertEquals("long", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)83;
      String string1 = Utility.signatureToString("J:;9R4=c", true);
      assertEquals("long", string1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      byte byte0 = (byte)94;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)94;
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpeq\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.getSignature("java.lang.YUM=d$lQv\"se:7J");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)120;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.reset();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%}T1cYy^/@M?!-q(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %}T1cYy^/@M?!-q(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = Utility.getSignature("YKJ6&NN8%.o~t xS");
      assertEquals("LYKJ6&NN8%/o~t;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload\t\t%241", string1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)110;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("0e 10 3d 70 6e", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger((-6520));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.getSignature("ALs");
      assertEquals("LALs;", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.replace("`|J", "`|J", "Yq{89XwARcwoK7vr");
      try { 
        Utility.decode("Yq{89XwARcwoK7vr", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("ixor", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ixor
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.methodSignatureReturnType("J:;9R4=c");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-30);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fO|@K@Lad'W|B|?");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[3] = (byte)51;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.signatureToString("B1", false);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = Utility.signatureToString("DBN[(1r", false);
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.Utility", "org.apache.bcel.classfile.Utility", "org.apache.bcel.classfile.Utility", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-1214));
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)63, 2335);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9QjD$S@veNSAM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9QjD$S@veNSAM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, (-68), 1331, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Utility.isJavaIdentifierPart('J');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Utility.replace("zW*+s-bSux*O7E>Q", "l2i", "zW*+s-bSux*O7E>Q");
      Utility.searchOpcode("l2i");
      Utility.compactClassName("File ", "if_icmpgt", true);
      String string0 = Utility.signatureToString("V4[", false);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("monitorexit", stringArray0);
      assertEquals("()Lmonitorexit;", string0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.compactClassName("void", "$l$8b$I$A$A$A$A$A$A$A", true);
      assertEquals("void", string2);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-55);
      byteArray1[1] = (byte)117;
      byteArray1[2] = (byte) (-55);
      byteArray1[3] = (byte)67;
      byteArray1[4] = (byte)67;
      byteArray1[5] = (byte)67;
      byteArray1[6] = (byte) (-128);
      byteArray1[7] = (byte) (-55);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lneg", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Utility.replace("$-94Sl", "$-94Sl", "$-94Sl");
      Utility.decode("$-94Sl", false);
      try { 
        Utility.typeOfSignature("$-94Sl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $-94Sl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = "Wva.lang.YUM=d$lQv\"se:7J";
      try { 
        Utility.methodSignatureReturnType("Wva.lang.YUM=d$lQv\"se:7J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wva.lang.YUM=d$lQv\"se:7J'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature(" [");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type:  [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-106);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("30 30 30 96 e4 96", string0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-28);
      byteArray1[1] = (byte)106;
      byteArray1[2] = (byte)48;
      byteArray1[3] = (byte) (-28);
      byteArray1[4] = (byte)48;
      byteArray1[5] = (byte) (-106);
      byteArray1[6] = (byte) (-28);
      byteArray1[7] = (byte) (-106);
      byteArray1[8] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)48;
      ByteSequence byteSequence2 = new ByteSequence(byteArray2);
      byteSequence2.markSupported();
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      String string1 = Utility.convertString("invokevirtual");
      assertEquals("invokevirtual", string1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object object0 = new Object();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("bipush");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: bipush
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.accessToString(255, true);
      try { 
        Utility.methodSignatureArgumentTypes("AnnotationDefault", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AnnotationDefault
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = Utility.signatureToString("B[4>CmzHq//c/z:1?J");
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dsub", "dsub", "dsub", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dsub
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.searchOpcode("Jcu6GH ?Y0ZBO");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "Jcu6GH ?Y0ZBO";
      Object object1 = new Object();
      objectArray0[3] = object1;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("i2l", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-117);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-68), (int) (byte) (-115), true);
      assertEquals("0:    nop\n1:    f2d\n2:    istore_2\n3:    f2i\n4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      try { 
        Utility.typeOfSignature("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = "%}1cYy^/@M?!-q(";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("%}1cYy^/@M?!-q(", "%}1cYy^/@M?!-q(", "%}1cYy^/@M?!-q(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %}1cYy^/@M?!-q(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.replace("J:;9R4=c", "J:;9R4=c", "J:;9R4=c");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)19;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = Utility.getSignature("' at index ");
      assertEquals("L';", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)69;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)32;
      String string1 = Utility.signatureToString("CH5Z]C,X97", true);
      assertEquals("char", string1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.Object@761eafba, java.lang.Object@160403d4, java.lang.Object@2ee900e0, java.lang.Object@6cd352, java.lang.Object@30cdf9a, java.lang.Object@3520768c, java.lang.Object@53288ec8", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@761eafba, java.lang.Object@160403d4, java.lang.Object@2ee900e0, java.lang.Object@6cd352, java.lang.Object@30cdf9a, java.lang.Object@3520768c, java.lang.Object@53288ec8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1235, (byte)16);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      try { 
        Utility.methodSignatureReturnType("L<JRP0_haW~usz/FR|hM;V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<JRP0_haW~usz/FR|hM;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)17;
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte) (-61);
      byteArray0[8] = (byte) (-1);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 57, (int) (byte)17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("newarray\t\t<<illegal type>>", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("P}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.accessToString(0, false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string0 = "org.apache.bcel.classfile.ConstantUtf8$1";
      stringArray0[3] = "org.apache.bcel.classfile.ConstantUtf8$1";
      stringArray0[4] = "";
      stringArray0[5] = "";
      Utility.methodTypeToSignature("", stringArray0);
      char char0 = '4';
      Utility.isJavaIdentifierPart('4');
      int int0 = 72;
      Utility.isSet(72, 57);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-28);
      byte byte0 = (byte)44;
      byteArray0[1] = (byte)44;
      byte byte1 = (byte)82;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-66);
      byte byte2 = (byte) (-118);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-39);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)82, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.searchOpcode("lmEG");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fdiv", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = Utility.compactClassName("+)");
      assertEquals("+)", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("lshr", string1);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = Utility.replace("*|H|g6@e% n]s19~", "java.lang.The array of suffixes must not be null", "ifnonnull");
      Utility.convertString(">m 2KdD|/#U|P");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "java.lang.The array of suffixes must not be null";
      objectArray0[1] = (Object) "*|H|g6@e% n]s19~";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "*|H|g6@e% n]s19~";
      objectArray0[4] = (Object) ">m 2Kd\\D|/#U|P";
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) ">m 2KdD|/#U|P";
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)115;
      byteArray0[0] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte)115);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("drem", string0);
      
      String string1 = Utility.classOrInterface(1804);
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.compactClassName("ypC");
      try { 
        Utility.methodSignatureReturnType("ypC", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ypC'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-128);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)71;
      byteArray1[1] = (byte) (-89);
      byteArray1[2] = (byte) (-128);
      byteArray1[3] = (byte)71;
      byteArray1[4] = (byte) (-128);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, 0, 80, false);
      assertEquals("0:    dstore_0\n1:    goto\t\t#-32696\n4:    ior\n5:    nop\n6:    nop\n", string0);
      
      String string1 = Utility.getSignature("double");
      assertEquals("D", string1);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('/');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)94;
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("5&zWHE{2@Fa~\"v^E9");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("i#Qg>;)W");
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantInteger constantInteger0 = new ConstantInteger(1537);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)94, (byte)94);
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(173, 173);
      constantArray0[4] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-1177), 1537);
      assertEquals("0:    dup2_x2\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dup2_x2", string1);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = Utility.signatureToString("B^6");
      String string1 = Utility.compactClassName("byte", false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Object object0 = new Object();
      Utility.replace("int", "L96;V", "int");
      Utility.decode("", false);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Utility.getSignature("P}");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((byte) (-111));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.signatureToString("P}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", (String) null, "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-93);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-81);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 93, 3601);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger((-6520));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "]Bp5[T,P7i0k[ C{";
      stringArray0[1] = "D";
      stringArray0[2] = "D";
      stringArray0[3] = "D";
      stringArray0[4] = "\n";
      stringArray0[5] = "\n";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("D", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[T,P7i0k[ C{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Utility.classOrInterface((-2041));
      try { 
        Utility.typeOfMethodSignature("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object object0 = new Object();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("java.lang.YUM=d$lQv\"se:7J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.YUM=d$lQv\"se:7J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-117);
      byte[] byteArray1 = new byte[0];
      String string0 = "o>AFJf$9o'ehD";
      // Undeclared exception!
      try { 
        Utility.decode("o>AFJf$9o'ehD", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9o\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Utility.compactClassName(")YU=Ad$lQv\"se:7J");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)125;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfMethodSignature("v0<4NDK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: v0<4NDK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "_[8o*sz^yd>_";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Utility.methodSignatureReturnType("B*^M/");
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte)58);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.typeOfSignature("BC}7jDWdFr");
      Utility.accessToString((int) (byte)8);
      try { 
        Utility.methodSignatureReturnType("static");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `static'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Utility.accessToString(525, false);
      Utility.compactClassName("public protected static interface");
      Utility.setBit(525, 525);
      Utility.clearBit(525, 8717);
      Utility.setBit(0, 91);
      try { 
        Utility.methodSignatureReturnType("public protected static interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public protected static interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = Utility.replace(")YU=Ad$lv\"se:7J", ")YU=Ad$lv\"se:7J", ")YU=Ad$lv\"se:7J");
      assertEquals(")YU=Ad$lv\"se:7J", string0);
      
      int int0 = Utility.clearBit(311, (-2506));
      assertEquals(311, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-79);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray1, byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = Utility.signatureToString("Invalid Stack map table tag: ");
      assertEquals("int", string0);
      
      String string1 = Utility.fillup("? extends ", 80, true, 'T');
      assertEquals("? extends TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", string1);
      
      String string2 = Utility.replace("Invalid Stack map table tag: ", "O3'+}%i,UI9m/UY.", "z>kS\"~;u)HEMcA1");
      assertEquals("Invalid Stack map table tag: ", string2);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = Utility.accessToString((-2), false);
      assertEquals("private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-36);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = Utility.getSignature("$UjgtqM");
      assertEquals("L$UjgtqM;", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("iand", string1);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("if_icmpne\t\t#-24470", string0);
      
      boolean boolean0 = Utility.isSet((byte)106, (byte)106);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = "\"%[@mYGcuEX7[";
      try { 
        Utility.typeOfSignature("\"%[@mYGcuEX7[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"%[@mYGcuEX7[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Object object0 = new Object();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte)10;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)40;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      try { 
        Utility.typeOfSignature("5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-37);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("goto\t\t#-22724", string0);
      
      String string1 = Utility.compactClassName("%A<``*![8s'", "goto\t\t#-22724", false);
      assertEquals("%A<``*![8s'", string1);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-68), (int) (byte) (-68), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte) (-47);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Utility.replace("$-94Sl", "$-94Sl", "[]");
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 43, 62, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4}BT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4}BT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")YU=Ad$lQv\"se:7J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )YU=Ad$lQv\"se:7J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Utility.isJavaIdentifierPart('4');
      Utility.compactClassName("The array of suffixes must not be null", "The array of suffixes must not be null", true);
      try { 
        Utility.methodSignatureReturnType(",mL;8=)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)5;
      byte byte0 = (byte)107;
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte) (-1);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-121), 1695, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    monitorenter
         // 2:    <illegal opcode>
         // 3:    astore\t\t%5
         // 5:    dmul
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "AyPhj}%E";
      stringArray0[1] = ")qsaqD4Ur)/}4]/";
      stringArray0[2] = ")qsaqD4Ur)/}4]/";
      stringArray0[3] = ")qsaqD4Ur)/}4]/";
      stringArray0[4] = ")qsaqD4Ur)/}4]/";
      stringArray0[5] = ")qsaqD4Ur)/}4]/";
      stringArray0[6] = ")qsaqD4Ur)/}4]/";
      stringArray0[7] = "AyPhj}%E";
      stringArray0[8] = "AyPhj}%E";
      String string0 = Utility.methodTypeToSignature("AyPhj}%E", stringArray0);
      assertEquals("(LAyPhj}%E;L)qsaqD4Ur)/}4]/;L)qsaqD4Ur)/}4]/;L)qsaqD4Ur)/}4]/;L)qsaqD4Ur)/}4]/;L)qsaqD4Ur)/}4]/;L)qsaqD4Ur)/}4]/;LAyPhj}%E;LAyPhj}%E;)LAyPhj}%E;", string0);
      
      String string1 = Utility.classOrInterface((-1397));
      assertEquals("interface", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$F#I";
      stringArray0[1] = "Illegally nested brackets:";
      stringArray0[2] = "Illegally nested brackets:";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('7');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)106, (int) (byte) (-63));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Utility.isJavaIdentifierPart('\\');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-117);
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence1);
      byteSequence1.readByte();
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      String string1 = Utility.codeToString(byteArray1, constantPool0, (int) (byte)0, (-741), true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)13;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-53), (int) (byte) (-53), false);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    fconst_2\n", string0);
      
      String string1 = Utility.getSignature("0:    nop\n1:    <illegal opcode>\n2:    fconst_2\n");
      assertEquals("L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)5;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, true);
      String string0 = Utility.accessToString(48, false);
      assertEquals("final synchronized", string0);
      
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals("", string1);
      
      String string2 = Utility.printArray(objectArray0, false, true);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "SYS_]";
      stringArray0[1] = "void";
      stringArray0[2] = "goto_w";
      stringArray0[3] = "void";
      stringArray0[4] = "SYS_]";
      stringArray0[5] = "void";
      stringArray0[6] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = "java.lang.YUM=d$lQv\"se:7J";
      Utility.getSignature("java.lang.YUM=d$lQv\"se:7J");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte)13;
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1313, 236);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)7, (-1469));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V9a]MSt");
      assertEquals((byte)12, byte0);
      
      int int0 = Utility.setBit(347, 251);
      assertEquals(134218075, int0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Utility.isJavaIdentifierPart('J');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)55;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lstore\t\t%55", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-79), (int) (byte) (-79), false);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureToString("ifge", "ifge", "0:    return\n", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifge
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = "YU=Ad$lQv\"se:7";
      try { 
        Utility.typeOfSignature("YU=Ad$lQv\"se:7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YU=Ad$lQv\"se:7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)29;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$Az$j", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "LocalVariable";
      String string1 = "(%]";
      try { 
        Utility.methodSignatureToString("(%]", "LocalVariable", "YD", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `%]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      byte byte0 = (byte)33;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "zvXF?Ytuk>-Rj-)}_tp";
      stringArray0[1] = "Unreachable default case reached!";
      stringArray0[2] = "breakpoint";
      stringArray0[3] = "breakpoint";
      stringArray0[4] = "Unreachable default case reached!";
      stringArray0[5] = "Unreachable default case reached!";
      Utility.methodTypeToSignature("Unreachable default case reached!", stringArray0);
      Utility.methodSignatureToString("(LzvXF?Ytuk>-Rj-)}_tp;LUnreachable;Lbreakpoint;Lbreakpoint;LUnreachable;LUnreachable;)LUnreachable;", "&-4", "#RCJDa8m_$;l;Ohs", true);
      try { 
        Utility.typeOfSignature("breakpoint");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: breakpoint
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals(3, byteSequence1.getIndex());
      assertEquals("jsr\t\t#154", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Utility.isJavaIdentifierPart('4');
      Utility.compactClassName("The array of suffixes must not be null", "The array of suffixes must not be null", true);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("J:;9R4=c");
      assertEquals("long", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)59;
      byteArray1[1] = (byte) (-103);
      byteArray1[2] = (byte) (-103);
      byteArray1[3] = (byte) (-103);
      byteArray1[4] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore_0", string1);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = "@&0JS7Fe";
      try { 
        Utility.typeOfSignature("@&0JS7Fe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @&0JS7Fe
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Utility.isSet(229, 229);
      String string0 = "char";
      String string1 = "<BQkTxqr";
      Utility.replace("char", "7", "<BQkTxqr");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)123, 72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Utility.isSet(1039, 1039);
      Utility.isSet(1039, 1039);
      MockPrintStream mockPrintStream0 = new MockPrintStream("ireturn");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "ireturn";
      objectArray0[2] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("ireturn", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, false);
      Utility.printArray((PrintStream) mockPrintStream1, objectArray0);
      assertNotSame(printStream0, mockPrintStream1);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      try { 
        Utility.typeOfSignature("QS$*r8K9t$fQE`/v~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QS$*r8K9t$fQE`/v~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureReturnType("i)Q7W&c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q7W&c'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 90, 132);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Utility.format((-1247), (-1247), true, 'Q');
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)85;
      byteArray1[1] = (byte) (-65);
      byteArray1[2] = (byte)113;
      Utility.equals(byteArray0, byteArray1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      String string0 = "Yy&]Nwi?J%]$|Hnbf;";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false, "Yy&]Nwi?J%]$|Hnbf;");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Yy&]Nwi?J%]$|Hnbf;
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("MRb0s]Qi}v!X&ExZ'", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MRb0s]Qi}v!X&ExZ''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-81), 58);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-81), 58, false);
      assertEquals("0:    dreturn\n", string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore_3", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Utility.classOrInterface(1495);
      Object[] objectArray0 = new Object[0];
      Utility.convertString("class");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("class", "class", "class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      short short0 = Utility.searchOpcode("v\u0007");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.replace("YUM=d$lQv\"se:7J", "W_", "YUM=d$lQv\"se:7J");
      assertEquals("YUM=d$lQv\"se:7J", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('}');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Object object0 = new Object();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-90);
      byteArray1[1] = (byte) (-76);
      byteArray1[2] = (byte) (-76);
      byteArray1[3] = (byte) (-76);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("if_acmpne\t\t#-19276");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_acmpne\t\t#-19276
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = Utility.getSignature("java.lang.YUM=d$lQv\"se:7J");
      assertEquals("Ljava/lang/YUM=d$lQv\"se:7J;", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("ishr", string1);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = "invokestatic";
      Utility.compactClassName("invokestatic", false);
      String string1 = "\t<";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("invokestatic", "\t<", "invokestatic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokestatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      try { 
        Utility.typeOfSignature("H#=ew");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H#=ew
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)29;
      Constant[] constantArray0 = new Constant[4];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(169, 4711);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-126), (-987));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("FN+O{<iK$6m2T");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)29);
      constantArray0[3] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ixor", string0);
      
      int int0 = Utility.clearBit(1848, 169);
      assertEquals(1336, int0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object object0 = new Object();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature(",Z\"$m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,Z\"$m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.searchOpcode("v\u0007");
      Utility.replace("YUM=d$lQv\"se:7J", "W_", "YUM=d$lQv\"se:7J");
      Utility.isJavaIdentifierPart('}');
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 469, false, 'h');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Utility.getSignature("' at index ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)69;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)99;
      byteArray0[8] = (byte)3;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Object object0 = new Object();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = Utility.getSignature("P}");
      assertEquals("LP};", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((byte) (-111));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.signatureToString("LP};", true);
      assertEquals("P}", string1);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      Object object0 = new Object();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Utility.methodSignatureReturnType("J:;9R4=c");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-66);
      Utility.typeOfSignature("J:;9R4=c");
      Utility.accessToString((-1899));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -66
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((-2252));
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((-2252));
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantString0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Utility.replace("fs/?UnEm", "fs/?UnEm", "fs/?UnEm");
      Utility.fillup("fs/?UnEm", (-772), false, 'C');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "fs/?UnEm", (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteSequence0;
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)26, (int) (byte)26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte) (-16);
      byteArray0[8] = (byte)2;
      Utility.encode(byteArray0, false);
      Utility.convertString("org.apache.bcel.classfile.ConstantInvokeDynamic");
      try { 
        Utility.typeOfSignature("`j!ir<xrbUXB'!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: `j!ir<xrbUXB'!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)51;
      byteArray0[1] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("baload", string0);
      
      String string1 = Utility.compactClassName("lushr");
      assertEquals("lushr", string1);
      
      Utility.classOrInterface(0);
      String string2 = Utility.classOrInterface(0);
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = ";Ba)Q3'~sdxd;aug";
      // Undeclared exception!
      Utility.replace(";Ba)Q3'~sdxd;aug", "", "");
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String[] stringArray0 = new String[20];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("swap", string0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Utility.compactClassName("java.lanh.YUM=d$lQv\"s:7J");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.signatureToString("ladd", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ladd'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Utility.isJavaIdentifierPart('7');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte) (-102);
      byteArray0[8] = (byte) (-83);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 106, (int) (byte) (-74), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureReturnType("vWoid");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `vWoid'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)115;
      byteArray0[0] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte)115);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("drem", string0);
      
      boolean boolean0 = Utility.isSet(1476, 3486);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.classOrInterface((-248387339));
      assertEquals("class", string0);
      
      String string1 = Utility.format(5, 5, true, '<');
      assertEquals("5<<<<", string1);
      
      String string2 = Utility.format((-3643), (-248387339), true, '8');
      assertEquals("-3643", string2);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = Utility.replace("y1b6?:^", "y1b6?:^", "y1b6?:^");
      assertEquals("y1b6?:^", string0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      Utility.compactClassName("", true);
      boolean boolean0 = false;
      Utility.compactClassName("{java.lang.Object@4acc4099, java.lang.Object@30a1608d, java.lang.Object@511df53a, java.lang.Object@44166bef, java.lang.Object@6cf6237c, java.lang.Object@57688367}", "_d1 Fb<C5qN9nP7", false);
      try { 
        Utility.methodSignatureArgumentTypes("CRt`s|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: CRt`s|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Utility.setBit(97, 97);
      Utility.compactClassName("[W", "[W", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[W", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<Any exce5ption>(0)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <Any exce5ption>(0)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".. (runcated)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .. (runcated)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S");
      String string0 = Utility.replace("s,?JX>R:l`1J", "M|[7US3v-50|", "OyiBJkmdFBKp.aZgZ");
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(41);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString1;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("DP, ?c4WY/k5k.|n", false);
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-307), (-307));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte) (-6);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-41);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-6);
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      byte byte1 = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byte byte2 = (byte)112;
      byteArray0[2] = (byte)112;
      byte byte3 = (byte)95;
      byteArray0[3] = (byte)95;
      Utility.encode(byteArray0, true);
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Utility.printArray(objectArray0, true, true);
      Utility.clearBit((byte)95, (byte)2);
      Utility.compactClassName("", true);
      // Undeclared exception!
      try { 
        Utility.equals(byteArray0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("frem", string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[4] = (byte)77;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore_2", string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "anewarray", "rpX=Q{B.0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Utility.compactClassName("org.apache.bcel.classfile.ConstantUtf8$1");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "monitorexit";
      stringArray0[1] = "monitorexit";
      stringArray0[2] = null;
      stringArray0[3] = "monitorexit";
      stringArray0[4] = "org.apache.bcel.classfile.ConstantUtf8$1";
      stringArray0[5] = "org.apache.bcel.classfile.ConstantUtf8$1";
      stringArray0[6] = "org.apache.bcel.classfile.ConstantUtf8$1";
      stringArray0[7] = "org.apache.bcel.classfile.ConstantUtf8$1";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = "!1'_Cq+";
      try { 
        Utility.typeOfSignature("!1'_Cq+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1'_Cq+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Utility.signatureToString("Invalid Stack map table tag: ");
      Utility.replace("? extends ", "if_icmple", "checkcast");
      String string0 = Utility.replace("if_icmple", "Invalid Stack map table tag: ", "0aM\"");
      assertEquals("if_icmple", string0);
      
      int int0 = Utility.clearBit(855, 113);
      assertEquals(855, int0);
      
      String string1 = Utility.signatureToString("Invalid Stack map table tag: ", false);
      assertEquals("int", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "if_icmple";
      stringArray0[1] = "if_icmple";
      stringArray0[2] = "if_icmple";
      stringArray0[3] = "if_icmple";
      String string2 = Utility.methodTypeToSignature("Invalid Stack map table tag: ", stringArray0);
      assertEquals("(Lif_icmple;Lif_icmple;Lif_icmple;Lif_icmple;)LInvalid;", string2);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)3;
      byteArray0[6] = (byte) (-11);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)3;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)3, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00 00 00 00 00 00 00 00 00 00 00 00", string0);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-106);
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("fcmpg", string1);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("I;#W@#L3|/");
      assertEquals((byte)10, byte0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lconst_1", string0);
      
      String string1 = Utility.format((-974), (-974), true, 'Z');
      assertEquals("-974", string1);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-102);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpge\t\t#-26112", string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Utility.isJavaIdentifierPart('J');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("java.lang.", stringArray0);
      Utility.methodSignatureToString("()Ljava/lang/;", "", "", true);
      try { 
        Utility.methodSignatureReturnType("3N=d1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `3N=d1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature(")YU=Ad$lQv\"se:7J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )YU=Ad$lQv\"se:7J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("d2i", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("T73?o&}{JX]bb");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Utility.searchOpcode("Jcu6GH ?Y0ZBO");
      Utility.fillup("Jcu6GH ?Y0ZBO", (-32768), true, 'T');
      Utility.replace("6@k", "u!Y~~/. D?%o\"%f^P", "Jcu6GH ?Y0ZBO");
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[8];
      InputStream inputStream0 = null;
      int int0 = 2355;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2355);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dreturn", string0);
      
      String string1 = Utility.getSignature("dreturn");
      assertEquals("Ldreturn;", string1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)83;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-50);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("java.lang.org.apache.bcel.classfile.Utility$JavaReader");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.org.apache.bcel.classfile.Utility$JavaReader
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = Utility.replace("\"l2<$I{|:", "\"l2<$I{|:", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Utility.getSignature("P}");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)73;
      byte byte0 = (byte) (-33);
      byteArray0[4] = (byte) (-33);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      int int0 = 163;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 163, (int) (byte) (-33), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)44;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)44;
      byteArray1[1] = (byte)44;
      byteArray1[2] = (byte)82;
      byteArray1[3] = (byte)82;
      byteArray1[4] = (byte)82;
      byteArray1[5] = (byte)44;
      byteArray1[6] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_2", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("nop", string0);
      
      int int0 = Utility.clearBit(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Utility.methodSignatureReturnType("Z|cA4");
      try { 
        Utility.methodSignatureReturnType("r7", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `r7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Z`j0&~!RdFp");
      assertEquals((byte)4, byte0);
      
      String string0 = Utility.compactClassName(".f%<Gd}|ZE", ">\t", true);
      assertEquals(".f%<Gd}|ZE", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger((-6508));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantInteger0;
      constantArray0[4] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      byteArray0[3] = (byte) (-128);
      constantInteger0.copy();
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fload\t\t%23", string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.bcel.classfile.SourceFile";
      stringArray0[1] = "org.apache.bcel.classfile.SourceFile";
      stringArray0[2] = "org.apache.bcel.classfile.SourceFile";
      stringArray0[3] = "org.apache.bcel.classfile.SourceFile";
      stringArray0[4] = "org.apache.bcel.classfile.SourceFile";
      stringArray0[5] = "org.apache.bcel.classfile.SourceFile";
      String string0 = Utility.methodTypeToSignature("org.apache.bcel.classfile.SourceFile", stringArray0);
      assertEquals("(Lorg/apache/bcel/classfile/SourceFile;Lorg/apache/bcel/classfile/SourceFile;Lorg/apache/bcel/classfile/SourceFile;Lorg/apache/bcel/classfile/SourceFile;Lorg/apache/bcel/classfile/SourceFile;Lorg/apache/bcel/classfile/SourceFile;)Lorg/apache/bcel/classfile/SourceFile;", string0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-20);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = (byte)7;
      byte[] byteArray1 = new byte[4];
      byte byte1 = (byte)5;
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte) (-63);
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte) (-74);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.available();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("R+R}?$1XE Stf{@", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R+R}?$1XE Stf{@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.available();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-62);
      byteArray0[0] = (byte) (-62);
      byte byte1 = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.getSignature("Illegal type for StackMapType: ");
      String string0 = "~^MGg/qq]";
      Utility.compactClassName("monitorenter", "~^MGg/qq]", true);
      try { 
        Utility.typeOfMethodSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = Utility.compactClassName("3KD%.i9rN@hGCRjo2");
      assertEquals("3KD%.i9rN@hGCRjo2", string0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3KD%.i9rN@hGCRjo2");
      String string1 = Utility.accessToString(3825, true);
      assertEquals("public final volatile transient abstract strictfp", string1);
      
      String string2 = Utility.classOrInterface((-639));
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = "long";
      String string1 = "IW\\C:(lL&Q`.08{";
      int int0 = (-3265);
      LocalVariable[] localVariableArray0 = new LocalVariable[3];
      LocalVariableTypeTable localVariableTypeTable0 = null;
      try {
        localVariableTypeTable0 = new LocalVariableTypeTable((LocalVariableTypeTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTypeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      try { 
        Utility.typeOfSignature("RuntimeInvisibleAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeInvisibleAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-111);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string0 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L;L;L;)L;", string0);
      
      String string1 = Utility.fillup("", (byte)41, true, '&');
      assertEquals("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&", string1);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(reference_kind = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `reference_kind = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)36;
      byteArray1[1] = (byte) (-94);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.available();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Utility.getSignature("' at index ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)99;
      byteArray0[8] = (byte)3;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 908, (int) (byte)3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 41. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("BaAQQG");
      assertEquals((byte)8, byte0);
      
      String string0 = Utility.methodSignatureReturnType("BaAQQG", true);
      assertEquals("byte", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)11;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("96 0b 83 0b 93 0b", string1);
      
      byte[] byteArray1 = new byte[0];
      Utility.toHexString(byteArray1);
      int int0 = Utility.setBit((byte) (-106), (byte)8);
      assertEquals((-106), int0);
      
      String string2 = Utility.encode(byteArray1, false);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Utility.replace("I;#W@#L3|/", "I;#W@#L3|/", "I;#W@#L3|/");
      boolean boolean0 = true;
      String string0 = "Q!\"(*q~";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OXoD");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q!\"(*q~", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q!\"(*q~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = Utility.getSignature("' at index ");
      assertEquals("L';", string0);
      
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-94);
      byteArray1[1] = (byte)126;
      byteArray1[2] = (byte)41;
      byteArray1[3] = (byte) (-12);
      byteArray1[4] = (byte) (-101);
      byteArray1[5] = (byte)88;
      byteArray1[6] = (byte)34;
      byteArray1[7] = (byte)59;
      byteArray1[8] = (byte) (-62);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String string1 = Utility.accessToString((int) (byte) (-12));
      assertEquals("protected final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String string0 = Utility.format((-1243), (-1243), true, 'Q');
      assertEquals("-1243", string0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence3, (ConstantPool) null, false);
      assertEquals(2, byteSequence3.getIndex());
      assertEquals("bipush\t\t0", string0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("NH2jPo_UM D@70");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NH2jPo_UM D@70'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)69;
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("#D\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #D\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = Utility.compactClassName("4Qb*m$0'");
      assertEquals("4Qb*m$0'", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lushr", string1);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      try { 
        Utility.typeOfSignature("='^gji/jU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ='^gji/jU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)33;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.printArray((Object[]) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) (byte)18;
      objectArray0[2] = (Object) (byte) (-41);
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) (byte)33;
      objectArray0[5] = (Object) (byte)33;
      Utility.printArray(objectArray0, true, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("iinc");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "lload_3");
      Utility.printArray(printWriter0, (Object[]) null);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("[DfP;AE{WTy");
      assertEquals("double[]", string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String string0 = Utility.compactClassName("g J");
      assertEquals("g J", string0);
      
      byte[] byteArray0 = Utility.decode("g J", false);
      assertArrayEquals(new byte[] {(byte)103, (byte)32, (byte)74}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = "y1b6?:^";
      Utility.replace("y1b6?:^", "y1b6?:^", "y1b6?:^");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "y1b6?:^";
      objectArray0[4] = (Object) "y1b6?:^";
      objectArray0[5] = (Object) "y1b6?:^";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)85, 123, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = Utility.compactClassName("YUM=d$lQv\"se:7J");
      assertEquals("YUM=d$lQv\"se:7J", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('q');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Utility.replace("VZeMtx", "[]", "VZeMtx");
      String string0 = "x\"r\\f6JA\"&Igbu33YH";
      String string1 = "Unreachable default case reached!";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "x\"r\f6JA\"&Igbu33YH", "Unreachable default case reached!", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.replace("$-94Sl", "$-94Sl", "org.apache.commons.io.filefilter.NameFileFilter");
      try { 
        Utility.typeOfSignature("$-94Sl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $-94Sl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String string0 = "GQ/YY";
      try { 
        Utility.typeOfSignature("GQ/YY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GQ/YY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      try { 
        Utility.typeOfSignature("]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String string0 = "PrI){G`o";
      String string1 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("PrI){G`o", "PrI){G`o", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PrI){G`o
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-123);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2215), (int) (byte) (-85));
      assertEquals("0:    d2i\n1:    i2l\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.available();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+OAq^zd-BPFw>nl6\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OAq^zd-BPFw>nl6\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-121);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-121);
      byteArray1[1] = (byte) (-121);
      byteArray1[2] = (byte)73;
      byteArray1[3] = (byte) (-121);
      byteArray1[4] = (byte)73;
      byteArray1[5] = (byte) (-121);
      byteArray1[6] = (byte) (-121);
      byteArray1[7] = (byte)99;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte)73;
      byteArray0[8] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.compactClassName("i2d");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Utility.compactClassName("if_itpgt");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("iL:?}(C5", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iL:?}(C5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-53);
      byteArray1[1] = (byte) (-88);
      byteArray1[2] = (byte) (-53);
      byteArray1[3] = (byte) (-48);
      byteArray1[4] = (byte) (-85);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence1, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("baload", string0);
      
      boolean boolean0 = Utility.isSet(2482, 2443);
      assertTrue(boolean0);
      
      int int0 = Utility.setBit(2360, 2443);
      assertEquals(2360, int0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-32);
      byteArray0[7] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object object0 = new Object();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("l3O", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `l3O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string0 = Utility.printArray(objectArray0, true, false);
      assertEquals("{null}", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), 222, false);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string1);
      
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
      
      String string2 = Utility.convertString("W{%0");
      assertEquals("W{%0", string2);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-128);
      byteArray0[8] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)86;
      byteArray1[1] = (byte)3;
      byteArray1[2] = (byte)78;
      byteArray1[3] = (byte)59;
      byteArray1[4] = (byte) (-128);
      byteArray1[5] = (byte)78;
      byteArray1[6] = (byte)78;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Object object0 = new Object();
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      try { 
        Utility.typeOfSignature("sastore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: sastore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String string0 = Utility.convertString("='^gji/jU");
      assertEquals("=\\'^gji/jU", string0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Object object0 = new Object();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)41;
      byteArray1[1] = (byte) (-76);
      byteArray1[2] = (byte) (-76);
      byteArray1[3] = (byte) (-76);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("dload_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Utility.getSignature("java.lang.YUM=d$lQv\"se:7J");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object object0 = new Object();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("w+kW4ZKKUKrTa=OZ2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: w+kW4ZKKUKrTa=OZ2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-117);
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence1);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("istore_2", string0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("fload_0", string0);
      
      boolean boolean0 = Utility.isSet((byte)34, (byte)83);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Utility.compactClassName("YUM=d$lQv\"se:7J");
      try { 
        Utility.methodSignatureReturnType("YUM=d$lQv\"se:7J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YUM=d$lQv\"se:7J'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("ifnonnull\t\t#22616", string0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String string0 = Utility.compactClassName("/");
      assertEquals(".", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)52;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dastore", string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte) (-78);
      objectArray0[1] = (Object) "/";
      objectArray0[2] = (Object) "/";
      String string2 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string2);
      assertEquals("{\"-78\", \"/\", \"/\"}", string2);
      
      boolean boolean0 = Utility.isSet(76, 62);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("J:;9R4=c");
      assertEquals("long", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("aastore", string1);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-352), (byte)123);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-100), 91, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lshr
         // 1:    lshr
         // 2:    ifge\t\t#31676
         // 5:    lshr
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)119;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 73, 124, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("OH8^R,u?", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OH8^R,u?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Utility.searchOpcode("R+R}?$1XEg Stf{@");
      // Undeclared exception!
      try { 
        Utility.signatureToString("R+R}?$1XEg Stf{@", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R+R}?$1XEg Stf{@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-697), (byte)55);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantLong constantLong0 = new ConstantLong((-697));
      constantArray0[1] = (Constant) constantLong0;
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType(byteSequence0);
      constantArray0[2] = (Constant) constantNameAndType2;
      ConstantInteger constantInteger0 = new ConstantInteger((-6520));
      constantArray0[3] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Utility.compactClassName("+)");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      try { 
        Utility.methodSignatureArgumentTypes("lshr", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lshr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      String string0 = "UKvObgw_8+b?6U";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("UKvObgw_8+b?6U", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UKvObgw_8+b?6U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-32);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.available();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-109);
      Utility.toHexString(byteArray0);
      Utility.toHexString(byteArray0);
      Utility.setBit((byte)11, 196);
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      String string0 = Utility.getSignature("*5. #4Yx}");
      assertEquals("L*5/;", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ishl", string1);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger((-6520));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.compactClassName("castore");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      constantPool0.setConstantPool((Constant[]) null);
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 45, (int) (byte) (-59));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-107);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$b2$fc$5e$95", string1);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-37);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.getSignature("<illegal opcode>");
      assertEquals("L<illegal;", string0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("c_%K$]^-qJ6'$k*}}[", "It@y,119X#vzN*,mJ{", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: c_%K$]^-qJ6'$k*}}[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8H&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8H&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String string0 = Utility.replace("ifgt", "ifgt", "ifgt");
      assertEquals("ifgt", string0);
      
      ConstantString constantString0 = new ConstantString(180);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantString1;
      constantArray0[1] = (Constant) constantString1;
      constantArray0[2] = (Constant) constantString1;
      constantArray0[3] = (Constant) constantString0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("ifgt");
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup_x2", string1);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-37);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("goto\t\t#-22724", string0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore_1", string1);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      String string0 = "OH8^R,u?";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.reset();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fsub", string0);
      
      String string1 = Utility.convertString("r");
      assertEquals("r", string1);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("monitorexit", stringArray0);
      assertEquals("()Lmonitorexit;", string0);
      
      String string1 = Utility.compactClassName("monitorexit", true);
      assertEquals("monitorexit", string1);
      
      MockFile mockFile0 = new MockFile("monitorexit", "()Lmonitorexit;");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Utility.printArray((PrintWriter) mockPrintWriter1, (Object[]) stringArray0);
      assertEquals(3L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fneg", string0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ConstantInteger constantInteger0 = new ConstantInteger((-6508));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantInteger0;
      constantArray0[4] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-100);
      byteArray1[1] = (byte) (-100);
      byteArray1[2] = (byte) (-100);
      byteArray1[3] = (byte) (-100);
      byteArray1[4] = (byte)23;
      byteArray1[5] = (byte) (-100);
      byteArray1[6] = (byte)23;
      byteArray1[7] = (byte) (-100);
      byteArray1[8] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ifge\t\t#-25444", string0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)25;
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) (byte)25;
      objectArray0[6] = (Object) "aload\t\t%193";
      Utility.printArray(objectArray0, false, false);
      boolean boolean0 = Utility.isSet((byte) (-63), 76);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      String string0 = "?0B}(=";
      try { 
        Utility.typeOfSignature("?0B}(=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?0B}(=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)47;
      Utility.compactClassName("eDkk", "eDkk", true);
      Utility.compactClassName("eDkk", "<", true);
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      LocalVariable localVariable0 = new LocalVariable((byte)81, (byte)81, 181, 67, (byte)47, constantPool1);
      LocalVariable localVariable1 = new LocalVariable(localVariable0);
      localVariableArray0[0] = localVariable1;
      LocalVariable localVariable2 = new LocalVariable(localVariable1);
      localVariableArray0[1] = localVariable2;
      ConstantPool constantPool2 = constantPool1.copy();
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte) (-56), 71, localVariableArray0, constantPool2);
      try { 
        Utility.methodSignatureToString("eDkk", "<", "goto_w", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: eDkk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = "java.lang.ireturn";
      // Undeclared exception!
      try { 
        Utility.signatureToString("java.lang.ireturn", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.ireturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      int int0 = Utility.clearBit(207, 207);
      assertEquals(207, int0);
      
      Object object0 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)112;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.methodTypeToSignature("u", (String[]) null);
      assertEquals("()Lu;", string1);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String string0 = Utility.replace("`QEq/d[}t]*QX){<IV", "`QEq/d[}t]*QX){<IV", "`QEq/d[}t]*QX){<IV");
      assertEquals("`QEq/d[}t]*QX){<IV", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('.');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("nDJ[h|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[h|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-78);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-78);
      byteArray1[1] = (byte) (-78);
      byteArray1[2] = (byte) (-78);
      byteArray1[3] = (byte) (-78);
      byteArray1[4] = (byte) (-78);
      byteArray1[5] = (byte) (-78);
      byteArray1[6] = (byte) (-78);
      byteArray1[7] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)74;
      byteArray2[2] = (byte) (-78);
      byteArray2[3] = (byte) (-78);
      byteArray2[4] = (byte) (-78);
      byteArray2[5] = (byte) (-78);
      byteArray2[6] = (byte) (-78);
      byteArray2[7] = (byte) (-78);
      ByteSequence byteSequence1 = new ByteSequence(byteArray2);
      byteSequence1.read();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-120);
      byteArray0[8] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fload_1", string0);
      
      boolean boolean0 = Utility.isSet((byte) (-98), (byte)35);
      assertTrue(boolean0);
      
      int int0 = Utility.setBit(4213, 12);
      assertEquals(4213, int0);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)95;
      Utility.encode(byteArray0, true);
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", true);
      String string0 = "invokeinterface";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", "invokeinterface", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iadd", string0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      String string0 = "long";
      String string1 = "?>...";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("long", "?>...", "?>...", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Utility.classOrInterface((-2013));
      String string0 = "invokestatic";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      LocalVariable localVariable0 = new LocalVariable((-2487), (-2487), 108, 7, (-2487), (ConstantPool) null);
      localVariableArray0[0] = localVariable0;
      localVariable0.setNameIndex(7);
      LocalVariable localVariable1 = new LocalVariable(1730, 2048, 108, 1, 2048, (ConstantPool) null);
      localVariableArray0[1] = localVariable1;
      LocalVariableTable localVariableTable0 = new LocalVariableTable(7, 2048, localVariableArray0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("invokestatic", "invokestatic", "class", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokestatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Utility.compactClassName("%}T1cy^/@?!-q(");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("%}T1cy^/@?!-q(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %}T1cy^/@?!-q(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("H,T5Ne1&t$N=:d5_bm_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H,T5Ne1&t$N=:d5_bm_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[<84-y3");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.clearBit((-4193), (-4193));
      Utility.setBit(2147479455, 57);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte) (-80);
      Utility.equals(byteArray0, byteArray0);
      Utility.isSet((byte) (-58), 2147479455);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("hz,eW*", "short", "short", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: hz,eW*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_0", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals("null", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[3] = (byte)51;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("baload", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('0');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Utility.clearBit(207, 207);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)51;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1482, 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Utility.classOrInterface(1495);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("class", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Utility.compactClassName("java.lang.YUM=d$lQv\"se:7J");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "", "dup", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-3218), (-3218));
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-3218), (-3218));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantUtf8.getCachedInstance("FN+O{<iK$6m2T");
      ConstantInteger constantInteger0 = new ConstantInteger(47);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-120);
      byteArray0[6] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fload_1", string0);
      
      boolean boolean0 = Utility.isSet((byte) (-98), (byte)35);
      assertTrue(boolean0);
      
      String string1 = Utility.convertString("\n");
      assertEquals("\\n", string1);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";ne}=q`Q{#{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;ne}=q`Q{#{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger((-6520));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        byteSequence0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      String string0 = "$-94Sl";
      String string1 = "org.apache.commons.io.filefilter.NameFileFilter";
      Utility.replace("$-94Sl", "$-94Sl", "org.apache.commons.io.filefilter.NameFileFilter");
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureToString("$-94Sl", "org.apache.commons.io.filefilter.NameFileFilter", "org.apache.commons.io.filefilter.NameFileFilter", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $-94Sl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      String string0 = "LY{{.#r;";
      try { 
        Utility.typeOfMethodSignature("LY{{.#r;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LY{{.#r;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      String string0 = "float";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "float";
      Utility.methodTypeToSignature("float", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("float", "float", "int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "_[8o*sz^yd>_";
      stringArray0[1] = ", index = ";
      stringArray0[2] = ", index = ";
      stringArray0[3] = ", index = ";
      stringArray0[4] = ", npairs = ";
      stringArray0[5] = ", index = ";
      stringArray0[6] = ", index = ";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(", index = ", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[8o*sz^yd>_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, constantPool0, (-3083), (int) (byte) (-100));
      // Undeclared exception!
      try { 
        constantPool0.getConstant(12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)97;
      Utility.equals(byteArray0, byteArray0);
      Utility.format((byte)97, (byte)97, true, '?');
      Utility.fillup("97???????????????????????????????????????????????????????????????????????????????????????????????", 447, false, '?');
      Utility.format((byte)32, (byte)97, true, '?');
      // Undeclared exception!
      try { 
        Utility.signatureToString("32???????????????????????????????????????????????????????????????????????????????????????????????");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `32???????????????????????????????????????????????????????????????????????????????????????????????'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      String string0 = Utility.replace("ifgt", "ifgt", "ifgt");
      assertEquals("ifgt", string0);
      
      short short0 = Utility.searchOpcode("if_icmpgt");
      assertEquals((short)163, short0);
      
      String string1 = Utility.compactClassName("if_icmpgt", "ifgt", true);
      assertEquals("if_icmpgt", string1);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      String string0 = Utility.getSignature("' at index ");
      assertEquals("L';", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)99;
      byteArray0[8] = (byte)3;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantPool0.toString();
      String string1 = Utility.replace("", "' at index ", "L';");
      assertEquals("", string1);
      
      String string2 = Utility.compactClassName("b!B,#He", "' at index ", false);
      assertEquals("b!B,#He", string2);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Utility.getSignature(";UKa\")E81");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L;UKa\")E81;", "^IL d6||[Z)XYn;fBn,", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lsub", string0);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">jO|.@neH6\"&^yD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >jO|.@neH6\"&^yD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-20), (-1013));
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)47, 774);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("SYS_]");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Utility.searchOpcode("e'R9DOLHcw/%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|8_kk");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "|8_kk";
      objectArray0[2] = (Object) "|8_kk";
      objectArray0[3] = (Object) "|8_kk";
      objectArray0[4] = (Object) "e'R9DOLHcw/%";
      objectArray0[5] = (Object) "e'R9DOLHcw/%";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-117);
      byte[] byteArray1 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence1);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("istore_2", string0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)61;
      byteArray0[2] = (byte) (-99);
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence1);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("ifgt\t\t#2", string0);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-1202), (-1202));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Utility.replace("java.lang.YUM=d$lQv\"se:7J", "java.lang.YUM=d$lQv\"se:7J", "java.lang.YUM=d$lQv\"se:7J");
      Utility.compactClassName("\"");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte) (-63);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 701, (int) (byte) (-91));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)97;
      byteArray0[5] = (byte)97;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-55);
      byteArray1[1] = (byte)101;
      byteArray1[2] = (byte) (-55);
      byteArray1[3] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Utility.isJavaIdentifierPart('4');
      try { 
        Utility.methodSignatureReturnType("The array of suffixes must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The array of suffixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("V", true);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Utility.getSignature("P}");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      Utility.convertString("P}");
      try { 
        Utility.typeOfSignature("P}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ldiv", string0);
  }
}
