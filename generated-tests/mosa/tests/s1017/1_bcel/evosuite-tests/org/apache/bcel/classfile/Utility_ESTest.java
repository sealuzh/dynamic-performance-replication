/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:30:43 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!!/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"b2t,0QqdGu.HZ]Ie");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"b2t,0QqdGu.HZ]Ie
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.SC_BLOCK_DATA;
      int int0 = Utility.setBit((byte)8, (byte)8);
      assertEquals(264, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("<clinit>", "<clinit>", "<clinit>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <clinit>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L&*rf3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L&*rf3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("RuntimeVisibleParameterAnnotrtions");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeVisibleParameterAnnotrtions'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("Z!Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Z!Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = Utility.compactClassName("invokedynamic");
      assertEquals("invokedynamic", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 181);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Utility.printArray(objectArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("{null, null, null, null, null, null, null, null}");
      byte[] byteArray0 = Utility.decode(">1iv&)b", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, (int) (byte)24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2678), 1009);
      assertEquals("0:    nop\n1:    l2f\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-330), (int) (byte) (-32));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
      
      short short0 = Utility.searchOpcode("iinc");
      assertEquals((short)132, short0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Utility.format(165, 165, false, 'w');
      assertEquals("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww165", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = Utility.fillup("t+BJ+B?/M/p", (-2329), true, '@');
      assertEquals("t+BJ+B?/M/p", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = Utility.isSet(572, 572);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = Utility.getSignature(")\n");
      assertEquals("L);", string0);
      
      String string1 = Constants.ILLEGAL_OPCODE;
      boolean boolean0 = Utility.isJavaIdentifierPart('L');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = Utility.clearBit((-843), 123);
      assertEquals((-134218571), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.replace("", "private", "");
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("f@", stringArray0);
      assertEquals("()Lf@;", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "7:K!tCf$4?3zs5J8";
      stringArray0[1] = "7:K!tCf$4?3zs5J8";
      stringArray0[2] = "BootstrapMethods(";
      String string0 = Utility.methodTypeToSignature("BootstrapMethods(", stringArray0);
      assertEquals("(L7:K!tCf$4?3zs5J8;L7:K!tCf$4?3zs5J8;LBootstrapMethods(;)LBootstrapMethods(;", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("{null, null, null, null, null, null, null, null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {null, null, null, null, null, null, null, null}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("OXc", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OXc'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("<clinit>", false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("3c 63 6c 69 6e 69 74 3e", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-11);
      byte byte0 = Utility.typeOfSignature("SyntheticRepository could not load ");
      assertEquals((byte)9, byte0);
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("f5 00 00 00 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      try { 
        Utility.decode("@8`1M7wsh.$oN<(k}\"", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_mosa/projects/1_bcel");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) evoSuiteFile0;
      objectArray0[1] = (Object) evoSuiteFile0;
      objectArray0[2] = (Object) evoSuiteFile0;
      objectArray0[3] = (Object) evoSuiteFile0;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_mosa/projects/1_bcel\", \"/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_mosa/projects/1_bcel\", \"/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_mosa/projects/1_bcel\", \"/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_mosa/projects/1_bcel\"}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("putstatic", "putstatic", "putstatic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.accessToString(0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = Utility.isSet((byte) (-83), (byte) (-83));
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("8k&V5&(Za63r|/PI", false);
      assertEquals("8k&V5&(Za63r|.PI", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      String string1 = Utility.getSignature("<illegal opcode>");
      String string2 = Utility.convertString("L<illegal;");
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      Utility.encode(byteArray0, false);
      Utility.getSignature("long");
      // Undeclared exception!
      try { 
        Utility.signatureToString("4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "j<zQ7w~f`[l^";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("j<zQ7w~f`[l^", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[l^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 171, 171);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = Utility.classOrInterface(944);
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(">+|I-0J", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4816, (-602));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.getSignature("\t<");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t<", "L<;", "\t<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[2] = objectArray0[0];
      String string0 = Utility.convertString("@8`1M7ws$oN<(k}\"");
      assertEquals("@8`1M7ws$oN<(k}\\\"", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      try { 
        Utility.typeOfSignature("iGh'[:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iGh'[:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = Utility.accessToString((-2662), true);
      assertEquals("private static final transient native abstract synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = Utility.signatureToString("Invalid type: ", true);
      assertEquals("int", string0);
      
      String string1 = Utility.accessToString((-1996), true);
      assertEquals("protected final strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)95;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), 77);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "0:    dsub\n1:    goto\t\t#24321\n";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "0:    dsub\n1:    goto\t\t#24321\n";
      objectArray0[3] = (Object) byteArray0;
      objectArray0[4] = (Object) byteArray0;
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.getSignature("0:    dsub\n1:    goto\t\t#24321\n, java.lang.Object@37ceef18, 0:    dsub\n1:    goto\t\t#24321\n, [B@56cefe0b, [B@56cefe0b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[B@56cefe0b, [B@56cefe0b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string0 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L;L;L;)L;", string0);
      
      String string1 = Utility.compactClassName("\"", "", true);
      assertEquals("\"", string1);
      
      String string2 = Utility.convertString("-GmDi'IyLj70eI[gD}n");
      assertEquals("-GmDi\\'IyLj70eI[gD}n", string2);
      
      String string3 = Constants.STATIC_INITIALIZER_NAME;
      String string4 = Utility.toHexString(byteArray0);
      assertEquals("00 00", string4);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1123), (int) (byte) (-76));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)37, (int) (byte) (-78));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("getfi'els", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-587), (-587));
      assertEquals("0:    dsub\n1:    lsub\n2:    ineg\n3:    fsub\n4:    lmul\n5:    dload_1\n6:    lsub\n7:    idiv\n8:    drem\n", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("@8`1M7ws$oN<(k}\"", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2254, 2254);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals("{null, null, null, null, null, null, null, null}", string0);
      
      byte[] byteArray0 = Utility.decode("=O/M(v", false);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-587), (-587));
      assertEquals("0:    istore_2\n1:    iastore\n2:    laload\n3:    astore_2\n4:    dload_2\n5:    fneg\n", string1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("short", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 429, 429);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "putfield";
      byte[] byteArray0 = Utility.decode("putfield", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 199, 1588);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[0] = (byte)113;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)113, (int) (byte) (-111));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-111), (int) (byte) (-111));
      assertEquals("0:    i2b\n", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.signatureToString("Illegal type: ");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte) (-65);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-65), (int) (byte) (-65));
      assertEquals("0:    athrow\n1:    athrow\n2:    athrow\n3:    athrow\n4:    athrow\n5:    athrow\n6:    athrow\n", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utility.compactClassName(",+[OgyK3U/^", true);
      Utility.clearBit(705, 705);
      Utility.accessToString(705, true);
      try { 
        Utility.decode("synchronized", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) ";Kr";
      byte[] byteArray0 = Utility.decode(";Kr", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 199, 1588);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "+";
      try { 
        Utility.typeOfSignature("+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("255d`[X>0t");
      byte[] byteArray0 = Utility.decode("255d`[X>0t", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("255d$60$5bX$3e0t", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.decode("G8|+^C$=lc(q", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-105);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte) (-105));
      assertEquals("0:    nop\n1:    nop\n2:    dcmpl\n", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("F5k4S5V7g", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 109, 109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.accessToString((int) (byte) (-76), false);
      String string0 = "4";
      try { 
        Utility.typeOfSignature("4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[0] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 182, (int) (byte) (-88));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("$l$8b$I$A$A$A$A$A$A$A");
      byte[] byteArray0 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = Utility.signatureToString("B-TiP,S/~V1W");
      assertEquals("byte", string0);
      
      String string1 = Utility.convertString("invokevirtual");
      assertEquals("invokevirtual", string1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      try { 
        Utility.typeOfSignature("@^eeR7l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @^eeR7l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("`z=|kn|%r%>Ur<b", false);
      Utility.encode(byteArray0, false);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 995, 200);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Pattern.quote(")\n");
      String string0 = Utility.convertString("Q)\nE");
      assertEquals("Q)\\nE", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)47;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1092), 2993);
      assertEquals("0:    nop\n1:    laload\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("255d`[X>0t");
      byte[] byteArray0 = Utility.decode("255d`[X>0t", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-124), (-80));
      assertEquals("0:    aaload\n1:    saload\n2:    saload\n3:    isub\n4:    iadd\n5:    dup_x2\n6:    pop2\n7:    istore_3\n8:    faload\n9:    ineg\n", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("XE", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 66, 176);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("XE", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XE'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature(">40Vj,cdp-?t&p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >40Vj,cdp-?t&p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1@4c;)4gV>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1@4c;)4gV>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), (int) (byte) (-80));
      assertEquals("0:    areturn\n", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("$l$8b$I$A$A$A$A$A$A$A");
      Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 194, (int) (byte)24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("RuntimeVisibleParameterAnnotrtions", false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, 3039);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("24:   fdiv\n25:   fdiv\n26:   ddiv\n27:   ineg\n28:   frem\n29:   ineg\n30:   lmul\n31:   ddiv\n32:   fdiv\n33:   drem\n", "wBv", "RuntimeVisibleParameterAnnotrtions", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 24:   fdiv
         // 25:   fdiv
         // 26:   ddiv
         // 27:   ineg
         // 28:   frem
         // 29:   ineg
         // 30:   lmul
         // 31:   ddiv
         // 32:   fdiv
         // 33:   drem
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 171, 171);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 181);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-85);
      byteArray0[3] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-249), 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-83), 48);
      assertEquals("0:    lreturn\n1:    lreturn\n2:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",^;7;H/ZY>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,^;7;H/ZY>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("class");
      byte[] byteArray0 = Utility.decode("7\"nMaH1rL;[l[E=tF\"m", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, (int) (byte)24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = Utility.replace("CNonstantValue", "CNonstantValue", "CNonstantValue");
      assertEquals("CNonstantValue", string0);
      
      String string1 = Utility.signatureToString("CNonstantValue");
      assertEquals("char", string1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)61;
      // Undeclared exception!
      try { 
        Utility.signatureToString("N7_I[5Yr~6Q85:_(yC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N7_I[5Yr~6Q85:_(yC'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), (int) (byte) (-70));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*&xH;j)58IwqbtJoC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &xH;j)58IwqbtJoC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        Utility.typeOfSignature("XtF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XtF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.accessToString(116);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "void";
      stringArray0[1] = "protected final synchronized volatile";
      stringArray0[2] = "protected final synchronized volatile";
      stringArray0[3] = "protected final synchronized volatile";
      stringArray0[4] = "protected final synchronized volatile";
      stringArray0[5] = "\"";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        Utility.typeOfSignature("RuntimeVisibleParameterAnnotrtions");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeVisibleParameterAnnotrtions
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-128);
      byteArray1[1] = (byte) (-128);
      byteArray1[2] = (byte) (-128);
      byteArray1[3] = (byte)81;
      byteArray1[4] = (byte) (-128);
      byteArray1[5] = (byte) (-128);
      byteArray1[6] = (byte) (-128);
      byteArray1[7] = (byte) (-128);
      byteArray1[8] = (byte)46;
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-128), (int) (byte) (-128));
      assertEquals("0:    ior\n1:    ior\n2:    ior\n3:    fastore\n4:    ior\n5:    ior\n6:    ior\n7:    ior\n8:    iaload\n", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = ")\n";
      try { 
        Utility.typeOfSignature(")\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-58);
      byteArray0[2] = (byte) (-104);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-58), 178);
      assertEquals("0:    ifnull\t\t#152\n3:    nop\n4:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8k&V5&(Za63<r|/PI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8k&V5&(Za63<r|/PI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      try { 
        Utility.typeOfSignature("00qFKo-/ZpwyT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00qFKo-/ZpwyT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)75;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1421), (int) (byte)26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dup_x1
         // 1:    iload_0
         // 2:    iload_0
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byte byte0 = Utility.typeOfSignature("BootstrapMethods(");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("ConstantValue");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      short short0 = Utility.searchOpcode("\"b2t,0QqdGu.HZ]Ie");
      assertEquals((short) (-1), short0);
      
      try { 
        Utility.typeOfSignature("?ndu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?ndu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)72;
      byteArray0[4] = (byte) (-118);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)43, 173);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("J");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Nja8r^uf<D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Nja8r^uf<D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Z!Z");
      assertEquals((byte)4, byte0);
      
      byte byte1 = Utility.typeOfSignature("Z!Z");
      assertTrue(byte1 == byte0);
      assertEquals((byte)4, byte1);
      
      String string0 = Utility.signatureToString("Z!Z", true);
      assertEquals("boolean", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = Utility.format(37, 126, true, '\"');
      assertEquals("37\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "37\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"";
      byte[] byteArray0 = new byte[6];
      String string1 = Utility.encode(byteArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("$A$A$A$A$A$A", string1);
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("37\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 37\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("5-Sv-9yG *,Y{]7p+>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5-Sv-9yG *,Y{]7p+>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      try { 
        Utility.typeOfSignature("GbHs K(,d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GbHs K(,d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "Kv-L)pM_";
      short short0 = Utility.searchOpcode("Kv-L)pM_");
      assertEquals((short) (-1), short0);
      
      try { 
        Utility.typeOfSignature("Kv-L)pM_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kv-L)pM_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)92;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), 88);
      assertArrayEquals(new byte[] {(byte)103, (byte) (-112), (byte)92, (byte)0}, byteArray0);
      assertEquals("0:    dsub\n1:    d2f\n2:    dup2\n3:    nop\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
      
      String string0 = Utility.signatureToString("StackMap", false);
      assertEquals("short", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.signatureToString("Dont call getValueString() on a non STRING ElementValue", false);
      assertEquals("double", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = Utility.getSignature("Dont call getValueFloat() on a non FLOAT ElementValue");
      assertEquals("LDont;", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("LDont;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".ZT53v`Df$lrjtIP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .ZT53v`Df$lrjtIP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7K5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7K5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=(M(v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =(M(v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("V");
      assertEquals("void", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("Y4B['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y4B['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = Utility.getSignature("lmul");
      assertEquals("Llmul;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-4), (int) (byte)20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 8, (int) (byte) (-124));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = "[]w";
      short short0 = Utility.searchOpcode("[]w");
      assertEquals((short) (-1), short0);
      
      // Undeclared exception!
      try { 
        Utility.getSignature("[]w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null, null, null, null, null, null, null, null}", string0);
      assertNotNull(string0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("s+-o4^");
      assertNotNull(mockPrintStream0);
      
      byte byte0 = Utility.typeOfSignature("From\tTo\tHandler\tType\n");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-gci6'mJ~HHz>3S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -gci6'mJ~HHz>3S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte byte0 = Constants.CONSTANT_Integer;
      assertEquals((byte)3, byte0);
      
      byte[] byteArray0 = Utility.decode("anewarray", false);
      assertArrayEquals(new byte[] {(byte)97, (byte)110, (byte)101, (byte)119, (byte)97, (byte)114, (byte)114, (byte)97, (byte)121}, byteArray0);
      assertNotNull(byteArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("anewarray");
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte)3;
      byteArray1[2] = (byte)3;
      byteArray1[3] = (byte)48;
      byteArray1[4] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)48, (byte)3}, byteArray1);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      try { 
        Utility.typeOfSignature("'9cD-{J3fZV|47U7C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '9cD-{J3fZV|47U7C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "EE#yjB'U=JmYVE";
      try { 
        Utility.typeOfSignature("EE#yjB'U=JmYVE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EE#yjB'U=JmYVE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = "O5n'WEcA`$SS^tPt&q";
      try { 
        Utility.typeOfSignature("O5n'WEcA`$SS^tPt&q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O5n'WEcA`$SS^tPt&q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("2I\"be1w#}", false);
      assertArrayEquals(new byte[] {(byte)50, (byte)73, (byte)34, (byte)98, (byte)101, (byte)49, (byte)119, (byte)35, (byte)125}, byteArray0);
      assertNotNull(byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)73, (byte)34, (byte)98, (byte)101, (byte)49, (byte)119, (byte)35, (byte)125}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      try { 
        Utility.typeOfSignature("2I\"be1w#}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2I\"be1w#}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = Utility.signatureToString("V*6~PY9[p");
      assertEquals("void", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("Code");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Code", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";Kr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;Kr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "The prefix must not be null";
      // Undeclared exception!
      try { 
        Utility.signatureToString("The prefix must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The prefix must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 172, 172);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("255d`[X>0t");
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = Utility.decode("255d`[X>0t", false);
      assertArrayEquals(new byte[] {(byte)50, (byte)53, (byte)53, (byte)100, (byte)96, (byte)91, (byte)88, (byte)62, (byte)48, (byte)116}, byteArray0);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)25;
      byteArray1[1] = (byte) (-75);
      byteArray1[2] = (byte) (-75);
      byteArray1[4] = (byte) (-77);
      byteArray1[5] = (byte)46;
      byteArray1[6] = (byte) (-112);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)46, (int) (byte)93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      try { 
        Utility.typeOfSignature("Pf?t\".[ArsWu;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Pf?t\".[ArsWu;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)32, 1673);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null, null}", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 126, 166);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      short short0 = Constants.INT2CHAR;
      assertEquals((short)146, short0);
      
      byte[] byteArray0 = Utility.decode("invokeinte<rface", false);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1480, 4816);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = Utility.getSignature("(name_index = ");
      assertEquals("L(name_index;", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("(name_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (name_index = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)92, (int) (byte)92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-113);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-210), 65);
      assertArrayEquals(new byte[] {(byte)6, (byte)16, (byte)33, (byte)83, (byte)62, (byte) (-113)}, byteArray0);
      assertEquals("0:    iconst_3\n1:    bipush\t\t33\n3:    aastore\n4:    istore_3\n5:    d2l\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byte byte0 = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 512, (int) (byte) (-98));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3995, 3995);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-115));
      assertArrayEquals(new byte[] {(byte) (-115), (byte)0}, byteArray0);
      assertEquals("0:    f2d\n1:    nop\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("iload_1");
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = Utility.decode("iload_1", false);
      assertArrayEquals(new byte[] {(byte)105, (byte)108, (byte)111, (byte)97, (byte)100, (byte)95, (byte)49}, byteArray0);
      assertNotNull(byteArray0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)105, (byte)108, (byte)111, (byte)97, (byte)100, (byte)95, (byte)49}, byteArray0);
      assertEquals("iload_1", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)108, (byte)111, (byte)97, (byte)100, (byte)95, (byte)49}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[A:\rccq '7R\"l-");
      assertEquals((byte)13, byte0);
      
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[2] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)46, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)37, 173);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "UDahr|fbx<D";
      try { 
        Utility.typeOfSignature("UDahr|fbx<D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UDahr|fbx<D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-61);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-61), (int) (byte) (-61));
      assertEquals("0:    arraylength\n1:    monitorexit\n2:    arraylength\n3:    monitorexit\n4:    arraylength\n5:    monitorexit\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "6";
      try { 
        Utility.typeOfSignature("6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-41);
      String string0 = "M:Szgi";
      try { 
        Utility.typeOfSignature("M:Szgi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M:Szgi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 60, (int) (byte) (-71));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-61);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 992, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("=$(M(v", false);
      assertArrayEquals(new byte[] {(byte)61, (byte)0, (byte)77, (byte)40, (byte)118}, byteArray0);
      assertNotNull(byteArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("=$(M(v");
      assertNotNull(mockPrintStream0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte)0, (byte)77, (byte)40, (byte)118}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      try { 
        Utility.methodSignatureReturnType("MN", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("iload_1", (String[]) null);
      assertEquals("()Liload_1;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("()Liload_1;");
      assertTrue(string1.equals((Object)string0));
      assertEquals("()Liload_1;", string1);
      assertNotNull(string1);
      
      String string2 = "Y$:\\;AKK";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y$:;AKK", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y$:;AKK'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The prefix must not be null");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte) (-73);
      byteArray1[3] = (byte) (-105);
      byteArray1[4] = (byte) (-105);
      byteArray1[5] = (byte) (-73);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-73), (byte)0, (byte) (-105), (byte) (-105), (byte) (-73)}, byteArray1);
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-73), (int) (byte) (-73));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    istore\t\t%183
         // 2:    nop
         // 3:    dcmpl
         // 4:    dcmpl
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-88);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-88), (byte)0, (byte) (-122), (byte) (-88)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-122), (int) (byte) (-88));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    jsr\t\t#-22528
         // 3:    i2f
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-108);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)84, (int) (byte)84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3050), (int) (byte)122);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    ishr\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 187, (int) (byte) (-61));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      try { 
        Utility.typeOfSignature("#|bSA)5(Sm3{hR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #|bSA)5(Sm3{hR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 190);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (int) (byte) (-128));
      assertArrayEquals(new byte[] {(byte) (-128), (byte)0}, byteArray0);
      assertEquals("0:    ior\n1:    nop\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)17, (int) (byte)24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(1020L);
      assertNotNull(constantLong0);
      assertEquals(1020L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      Constant[] constantArray0 = new Constant[6];
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong0;
      constantArray0[4] = (Constant) constantLong0;
      constantArray0[5] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)16, (-1442298719));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-61);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1840, 1840);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)37;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 74, (int) (byte)37);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Utility.decode("[v_O`x%D", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)91, (byte)118, (byte)95, (byte)79, (byte)96, (byte)120, (byte)37, (byte)68}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      String string0 = Utility.encode(byteArray1, true);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)91, (byte)118, (byte)95, (byte)79, (byte)96, (byte)120, (byte)37, (byte)68}, byteArray1);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)91, (byte)118, (byte)95, (byte)79, (byte)96, (byte)120, (byte)37, (byte)68}, byteArray1);
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = Utility.replace("daloaU", "daloaU", "daloaU");
      assertEquals("daloaU", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("3S+}$Em 49%K7");
      assertFalse(string1.equals((Object)string0));
      assertEquals("3S+}$Em 49%K7", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = Utility.decode("3S+}$Em 49%K7", false);
      assertNotNull(byteArray0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      short short0 = byteSequence0.readShort();
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals((short)13139, short0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(2, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)25, (-156));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = Utility.replace("daloaU", "daloaU", "daloaU");
      assertEquals("daloaU", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("3S+}$Em 49%K7");
      assertFalse(string1.equals((Object)string0));
      assertEquals("3S+}$Em 49%K7", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = Utility.decode("3S+}$Em 49%K7", false);
      assertNotNull(byteArray0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)66;
      byteArray1[2] = (byte)65;
      byteArray1[4] = (byte) (-80);
      byteArray1[5] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)65, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-114);
      int int0 = 1008;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1008, 704);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null, null, null, null, null, null, null, null}", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jsr_w");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)53;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-81), 40);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)60, (byte) (-114), (byte) (-81), (byte) (-16), (byte)53}, byteArray0);
      assertEquals("0:    istore_1\n1:    d2i\n2:    dreturn\n3:    <illegal opcode>\n4:    saload\n", string1);
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Q+sJFhDM", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q+sJFhDM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), 36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-55), (-1254));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dcmpg
         // 1:    iconst_2
         // 2:    dcmpg
         // 3:    iconst_2
         // 4:    dcmpg
         // 5:    iconst_2
         // 6:    iconst_2
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("!B%Y", false);
      assertArrayEquals(new byte[] {(byte)33, (byte)66, (byte)37, (byte)89}, byteArray0);
      assertNotNull(byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-870), 199);
      assertArrayEquals(new byte[] {(byte)33, (byte)66, (byte)37, (byte)89}, byteArray0);
      assertEquals("0:    lload_3\n1:    lstore_3\n2:    fload_3\n3:    dup\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('M');
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature(" (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = Utility.replace("daloaU", "daloaU", "daloaU");
      assertEquals("daloaU", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("3S+}$Em 49%K7");
      assertFalse(string1.equals((Object)string0));
      assertEquals("3S+}$Em 49%K7", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = Utility.decode("3S+}$Em 49%K7", false);
      assertNotNull(byteArray0);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (int) (byte) (-128));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0:    baload\n1:    aastore\n2:    aload_1\n3:    lushr\n4:    iconst_1\n5:    ldiv\n6:    lload_2\n7:    caload\n8:    dstore\t\t%37\n10:   astore_0\n11:   lstore\t\t%127\n", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("iload_1", (String[]) null);
      assertEquals("()Liload_1;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("()Liload_1;");
      assertTrue(string1.equals((Object)string0));
      assertEquals("()Liload_1;", string1);
      assertNotNull(string1);
      
      String string2 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("<clinit>", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 18, (int) (byte)18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-95);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-95), (int) (byte) (-95));
      assertArrayEquals(new byte[] {(byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    if_icmplt\t\t#0\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "(L";
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      assertEquals((byte)66, byte0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(L", "(L", "(L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("255d`[X>0t");
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-114);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-984), (int) (byte) (-114));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aload_0
         // 1:    aload_0
         // 2:    iconst_4
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-85);
      byteArray1[1] = (byte) (-85);
      byteArray1[2] = (byte) (-85);
      byteArray1[3] = (byte) (-85);
      byteArray1[4] = (byte) (-85);
      byteArray1[5] = (byte) (-85);
      byteArray1[6] = (byte) (-85);
      byteArray1[7] = (byte) (-85);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-85), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-85), (byte) (-85), (byte) (-85), (byte) (-85), (byte) (-85), (byte) (-85), (byte) (-85)}, byteArray1);
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      try { 
        Utility.typeOfSignature("A/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte)37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-47), (-889275714));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    jsr_w\t\t#-1599024790
         // 5:    lor
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("25N5d`[X>0t");
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-99);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3106), (-294));
      assertEquals("0:    ifgt\t\t#0\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-96);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-96)}, byteArray0);
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte) (-96));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-67)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (-503));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      // Undeclared exception!
      try { 
        Utility.signatureToString("U.#xo?LRzcdWHj7I=", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U.#xo?LRzcdWHj7I='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature("$l$8b$I$A$A$A$A$A$A$A");
      assertFalse(string1.equals((Object)string0));
      assertEquals("L$l$8b$I$A$A$A$A$A$A$A;", string1);
      assertNotNull(string1);
      
      String string2 = Utility.signatureToString("L$l$8b$I$A$A$A$A$A$A$A;");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) byteArray0;
      objectArray0[3] = (Object) byteArray0;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte[] byteArray1 = Utility.decode("{java.lang.Object@168b055b, [B@7fbfdbf8, [B@7fbfdbf8, [B@7fbfdbf8}", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Utility.decode(">JJ4fuU~amm", false);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (-477), (int) (byte) (-70));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    lshr\n1:    fmul\n2:    ladd\n3:    fneg\n4:    ladd\n5:    iaload\n6:    idiv\n7:    ladd\n8:    fdiv\n9:    dsub\n10:   iaload\n11:   iastore\n12:   fadd\n13:   fmul\n14:   lsub\n15:   dadd\n16:   ineg\n17:   lstore_1\n18:   daload\n19:   istore\t\t%56\n21:   fadd\n22:   faload\n23:   saload\n24:   saload\n25:   fadd\n26:   aload_2\n27:   lload_2\n28:   dup_x2\n29:   lstore_3\n30:   lstore_1\n31:   lstore\t\t%102\n33:   fadd\n34:   fsub\n35:   isub\n36:   fadd\n37:   fsub\n38:   fstore\t\t%44\n40:   lload_2\n41:   dup_x2\n42:   lstore_3\n43:   lstore_1\n44:   lstore\t\t%102\n46:   fadd\n47:   fsub\n48:   isub\n49:   fadd\n50:   fsub\n51:   fstore\t\t%44\n53:   lload_2\n54:   dup_x2\n55:   lstore_3\n56:   lstore_1\n57:   lstore\t\t%102\n59:   fadd\n60:   fsub\n61:   isub\n62:   fadd\n63:   fsub\n64:   fstore\t\t%125\n", string1);
      assertNotNull(string1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = Utility.signatureToString("Invalid type: ", true);
      assertEquals("int", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-102);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-700), (-700));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-120);
      byteArray0[3] = (byte)102;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-120), (int) (byte)93);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-104), (byte)93, (byte)102, (byte)0}, byteArray0);
      assertEquals("0:    impdep2\n1:    dcmpg\n2:    dup2_x1\n3:    fsub\n4:    nop\n", string0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      short short0 = Utility.searchOpcode("ConstantValue");
      assertEquals((short) (-1), short0);
      
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) "Y?";
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{Y?, null, null, null, null, null, null, null, null, null}", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = Utility.decode("{Y?, null, null, null, null, null, null, null, null, null}", false);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Utility.decode("Y?", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)89, (byte)63}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short) (-1), (-442));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    lshr\n1:    dup\n2:    lstore_0\n3:    aload_2\n4:    lload_2\n5:    fdiv\n6:    lneg\n7:    idiv\n8:    idiv\n9:    aload_2\n10:   lload_2\n11:   fdiv\n12:   lneg\n13:   idiv\n14:   idiv\n15:   aload_2\n16:   lload_2\n17:   fdiv\n18:   lneg\n19:   idiv\n20:   idiv\n21:   aload_2\n22:   lload_2\n23:   fdiv\n24:   lneg\n25:   idiv\n26:   idiv\n27:   aload_2\n28:   lload_2\n29:   fdiv\n30:   lneg\n31:   idiv\n32:   idiv\n33:   aload_2\n34:   lload_2\n35:   fdiv\n36:   lneg\n37:   idiv\n38:   idiv\n39:   aload_2\n40:   lload_2\n41:   fdiv\n42:   lneg\n43:   idiv\n44:   idiv\n45:   aload_2\n46:   lload_2\n47:   fdiv\n48:   lneg\n49:   idiv\n50:   idiv\n51:   aload_2\n52:   lload_2\n53:   fdiv\n54:   lneg\n55:   idiv\n56:   idiv\n57:   lushr\n", string1);
      assertNotNull(string1);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = Utility.compactClassName("Dont call getValueFloat() on a non FLOAT ElementValue", "Dont call getValueFloat() on a non FLOAT ElementValue", false);
      assertEquals("Dont call getValueFloat() on a non FLOAT ElementValue", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("Dont call getValueFloat() on a non FLOAT ElementValue");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-73);
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-73)}, byteArray0);
      assertEquals("$A$A$A$A$b7", string0);
      assertNotNull(string0);
      
      byte[] byteArray1 = Utility.decode("$A$A$A$A$b7", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-73)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("$k]d~*U$4+ZqN(K", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"4+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte)62, (byte)1}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)119, (byte)62, (byte)1}, byteArray0);
      assertEquals("dneg", string0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("FK, ?U$'5U");
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = Utility.decode("multianewarray", false);
      assertNotNull(byteArray0);
      
      String string0 = "ireturn";
      MockPrintStream mockPrintStream1 = new MockPrintStream("ireturn");
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 91, (int) (byte) (-104));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6, 182);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)32, (int) (byte)32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = Utility.replace("CNonstantValue", "CNonstantValue", "CNonstantValue");
      assertEquals("CNonstantValue", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      MockPrintStream mockPrintStream0 = new MockPrintStream("CNonstantValue");
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray1 = Utility.decode("B~OAr;UG|+:", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (-1443226567), (int) (byte) (-93));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore_3
         // 1:    iand
         // 2:    iastore
         // 3:    lstore_2
         // 4:    frem
         // 5:    istore_0
         // 6:    castore
         // 7:    dstore_0
         // 8:    iushr
         // 9:    aload_1
         // 10:   
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = Utility.signatureToString("Invalid type: ", true);
      assertEquals("int", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-37);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      byteArray0[4] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, 251);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.convertString("3S+}$Em 49%K7");
      assertEquals("3S+}$Em 49%K7", string0);
      assertNotNull(string0);
      
      byte[] byteArray1 = Utility.decode("Od2xY", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)79, (byte)100, (byte)50, (byte)120, (byte)89}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 169, (int) (byte)8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("breakpoint");
      assertNotNull(constantUtf8_0);
      assertEquals("breakpoint", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(36, 929);
      assertNotNull(constantFieldref0);
      assertEquals(929, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(36, constantFieldref0.getClassIndex());
      
      Constant[] constantArray0 = new Constant[10];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(10, constantPool0.getLength());
      
      byte[] byteArray1 = new byte[18];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-80);
      byteArray1[1] = (byte)18;
      String string0 = Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-128), (int) (byte) (-80));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("0:    areturn\n1:    ldc\t\tbreakpoint (0)\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n", string0);
      assertNotNull(string0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(10, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("$a9$A$A$A$A", string0);
      assertNotNull(string0);
      
      byte[] byteArray1 = Utility.decode("$a9$A$A$A$A", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-87), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      String string1 = Utility.encode(byteArray1, true);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-87), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      assertNotNull(string1);
      assertNotSame(byteArray1, byteArray0);
      
      String string2 = Utility.getSignature("\t<");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("L<;", string2);
      assertNotNull(string2);
      
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), 48);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-87), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    ret\t\t%0\n2:    nop\n3:    nop\n4:    nop\n", string3);
      assertNotNull(string3);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = Utility.replace("CNonstantValue", "CNonstantValue", "CNonstantValue");
      assertEquals("CNonstantValue", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-4);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 83, 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("iload_1", (String[]) null);
      assertEquals("()Liload_1;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("()Liload_1;");
      assertTrue(string1.equals((Object)string0));
      assertEquals("()Liload_1;", string1);
      assertNotNull(string1);
      
      String string2 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("<clinit>", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-94);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-57));
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-57.0F), constantFloat0.getBytes(), 0.01F);
      
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-57), 170);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null, null, null, null}", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = Utility.decode("&C+yNA''7>M", false);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)62;
      byteArray1[1] = (byte) (-35);
      byteArray1[2] = (byte) (-5);
      byteArray1[3] = (byte)87;
      byteArray1[4] = (byte)65;
      byteArray1[5] = (byte)48;
      byteArray1[6] = (byte)54;
      byteArray1[7] = (byte) (-10);
      byteArray1[8] = (byte)81;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 2838, (int) (byte)54);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ishr");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-76);
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[15];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)30;
      byteArray1[1] = (byte)98;
      byteArray1[2] = (byte) (-69);
      byteArray1[3] = (byte) (-76);
      byteArray1[4] = (byte)30;
      byteArray1[5] = (byte)30;
      byteArray1[6] = (byte)98;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)30, (int) (byte) (-76));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-126);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-126), 8);
      assertArrayEquals(new byte[] {(byte) (-126)}, byteArray0);
      assertEquals("0:    ixor\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-115);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Pr$2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pr$2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      try { 
        Utility.typeOfSignature("H[iG*(k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H[iG*(k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = Utility.signatureToString("CNonstantValue");
      assertEquals("char", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)4;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, 198);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-73);
      byteArray1[1] = (byte) (-73);
      byteArray1[2] = (byte) (-73);
      byteArray1[4] = (byte) (-105);
      byteArray1[5] = (byte) (-73);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-73), (byte) (-73), (byte)0, (byte) (-105), (byte) (-73)}, byteArray1);
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(1020L);
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(1020L, constantLong0.getBytes());
      
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-73), (-263));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    invokespecial\t1020 (0)\n3:    nop\n4:    nop\n", string0);
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("iload_1", (String[]) null);
      assertEquals("()Liload_1;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("()Liload_1;");
      assertTrue(string1.equals((Object)string0));
      assertEquals("()Liload_1;", string1);
      assertNotNull(string1);
      
      String string2 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("<clinit>", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = Utility.methodSignatureArgumentTypes("()Liload_1;", false);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("Ga)K", "<clinit>", true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ga)K", string1);
      assertNotNull(string1);
      
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      assertEquals(256, int0);
      
      try { 
        Utility.methodSignatureReturnType("Ga)K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("iload_1", (String[]) null);
      assertEquals("()Liload_1;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("()Liload_1;");
      assertTrue(string1.equals((Object)string0));
      assertEquals("()Liload_1;", string1);
      assertNotNull(string1);
      
      String string2 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("<clinit>", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 192, (-4355));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)68, 91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = Utility.signatureToString("Jk3F5,_^hG^h$f20", false);
      assertEquals("long", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 187, 251);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-44);
      byteArray0[0] = (byte) (-86);
      byteArray0[2] = (byte) (-80);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(197, 929);
      assertNotNull(constantFieldref0);
      assertEquals(197, constantFieldref0.getClassIndex());
      assertEquals(929, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 20, 197);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-4);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), 293);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)116;
      byteArray0[8] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 20, (int) (byte) (-111));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = Utility.replace("CNonstantValue", "CNonstantValue", "CNonstantValue");
      assertEquals("CNonstantValue", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 88, 49);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)37;
      byteArray0[8] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-5358), (int) (byte)37);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpge\t\t#21445
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1009, (int) (byte)27);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)68;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1297, 102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)45;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte)31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-81);
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte)54;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-81), (-861));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lconst_0
         // 1:    if_icmpne\t\t#-28240
         // 4:    nop
         // 5:    fload_0
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1), 197);
      assertNotNull(constantFieldref0);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(197, constantFieldref0.getNameAndTypeIndex());
      assertEquals((-1), constantFieldref0.getClassIndex());
      
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref0;
      constantArray0[4] = (Constant) constantFieldref0;
      constantArray0[5] = (Constant) constantFieldref0;
      constantArray0[6] = (Constant) constantFieldref0;
      constantArray0[7] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(9, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 110, (int) (byte)109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-72);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cc");
      assertFalse(boolean0);
      
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte) (-82);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-47), (int) (byte) (-82));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null, null, null, null, null, null, null, null}", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte) (-54);
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble(1154.19624651887);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(1154.19624651887, constantDouble0.getBytes(), 0.01);
      
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1908, 1961);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      assertNotNull(constantFloat0);
      assertEquals(0.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      String string0 = constantPool0.constantToString((Constant) constantFloat0);
      assertEquals("0.0", string0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      byteArray0[0] = (byte)35;
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-601), 71);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)35}, byteArray0);
      assertEquals("0:    fload_1\n", string1);
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      
      String string2 = Utility.classOrInterface(10);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("class", string2);
      assertNotNull(string2);
      
      try { 
        Utility.methodSignatureArgumentTypes("Synthetic attribute with length > 0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Synthetic attribute with length > 0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)95;
      // Undeclared exception!
      try { 
        Utility.signatureToString("WZ>|*_P,3b7_(:&3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WZ>|*_P,3b7_(:&3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)29, (int) (byte) (-68));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -68
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)19;
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      assertNotNull(constantDouble0);
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      assertNotNull(constantDouble1);
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals((-1.0), constantDouble1.getBytes(), 0.01);
      
      constantArray0[0] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-3377), (-1079));
      assertArrayEquals(new byte[] {(byte)52, (byte) (-99), (byte)122, (byte)15, (byte)19, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    caload\n1:    ifgt\t\t#31248\n4:    ldc_w\t\t-1.0 (0)\n7:    nop\n", string0);
      assertNotNull(string0);
      assertEquals(1, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-109);
      byteArray0[1] = (byte) (-109);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2678), 1009);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-109), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    i2s\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1009, (int) (byte) (-109), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("Illegally nested brackets:", (String[]) null);
      assertEquals("()LIllegally;", string0);
      assertNotNull(string0);
      
      String string1 = Constants.ILLEGAL_OPCODE;
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal opcode>", string1);
      assertNotNull(string1);
      
      String string2 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("<clinit>", string2);
      assertNotNull(string2);
      
      try { 
        Utility.methodSignatureArgumentTypes("(t", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)117, 512);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte) (-89);
      byteArray0[7] = (byte)80;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)83, (byte) (-90), (byte) (-113), (byte)62, (byte) (-40), (byte) (-89), (byte)80}, byteArray0);
      assertTrue(boolean0);
      
      ConstantLong constantLong0 = new ConstantLong((byte) (-89));
      assertNotNull(constantLong0);
      assertEquals((-89L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 244, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("Jn~A=6T7", stringArray0);
      assertEquals("()LJn~A=6T7;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("Jn~A=6T7");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Jn~A=6T7", string1);
      assertNotNull(string1);
      
      String string2 = Utility.methodSignatureToString("()LJn~A=6T7;", "()LJn~A=6T7;", "()LJn~A=6T7;");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("()LJn~A=6T7; Jn~A=6T7 ()LJn~A=6T7;()", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)126;
      String string3 = Utility.encode(byteArray0, false);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-61), (byte)68, (byte)21, (byte)71, (byte)34, (byte)4, (byte)126}, byteArray0);
      assertEquals("$e2$c3D$VG$o$E$7e", string3);
      assertNotNull(string3);
  }
}
