/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 15:17:52 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = Utility.accessToString(2479);
      assertNotNull(string0);
      assertEquals("public private protected static synchronized transient native strictfp", string0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isSet((-541), 1039);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = Utility.setBit((-1063), 1039);
      assertEquals((-1063), int0);
      
      String string1 = Utility.printArray((Object[]) null);
      assertNull(string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-101), (byte)43, (byte)81, (byte)54, (byte) (-26), (byte) (-54)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(3230, (byte)54);
      assertNotNull(constantInvokeDynamic0);
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(3230, constantInvokeDynamic0.getClassIndex());
      assertEquals(54, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(3230, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantClass constantClass0 = new ConstantClass(1024);
      assertNotNull(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(1024, constantClass0.getNameIndex());
      
      constantArray0[1] = (Constant) constantClass0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)43, 9);
      assertNotNull(constantMethodHandle0);
      assertEquals(9, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(43, constantMethodHandle0.getReferenceKind());
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      assertNotNull(constantMethodHandle1);
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertEquals(9, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(43, constantMethodHandle0.getReferenceKind());
      assertEquals(9, constantMethodHandle1.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertEquals(43, constantMethodHandle1.getReferenceKind());
      
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("iflt\t\t#11089", string2);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-101), (byte)43, (byte)81, (byte)54, (byte) (-26), (byte) (-54)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(3, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-117), (byte) (-86), (byte)104, (byte) (-113), (byte) (-27), (byte) (-76), (byte) (-121), (byte)103}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string0);
      assertEquals("f2i", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-117), (byte) (-86), (byte)104, (byte) (-113), (byte) (-27), (byte) (-76), (byte) (-121), (byte)103}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, constantArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = Utility.methodTypeToSignature("f2i", (String[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("()Lf2i;", string1);
      
      String string2 = Utility.replace("qC9s{7M2rd", "f2i", "@xW`HGHGQz-F#RCaw4");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("qC9s{7M2rd", string2);
      
      int int0 = Utility.clearBit((byte)103, 805);
      assertEquals(71, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 69, (int) (byte)103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ",mbt";
      stringArray0[1] = ",mbt";
      stringArray0[2] = ",mbt";
      String string0 = Utility.methodTypeToSignature(",mbt", stringArray0);
      assertNotNull(string0);
      assertEquals("(L,mbt;L,mbt;L,mbt;)L,mbt;", string0);
      assertEquals(3, stringArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-84);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)70, (byte) (-116), (byte) (-84), (byte)48, (byte)59, (byte)69}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      short short0 = byteSequence0.readShort();
      assertEquals((short)18060, short0);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)70, (byte) (-116), (byte) (-84), (byte)48, (byte)59, (byte)69}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ireturn", string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)70, (byte) (-116), (byte) (-84), (byte)48, (byte)59, (byte)69}, byteArray0);
      assertEquals(0, constantArray0.length);
      assertEquals(6, byteArray0.length);
      
      String string2 = Utility.methodSignatureReturnType("BCNc");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("byte", string2);
      
      String string3 = Utility.compactClassName(",mbt");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(",mbt", string3);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-113), (byte)79, (byte)20}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-113), 5434);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((-113), constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(5434, constantInterfaceMethodref0.getNameAndTypeIndex());
      
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(13, (-470));
      assertNotNull(constantNameAndType0);
      assertEquals((-470), constantNameAndType0.getSignatureIndex());
      assertEquals(13, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(170, (-470));
      assertNotNull(constantFieldref0);
      assertEquals((-470), constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(170, constantFieldref0.getClassIndex());
      
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      assertNotNull(constantFieldref1);
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      assertEquals((-470), constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(170, constantFieldref0.getClassIndex());
      assertEquals(170, constantFieldref1.getClassIndex());
      assertEquals((-470), constantFieldref1.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      
      constantArray0[2] = (Constant) constantFieldref1;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref((byte)79, 81);
      assertNotNull(constantInterfaceMethodref1);
      assertFalse(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      assertEquals(81, constantInterfaceMethodref1.getNameAndTypeIndex());
      assertEquals(79, constantInterfaceMethodref1.getClassIndex());
      
      constantArray0[3] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotNull(string0);
      assertEquals("d2l", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-113), (byte)79, (byte)20}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)33;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 74, (int) (byte)33, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-28);
      byteArray0[0] = (byte) (-28);
      byte byte1 = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)36;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-28), (byte)63, (byte)36}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      String string0 = ", length = ";
      short short0 = Utility.searchOpcode(", length = ");
      assertEquals((short) (-1), short0);
      
      String string1 = "r`g~ltO";
      byte[] byteArray1 = Utility.decode("r`g~ltO", false);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)114, (byte)96, (byte)103, (byte)126, (byte)108, (byte)116, (byte)79}, byteArray1);
      assertEquals(7, byteArray1.length);
      
      String string2 = Utility.accessToString(1214, false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("private protected static final synchronized transient abstract", string2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 1450, (int) (short) (-1), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals(6, objectArray0.length);
      
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "REES0(zZxv)l2C";
      try { 
        Utility.typeOfSignature("REES0(zZxv)l2C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: REES0(zZxv)l2C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-49);
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("$j$cf", string0);
      assertArrayEquals(new byte[] {(byte)29, (byte) (-49)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      byte[] byteArray1 = Utility.decode("$j$cf", false);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)29, (byte) (-49)}, byteArray1);
      assertEquals(2, byteArray1.length);
      
      try { 
        Utility.typeOfSignature("$j$cf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $j$cf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = Utility.format((-1841414303), (-1841414303), false, 'O');
      assertNotNull(string0);
      assertEquals("-1841414303", string0);
      
      String string1 = Utility.fillup("boolean", 170, false, 'u');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuboolean", string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-126), (byte)127, (byte)115}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(5595);
      assertNotNull(constantInteger0);
      assertEquals(5595, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      constantArray0[0] = (Constant) constantInteger0;
      int int0 = byteSequence0.skipBytes(65);
      assertEquals(3, int0);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-126), (byte)127, (byte)115}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      String string2 = Utility.classOrInterface((byte)127);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("class", string2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)115, (-1841414303));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-109), (byte)1, (byte) (-104), (byte)112, (byte) (-123), (byte)95}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      byteSequence0.mark((byte)1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-109), (byte)1, (byte) (-104), (byte)112, (byte) (-123), (byte)95}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals("ifge\t\t#-27903", string0);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-109), (byte)1, (byte) (-104), (byte)112, (byte) (-123), (byte)95}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Object[] objectArray0 = new Object[2];
      float float0 = byteSequence0.readFloat();
      assertEquals((-3.1086608E-24F), float0, 0.01F);
      assertEquals(7, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-109), (byte)1, (byte) (-104), (byte)112, (byte) (-123), (byte)95}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      long long0 = byteSequence0.skip(1L);
      assertEquals(0L, long0);
      assertEquals(7, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-109), (byte)1, (byte) (-104), (byte)112, (byte) (-123), (byte)95}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      objectArray0[0] = (Object) byteSequence0;
      objectArray0[1] = (Object) (byte) (-109);
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString(7, false);
      assertNotNull(string0);
      assertEquals("public private protected", string0);
      
      String string1 = Utility.signatureToString("LSYSTEM;V", true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("SYSTEM", string1);
      
      try { 
        Utility.typeOfSignature("A}U2YX|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A}U2YX|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short short0 = Utility.searchOpcode("YGq{F<$");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.compactClassName("9&RJ");
      assertNotNull(string0);
      assertEquals("9&RJ", string0);
      
      String string1 = Utility.compactClassName("9&RJ", false);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("9&RJ", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)69, (byte)36, (byte)79, (byte)67, (byte)1, (byte)73, (byte) (-9), (byte) (-124)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("fstore_2", string2);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)69, (byte)36, (byte)79, (byte)67, (byte)1, (byte)73, (byte) (-9), (byte) (-124)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)40;
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("G$ef$u$K$h$u", string0);
      assertArrayEquals(new byte[] {(byte)71, (byte) (-17), (byte)40, (byte)10, (byte)27, (byte)40}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      String string1 = Utility.format((byte) (-17), (byte) (-17), false, '%');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-17", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)71, (byte) (-17), (byte)40, (byte)10, (byte)27, (byte)40}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString((byte)27);
      assertNotNull(constantString0);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(27, constantString0.getStringIndex());
      
      ConstantString constantString1 = new ConstantString(constantString0);
      assertNotNull(constantString1);
      assertTrue(constantString1.equals((Object)constantString0));
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(27, constantString0.getStringIndex());
      assertEquals(27, constantString1.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      
      constantArray0[0] = (Constant) constantString1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)40, 1662);
      assertNotNull(constantFieldref0);
      assertEquals(1662, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(40, constantFieldref0.getClassIndex());
      
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      assertNotNull(constantFieldref1);
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      assertEquals(1662, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(40, constantFieldref0.getClassIndex());
      assertEquals(1662, constantFieldref1.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertEquals(40, constantFieldref1.getClassIndex());
      
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      assertNotNull(constantNameAndType0);
      assertEquals(18415, constantNameAndType0.getNameIndex());
      assertEquals(10250, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)71, (byte) (-17), (byte)40, (byte)10, (byte)27, (byte)40}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("iload_1", string2);
      assertEquals(3, constantPool0.getLength());
      assertEquals(5, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)71, (byte) (-17), (byte)40, (byte)10, (byte)27, (byte)40}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(3, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "B*i(!b_#2 Y9;(0ZI$";
      byte byte0 = Utility.typeOfSignature("B*i(!b_#2 Y9;(0ZI$");
      assertEquals((byte)8, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('F');
      assertTrue(boolean0);
      
      try { 
        Utility.methodSignatureArgumentTypes("B*i(!b_#2 Y9;(0ZI$", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: B*i(!b_#2 Y9;(0ZI$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = Utility.format((-716), (-716), true, 'z');
      assertNotNull(string0);
      assertEquals("-716", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)104;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 36, (int) (byte)68, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte) (-58);
      byteArray0[8] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-60), (byte) (-29), (byte)90, (byte)74, (byte)55, (byte) (-58), (byte) (-63)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      char char0 = byteSequence0.readChar();
      assertEquals('\u0000', char0);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-60), (byte) (-29), (byte)90, (byte)74, (byte)55, (byte) (-58), (byte) (-63)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("wide\t(wide)", string0);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-60), (byte) (-29), (byte)90, (byte)74, (byte)55, (byte) (-58), (byte) (-63)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      int int0 = Utility.setBit((byte) (-58), (byte)0);
      assertEquals((-57), int0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (-1877), false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    nop\n1:    nop\n2:    wide\t(wide)\n3:    <illegal opcode>\n4:    dup_x1\n5:    dstore_3\n6:    lstore\t\t%50881\n", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-60), (byte) (-29), (byte)90, (byte)74, (byte)55, (byte) (-58), (byte) (-63)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      int int1 = Utility.setBit(116, (byte)35);
      assertFalse(int1 == int0);
      assertEquals(124, int1);
      
      int int2 = Utility.clearBit(91, 177);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(91, int2);
      
      String string2 = Utility.signatureToString("Class ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("char", string2);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byte byte0 = (byte) (-117);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)83;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 871, (int) (byte)58, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byte byte0 = (byte) (-45);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte) (-58);
      byteArray0[8] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)65, (byte) (-45), (byte)60, (byte) (-29), (byte)90, (byte)57, (byte)55, (byte) (-58), (byte) (-63)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      char char0 = byteSequence0.readChar();
      assertEquals('\u41D3', char0);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)65, (byte) (-45), (byte)60, (byte) (-29), (byte)90, (byte)57, (byte)55, (byte) (-58), (byte) (-63)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      boolean boolean0 = false;
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("istore_1", string0);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)65, (byte) (-45), (byte)60, (byte) (-29), (byte)90, (byte)57, (byte)55, (byte) (-58), (byte) (-63)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      int int0 = Utility.setBit((byte) (-58), (byte) (-45));
      assertEquals((-58), int0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)60, (-1877), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = Utility.replace("PMGClass(", "org.apache.bcel.util.SyntheticRepository", "PMGClass(");
      assertNotNull(string0);
      assertEquals("PMGClass(", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte)40;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 774, (int) (byte) (-51), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = Utility.classOrInterface(256);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      String string1 = Utility.signatureToString("D", true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("double", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-5);
      boolean boolean0 = Utility.isSet(256, (byte)7);
      assertFalse(boolean0);
      
      byteArray0[5] = (byte)0;
      byteArray0[0] = (byte)47;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2407, (int) (byte)60, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte) (-110);
      byteArray0[8] = (byte) (-50);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-51), (-481));
      assertNotNull(string0);
      assertEquals("0:    lshr\n1:    i2c\n2:    astore_3\n3:    goto\t\t#-12980\n6:    lastore\n7:    i2c\n8:    <illegal opcode>\n", string0);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-110), (byte)78, (byte) (-89), (byte) (-51), (byte)73, (byte)80, (byte) (-110), (byte) (-50)}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = Utility.setBit(288, 288);
      assertEquals(289, int0);
      
      try { 
        Utility.typeOfSignature("M?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "(i(?E3WIz.A+";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(i(?E3WIz.A+");
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      String string1 = Utility.accessToString((-317), false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("public private volatile transient interface abstract strictfp synthetic annotation enum", string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-105);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 16384, 195);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "w*/|I?Xz? $%N.(";
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("w*/|I?Xz? $%N.(", false);
      assertNotNull(byteArray0);
      assertEquals(14, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.getSignature("NJ 4YboR%E!L[S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)124, (byte)9, (byte)106, (byte)9, (byte) (-56), (byte)0, (byte) (-57)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(34, (byte)9);
      assertNotNull(constantMethodHandle0);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(9, constantMethodHandle0.getReferenceIndex());
      assertEquals(34, constantMethodHandle0.getReferenceKind());
      
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("ret");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("ret", constantUtf8_0.getBytes());
      
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-57), 4);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-57), constantInterfaceMethodref0.getClassIndex());
      assertEquals(4, constantInterfaceMethodref0.getNameAndTypeIndex());
      
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantFloat constantFloat0 = new ConstantFloat((-1747.85F));
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-1747.85F), constantFloat0.getBytes(), 0.01F);
      
      constantArray0[3] = (Constant) constantFloat0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(34, 1115);
      assertNotNull(constantNameAndType0);
      assertEquals(1115, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(34, constantNameAndType0.getNameIndex());
      
      constantArray0[4] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertEquals(5, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertNotNull(string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals("iushr", string0);
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)124, (byte)9, (byte)106, (byte)9, (byte) (-56), (byte)0, (byte) (-57)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(5, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "*K>T&@";
      try { 
        Utility.typeOfSignature("*K>T&@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K>T&@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = Utility.setBit(177, 177);
      assertEquals(131249, int0);
      
      String string0 = Utility.format((-539), (-539), false, 'D');
      assertNotNull(string0);
      assertEquals("-539", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)56;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2656), 164, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dload_3
         // 1:    arraylength
         // 2:    return
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)31;
      String string0 = "),";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "),");
      assertFalse(boolean0);
      
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)79;
      byte byte0 = (byte)101;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)47;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 65, 162);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-109), (byte)1, (byte) (-104), (byte)112, (byte) (-123), (byte)95}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      byteSequence0.mark((byte)1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-109), (byte)1, (byte) (-104), (byte)112, (byte) (-123), (byte)95}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = Utility.fillup("l[e7Q(M {5a", 0, false, 'O');
      assertNotNull(string0);
      assertEquals("l[e7Q(M {5a", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte) (-37);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-30), 28, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 65309. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)67;
      byteArray0[8] = (byte)119;
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)10, (byte)60, (byte)6, (byte)117, (byte)29, (byte)2, (byte)48, (byte)67, (byte)119}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)48, (int) (byte)67, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)94;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 4946, 1077, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",pX\"-rx4(;");
      assertFalse(boolean0);
      
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
      
      String string1 = Utility.methodTypeToSignature(",pX\"-rx4(;", (String[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("()L,pX\"-rx4(;;", string1);
      
      String string2 = Utility.compactClassName("java.lang.Object@187d5477, java.lang.Object@78a887a7");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-74), (byte) (-79), (byte)16, (byte)102, (byte) (-12), (byte)85, (byte) (-86), (byte)36}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)102);
      assertNotNull(constantDouble0);
      assertEquals(102.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      constantArray0[0] = (Constant) constantDouble0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertNotNull(constantMethodType0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(46769, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertArrayEquals(new byte[] {(byte) (-74), (byte) (-79), (byte)16, (byte)102, (byte) (-12), (byte)85, (byte) (-86), (byte)36}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("bipush\t\t102", string3);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-74), (byte) (-79), (byte)16, (byte)102, (byte) (-12), (byte)85, (byte) (-86), (byte)36}, byteArray0);
      assertEquals(2, constantArray0.length);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)114, (byte)89, (byte) (-104)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals((byte)114, byte0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)114, (byte)89, (byte) (-104)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals("dup", string0);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)114, (byte)89, (byte) (-104)}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = Utility.format(6, 103, false, 'p');
      assertNotNull(string0);
      assertEquals("pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp6", string0);
      
      byte[] byteArray0 = Utility.decode("ifnonnull", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)110, (byte)111, (byte)110, (byte)110, (byte)117, (byte)108, (byte)108}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)110, (byte)111, (byte)110, (byte)110, (byte)117, (byte)108, (byte)108}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(6);
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(6, constantInteger0.getBytes());
      
      constantArray0[0] = (Constant) constantInteger0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      assertNotNull(constantString0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(26982, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)110, (byte)111, (byte)110, (byte)110, (byte)117, (byte)108, (byte)108}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      constantArray0[1] = (Constant) constantString0;
      String string1 = constantString0.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("CONSTANT_String[8](string_index = 26982)", string1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(26982, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)110, (byte)111, (byte)110, (byte)110, (byte)117, (byte)108, (byte)108}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("fdiv", string2);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)110, (byte)111, (byte)110, (byte)110, (byte)117, (byte)108, (byte)108}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(2, constantArray0.length);
      
      int int0 = Utility.setBit(47, 1154);
      assertEquals(47, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "!E'=ZZM^ke`7XJ(9<i";
      try { 
        Utility.typeOfSignature("!E'=ZZM^ke`7XJ(9<i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E'=ZZM^ke`7XJ(9<i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)41;
      byteArray0[0] = (byte)41;
      byte byte1 = (byte)35;
      byteArray0[1] = (byte)35;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (int) (byte)35);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-63);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 66, (int) (byte)86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-29);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)91, (byte)28, (byte) (-119), (byte) (-29), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      char char0 = byteSequence0.readChar();
      assertEquals('\u5B1C', char0);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)91, (byte)28, (byte) (-119), (byte) (-29), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      byteSequence0.mark((byte)91);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)91, (byte)28, (byte) (-119), (byte) (-29), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("l2f", string0);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)91, (byte)28, (byte) (-119), (byte) (-29), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      String string1 = Utility.toHexString(byteArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("5b 1c 89 e3 00 00 00 00 00", string1);
      assertArrayEquals(new byte[] {(byte)91, (byte)28, (byte) (-119), (byte) (-29), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("SAME_LOCALS_1_STACK_EXTENDED");
      assertEquals((byte)9, byte0);
      
      String string0 = Utility.classOrInterface((byte)9);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      String string1 = Utility.classOrInterface((byte)9);
      assertNotNull(string1);
      assertEquals("class", string1);
      
      try { 
        Utility.typeOfMethodSignature("SAME_LOCALS_1_STACK_EXTENDED");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: SAME_LOCALS_1_STACK_EXTENDED
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = Utility.isSet(46, 46);
      assertFalse(boolean0);
      
      String string0 = Utility.classOrInterface(111);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte) (-26);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3533, (int) (byte) (-5), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Utility.getSignature("Dont call getValueFloat() on a non FLOAT ElementValue");
      assertNotNull(string0);
      assertEquals("LDont;", string0);
      
      String string1 = Utility.getSignature("R+H<~>eJ:H'yE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("LR+H<~>eJ:H'yE;", string1);
      
      String string2 = Utility.fillup("\t", 75, false, 'T');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\t", string2);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("LR+H<~>eJ:H'yE;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `~>eJ:H'yE;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte)95;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-14), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+!( E_dazrpvzJ:W?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ( E_dazrpvzJ:W?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-73);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 206, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1320), (int) (byte) (-42), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    dload\t\t%165
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)50;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)65, (-2001), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)85;
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte) (-4));
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-4L), constantLong0.getBytes());
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertNotNull(constantLong1);
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-4L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals((-4L), constantLong1.getBytes());
      
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-27), 4611);
      assertNotNull(string0);
      assertEquals("0:    wide\t(wide)\n1:    ladd\n2:    dup_x1\n3:    fconst_2\n4:    fstore_3\n5:    <illegal opcode>\n6:    castore\n", string0);
      assertEquals(1, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-60), (byte)97, (byte)90, (byte)13, (byte)70, (byte) (-4), (byte)85}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(1, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object5));
      
      objectArray0[6] = object6;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals(7, objectArray0.length);
      
      String string1 = Utility.classOrInterface(16);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("class", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)38, (byte) (-127), (byte) (-22), (byte)17, (byte)117, (byte) (-115), (byte)0, (byte) (-84)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("dload_0", string2);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)38, (byte) (-127), (byte) (-22), (byte)17, (byte)117, (byte) (-115), (byte)0, (byte) (-84)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = Utility.convertString("tiA5f9'st#Ne67^k");
      assertNotNull(string0);
      assertEquals("tiA5f9\\'st#Ne67^k", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte)77;
      byteArray0[8] = (byte)93;
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte) (-5);
      byteArray1[2] = (byte) (-19);
      byteArray1[3] = (byte)93;
      byteArray1[4] = (byte) (-117);
      byteArray1[5] = (byte)77;
      byteArray1[6] = (byte)70;
      byteArray1[7] = (byte) (-19);
      byteArray1[8] = (byte)70;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)80, (byte)77, (byte)70, (byte) (-117), (byte)68, (byte) (-19), (byte)77, (byte)93}, byteArray0);
      assertArrayEquals(new byte[] {(byte)70, (byte) (-5), (byte) (-19), (byte)93, (byte) (-117), (byte)77, (byte)70, (byte) (-19), (byte)70}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "V'JaM:h^4iX<F";
      short short0 = Utility.searchOpcode("V'JaM:h^4iX<F");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.format(62, 4017, false, 'X');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = Utility.setBit((short) (-1), 62);
      assertEquals((-1), int0);
      
      int int1 = (-269);
      boolean boolean0 = Utility.isSet(62, (-269));
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.fillup("astore_3", 1699, true, 'w');
      assertNotNull(string0);
      
      String string1 = Utility.printArray((Object[]) null, false);
      assertNull(string1);
      
      String string2 = Utility.printArray((Object[]) null, true);
      assertNull(string2);
      
      String string3 = Utility.printArray((Object[]) null, true);
      assertNull(string3);
      
      String string4 = Utility.signatureToString("J/CG?lM#,,m`", false);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertEquals("long", string4);
      
      String string5 = Utility.accessToString(10);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("private static", string5);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)92, (byte)5, (byte) (-1), (byte)25, (byte)13}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      String string6 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("dup2", string6);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)92, (byte)5, (byte) (-1), (byte)25, (byte)13}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte) (-52);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)71, (-1653));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "7s);BovPc\\:C>x";
      try { 
        Utility.typeOfSignature("7s);BovPc:C>x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7s);BovPc:C>x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "@rr5Mf";
      try { 
        Utility.typeOfSignature("@rr5Mf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @rr5Mf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)113, (byte)95, (byte) (-97), (byte) (-65), (byte) (-14), (byte)32}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = null;
      byteSequence0.reset();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)113, (byte)95, (byte) (-97), (byte) (-65), (byte) (-14), (byte)32}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byteSequence0.readFully(byteArray0);
      assertEquals(6, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)113, (byte)95, (byte) (-97), (byte) (-65), (byte) (-14), (byte)32}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byteSequence0.reset();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)113, (byte)95, (byte) (-97), (byte) (-65), (byte) (-14), (byte)32}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string0);
      assertEquals("lrem", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)113, (byte)95, (byte) (-97), (byte) (-65), (byte) (-14), (byte)32}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      String string1 = Utility.toHexString(byteArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("71 5f 9f bf f2 20", string1);
      assertArrayEquals(new byte[] {(byte)113, (byte)95, (byte) (-97), (byte) (-65), (byte) (-14), (byte)32}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        constantPool0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char char0 = '9';
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)101;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 40, 1791, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte) (-30);
      byteArray0[8] = (byte) (-30);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)14, (int) (byte) (-51));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "Y{G`LA{/x,m";
      try { 
        Utility.typeOfSignature("Y{G`LA{/x,m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y{G`LA{/x,m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = (-410);
      String string0 = Utility.classOrInterface((-410));
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      String string1 = "!{ ";
      try { 
        Utility.typeOfSignature("!{ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: { 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-111), (byte)41, (byte)40, (byte)20, (byte)27, (byte)34, (byte)90, (byte)24}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string0);
      assertEquals("i2b", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-111), (byte)41, (byte)40, (byte)20, (byte)27, (byte)34, (byte)90, (byte)24}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      short short0 = Utility.searchOpcode("EnclosingMethod");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)82, (byte) (-71), (byte) (-77)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1885), 186);
      assertNotNull(constantInvokeDynamic0);
      assertEquals((-1885), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-1885), constantInvokeDynamic0.getClassIndex());
      assertEquals(186, constantInvokeDynamic0.getNameAndTypeIndex());
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertNotNull(constantMethodType0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(21177, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertArrayEquals(new byte[] {(byte)82, (byte) (-71), (byte) (-77)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = Utility.clearBit(160, 42);
      assertEquals(160, int0);
      
      String string0 = Utility.accessToString(41);
      assertNotNull(string0);
      assertEquals("public static synchronized", string0);
      
      String string1 = Utility.getSignature("public static synchronized");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Lpublic;", string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-67)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Method$1", false);
      assertNotNull(byteArray0);
      assertEquals(32, byteArray0.length);
      
      MockFile mockFile0 = new MockFile("l3[8{!+$AJAU1");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("org.apache.bcel.classfile.Method$1", "org.apache.bcel.classfile.Method$1", (File) mockFile0);
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("l3[8{!+$AJAU1", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("l3[8{!+$AJAU1", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("org.apache.bcel.classfile.Method$10org.apache.bcel.classfile.Method$1", file0.getName());
      assertTrue(file0.exists());
      assertEquals("/home/ubuntu/test/projects/1_bcel/l3[8{!+$AJAU1", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home/ubuntu/test/projects/1_bcel/l3[8{!+$AJAU1/org.apache.bcel.classfile.Method$10org.apache.bcel.classfile.Method$1", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "lreturn");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // lreturn
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)0;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1314, (byte)105);
      assertNotNull(constantMethodHandle0);
      assertEquals(105, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(1314, constantMethodHandle0.getReferenceKind());
      
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(237, (-999));
      assertNotNull(constantNameAndType0);
      assertEquals(237, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-999), constantNameAndType0.getSignatureIndex());
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 466, 1302);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)77;
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-4065), 1);
      assertNotNull(constantNameAndType0);
      assertEquals(1, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-4065), constantNameAndType0.getNameIndex());
      
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantString constantString0 = new ConstantString(20);
      assertNotNull(constantString0);
      assertEquals(20, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantArray0.length);
      
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-592), 1900, true);
      assertNotNull(string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals("0:    i2s\n1:    ixor\n2:    <illegal opcode>\n3:    f2d\n4:    <illegal opcode>\n5:    lstore_0\n6:    astore_2\n", string0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte) (-109), (byte) (-126), (byte) (-24), (byte) (-115), (byte) (-43), (byte)63, (byte)77}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(2, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "Ksv<%HPN%*A";
      try { 
        Utility.typeOfSignature("Ksv<%HPN%*A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ksv<%HPN%*A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      short short0 = Utility.searchOpcode("7SR");
      assertEquals((short) (-1), short0);
      
      short short1 = Utility.searchOpcode("7SR");
      assertTrue(short1 == short0);
      assertEquals((short) (-1), short1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)55;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)71, (byte)55}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertNotNull(constantMethodType0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(18231, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertArrayEquals(new byte[] {(byte)71, (byte)55}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertNotNull(constantMethodType1);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(18231, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(18231, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertArrayEquals(new byte[] {(byte)71, (byte)55}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (short) (-1), (-2583), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_0
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Utility.convertString("java.lang.java.lang.^\"T}T#.sK7V9<B;3h.");
      assertNotNull(string0);
      assertEquals("java.lang.java.lang.^\\\"T}T#.sK7V9<B;3h.", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)5;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 86, (int) (byte)75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y'heKUgI5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y'heKUgI5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)79;
      byteArray0[0] = (byte)79;
      byte byte1 = (byte)122;
      byteArray0[1] = (byte)122;
      byte byte2 = (byte) (-23);
      byteArray0[2] = (byte) (-23);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, 485);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.format((-1587), (-1587), true, 'h');
      assertNotNull(string0);
      assertEquals("-1587", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)101, (byte)76, (byte)100, (byte) (-64), (byte) (-83), (byte) (-100), (byte) (-123)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      short short0 = byteSequence0.readShort();
      assertEquals((short)25932, short0);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)101, (byte)76, (byte)100, (byte) (-64), (byte) (-83), (byte) (-100), (byte) (-123)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("isub", string1);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)101, (byte)76, (byte)100, (byte) (-64), (byte) (-83), (byte) (-100), (byte) (-123)}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('l');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)119;
      byteArray0[0] = (byte)119;
      byte byte1 = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      byte byte2 = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)119, (byte) (-23), (byte) (-57)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean1 = true;
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("dneg", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)119, (byte) (-23), (byte) (-57)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte) (-23);
      objectArray0[1] = (Object) byteSequence0;
      byteSequence0.close();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)119, (byte) (-23), (byte) (-57)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      objectArray0[2] = (Object) "dneg";
      objectArray0[3] = (Object) byteSequence0;
      objectArray0[4] = (Object) "dneg";
      try { 
        DataInputStream.readUTF((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte)3;
      byteArray0[0] = (byte) (-104);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-104), (byte)3, (byte)0, (byte) (-104), (byte)120}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      int int0 = byteSequence0.readInt();
      assertEquals((-1744633704), int0);
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-104), (byte)3, (byte)0, (byte) (-104), (byte)120}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("ishl", string0);
      assertEquals(5, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-104), (byte)3, (byte)0, (byte) (-104), (byte)120}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "Wfcsdu3cVe*";
      try { 
        Utility.typeOfSignature("Wfcsdu3cVe*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Wfcsdu3cVe*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = Utility.classOrInterface(564);
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-5);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-64), 157);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    fload_1
         // 2:    fstore_1
         // 3:    dload_2
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)1;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1206, (int) (byte) (-54), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "YlXnblFI_&Mymh,");
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isSet(2648, 186);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)49;
      byteArray0[8] = (byte)114;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 159, 1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = Utility.replace("frem", ";Kn0im6T).y}i4EZ", "frem");
      assertNotNull(string0);
      assertEquals("frem", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2383), (-381));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "invokespecial";
      stringArray0[1] = "v>i[P[n b43);qCUO";
      stringArray0[2] = "v>i[P[n b43);qCUO";
      stringArray0[3] = "v>i[P[n b43);qCUO";
      stringArray0[4] = "v>i[P[n b43);qCUO";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("v>i[P[n b43);qCUO", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[P[n b43);qCUO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
          assertTrue(boolean0);
          
          String string0 = Utility.accessToString(201, true);
          assertNotNull(string0);
          assertEquals("public static volatile transient", string0);
          
          byte[] byteArray0 = new byte[6];
          byteArray0[0] = (byte)108;
          byteArray0[1] = (byte)87;
          byteArray0[2] = (byte)72;
          byteArray0[3] = (byte) (-54);
          byteArray0[4] = (byte) (-120);
          byteArray0[5] = (byte)0;
          String string1 = Utility.encode(byteArray0, true);
          assertNotNull(string1);
          assertFalse(string1.equals((Object)string0));
          assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
          assertArrayEquals(new byte[] {(byte)108, (byte)87, (byte)72, (byte) (-54), (byte) (-120), (byte)0}, byteArray0);
          assertEquals(6, byteArray0.length);
          
          String string2 = Utility.compactClassName("^7UI<WD2Ak", "", true);
          assertNotNull(string2);
          assertFalse(string2.equals((Object)string1));
          assertFalse(string2.equals((Object)string0));
          assertEquals("^7UI<WD2Ak", string2);
          
          Constant[] constantArray0 = new Constant[0];
          ConstantPool constantPool0 = new ConstantPool(constantArray0);
          assertNotNull(constantPool0);
          assertEquals(0, constantPool0.getLength());
          assertEquals(0, constantArray0.length);
          
          boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$l$8b$I$A$A$A$A$A$A$A");
          assertFalse(boolean1 == boolean0);
          assertFalse(boolean1);
          
          String string3 = Utility.codeToString(byteArray0, constantPool0, (-502), (int) (byte)87);
          assertNotNull(string3);
          assertFalse(string3.equals((Object)string2));
          assertFalse(string3.equals((Object)string0));
          assertFalse(string3.equals((Object)string1));
          assertEquals("0:    idiv\n1:    pop\n2:    dstore_1\n3:    breakpoint\n4:    l2i\n5:    nop\n", string3);
          assertEquals(0, constantPool0.getLength());
          assertArrayEquals(new byte[] {(byte)108, (byte)87, (byte)72, (byte) (-54), (byte) (-120), (byte)0}, byteArray0);
          assertEquals(6, byteArray0.length);
          assertEquals(0, constantArray0.length);
          
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          assertNotNull(fileDescriptor0);
          assertFalse(fileDescriptor0.valid());
          
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor125.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byte byte0 = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-92);
      byte byte1 = (byte) (-122);
      byteArray0[3] = (byte) (-122);
      byte byte2 = (byte)109;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)100, (byte)97, (byte) (-92), (byte) (-122), (byte)109, (byte)42}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byteSequence0.mark((byte) (-92));
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)100, (byte)97, (byte) (-92), (byte) (-122), (byte)109, (byte)42}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      int int0 = byteSequence0.readUnsignedByte();
      assertEquals(100, int0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)100, (byte)97, (byte) (-92), (byte) (-122), (byte)109, (byte)42}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean0 = byteSequence0.markSupported();
      assertTrue(boolean0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)100, (byte)97, (byte) (-92), (byte) (-122), (byte)109, (byte)42}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals("ladd", string0);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)100, (byte)97, (byte) (-92), (byte) (-122), (byte)109, (byte)42}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      String string1 = "boolean";
      try { 
        Utility.methodSignatureArgumentTypes("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = Utility.convertString("!");
      assertNotNull(string0);
      assertEquals("!", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('C');
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "!";
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = Utility.methodTypeToSignature("!", stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(L!;)L!;", string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = Utility.printArray((Object[]) stringArray0, true, true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{\"!\"}", string2);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(L!;)L!;", true);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)77;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      
      String string3 = Utility.codeToString(byteArray0, constantPool1, (-343), (int) (byte)90, true);
      assertNotNull(string3);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals("0:    sastore\n1:    dup_x1\n2:    nop\n3:    astore_2\n", string3);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)86, (byte)90, (byte)0, (byte)77}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)26, (byte)78, (byte)99, (byte) (-40), (byte)0, (byte)47, (byte)45, (byte)101}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)78);
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(78.0F, constantFloat0.getBytes(), 0.01F);
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertNotNull(constantFloat1);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(78.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals(78.0F, constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      
      ConstantFloat constantFloat2 = (ConstantFloat)constantFloat1.copy();
      assertNotNull(constantFloat2);
      assertNotSame(constantFloat0, constantFloat2);
      assertNotSame(constantFloat0, constantFloat1);
      assertNotSame(constantFloat1, constantFloat2);
      assertNotSame(constantFloat1, constantFloat0);
      assertNotSame(constantFloat2, constantFloat0);
      assertNotSame(constantFloat2, constantFloat1);
      assertTrue(constantFloat0.equals((Object)constantFloat1));
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertTrue(constantFloat2.equals((Object)constantFloat0));
      assertTrue(constantFloat2.equals((Object)constantFloat1));
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(78.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals(78.0F, constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals((byte)4, constantFloat2.getTag());
      assertEquals(78.0F, constantFloat2.getBytes(), 0.01F);
      
      constantArray0[0] = (Constant) constantFloat2;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("NP, nf0,]T5B");
      assertNotNull(constantUtf8_0);
      assertEquals("NP, nf0,]T5B", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string0);
      assertEquals("iload_0", string0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)26, (byte)78, (byte)99, (byte) (-40), (byte)0, (byte)47, (byte)45, (byte)101}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(2, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)102, (byte) (-31), (byte) (-47), (byte) (-44), (byte) (-20), (byte) (-63), (byte)18, (byte)46, (byte)123}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[8];
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      assertNotNull(constantDouble0);
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      constantArray0[0] = (Constant) constantDouble0;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      assertNotNull(dataInputStream0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)102, (byte) (-31), (byte) (-47), (byte) (-44), (byte) (-20), (byte) (-63), (byte)18, (byte)46, (byte)123}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      assertNotNull(constantMethodType0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(26337, constantMethodType0.getDescriptorIndex());
      assertArrayEquals(new byte[] {(byte)102, (byte) (-31), (byte) (-47), (byte) (-44), (byte) (-20), (byte) (-63), (byte)18, (byte)46, (byte)123}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantLong constantLong0 = new ConstantLong(1764L);
      assertNotNull(constantLong0);
      assertEquals(1764L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertNotNull(constantLong1);
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertEquals(1764L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(1764L, constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      
      constantArray0[2] = (Constant) constantLong1;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(12);
      assertNotNull(constantMethodType1);
      assertFalse(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals(12, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      
      constantArray0[3] = (Constant) constantMethodType1;
      ConstantClass constantClass0 = new ConstantClass(986);
      assertNotNull(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(986, constantClass0.getNameIndex());
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertNotNull(constantClass1);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(986, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(986, constantClass1.getNameIndex());
      
      constantArray0[4] = (Constant) constantClass1;
      ConstantClass constantClass2 = new ConstantClass((byte)123);
      assertNotNull(constantClass2);
      assertFalse(constantClass2.equals((Object)constantClass0));
      assertFalse(constantClass2.equals((Object)constantClass1));
      assertEquals((byte)7, constantClass2.getTag());
      assertEquals(123, constantClass2.getNameIndex());
      
      constantArray0[5] = (Constant) constantClass2;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(dataInputStream0);
      assertNotNull(constantMethodHandle0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(54508, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(209, constantMethodHandle0.getReferenceKind());
      assertArrayEquals(new byte[] {(byte)102, (byte) (-31), (byte) (-47), (byte) (-44), (byte) (-20), (byte) (-63), (byte)18, (byte)46, (byte)123}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      constantArray0[6] = (Constant) constantMethodHandle0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-63), (byte)102);
      assertNotNull(constantNameAndType0);
      assertEquals(102, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-63), constantNameAndType0.getNameIndex());
      
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      assertNotNull(constantNameAndType1);
      assertTrue(constantNameAndType1.equals((Object)constantNameAndType0));
      assertEquals(102, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-63), constantNameAndType0.getNameIndex());
      assertEquals(102, constantNameAndType1.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType1.getTag());
      assertEquals((-63), constantNameAndType1.getNameIndex());
      
      constantArray0[7] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 4654. Constant pool size is: 8
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = Utility.format(62, 62, false, '-');
      assertNotNull(string0);
      assertEquals("------------------------------------------------------------62", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)75;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)95, 43, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      int int0 = 74;
      int int1 = 171;
      String string0 = Utility.format(74, 171, false, 'B');
      assertNotNull(string0);
      assertEquals("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB74", string0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = true;
      String string1 = Utility.printArray(objectArray0, true, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{}", string1);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-104);
      byteArray0[0] = (byte) (-104);
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new byte[] {(byte) (-104)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      String string2 = "'*\\ :w`>.BQ";
      try { 
        Utility.typeOfSignature("'* :w`>.BQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '* :w`>.BQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("org.apache.bcel.classfile.ArrayElementValue");
      assertNotNull(string0);
      assertEquals("org.apache.bcel.classfile.ArrayElementValue", string0);
      
      String string1 = Utility.accessToString((-2549), false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("public private static interface abstract synthetic annotation enum", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte)54;
      String string2 = Utility.encode(byteArray0, false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("$3e$9e3$b3$b2$ffMW6", string2);
      assertArrayEquals(new byte[] {(byte)62, (byte) (-98), (byte)51, (byte) (-77), (byte) (-78), (byte) (-1), (byte)77, (byte)87, (byte)54}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((byte) (-78));
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-78L), constantLong0.getBytes());
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertNotNull(constantLong1);
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-78L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals((-78L), constantLong1.getBytes());
      
      constantArray0[0] = (Constant) constantLong1;
      ConstantClass constantClass0 = new ConstantClass(737);
      assertNotNull(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(737, constantClass0.getNameIndex());
      
      constantArray0[1] = (Constant) constantClass0;
      ConstantDouble constantDouble0 = new ConstantDouble((-664.0260563481195));
      assertNotNull(constantDouble0);
      assertEquals((-664.0260563481195), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      assertEquals(3, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)87, (int) (byte)77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 65357. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(0, objectArray0.length);
      
      String string1 = Utility.format(1912, 62, true, '+');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1912++++++++++++++++++++++++++++++++++++++++++++++++++++++++++", string1);
      
      String string2 = Utility.getSignature("1912++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("L1912++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;", string2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      stringArray0[2] = "1912++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";
      stringArray0[3] = "L1912++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;";
      stringArray0[4] = "{}";
      String string3 = Utility.methodTypeToSignature("{}", stringArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("(L{};L{};L1912++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;LL1912++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;;L{};)L{};", string3);
      assertEquals(5, stringArray0.length);
      
      String string4 = Utility.accessToString(1912);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("static final synchronized volatile native interface abstract", string4);
      
      byte[] byteArray0 = Utility.decode("j1+>]V$", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)106, (byte)49, (byte)43, (byte)62, (byte)93, (byte)86}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      String string5 = Utility.printArray((Object[]) stringArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("{{}, {}, 1912++++++++++++++++++++++++++++++++++++++++++++++++++++++++++, L1912++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;, {}}", string5);
      assertEquals(5, stringArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 812, 812);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      assertEquals("{null, null, null, null, null, null, null}", string0);
      assertEquals(7, objectArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-27);
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)12;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte) (-27), (byte)12}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int0 = Utility.setBit((byte)12, 11);
      assertEquals(2060, int0);
      
      String string1 = Utility.accessToString(228, true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("protected volatile transient", string1);
      
      byte byte1 = Utility.typeOfSignature("ZD%Km'3!WhAk4f/");
      assertFalse(byte1 == byte0);
      assertEquals((byte)4, byte1);
      
      Constant[] constantArray0 = new Constant[5];
      int int1 = (-3004);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("ZD%Km'3!WhAk4f/", "{null, null, null, null, null, null, null}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"{null, null, null, null, null, null, null}\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)82;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)82, 64, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)0;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)77;
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertEquals("a0 2a 04 00 2e d0 4d", string0);
      assertArrayEquals(new byte[] {(byte) (-96), (byte)42, (byte)4, (byte)0, (byte)46, (byte) (-48), (byte)77}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('G');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, 1168);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("6:    astore_2\n", string1);
      assertArrayEquals(new byte[] {(byte) (-96), (byte)42, (byte)4, (byte)0, (byte)46, (byte) (-48), (byte)77}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new byte[] {(byte) (-96), (byte)42, (byte)4, (byte)0, (byte)46, (byte) (-48), (byte)77}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      try { 
        Utility.methodSignatureReturnType("a0 2a 04 00 2e d0 4d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `a0 2a 04 00 2e d0 4d'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('*');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-97), (byte) (-86), (byte)0, (byte) (-61), (byte)40, (byte)3, (byte)39, (byte) (-19)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals("if_icmpeq\t\t#-22016", string0);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-97), (byte) (-86), (byte)0, (byte) (-61), (byte)40, (byte)3, (byte)39, (byte) (-19)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Invalid frame type found while parsing stack map table: ";
      stringArray0[1] = "SENSITIVE";
      stringArray0[2] = "Invalid frame type found while parsing stack map table: ";
      stringArray0[3] = "Invalid frame type found while parsing stack map table: ";
      stringArray0[4] = "Invalid frame type found while parsing stack map table: ";
      stringArray0[5] = "Invalid frame type found while parsing stack map table: ";
      stringArray0[6] = "Invalid frame type found while parsing stack map table: ";
      stringArray0[7] = "Invalid frame type found while parsing stack map table: ";
      stringArray0[8] = "Invalid frame type found while parsing stack map table: ";
      String string0 = Utility.methodTypeToSignature("Invalid frame type found while parsing stack map table: ", stringArray0);
      assertNotNull(string0);
      assertEquals("(LInvalid;LSENSITIVE;LInvalid;LInvalid;LInvalid;LInvalid;LInvalid;LInvalid;LInvalid;)LInvalid;", string0);
      assertEquals(9, stringArray0.length);
      
      String string1 = Utility.getSignature("NfC5D2bnir~`MQGJ3K");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("LNfC5D2bnir~`MQGJ3K;", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte) (-43);
      byteArray0[7] = (byte) (-16);
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-18), 435);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0:    <illegal opcode>\n1:    istore\t\t%242\n3:    <illegal opcode>\n4:    dup_x1\n5:    <illegal opcode>\n6:    <illegal opcode>\n7:    <illegal opcode>\n", string2);
      assertArrayEquals(new byte[] {(byte) (-41), (byte)54, (byte) (-14), (byte) (-18), (byte)90, (byte) (-9), (byte) (-43), (byte) (-16)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)22, (byte)87, (byte)59, (byte) (-106), (byte) (-59), (byte) (-70)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)87, (byte) (-59));
      assertNotNull(constantFieldref0);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-59), constantFieldref0.getNameAndTypeIndex());
      assertEquals(87, constantFieldref0.getClassIndex());
      
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      assertNotNull(constantFieldref1);
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-59), constantFieldref0.getNameAndTypeIndex());
      assertEquals(87, constantFieldref0.getClassIndex());
      assertEquals(87, constantFieldref1.getClassIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertEquals((-59), constantFieldref1.getNameAndTypeIndex());
      
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotNull(string0);
      assertEquals("lload\t\t%87", string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)22, (byte)87, (byte)59, (byte) (-106), (byte) (-59), (byte) (-70)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(1, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Vv]Vhj[B");
      assertEquals((byte)12, byte0);
      
      String string0 = Utility.methodSignatureReturnType("Vv]Vhj[B", true);
      assertNotNull(string0);
      assertEquals("void", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byte byte1 = (byte) (-18);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-82);
      String string1 = Utility.toHexString(byteArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0c 0c 0c ee 56 ae", string1);
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)12, (byte) (-18), (byte)86, (byte) (-82)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      String string2 = Utility.signatureToString("FuGZ^2YG", true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("float", string2);
      
      String string3 = Utility.toHexString(byteArray0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("0c 0c 0c ee 56 ae", string3);
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)12, (byte) (-18), (byte)86, (byte) (-82)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      ByteSequence byteSequence0 = null;
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodType constantMethodType0 = null;
      try {
        constantMethodType0 = new ConstantMethodType((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = Utility.setBit(47, (-1502));
      assertEquals(47, int0);
      
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals(4, objectArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Utility.compactClassName("0>FOKp", "invokevirtual", true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0>FOKp", string1);
      
      String string2 = Utility.compactClassName("0>FOKp", "\"", true);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0>FOKp", string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-80);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 882, (int) (byte) (-90), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 42551. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(257);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.println(600.7701F);
      assertEquals("600.7701\n", charArrayWriter0.toString());
      assertEquals(9, charArrayWriter0.size());
      
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals("600.7701\n{}\n", charArrayWriter0.toString());
      assertEquals(12, charArrayWriter0.size());
      assertEquals(0, objectArray0.length);
      
      String string0 = Utility.fillup("", 257, false, '/');
      assertNotNull(string0);
      assertEquals("/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////", string0);
      
      boolean boolean0 = Utility.isSet(257, 164);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)7;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-41), 160);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "impdep2";
      stringArray0[1] = "impdep2";
      stringArray0[2] = "impdep2";
      stringArray0[3] = "impdep2";
      stringArray0[4] = "impdep2";
      stringArray0[5] = "impdep2";
      String string0 = Utility.methodTypeToSignature("impdep2", stringArray0);
      assertNotNull(string0);
      assertEquals("(Limpdep2;Limpdep2;Limpdep2;Limpdep2;Limpdep2;Limpdep2;)Limpdep2;", string0);
      assertEquals(6, stringArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)98;
      byteArray0[0] = (byte)98;
      byte byte1 = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)45;
      byte byte2 = (byte)91;
      byteArray0[3] = (byte)91;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte)51);
      assertNotNull(constantClass0);
      assertEquals(51, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      String string1 = constantPool0.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)91, 131, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[3] = object3;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      assertEquals(5, objectArray0.length);
      
      String string1 = "monitorexit";
      String string2 = Utility.compactClassName("monitorexit");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("monitorexit", string2);
      
      try { 
        Utility.methodSignatureArgumentTypes("(+4\"Bt (R4B.^(+4\"Bt (R4B.^", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+4\"Bt (R4B.^(+4\"Bt (R4B.^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)122;
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertEquals("0a 48 a5 ef 5f 2a 7a", string0);
      assertArrayEquals(new byte[] {(byte)10, (byte)72, (byte) (-91), (byte) (-17), (byte)95, (byte)42, (byte)122}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      try { 
        Utility.typeOfSignature("#y:I_5?u@a{}sP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #y:I_5?u@a{}sP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-86), (byte)0, (byte) (-53), (byte)72, (byte)56}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "3$u0 e]%)cV";
      try { 
        Utility.typeOfSignature("3$u0 e]%)cV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3$u0 e]%)cV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("4l/-(a>$m");
      assertNotNull(string0);
      assertEquals("4l.-(a>$m", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)77;
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(54);
      assertNotNull(constantString0);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(54, constantString0.getStringIndex());
      
      constantArray0[0] = (Constant) constantString0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("X");
      assertNotNull(constantUtf8_0);
      assertEquals("X", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-402), 65535);
      assertNotNull(constantMethodHandle0);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(65535, constantMethodHandle0.getReferenceIndex());
      assertEquals((-402), constantMethodHandle0.getReferenceKind());
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      assertNotNull(constantMethodHandle1);
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(65535, constantMethodHandle0.getReferenceIndex());
      assertEquals((-402), constantMethodHandle0.getReferenceKind());
      assertEquals((-402), constantMethodHandle1.getReferenceKind());
      assertEquals(65535, constantMethodHandle1.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)77, (-1400));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-117), (byte)32, (byte)11, (byte)115, (byte) (-61)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("*AT>%(v<;IYbE{l:");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("*AT>%(v<;IYbE{l:", constantUtf8_0.getBytes());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-117), 3115);
      assertNotNull(constantMethodref0);
      assertEquals(3115, constantMethodref0.getNameAndTypeIndex());
      assertEquals((-117), constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string0);
      assertEquals("f2i", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-117), (byte)32, (byte)11, (byte)115, (byte) (-61)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(2, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5&<P9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5&<P9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "GCB";
      try { 
        Utility.typeOfSignature("GCB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GCB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("b#F[.hyn$1p[kz", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1p\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B");
      assertFalse(boolean0);
      
      int int0 = (-585);
      int int1 = Utility.setBit(1761, (-585));
      assertFalse(int1 == int0);
      assertEquals(8390369, int1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-69), (byte)13}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-69), (byte)13}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string0);
      assertEquals("athrow", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-69), (byte)13}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      String string1 = Utility.convertString("athrow");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("athrow", string1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("invokeinterface", "U6", "U6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokeinterface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "invokeinterface";
      String string1 = Utility.convertString("invokeinterface");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("invokeinterface", string1);
      
      int int0 = 83;
      String string2 = Utility.accessToString(83, false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("public private final volatile", string2);
      
      String string3 = Utility.format(83, 83, true, 'b');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("83bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", string3);
      
      try { 
        Utility.typeOfSignature("83bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 83bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-61);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1), (int) (byte) (-87), false);
      assertNotNull(string0);
      assertEquals("0:    ret\t\t%121\n2:    <illegal opcode>\n3:    lreturn\n4:    monitorexit\n", string0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)121, (byte) (-51), (byte) (-83), (byte) (-61)}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-2719), (-2719));
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)55;
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)77, 44);
      assertNotNull(constantFieldref0);
      assertEquals(77, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(44, constantFieldref0.getNameAndTypeIndex());
      
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      assertNotNull(constantFieldref1);
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      assertEquals(77, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(44, constantFieldref0.getNameAndTypeIndex());
      assertEquals(77, constantFieldref1.getClassIndex());
      assertEquals(44, constantFieldref1.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("MkE[Ws2f'[yvX/ ([#");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("MkE[Ws2f'[yvX/ ([#", constantUtf8_0.getBytes());
      
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-2093064), (int) (byte)55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    daload
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)103;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)67, (byte)40, (byte)77, (byte)103}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte byte0 = Utility.typeOfSignature("J");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2, 1243);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.^\"T}T#.sK7V9<B;3h.", true);
      assertNotNull(string0);
      assertEquals("java.lang.^\"T}T#.sK7V9<B;3h.", string0);
      
      int int0 = 87;
      int int1 = Utility.clearBit(87, 87);
      assertTrue(int1 == int0);
      assertEquals(87, int1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature(":phatx[PI'^,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :phatx[PI'^,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.classOrInterface((-2412));
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      String string1 = Utility.accessToString((-2412));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("protected final transient interface abstract synthetic annotation enum", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte)20;
      byteArray0[8] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)94, (byte)45, (byte)5, (byte) (-118), (byte) (-89), (byte) (-122), (byte) (-87), (byte)20, (byte)78}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("dup2_x2", string2);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)94, (byte)45, (byte)5, (byte) (-118), (byte) (-89), (byte) (-122), (byte) (-87), (byte)20, (byte)78}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)3;
      byteArray0[0] = (byte) (-104);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-104), (byte)3, (byte)0, (byte) (-104), (byte)120}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("dcmpg", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-104), (byte)3, (byte)0, (byte) (-104), (byte)120}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = (-3449);
      int int1 = Utility.setBit((-3449), (-3449));
      assertTrue(int1 == int0);
      assertEquals((-3449), int1);
      
      try { 
        Utility.typeOfSignature("/~;_H&zYh1]X!6!ayO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /~;_H&zYh1]X!6!ayO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)29;
      Constant[] constantArray0 = new Constant[4];
      ConstantClass constantClass0 = new ConstantClass(47);
      assertNotNull(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(47, constantClass0.getNameIndex());
      
      constantArray0[0] = (Constant) constantClass0;
      ConstantString constantString0 = new ConstantString(90);
      assertNotNull(constantString0);
      assertEquals(90, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      
      constantArray0[1] = (Constant) constantString0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)29);
      assertNotNull(constantMethodType0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(29, constantMethodType0.getDescriptorIndex());
      
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-1), 60);
      assertNotNull(constantNameAndType0);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-1), constantNameAndType0.getNameIndex());
      assertEquals(60, constantNameAndType0.getSignatureIndex());
      
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantArray0.length);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-125), (int) (byte) (-125), true);
      assertNotNull(string0);
      assertEquals("0:    lxor\n1:    impdep2\n2:    dup_x1\n3:    if_acmpeq\t\t#6944\n", string0);
      assertEquals(4, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-1), (byte)90, (byte) (-91), (byte)27, (byte)29}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(4, constantArray0.length);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)114, (byte)89, (byte) (-104)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals("frem", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)114, (byte)89, (byte) (-104)}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = Utility.classOrInterface(256);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      String string1 = Utility.signatureToString("D", true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("double", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-5);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2407, (int) (byte)60, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.format((-1587), (-1587), true, 'h');
      assertNotNull(string0);
      assertEquals("-1587", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)101, (byte)76, (byte)100, (byte) (-64), (byte) (-83), (byte) (-100), (byte) (-123)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("lsub", string1);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)101, (byte)76, (byte)100, (byte) (-64), (byte) (-83), (byte) (-100), (byte) (-123)}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-272), (-272));
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface(88);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)123;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3324), (int) (byte)121);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    dadd\n1:    iconst_3\n2:    dstore_3\n3:    sastore\n4:    lshl\n5:    dload_1\n6:    lload_2\n7:    dup_x2\n8:    lshr\n", string1);
      assertArrayEquals(new byte[] {(byte)99, (byte)6, (byte)74, (byte)86, (byte)121, (byte)39, (byte)32, (byte)91, (byte)123}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object5));
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertNotNull(object7);
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object5));
      
      objectArray0[7] = object7;
      Object object8 = new Object();
      assertNotNull(object8);
      assertFalse(object8.equals((Object)object6));
      assertFalse(object8.equals((Object)object2));
      assertFalse(object8.equals((Object)object5));
      assertFalse(object8.equals((Object)object4));
      assertFalse(object8.equals((Object)object7));
      assertFalse(object8.equals((Object)object0));
      assertFalse(object8.equals((Object)object1));
      assertFalse(object8.equals((Object)object3));
      
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals(9, objectArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)36, (byte)74, (byte)3, (byte) (-124), (byte)48, (byte) (-93), (byte)117, (byte)76}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1137), (byte)36);
      assertNotNull(constantInvokeDynamic0);
      assertEquals((-1137), constantInvokeDynamic0.getClassIndex());
      assertEquals(36, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-1137), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertNotNull(constantInvokeDynamic1);
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertEquals(36, constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals((-1137), constantInvokeDynamic1.getClassIndex());
      assertEquals((-1137), constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals((-1137), constantInvokeDynamic0.getClassIndex());
      assertEquals(36, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-1137), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)3, (byte)74);
      assertNotNull(constantMethodHandle0);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(3, constantMethodHandle0.getReferenceKind());
      assertEquals(74, constantMethodHandle0.getReferenceIndex());
      
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      assertNotNull(constantMethodref0);
      assertEquals(9290, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(900, constantMethodref0.getNameAndTypeIndex());
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)36, (byte)74, (byte)3, (byte) (-124), (byte)48, (byte) (-93), (byte)117, (byte)76}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("faload", string1);
      assertEquals(3, constantPool0.getLength());
      assertEquals(5, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)36, (byte)74, (byte)3, (byte) (-124), (byte)48, (byte) (-93), (byte)117, (byte)76}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(3, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-93);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1749, 1144, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(0, objectArray0.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      stringArray0[2] = "{}";
      stringArray0[3] = "{}";
      stringArray0[4] = "eM<eB3WeHC~vXXldl(K";
      stringArray0[5] = "eM<eB3WeHC~vXXldl(K";
      stringArray0[6] = "eM<eB3WeHC~vXXldl(K";
      String string1 = Utility.methodTypeToSignature("eM<eB3WeHC~vXXldl(K", stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(L{};L{};L{};L{};LeM<eB3WeHC~vXXldl(K;LeM<eB3WeHC~vXXldl(K;LeM<eB3WeHC~vXXldl(K;)LeM<eB3WeHC~vXXldl(K;", string1);
      assertEquals(7, stringArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte)36;
      Constant[] constantArray0 = new Constant[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)121, (byte) (-103), (byte)103, (byte)79, (byte) (-3), (byte)0, (byte) (-35), (byte)36}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      assertNotNull(constantInteger0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(2040096591, constantInteger0.getBytes());
      assertArrayEquals(new byte[] {(byte)121, (byte) (-103), (byte)103, (byte)79, (byte) (-3), (byte)0, (byte) (-35), (byte)36}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      constantArray0[0] = (Constant) constantInteger0;
      ConstantFloat constantFloat0 = new ConstantFloat(1026.151F);
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(1026.151F, constantFloat0.getBytes(), 0.01F);
      
      constantArray0[1] = (Constant) constantFloat0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-103), (byte)121);
      assertNotNull(constantMethodHandle0);
      assertEquals(121, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals((-103), constantMethodHandle0.getReferenceKind());
      
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertNotNull(constantMethodType0);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(64768, constantMethodType0.getDescriptorIndex());
      assertArrayEquals(new byte[] {(byte)121, (byte) (-103), (byte)103, (byte)79, (byte) (-3), (byte)0, (byte) (-35), (byte)36}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(83);
      assertNotNull(constantMethodType1);
      assertFalse(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals(83, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      
      constantArray0[4] = (Constant) constantMethodType1;
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      assertNotNull(constantInteger1);
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertEquals(2040096591, constantInteger1.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals(6, byteSequence0.getIndex());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(2040096591, constantInteger0.getBytes());
      assertArrayEquals(new byte[] {(byte)121, (byte) (-103), (byte)103, (byte)79, (byte) (-3), (byte)0, (byte) (-35), (byte)36}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      constantArray0[5] = (Constant) constantInteger1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-3), 34);
      assertNotNull(constantInvokeDynamic0);
      assertEquals((-3), constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-3), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(34, constantInvokeDynamic0.getNameAndTypeIndex());
      
      constantArray0[6] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)36, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = Utility.fillup("Unreachable default case reached!", 188, true, 'U');
      assertNotNull(string0);
      assertEquals("Unreachable default case reached!UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU", string0);
      
      String string1 = Utility.accessToString(18, true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("private final", string1);
      
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "\\'";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = Utility.convertString("'");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("\\'", string1);
      
      boolean boolean3 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = Utility.getSignature("<&E{(dr.t )");
      assertNotNull(string0);
      assertEquals("L<&E{(dr/t;", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-125);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-125), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byteArray0[2] = (byte)55;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)16;
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-125), (byte)55, (byte)65, (byte)65, (byte)16}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-125);
      byteArray1[1] = (byte) (-125);
      byteArray1[2] = (byte) (-123);
      byteArray1[3] = (byte) (-18);
      byteArray1[4] = (byte)65;
      byteArray1[5] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-125), (byte) (-123), (byte) (-18), (byte)65, (byte) (-123)}, byteArray1);
      assertEquals(6, byteArray1.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("lxor", string1);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-125), (byte) (-123), (byte) (-18), (byte)65, (byte) (-123)}, byteArray1);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = Utility.setBit(47, 47);
      assertEquals(32815, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-44);
      ConstantPool constantPool0 = null;
      boolean boolean1 = true;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-44), 256, true);
      assertNotNull(string0);
      assertEquals("0:    return\n1:    <illegal opcode>\n", string0);
      assertArrayEquals(new byte[] {(byte) (-79), (byte) (-44)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      try { 
        Utility.methodSignatureReturnType("BFv^T$Q4p]Q)f=KUP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `f=KUP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = Utility.clearBit(106, 54);
      assertEquals(106, int0);
      
      String string0 = Utility.compactClassName("0~l;[P]rTg", "\r:!m%_DnT`", true);
      assertNotNull(string0);
      assertEquals("0~l;[P]rTg", string0);
      
      int int1 = Utility.clearBit(106, 72);
      assertTrue(int1 == int0);
      assertEquals(106, int1);
      
      try { 
        Utility.typeOfSignature("0~l;[P]rTg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0~l;[P]rTg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = Utility.setBit(3, (-423));
      assertEquals(33554435, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      ConstantPool constantPool0 = null;
      int int1 = 9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 33554435, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object1));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object0));
      
      objectArray0[6] = object6;
      boolean boolean0 = false;
      String string0 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string0);
      assertEquals(7, objectArray0.length);
      
      try { 
        Utility.typeOfSignature(", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
      
      String string1 = "LL_!<$.\\";
      try { 
        Utility.methodSignatureReturnType("LL_!<$.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LL_!<$.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = Utility.compactClassName("Dy,Xniv.9/`dF}", "Dy,Xniv.9/`dF}", true);
      assertNotNull(string0);
      assertEquals("Dy,Xniv.9.`dF}", string0);
      
      short short0 = Utility.searchOpcode("impdep1");
      assertEquals((short)254, short0);
      
      String string1 = Utility.signatureToString("Dy,Xniv.9.`dF}", true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("double", string1);
      
      String string2 = Utility.fillup("Dy,Xniv.9/`dF}", (short)254, true, '');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Dy,Xniv.9/`dF}", string2);
      
      byte byte0 = Utility.typeOfSignature("Dy,Xniv.9/`dF}");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)0;
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertEquals("3d 24 f1 0b 00", string0);
      assertArrayEquals(new byte[] {(byte)61, (byte)36, (byte) (-15), (byte)11, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-15), true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    istore_2\n1:    fload_2\n2:    <illegal opcode>\n3:    fconst_0\n4:    nop\n", string1);
      assertArrayEquals(new byte[] {(byte)61, (byte)36, (byte) (-15), (byte)11, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1711, (int) (byte)116, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "9D|tsYyuT&2h";
      try { 
        Utility.typeOfSignature("9D|tsYyuT&2h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9D|tsYyuT&2h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ZZ8Y", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)90, (byte)56, (byte)89}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      String string0 = Utility.replace("ZZ8Y", "ZZ8Y", "ZZ8Y");
      assertNotNull(string0);
      assertEquals("ZZ8Y", string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile((File) null, "ZZ8Y");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PrintWriter printWriter0 = mockPrintWriter0.append('H');
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ZZ8Y", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("ZZ8Y", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ZZ8Y", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("ZZ8Y", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals("/home/ubuntu/test/projects/1_bcel/ZZ8Y", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("ZZ8Y", file0.getName());
      assertEquals("/home/ubuntu/test/projects/1_bcel", file0.getParent());
      assertTrue(file0.exists());
      
      Object[] objectArray0 = null;
      Utility.printArray(printWriter0, (Object[]) null);
      assertNotSame(mockFile0, file0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("ZZ8Y", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("ZZ8Y", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      try { 
        Utility.methodSignatureReturnType("NX]tPsY5?]L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NX]tPsY5?]L'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = Utility.fillup("Invalid type: ", 60, false, '3');
      assertNotNull(string0);
      assertEquals("3333333333333333333333333333333333333333333333Invalid type: ", string0);
      
      String string1 = Utility.methodSignatureReturnType("Invalid type: ", false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("int", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)37;
      String string2 = Utility.toHexString(byteArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("76 51 5a 25", string2);
      assertArrayEquals(new byte[] {(byte)118, (byte)81, (byte)90, (byte)37}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)37);
      assertNotNull(constantInteger0);
      assertEquals(37, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      
      constantArray0[0] = (Constant) constantInteger0;
      ConstantClass constantClass0 = new ConstantClass((byte)81);
      assertNotNull(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(81, constantClass0.getNameIndex());
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertNotNull(constantClass1);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(81, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(81, constantClass1.getNameIndex());
      
      constantArray0[1] = (Constant) constantClass1;
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      assertNotNull(constantInteger1);
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertEquals(37, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(37, constantInteger1.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      
      constantArray0[2] = (Constant) constantInteger1;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)81);
      assertNotNull(constantFloat0);
      assertEquals(81.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      constantArray0[3] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 78, (int) (byte)118, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = Utility.compactClassName("]0=[[)oM$50oH|40#A", true);
      assertNotNull(string0);
      assertEquals("]0=[[)oM$50oH|40#A", string0);
      
      try { 
        Utility.decode("]0=[[)oM$50oH|40#A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "(";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.methodSignatureArgumentTypes("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 7;
      String string0 = Utility.classOrInterface(7);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-60);
      byteArray0[0] = (byte) (-60);
      int int1 = 2809;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2809, (-758));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-99);
      byte byte0 = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-58);
      ConstantPool constantPool0 = null;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), (int) (byte)101, true);
      assertNotNull(string0);
      assertEquals("0:    ifgt\t\t#4709\n3:    <illegal opcode>\n4:    goto\t\t#1994\n", string0);
      assertArrayEquals(new byte[] {(byte) (-99), (byte)18, (byte)101, (byte) (-7), (byte) (-89), (byte)7, (byte) (-58)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-99), (byte)18, (byte)101, (byte) (-7), (byte) (-89), (byte)7, (byte) (-58)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('5');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = Utility.toHexString(byteArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("9d 12 65 f9 a7 07 c6", string1);
      assertArrayEquals(new byte[] {(byte) (-99), (byte)18, (byte)101, (byte) (-7), (byte) (-89), (byte)7, (byte) (-58)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      String string2 = Utility.compactClassName("0:    ifgt\t\t#4709\n3:    <illegal opcode>\n4:    goto\t\t#1994\n", true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("0:    ifgt\t\t#4709\n3:    <illegal opcode>\n4:    goto\t\t#1994\n", string2);
      
      String string3 = Utility.format((byte)7, 1201, true, '5');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("i2d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `i2d'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)78, (byte) (-15), (byte)0, (byte)37}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals("astore_3", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)78, (byte) (-15), (byte)0, (byte)37}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)46, (byte)103}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string0);
      assertEquals("iaload", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)46, (byte)103}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      short short0 = Utility.searchOpcode("getstatic");
      assertEquals((short)178, short0);
      
      String string0 = Utility.fillup("invokespecial", (short)178, true, '4');
      assertNotNull(string0);
      assertEquals("invokespecial444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte) (-13);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-80), (byte)13, (byte)90, (byte)1, (byte) (-121), (byte) (-97), (byte) (-13)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("areturn", string1);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-80), (byte)13, (byte)90, (byte)1, (byte) (-121), (byte) (-97), (byte) (-13)}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      assertEquals(3, objectArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-110);
      String string1 = Utility.toHexString(byteArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("95 6f 02 92", string1);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)111, (byte)2, (byte) (-110)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-107), (byte)111, (byte)2, (byte) (-110)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean0 = byteSequence0.readBoolean();
      assertTrue(boolean0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-107), (byte)111, (byte)2, (byte) (-110)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ddiv", string2);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-107), (byte)111, (byte)2, (byte) (-110)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      try { 
        Utility.methodSignatureArgumentTypes("{\"java.lang.Object@1306a6cf\", \"java.lang.Object@449a09c3\", \"java.lang.Object@259781ea\"}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {\"java.lang.Object@1306a6cf\", \"java.lang.Object@449a09c3\", \"java.lang.Object@259781ea\"}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      int int0 = Utility.setBit(82, 2142);
      assertEquals(1073741906, int0);
      
      String string0 = Utility.accessToString(2142);
      assertNotNull(string0);
      assertEquals("private protected static final volatile strictfp", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)57;
      byte byte0 = (byte) (-16);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)86;
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "private protected static final volatile strictfp");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-42);
      byteArray0[7] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 80, (int) (byte)68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("LK7Am=P!$=l^.jlM5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LK7Am=P!$=l^.jlM5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "CodeException(start_pc = ";
      String string1 = Utility.signatureToString("CodeException(start_pc = ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("char", string1);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append('y');
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("y", stringWriter0.toString());
      assertEquals("y", stringWriter1.toString());
      
      stringWriter0.flush();
      assertSame(stringWriter0, stringWriter1);
      assertEquals("y", stringWriter0.toString());
      
      stringWriter0.flush();
      assertSame(stringWriter0, stringWriter1);
      assertEquals("y", stringWriter0.toString());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) stringWriter0;
      stringWriter0.close();
      assertSame(stringWriter0, stringWriter1);
      assertEquals("y", stringWriter0.toString());
      
      objectArray0[5] = (Object) "CodeException(start_pc = ";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertSame(stringWriter0, stringWriter1);
      assertEquals(6, objectArray0.length);
      
      String string2 = Utility.compactClassName("char", "CodeException(start_pc = ", true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("char", string2);
      
      byte[] byteArray0 = Utility.decode("CodeException(start_pc = ", false);
      assertNotNull(byteArray0);
      assertEquals(25, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'");
      assertFalse(boolean0);
      
      String string3 = Utility.format(150, 150, false, 'y');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy150", string3);
      
      String string4 = "\\r";
      try { 
        Utility.methodSignatureArgumentTypes("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 85, 78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)42, (byte)42, (byte)92, (byte) (-105), (byte) (-78), (byte) (-100)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)42);
      assertNotNull(constantFloat0);
      assertEquals(42.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)42);
      assertNotNull(constantMethodType0);
      assertEquals(42, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertNotNull(constantMethodType1);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals(42, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(42, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)42, (byte)92);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(92, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(42, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertNotNull(constantInterfaceMethodref1);
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertEquals(92, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(42, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      assertEquals(42, constantInterfaceMethodref1.getClassIndex());
      assertEquals(92, constantInterfaceMethodref1.getNameAndTypeIndex());
      
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantString constantString0 = new ConstantString((byte)42);
      assertNotNull(constantString0);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(42, constantString0.getStringIndex());
      
      constantArray0[3] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertEquals(4, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertNotNull(string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals("aload_0", string0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)42, (byte)42, (byte)92, (byte) (-105), (byte) (-78), (byte) (-100)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(4, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "Wmb%t]~q";
      try { 
        Utility.methodSignatureReturnType("Wmb%t]~q", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wmb%t]~q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
      
      String string1 = Utility.signatureToString("T5a;@wQ8X", false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("5a", string1);
      
      String string2 = Utility.methodTypeToSignature("$(NXP%kr", (String[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("()L$(NXP%kr;", string2);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("5a", "wide", "1#4+101PbN05`", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "short";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "short");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byteArray0[0] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 80, 2079, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = Utility.accessToString((-4));
      assertNotNull(string0);
      assertEquals("protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string0);
      
      int int0 = Utility.setBit((-785), 87);
      assertEquals((-785), int0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)50;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2600, 2928);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = Utility.setBit(40, (-2470));
      assertEquals(67108904, int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "^hmy!mRh";
      stringArray0[1] = "^hmy!mRh";
      String string0 = Utility.methodTypeToSignature("^hmy!mRh", stringArray0);
      assertNotNull(string0);
      assertEquals("(L^hmy!mRh;L^hmy!mRh;)L^hmy!mRh;", string0);
      assertEquals(2, stringArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)34;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[7] = (byte) (-29);
      boolean boolean1 = false;
      String string1 = Utility.encode(byteArray0, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$w$d4$M$l$b5$B$o$e3", string1);
      assertArrayEquals(new byte[] {(byte)42, (byte) (-44), (byte)12, (byte)31, (byte) (-75), (byte)1, (byte)34, (byte) (-29)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      String string2 = Utility.methodSignatureToString("(L^hmy!mRh;L^hmy!mRh;)L^hmy!mRh;", "^hmy!mRh", "org.apache.bcel.classfile.ConstantCP");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.bcel.classfile.ConstantCP ^hmy!mRh ^hmy!mRh(^hmy!mRh arg1, ^hmy!mRh arg2)", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)42, (byte) (-44), (byte)12, (byte)31, (byte) (-75), (byte)1, (byte)34, (byte) (-29)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -29
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)125;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)71;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-28), (byte)125, (byte)85, (byte)71, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byteArray0[5] = (byte) (-127);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 93, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "H}aZTPJlNLY9#oaATP";
      // Undeclared exception!
      try { 
        Utility.signatureToString("H}aZTPJlNLY9#oaATP", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H}aZTPJlNLY9#oaATP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = Utility.isSet(61, 234);
      assertFalse(boolean0);
      
      String string0 = Utility.printArray((Object[]) null, true, true);
      assertNull(string0);
      
      boolean boolean1 = Utility.isSet(234, 234);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)118;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, (-138), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "impdep2");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-48);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-79), (byte) (-66), (byte)0, (byte) (-82), (byte) (-48)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals("monitorenter", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-79), (byte) (-66), (byte)0, (byte) (-82), (byte) (-48)}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = Utility.accessToString((-4));
      assertNotNull(string0);
      assertEquals("protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string0);
      
      int int0 = Utility.setBit((-785), 87);
      assertEquals((-785), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)45;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2600, 2928);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(8pe:Ph)_3g}=S3dm0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _3g}=S3dm0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("KFDA=l/R`;vqU<", "KFDA=l/R`;vqU<", false);
      assertNotNull(string0);
      assertEquals("KFDA=l.R`;vqU<", string0);
      
      String string1 = "s7uRql*wW;";
      String string2 = Utility.convertString("s7uRql*wW;");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("s7uRql*wW;", string2);
      
      short short0 = Utility.searchOpcode("KFDA=l/R`;vqU<");
      assertEquals((short) (-1), short0);
      
      try { 
        Utility.methodSignatureReturnType("KFDA=l/R`;vqU<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KFDA=l/R`;vqU<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-82);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-20), (byte) (-88), (byte)73, (byte) (-82)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      String string0 = Utility.format((byte)85, 512, false, 'Q');
      assertNotNull(string0);
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ85", string0);
      
      try { 
        Utility.typeOfSignature("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ85");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ85
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("*Le&$u~o{A1E");
      assertNotNull(string0);
      assertEquals("*Le&$u~o{A1E", string0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = Utility.decode("*Le&$u~o{A1E", false);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(11, byteArray1.length);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('|');
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t<");
      assertNotNull(string0);
      assertEquals("L<;", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("u7OfEFn6a9@2", "FR.", "FR.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: u7OfEFn6a9@2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = "&.<3";
      try { 
        Utility.typeOfSignature("&.<3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &.<3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)8;
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("$I$x$I", string0);
      assertArrayEquals(new byte[] {(byte)8, (byte)43, (byte)8}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "$I$x$I";
      stringArray0[1] = "$I$x$I";
      stringArray0[2] = "$I$x$I";
      stringArray0[3] = "$I$x$I";
      stringArray0[4] = "$I$x$I";
      stringArray0[5] = "$I$x$I";
      String string1 = Utility.methodTypeToSignature("$I$x$I", stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(L$I$x$I;L$I$x$I;L$I$x$I;L$I$x$I;L$I$x$I;L$I$x$I;)L$I$x$I;", string1);
      assertEquals(6, stringArray0.length);
      
      try { 
        Utility.typeOfSignature("$I$x$I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $I$x$I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = Utility.setBit(2756, 2756);
      assertEquals(2772, int0);
      
      byte byte0 = Utility.typeOfSignature("F0]_(N!_");
      assertEquals((byte)6, byte0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "F0]_(N!_";
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[2] = object1;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals(3, objectArray0.length);
      
      String string1 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(3, objectArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)6;
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)6;
      byteArray1[1] = (byte)6;
      byteArray1[2] = (byte)6;
      byteArray1[3] = (byte)109;
      byteArray1[4] = (byte)109;
      byteArray1[5] = (byte)6;
      byteArray1[6] = (byte)6;
      byteArray1[7] = (byte)109;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)6, (byte)109, (byte)109, (byte)6, (byte)6, (byte)109}, byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)109, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6}, byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(9, byteArray0.length);
      
      String string2 = Utility.compactClassName("M23jEZqb0:]x", "M23jEZqb0:]x", false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("M23jEZqb0:]x", string2);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = Utility.compactClassName("long", "return", true);
      assertNotNull(string0);
      assertEquals("long", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-30);
      byteArray0[1] = (byte)115;
      byteArray0[0] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-75), (byte)115, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((byte) (-75));
      assertNotNull(constantString0);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals((-75), constantString0.getStringIndex());
      
      constantArray0[0] = (Constant) constantString0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-30));
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-30.0), constantDouble0.getBytes(), 0.01);
      
      constantArray0[1] = (Constant) constantDouble0;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantDouble0.accept(emptyVisitor0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-30.0), constantDouble0.getBytes(), 0.01);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 29440. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "Fu0BVj3;*IkMVAvQo";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Fu0BVj3;*IkMVAvQo");
      assertFalse(boolean0);
      
      String string1 = Utility.signatureToString("Fu0BVj3;*IkMVAvQo");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("float", string1);
      
      String string2 = "public vol";
      try { 
        Utility.typeOfMethodSignature("public vol");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public vol
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "[C{y";
      // Undeclared exception!
      try { 
        Utility.getSignature("[C{y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [C{y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = true;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(0, objectArray0.length);
      
      try { 
        Utility.typeOfSignature("\"\"X&,j%8AOs/74R4K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"\"X&,j%8AOs/74R4K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = "Unrecognized attribute type tag parsed: ";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Unrecognized attribute type tag parsed: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unrecognized attribute type tag parsed: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.compactClassName("209IIIIIII");
      assertNotNull(string0);
      assertEquals("209IIIIIII", string0);
      
      String string1 = Utility.getSignature("209IIIIIII");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L209IIIIIII;", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-95);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)106;
      String string2 = Utility.toHexString(byteArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("a1 45 2d 94 6a", string2);
      assertArrayEquals(new byte[] {(byte) (-95), (byte)69, (byte)45, (byte) (-108), (byte)106}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)106;
      objectArray0[1] = (Object) (byte)45;
      objectArray0[2] = (Object) (byte)106;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (byte) (-95);
      String string3 = Utility.printArray(objectArray0, false);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(5, objectArray0.length);
      
      String string4 = Utility.signatureToString("L209IIIIIII;", false);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("209IIIIIII", string4);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('6');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      try { 
        Utility.typeOfSignature("106, 45, 106, java.lang.Object@6d8dcf33, -95");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 106, 45, 106, java.lang.Object@6d8dcf33, -95
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)75, (byte)3, (byte) (-104), (byte)62, (byte)120}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("astore_0", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)75, (byte)3, (byte) (-104), (byte)62, (byte)120}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = Utility.format(222, 222, true, 'h');
      assertNotNull(string0);
      assertEquals("222hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh", string0);
      
      try { 
        Utility.typeOfSignature("222hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 222hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")@,k.$ \">.?GB");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)32;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte) (-28), (byte) (-32), (byte)32}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      String string0 = "(z6XGib>8,&p^";
      try { 
        Utility.typeOfSignature("(z6XGib>8,&p^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (z6XGib>8,&p^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("J[[>\"K: 3");
      assertNotNull(string0);
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = Utility.accessToString((-2704));
      assertNotNull(string0);
      assertEquals("final synchronized volatile native abstract synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-128);
      Constant[] constantArray0 = new Constant[4];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)36, (byte) (-128));
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((-128), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(36, constantInterfaceMethodref0.getClassIndex());
      
      ConstantInterfaceMethodref constantInterfaceMethodref1 = (ConstantInterfaceMethodref)constantInterfaceMethodref0.copy();
      assertNotNull(constantInterfaceMethodref1);
      assertNotSame(constantInterfaceMethodref0, constantInterfaceMethodref1);
      assertNotSame(constantInterfaceMethodref1, constantInterfaceMethodref0);
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertEquals((-128), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(36, constantInterfaceMethodref0.getClassIndex());
      assertEquals((-128), constantInterfaceMethodref1.getNameAndTypeIndex());
      assertEquals(36, constantInterfaceMethodref1.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantClass constantClass0 = new ConstantClass(51);
      assertNotNull(constantClass0);
      assertEquals(51, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      constantArray0[1] = (Constant) constantClass0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)36);
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(36, constantInteger0.getBytes());
      
      constantArray0[2] = (Constant) constantInteger0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-128), (-5));
      assertNotNull(constantFieldref0);
      assertEquals((-128), constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-5), constantFieldref0.getNameAndTypeIndex());
      
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantArray0.length);
      
      boolean boolean0 = true;
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-5), 20000, true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    fload_2\n1:    <illegal opcode>\n2:    ior\n", string1);
      assertEquals(4, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)36, (byte) (-20), (byte) (-128)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, constantArray0.length);
      
      String string2 = Utility.toHexString(byteArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("24 ec 80", string2);
      assertArrayEquals(new byte[] {(byte)36, (byte) (-20), (byte) (-128)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      String string3 = "dreturn";
      String string4 = "vA)x*y%~Bnk=";
      String string5 = "getstatic";
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byte byte1 = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte) (-24);
      byte byte2 = (byte) (-88);
      byteArray0[7] = (byte) (-88);
      ConstantPool constantPool0 = null;
      int int0 = 2486;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-88), 2486, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iconst_3
         // 1:    lcmp
         // 2:    iconst_3
         // 3:    fstore\t\t%182
         // 5:    fneg
         // 6:    <illegal opcode>
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-94);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), (int) (byte)102, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fsub
         // 1:    lconst_1
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "U7xta~ok;6]";
      stringArray0[1] = "U7xta~ok;6]";
      stringArray0[2] = "U7xta~ok;6]";
      stringArray0[3] = "U7xta~ok;6]";
      stringArray0[4] = "U7xta~ok;6]";
      stringArray0[5] = "U7xta~ok;6]";
      String string0 = Utility.methodTypeToSignature("U7xta~ok;6]", stringArray0);
      assertNotNull(string0);
      assertEquals("(LU7xta~ok;6];LU7xta~ok;6];LU7xta~ok;6];LU7xta~ok;6];LU7xta~ok;6];LU7xta~ok;6];)LU7xta~ok;6];", string0);
      assertEquals(6, stringArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)90, (byte) (-2), (byte) (-117)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertNotNull(string1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals("dup_x1", string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)90, (byte) (-2), (byte) (-117)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-43);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)108, (byte) (-127), (byte)32, (byte)0, (byte)81, (byte) (-109), (byte) (-43)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      long long0 = byteSequence0.skip((-1992L));
      assertEquals(0L, long0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)108, (byte) (-127), (byte)32, (byte)0, (byte)81, (byte) (-109), (byte) (-43)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      byteSequence0.close();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)108, (byte) (-127), (byte)32, (byte)0, (byte)81, (byte) (-109), (byte) (-43)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      int int0 = byteSequence0.available();
      assertEquals(7, int0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)108, (byte) (-127), (byte)32, (byte)0, (byte)81, (byte) (-109), (byte) (-43)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("idiv", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)108, (byte) (-127), (byte)32, (byte)0, (byte)81, (byte) (-109), (byte) (-43)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('v');
      assertTrue(boolean0);
      
      boolean boolean1 = Utility.isSet((-2482), (byte)0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = Utility.clearBit((byte)108, 41);
      assertFalse(int1 == int0);
      assertEquals(108, int1);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 140, 66, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = Utility.convertString("TI\"1");
      assertNotNull(string0);
      assertEquals("TI\\\"1", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-2);
      boolean boolean0 = false;
      String string1 = Utility.encode(byteArray0, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("X$f8$bf$fe", string1);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-8), (byte) (-65), (byte) (-2)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      Constant[] constantArray0 = new Constant[6];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = null;
      try {
        constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('R');
      assertTrue(boolean0);
      
      boolean boolean1 = true;
      String string0 = Utility.signatureToString("Z&Ui_tcHX<S{)_zR", true);
      assertNotNull(string0);
      assertEquals("boolean", string0);
      
      String string1 = Utility.classOrInterface((-3934));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("class", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `boolean'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = "4i\"Dw/EKX5";
      try { 
        Utility.typeOfSignature("4i\"Dw/EKX5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4i\"Dw/EKX5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("[PDbp", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PDbp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Xywb+HUB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xywb+HUB'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      boolean boolean0 = Utility.isSet(3549, 255);
      assertFalse(boolean0);
      
      String string0 = Utility.signatureToString("Ldcmpg;V", false);
      assertNotNull(string0);
      assertEquals("dcmpg", string0);
      
      int int0 = Utility.clearBit(238, 187);
      assertEquals(238, int0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("dcmpg");
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(0, objectArray0.length);
      
      byte byte0 = Utility.typeOfSignature("Ldcmpg;V");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "? super ";
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-124), (byte)83, (byte)43, (byte)106, (byte) (-120), (byte)125}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string1);
      assertEquals("iinc\t\t%83\t43", string1);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-124), (byte)83, (byte)43, (byte)106, (byte) (-120), (byte)125}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("I<j");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.methodSignatureReturnType("I<j");
      assertNotNull(string0);
      assertEquals("int", string0);
      
      int int0 = Utility.clearBit(169, 50);
      assertEquals(169, int0);
      
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.signatureToString("By?>@y|(");
      assertNotNull(string0);
      assertEquals("byte", string0);
      
      short short0 = Utility.searchOpcode("By?>@y|(");
      assertEquals((short) (-1), short0);
      
      try { 
        Utility.typeOfSignature("byte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "H0>hcb/";
      try { 
        Utility.typeOfSignature("H0>hcb/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H0>hcb/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int int0 = (-4340);
      String string0 = Utility.classOrInterface((-4340));
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      String string1 = Utility.getSignature("interface");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Linterface;", string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "interface";
      stringArray0[1] = "Linterface;";
      stringArray0[2] = "interface";
      stringArray0[3] = "Linterface;";
      stringArray0[4] = "void";
      try { 
        Utility.methodTypeToSignature("interface", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)56;
      byteArray0[0] = (byte)56;
      ConstantPool constantPool0 = null;
      String string0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      int int0 = 77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)56, 77, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      int int0 = (-3487);
      boolean boolean0 = true;
      String string0 = Utility.accessToString((-3487), true);
      assertNotNull(string0);
      assertEquals("public volatile synthetic annotation enum", string0);
      
      String string1 = Utility.compactClassName("public volatile synthetic annotation enum");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("public volatile synthetic annotation enum", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        Utility.typeOfSignature("PSQ=#w\u0002:zH(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PSQ=#w\u0002:zH(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(0, objectArray0.length);
      
      String string1 = Utility.methodTypeToSignature("9bpy}M:y", (String[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("()L9bpy}M:y;", string1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = "JC";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JC");
      assertFalse(boolean0);
      
      try { 
        Utility.methodSignatureReturnType("The filter must not be null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The filter must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      boolean boolean0 = Utility.isSet(0, 0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte) (-102);
      byteArray0[8] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)14, (byte)7, (byte) (-88), (byte) (-92), (byte) (-1), (byte) (-57), (byte) (-99), (byte) (-102), (byte) (-66)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)14, 1826);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(14, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(14, constantInvokeDynamic0.getClassIndex());
      assertEquals(1826, constantInvokeDynamic0.getNameAndTypeIndex());
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertNotNull(constantInvokeDynamic1);
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertEquals(14, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(14, constantInvokeDynamic0.getClassIndex());
      assertEquals(1826, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(14, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertEquals(14, constantInvokeDynamic1.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals(1826, constantInvokeDynamic1.getNameAndTypeIndex());
      
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      assertNotNull(constantMethodHandle0);
      assertEquals(14, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(1960, constantMethodHandle0.getReferenceIndex());
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)14, (byte)7, (byte) (-88), (byte) (-92), (byte) (-1), (byte) (-57), (byte) (-99), (byte) (-102), (byte) (-66)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantClass constantClass0 = new ConstantClass(187);
      assertNotNull(constantClass0);
      assertEquals(187, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string0);
      assertEquals("if_icmple\t\t#-54", string0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(6, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)14, (byte)7, (byte) (-88), (byte) (-92), (byte) (-1), (byte) (-57), (byte) (-99), (byte) (-102), (byte) (-66)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(3, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = Utility.compactClassName("HvD@XGr", "HvD@XGr", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)109, (byte)76, (byte)32, (byte)102, (byte)42, (byte)105, (byte)54, (byte) (-87)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)32, (byte)109);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(32, constantInterfaceMethodref0.getClassIndex());
      assertEquals(109, constantInterfaceMethodref0.getNameAndTypeIndex());
      
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)105);
      assertNotNull(constantFloat0);
      assertEquals(105.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertNotNull(constantFloat1);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertEquals(105.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(105.0F, constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      
      constantArray0[1] = (Constant) constantFloat1;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref((byte) (-87), 3364);
      assertNotNull(constantInterfaceMethodref1);
      assertFalse(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertEquals(3364, constantInterfaceMethodref1.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      assertEquals((-87), constantInterfaceMethodref1.getClassIndex());
      
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ldiv", string1);
      assertEquals(3, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)109, (byte)76, (byte)32, (byte)102, (byte)42, (byte)105, (byte)54, (byte) (-87)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(3, constantArray0.length);
      
      String string2 = Utility.printArray((Object[]) constantArray0, false, true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\"CONSTANT_InterfaceMethodref[11](class_index = 32, name_and_type_index = 109)\", \"CONSTANT_Float[4](bytes = 105.0)\", \"CONSTANT_InterfaceMethodref[11](class_index = -87, name_and_type_index = 3364)\"", string2);
      assertEquals(3, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('.');
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals(5, objectArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Oy=t", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Oy=t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = Utility.replace("*", "*", "getstatic");
      assertNotNull(string0);
      assertEquals("getstatic", string0);
      
      int int0 = (-642);
      int int1 = Utility.clearBit(20, (-642));
      assertFalse(int1 == int0);
      assertEquals(20, int1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("if_acmpeq", "ks_/9@mJ*#", "getstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_acmpeq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.fillup(", low = ", 923, false, 'y');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ", low = ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy, low = ";
      objectArray0[3] = (Object) "yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy, low = ";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ", low = ";
      objectArray0[6] = (Object) ", low = ";
      Utility.printArray(objectArray0, false, false);
      Utility.isJavaIdentifierPart('y');
      try { 
        Utility.methodSignatureReturnType("MrhX7^Rv", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MrhX7^Rv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = 194;
      Utility.clearBit(89, 194);
      Utility.convertString("anewarray");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.typeOfSignature("[8:7(w6f`A@O_DC$sS{");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      Constant[] constantArray0 = new Constant[2];
      int int0 = (-1921);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)13, (-1921));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = Utility.convertString(">\t");
      assertEquals(">\t", string0);
      
      String string1 = Utility.getSignature("hwWWfxo<f0^#%TryVUW");
      assertEquals("LhwWWfxo<f0^#%TryVUW;", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(101, (-2539));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("hwWWfxo<f0^#%TryVUW");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("bastore", string2);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Q^*c";
      stringArray0[1] = "Q^*c";
      stringArray0[2] = "Q^*c";
      stringArray0[3] = "Q^*c";
      stringArray0[4] = "Q^*c";
      stringArray0[5] = "Q^*c";
      stringArray0[6] = "Q^*c";
      stringArray0[7] = "Q^*c";
      stringArray0[8] = "^7QE[t>vZ(k&UR@";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("Q^*c", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[t>vZ(k&UR@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int int0 = 142;
      Utility.format((-2435), 142, true, '_');
      Utility.isJavaIdentifierPart('_');
      Utility.setBit(142, (-2435));
      Utility.replace("-2435_________________________________________________________________________________________________________________________________________", "-2435_________________________________________________________________________________________________________________________________________", "-2435_________________________________________________________________________________________________________________________________________");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Utility.convertString("C:[b^i>LoIV]Z_");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "C:[b^i>LoIV]Z_";
      stringArray0[1] = "C:[b^i>LoIV]Z_";
      stringArray0[2] = "C:[b^i>LoIV]Z_";
      Utility.methodTypeToSignature("C:[b^i>LoIV]Z_", stringArray0);
      Utility.getSignature("C:[b^i>LoIV]Z_");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = ">\t";
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("<$?5^;");
      String string0 = "xO6E";
      Utility.compactClassName("xO6E", "xO6E", false);
      String string1 = "=PmPg";
      try { 
        Utility.typeOfSignature("=PmPg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =PmPg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[iq.`w4Qa1x`7d-v=$+");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "[iq.`w4Qa1x`7d-v=$+";
      mockPrintWriter0.print(2486.37767142486);
      objectArray0[2] = (Object) "[iq.`w4Qa1x`7d-v=$+";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "[iq.`w4Qa1x`7d-v=$+";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) "[iq.`w4Qa1x`7d-v=$+";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      try { 
        Utility.typeOfSignature(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("GH+F", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GH+F'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = Utility.compactClassName("org.apache.bcel.util.ClassPath$Dir", false);
      assertEquals("org.apache.bcel.util.ClassPath$Dir", string0);
      
      byte[] byteArray0 = Utility.decode("org.apache.bcel.util.ClassPath$Dir", false);
      assertEquals(33, byteArray0.length);
      
      String string1 = Utility.classOrInterface((-2511));
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      byteSequence0.reset();
      byteSequence0.readFully(byteArray0);
      byteSequence0.reset();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        constantPool0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("S:PU", true);
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = "VKbG:@;%f;9YZ>,p";
      Utility.methodSignatureReturnType("VKbG:@;%f;9YZ>,p");
      try { 
        Utility.typeOfMethodSignature("VKbG:@;%f;9YZ>,p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: VKbG:@;%f;9YZ>,p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-29);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup_x2", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = "1I`+\\b";
      Utility.convertString("1I`+\b");
      Utility.classOrInterface(6);
      String string1 = "m4.9ub9b}";
      try { 
        Utility.decode("m4.9ub9b}", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("R]FyrQC.Q", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R]FyrQC.Q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = Utility.compactClassName("cnH?h;2", false);
      assertEquals("cnH?h;2", string0);
      
      Utility.fillup("cnH?h;2", 198, true, 'u');
      String string1 = Utility.classOrInterface(198);
      assertEquals("class", string1);
      
      String string2 = Utility.fillup("cnH?h;2", 75, true, '?');
      assertEquals("cnH?h;2????????????????????????????????????????????????????????????????????", string2);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.accessToString((-3489), true);
      Utility.compactClassName("public private protected static final volatile synthetic annotation enum");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q_z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q_z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      try { 
        Utility.decode("lookupswitch", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("long", "return", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((byte) (-75));
      constantArray0[0] = (Constant) constantString0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-30));
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 57971. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = Utility.signatureToString("Dont call getValueChar() on a non CHAR ElementValue", true);
      assertEquals("double", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Dont call getValueChar() on a non CHAR ElementValue";
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals("Dont call getValueChar() on a non CHAR ElementValue", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jKJ1e|:Htc N");
      boolean boolean0 = true;
      Utility.accessToString(544, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "if_acmpeq";
      boolean boolean0 = false;
      Utility.decode("if_acmpeq", false);
      Utility.typeOfSignature("CW,7n M{V]_X");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "CW,7n M{V]_X";
      objectArray0[2] = (Object) "if_acmpeq";
      objectArray0[3] = (Object) "if_acmpeq";
      objectArray0[4] = (Object) "CW,7n M{V]_X";
      Utility.printArray(objectArray0);
      Utility.clearBit((byte)5, 1562);
      String string1 = "bvsF+=DTe;,9;q\"T";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("CW,7n M{V]_X", "bvsF+=DTe;,9;q\"T", "6MMqXb.n1&YqT0A87O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: CW,7n M{V]_X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Utility.searchOpcode("dodSqnp!f");
      Utility.printArray((Object[]) null, true, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      Utility.equals(byteArray0, byteArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "0H5hx89\"~~}B/:s-";
      stringArray0[4] = "dodSqnp!f";
      stringArray0[5] = null;
      stringArray0[6] = "dodSqnp!f";
      stringArray0[7] = null;
      stringArray0[8] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("dodSqnp!f", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".");
      String string0 = "6'";
      try { 
        Utility.typeOfSignature("6'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Utility.fillup("goto", 4, false, '.');
      Utility.clearBit((-1315), 12);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)74;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)74;
      byteArray1[1] = (byte)74;
      byteArray1[2] = (byte)74;
      byteArray1[3] = (byte)74;
      Utility.equals(byteArray0, byteArray1);
      Utility.searchOpcode("Pj]f#I6<");
      Utility.toHexString(byteArray0);
      Utility.isSet((byte)74, 2911);
      String string0 = Utility.getSignature("goto");
      String string1 = Utility.compactClassName("o}0X-97]*4WZ", "byte", false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("I<j");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.compactClassName("I<j");
      assertEquals("I<j", string0);
      
      int int0 = Utility.clearBit(169, 13);
      assertEquals(169, int0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-89);
      Utility.equals(byteArray0, byteArray0);
      Utility.clearBit((byte) (-120), (byte)44);
      Utility.compactClassName("YY5^cXL");
      String string0 = "rrB";
      // Undeclared exception!
      try { 
        Utility.signatureToString("rrB", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `rrB'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(546);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, 253, (-1357));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-63);
      Utility.toHexString(byteArray0);
      Utility.fillup("synchronized", (-2093), false, '-');
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.bcel.classfile.ParameterAnnotationEntry");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.ParameterAnnotationEntry
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = Utility.compactClassName("array");
      assertEquals("array", string0);
      
      int int0 = Utility.setBit((-2677), (-2677));
      assertEquals((-629), int0);
      
      String string1 = Utility.accessToString((-3111));
      assertEquals("public static final volatile transient native interface synthetic annotation enum", string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "array";
      objectArray0[1] = (Object) "array";
      objectArray0[2] = (Object) "public static final volatile transient native interface synthetic annotation enum";
      objectArray0[3] = (Object) "array";
      objectArray0[4] = (Object) "array";
      objectArray0[5] = (Object) "array";
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{array, array, public static final volatile transient native interface synthetic annotation enum, array, array, array}", string2);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "^";
      boolean boolean0 = true;
      char char0 = 'K';
      Utility.fillup("^", 3, true, 'K');
      Utility.searchOpcode("athrow");
      try { 
        Utility.typeOfSignature("^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-553), 76);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte) (-59);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)86;
      Utility.encode(byteArray0, false);
      int int0 = 240;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(240);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "$gV", 252, 240);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)14;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("6f 0e", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = "Unknown constant type ";
      Utility.compactClassName("Unknown constant type ");
      Utility.fillup("if_acmpne", 41, true, '&');
      Utility.replace("Unknown constant type ", "Unknown constant type ", "if_acmpne&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
      Utility.decode("Unknown constant type ", false);
      String string1 = "goto";
      Utility.compactClassName("goto", "if_acmpne&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&", false);
      String string2 = "ifle";
      // Undeclared exception!
      try { 
        Utility.signatureToString("ifle");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifle'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format((-1841414303), (-1841414303), false, 'O');
      Utility.fillup("org.apache.bcel.classfile.LineNumber", 170, false, 'u');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(5595);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      constantArray0[0] = (Constant) constantInteger0;
      byteSequence0.skipBytes(65);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("anewarray");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintStream0;
      mockPrintStream0.println("anewarray");
      objectArray0[1] = (Object) "anewarray";
      mockPrintStream0.println((-219.267509));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Locale locale0 = Locale.forLanguageTag(":8-jg|Y%/K{jgG'");
      Locale locale1 = Locale.FRANCE;
      locale0.getDisplayCountry(locale1);
      mockPrintStream0.format(locale0, "anewarray", objectArray0);
      mockPrintStream0.print(0.0F);
      objectArray0[2] = (Object) "anewarray";
      objectArray0[3] = (Object) mockPrintStream0;
      mockPrintStream0.close();
      objectArray0[4] = (Object) "anewarray";
      objectArray0[5] = (Object) "anewarray";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      short short0 = Utility.searchOpcode("anewarray");
      assertEquals((short)189, short0);
      
      String string0 = Utility.format(209, (short)189, true, 'I');
      String string1 = Utility.compactClassName("209IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = " xz1#>p#h*";
      try { 
        Utility.typeOfMethodSignature(" xz1#>p#h*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  xz1#>p#h*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.classOrInterface(170);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-48);
      byteArray0[0] = (byte) (-48);
      byte byte1 = (byte)21;
      byteArray0[1] = (byte)21;
      byte byte2 = (byte)5;
      byteArray0[2] = (byte)5;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('e');
      String string0 = "The suffix must not be null";
      Utility.typeOfSignature("The suffix must not be null");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The suffix must not be null");
      Utility.isJavaIdentifierPart('e');
      Utility.setBit((byte)21, (-459));
      try { 
        Utility.methodSignatureReturnType("class", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", low = ");
      byte byte0 = (byte) (-37);
      byteArray0[1] = (byte) (-37);
      byte byte1 = (byte) (-106);
      byteArray0[2] = (byte) (-106);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "> ");
      Utility.equals(byteArray0, byteArray0);
      String string0 = "pty^0";
      Utility.getSignature("pty^0");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("> ", "Lpty^0;", "> ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: > 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      Utility.toHexString(byteArray0);
      int int0 = 2953;
      Utility.format((byte)34, 2953, true, 'd');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("]CyVwkzbP.", "{\"java.lang.Object@745916b1\", \"java.lang.Object@6a48deea\", \"java.lang.Object@2efe7cc\", \"java.lang.Object@2a2df1a4\"}", "22", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]CyVwkzbP.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.printArray(objectArray0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = (-889275714);
      Utility.classOrInterface((-889275714));
      MockFile mockFile0 = new MockFile("interface", "interface");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false, "interface");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // interface
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("new", "XrEFk7Ruap@HvRc", false);
      Utility.replace("new", "new", "new");
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "8<qs$%6d}q&TTg>$.\"", "3?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("^)9Ja7FfZkd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^)9Ja7FfZkd'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1747, 652, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "\\'";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'");
      try { 
        Utility.methodSignatureArgumentTypes("'", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte) (-118);
      Utility.equals(byteArray0, byteArray0);
      Utility.getSignature("Unreachable default case reached!");
      String string0 = Utility.convertString("LUnreachable;");
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "LUnreachable;";
      objectArray0[2] = (Object) (byte) (-26);
      objectArray0[3] = (Object) (byte)125;
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      int int0 = 3727;
      boolean boolean0 = true;
      Utility.accessToString(3727, true);
      Utility.getSignature("public private protected static transient abstract strictfp");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "public private protected static transient abstract strictfp", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Utility.getSignature("_|");
      String string0 = "ireturn";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("ireturn", "invokeSpecial", true);
      String string1 = "boolean";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("boolean", "L_|;", "ireturn", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Utility.isJavaIdentifierPart('h');
      Utility.setBit(48, (-848));
      Utility.compactClassName("");
      Utility.setBit((-848), 48);
      Utility.accessToString(0, true);
      Utility.searchOpcode("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUTF();
      byteSequence0.skipBytes(0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-9);
      byte byte0 = (byte) (-91);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-92);
      byte byte1 = (byte) (-71);
      byteArray0[4] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -91
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = Utility.compactClassName("4T", ",", true);
      assertEquals("4T", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.EnumElementValue");
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-5);
      Utility.encode(byteArray0, true);
      Utility.convertString("$l$8b$I$A$A$A$A$A$A$A");
      try { 
        Utility.methodSignatureReturnType("|h3SokoTz*w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `|h3SokoTz*w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      int int0 = Utility.clearBit(163, (-1788));
      assertEquals(163, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "anewarray";
      stringArray0[1] = "anewarray";
      stringArray0[2] = "char";
      stringArray0[3] = "anewarray";
      stringArray0[4] = "anewarray";
      stringArray0[5] = "anewarray";
      stringArray0[6] = "anewarray";
      stringArray0[7] = "anewarray";
      stringArray0[8] = "anewarray";
      Utility.methodTypeToSignature("anewarray", stringArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-78);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      Utility.replace("(Lanewarray;Lanewarray;CLanewarray;Lanewarray;Lanewarray;Lanewarray;Lanewarray;Lanewarray;)Lanewarray;", "=DzPC9D<@KkP", "o&ev^lb5On");
      String string0 = Utility.classOrInterface((byte)33);
      assertEquals("class", string0);
      
      String string1 = Utility.printArray((Object[]) stringArray0);
      assertEquals("{anewarray, anewarray, char, anewarray, anewarray, anewarray, anewarray, anewarray, anewarray}", string1);
      
      boolean boolean1 = Utility.isSet((byte) (-78), 163);
      assertFalse(boolean1 == boolean0);
      
      String string2 = Utility.accessToString((int) (byte) (-78), false);
      assertEquals("private final synchronized transient native interface abstract strictfp synthetic annotation enum", string2);
      
      String string3 = Utility.compactClassName("u/^Xd}u", "o&ev^lb5On", true);
      assertEquals("u.^Xd}u", string3);
      
      String string4 = Utility.methodTypeToSignature("anewarray", stringArray0);
      assertEquals("(Lanewarray;Lanewarray;CLanewarray;Lanewarray;Lanewarray;Lanewarray;Lanewarray;Lanewarray;)Lanewarray;", string4);
      
      Utility.isSet(88, 74);
      String string5 = Utility.printArray((Object[]) stringArray0, true, false);
      assertNotNull(string5);
      assertEquals("{anewarray, anewarray, char, anewarray, anewarray, anewarray, anewarray, anewarray, anewarray}", string5);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("monitorexit");
      MockFile mockFile0 = new MockFile("],NI%=MI|p|\"8jO/S7Q");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "monitorexit";
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) "],NI%=MI|p|\"8jO/S7Q";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = "arraylength";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("arraylength", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `arraylength'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ">";
      stringArray0[1] = ">";
      stringArray0[2] = ">";
      stringArray0[3] = "char";
      stringArray0[4] = ">";
      Utility.methodTypeToSignature(">", stringArray0);
      Utility.methodSignatureReturnType("(L>;L>;L>;CL>;)L>;");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(">");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-61);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)96, (-1962), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "dcmpg";
      stringArray0[1] = "dcmpg";
      stringArray0[2] = "dcmpg";
      stringArray0[3] = "dcmpg";
      stringArray0[4] = "dcmpg";
      stringArray0[5] = "}0<&3%qUjj`RY";
      stringArray0[6] = "\nAttribute(s) = ";
      stringArray0[7] = "dcmpg";
      stringArray0[8] = ":";
      String string0 = Utility.methodTypeToSignature("dcmpg", stringArray0);
      assertEquals("(Ldcmpg;Ldcmpg;Ldcmpg;Ldcmpg;Ldcmpg;L}0<&3%qUjj`RY;LAttribute(s);Ldcmpg;L:;)Ldcmpg;", string0);
      
      String string1 = Utility.fillup("\nAttribute(s) = ", 240, true, ']');
      assertEquals("\nAttribute(s) = ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", string1);
      
      String string2 = Utility.accessToString((-601), true);
      assertEquals("public private protected transient native abstract strictfp synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = "O^,:/f_/";
      try { 
        Utility.typeOfSignature("O^,:/f_/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O^,:/f_/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
