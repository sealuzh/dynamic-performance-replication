/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 23:19:51 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        RE2.match((String) null, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2("");
      RE2.match("", "");
      rE2_0.find("");
      rE2_0.toString();
      int[] intArray0 = rE2_0.findIndex("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      rE2_0.findUTF8Submatch(byteArray0);
      rE2_0.findAllSubmatch("", 2183);
      rE2_0.match("", (-681), (-681), 1504, intArray0, 0);
      rE2_0.findSubmatchIndex("");
      rE2_0.findAllSubmatchIndex("", 14);
      RE2.compilePOSIX("");
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        rE2_0.findAllUTF8Submatch((byte[]) null, 1504);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("d");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 3345);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      RE2 rE2_0 = new RE2("");
      rE2_0.toString();
      rE2_0.findUTF8Submatch(byteArray0);
      String string0 = RE2.quoteMeta("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      List<String[]> list0 = rE2_0.findAllSubmatch("", 1891);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("Lao");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("FAIL");
      boolean boolean0 = rE2_0.match("FAIL");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 212, false);
      int[] intArray0 = rE2_0.findIndex("");
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("com.google.re2j.RE2");
      List<String[]> list0 = rE2_0.findAllSubmatch("F3`+tEQP6wG<P:G'2:", (-2524));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 0);
      assertNull(list0);
      
      byteArray0[1] = (byte)0;
      List<int[]> list1 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 663);
      assertEquals(3, list1.size());
      
      RE2 rE2_1 = RE2.compileImpl("", 2950, false);
      rE2_0.find("cap ");
      rE2_0.get();
      List<byte[][]> list2 = rE2_1.findAllUTF8Submatch(byteArray0, (-1217));
      assertEquals(3, list2.size());
      assertNotNull(list2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      RE2 rE2_0 = RE2.compile("");
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)12);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = new RE2("FAIL");
      String string0 = rE2_0.replaceFirst("QmbIufjn2Az<3eT3", (String) null);
      assertEquals("QmbIufjn2Az<3eT3", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("c.~{t/Li$r\"xY<#yI");
      rE2_0.findSubmatch("");
      rE2_0.reset();
      rE2_0.findAllSubmatchIndex("", (-1647));
      boolean boolean0 = rE2_0.match("c.~{t/Li$r\"xY<#yI");
      assertFalse(boolean0);
      
      rE2_0.get();
      RE2.compile("");
      String string0 = rE2_0.replaceFirst("'@2", "can't happen");
      assertEquals("'@2", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("Lao");
      String string0 = rE2_0.replaceFirst("Lao", "Q3wid%");
      assertEquals("Q3wid%", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      String string0 = "";
      rE2_0.findSubmatchIndex("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)12;
      rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      String string1 = "";
      rE2_0.replaceFirst("Ej@#8PK", "");
      // Undeclared exception!
      try { 
        rE2_0.findAllSubmatchIndex((String) null, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2("");
      RE2.quoteMeta("");
      int int0 = (-5588);
      int int1 = 2823;
      rE2_0.get();
      int int2 = 17;
      RE2.compile("C: c");
      int[] intArray0 = new int[8];
      String string1 = "S6@1w,OW";
      rE2_0.replaceFirst("", "S6@1w,OW");
      intArray0[0] = (-5588);
      intArray0[1] = (-5588);
      intArray0[2] = 17;
      intArray0[3] = (-5588);
      intArray0[4] = 17;
      intArray0[5] = (-5588);
      // Undeclared exception!
      try { 
        rE2_0.match("S6@1w,OW", 0, 0, 0, intArray0, (-64));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "VERTICAL_BAR";
      RE2 rE2_0 = new RE2("VERTICAL_BAR");
      rE2_0.numberOfCapturingGroups();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-36);
      rE2_0.reset();
      rE2_0.findIndex("[;t+W8f*Vv}");
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-36);
      byte byte0 = (byte) (-44);
      // Undeclared exception!
      try { 
        rE2_0.findAll((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("com.google.re2j.RE2");
      rE2_0.findSubmatch("com.google.re2j.RE2");
      byte[] byteArray0 = new byte[16];
      byteArray0[5] = (byte)1;
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (byte)0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = new RE2("]p' }M3$VFR^p6");
      RE2.compile("RUNE1");
      RE2.compileImpl("", 2479, false);
      RE2 rE2_1 = RE2.compileImpl("RUNE1", 676, true);
      rE2_1.findAll("", 415);
      RE2.quoteMeta("]p' }M3$VFR^p6");
      rE2_0.findAllSubmatchIndex("]p' }M3$VFR^p6", 2753);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-81);
      rE2_0.findAllUTF8Index(byteArray0, 19);
      rE2_0.reset();
      String[] stringArray0 = rE2_0.findSubmatch("]p' }M3$VFR^p6");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl(". b'FSSLXXP", (-1968), false);
      int[] intArray0 = rE2_0.findIndex(". b'FSSLXXP");
      assertArrayEquals(new int[] {0, 11}, intArray0);
      assertNotNull(intArray0);
      
      rE2_0.prefix = ". b'FSSLXXP";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-28);
      rE2_0.find("");
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      rE2_0.findSubmatch(". b'FSSLXXP");
      byteArray0[7] = (byte)12;
      List<String> list0 = rE2_0.findAll(". b'FSSLXXP", (-1968));
      assertNotNull(list0);
      
      List<String[]> list1 = rE2_0.findAllSubmatch(". b'FSSLXXP", 0);
      assertNull(list1);
      
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, 5323);
      rE2_0.toString();
      List<int[]> list2 = rE2_0.findAllIndex("", (byte) (-53));
      assertNull(list2);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = new RE2("d");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 123);
      assertNull(list0);
      
      Machine machine0 = new Machine(rE2_0);
      rE2_0.put(machine0);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = 1249;
      intArray0[7] = (int) (byte)0;
      boolean boolean0 = rE2_0.match("d", 0, 0, (byte)0, intArray0, (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 1157);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2.match("ANY_CHAR_NOT_NL", "ANY_CHAR_NOT_NL");
      RE2 rE2_0 = RE2.compilePOSIX("ANY_CHAR_NOT_NL");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)15;
      rE2_0.findAllUTF8(byteArray0, (byte)7);
      RE2.match("", ".+*?()|[]{}^$");
      byteArray0[2] = (byte)0;
      rE2_0.get();
      byteArray0[3] = (byte) (-44);
      rE2_0.findSubmatch(".+*?()|[]{}^$");
      byteArray0[4] = (byte)0;
      rE2_0.prefixComplete = false;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)89;
      rE2_0.findAllUTF8Submatch(byteArray0, (byte)7);
      rE2_0.findAll(".+*?()|[]{}^$", 1539);
      rE2_0.findAllUTF8Index(byteArray0, (byte)0);
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      rE2_0.replaceAll("", "W= jW");
      RE2 rE2_1 = RE2.compileImpl("", 0, true);
      assertEquals("", rE2_1.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      int[] intArray0 = new int[2];
      intArray0[0] = 12;
      intArray0[1] = 3675;
      rE2_0.match("", 3675, 180, 12, intArray0, 3675);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      rE2_0.matchUTF8(byteArray0);
      rE2_0.findAllUTF8Index(byteArray0, 2728);
      try { 
        RE2.compile("?c)1L/3K[-NUWO?c=}%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2("");
      int int0 = 3039;
      rE2_0.findAllIndex("", 3039);
      Machine machine0 = rE2_0.get();
      rE2_0.put(machine0);
      rE2_0.reset();
      rE2_0.numberOfCapturingGroups();
      String string1 = null;
      // Undeclared exception!
      try { 
        RE2.compile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("com.google.re2j.RE2");
      String[] stringArray0 = rE2_0.findSubmatch("com.google.re2j.RE2");
      assertNotNull(stringArray0);
      
      List<int[]> list0 = rE2_0.findAllIndex("", 0);
      assertNull(list0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      String string0 = RE2.quoteMeta("com.google.re2j.RE2");
      assertEquals("com\\.google\\.re2j\\.RE2", string0);
      
      byteArray0[2] = (byte)42;
      rE2_0.prefixComplete = true;
      List<int[]> list1 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte)1);
      assertNull(list1);
      
      rE2_0.replaceFirst("com.google.re2j.RE2", "");
      String string1 = rE2_0.replaceFirst("com.google.re2j.RE2", "");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 17);
      assertEquals(4, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = new RE2("FAIL");
      RE2.compileImpl("FAIL", 462, false);
      rE2_0.findAllSubmatch("FAIL", (-106));
      rE2_0.match("FAIL", 873, 212, 873, (int[]) null, 889);
      RE2 rE2_1 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte) (-87);
      byte[] byteArray1 = rE2_1.findUTF8(byteArray0);
      rE2_0.findAllSubmatchIndex("FAIL", 889);
      RE2 rE2_2 = new RE2("");
      rE2_2.put((Machine) null);
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, 834);
      rE2_0.findAll("", (-4289));
      rE2_1.findUTF8Index(byteArray1);
      String[] stringArray0 = rE2_1.findSubmatch("0|");
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("Ln}e2I/qInI%R1K");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = 369;
      intArray0[3] = 65372;
      intArray0[4] = (int) (byte)0;
      rE2_0.match("Ln}e2I/qInI%R1K", 65372, 25, 369, intArray0, (-969));
      rE2_0.matchUTF8(byteArray0);
      rE2_0.findAllUTF8Index(byteArray0, (byte)7);
      RE2 rE2_1 = RE2.compile("i\"sL{]X7");
      assertNotSame(rE2_1, rE2_0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = RE2.quoteMeta("Uzr))$?j}");
      assertEquals("Uzr\\)\\)\\$\\?j\\}", string0);
      
      RE2 rE2_0 = new RE2("(?s:.)");
      String string1 = rE2_0.toString();
      assertNotNull(string1);
      
      String string2 = rE2_0.replaceAll("1d-K5vq}", "1d-K5vq}");
      assertEquals("1d-K5vq}1d-K5vq}1d-K5vq}1d-K5vq}1d-K5vq}1d-K5vq}1d-K5vq}1d-K5vq}", string2);
      
      int[] intArray0 = rE2_0.findSubmatchIndex("IrsCxP{7FhHbhK)Q*n4");
      assertArrayEquals(new int[] {0, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)103;
      byte byte0 = (byte)66;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)64;
      rE2_0.findUTF8Submatch(byteArray0);
      RE2 rE2_1 = RE2.compile("UTF-8");
      rE2_1.findIndex("/");
      rE2_0.reset();
      rE2_1.findAllUTF8Submatch(byteArray0, (-1054));
      rE2_1.findIndex("");
      rE2_0.replaceAll("n}S0Ht&y&0BKk[8", "NO_WORD_BOUNDARY");
      String string0 = null;
      try { 
        RE2.compilePOSIX("CqFj(ru]C7s:q}YgX.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `CqFj(ru]C7s:q}YgX.`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      RE2 rE2_1 = RE2.compilePOSIX("6");
      rE2_1.findIndex("\f");
      int[] intArray0 = new int[9];
      rE2_0.findSubmatchIndex("");
      // Undeclared exception!
      try { 
        rE2_0.match("", (-110), (-110), 0, intArray0, 2176);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = new RE2("5Z%V4d <Ix>1|");
      List<String[]> list0 = rE2_0.findAllSubmatch("5Z%V4d <Ix>1|", 1948);
      assertEquals(2, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = new RE2("3|");
      rE2_0.findSubmatch("com.google.re2j.CharGroup");
      String string0 = rE2_0.replaceAll("3|", "`^[becSCU6Vm\u0005{");
      assertEquals("`^[becSCU6Vm\u0005{|`^[becSCU6Vm\u0005{", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[0];
      RE2.compilePOSIX("");
      RE2 rE2_1 = RE2.compile("UTF-8");
      List<byte[][]> list0 = rE2_1.findAllUTF8Submatch(byteArray0, (-1348));
      assertNull(list0);
      
      rE2_1.findSubmatch("UTF-8");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)38;
      byteArray1[4] = (byte)38;
      byteArray1[5] = (byte)38;
      byteArray1[6] = (byte)38;
      rE2_1.findUTF8Index(byteArray1);
      boolean boolean0 = rE2_0.match("", (byte)0, (byte)0, (byte)38, (int[]) null, (byte)0);
      assertTrue(boolean0);
  }
}
