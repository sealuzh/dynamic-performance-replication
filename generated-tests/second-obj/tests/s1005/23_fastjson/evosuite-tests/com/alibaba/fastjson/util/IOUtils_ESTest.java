/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:27:06 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.replaceChars, 18, 18);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      char[] charArray0 = new char[4];
      charArray0[0] = '\u00A0';
      charArray0[1] = 'C';
      charArray0[2] = '\u00A0';
      charArray0[3] = 'C';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 2, 841);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 842
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, (-771), (-771));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1543
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars(4, 4, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOUtils.decodeBase64("");
      IOUtils.isValidJsonpQueryParam("");
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam(" CUw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      CharArrayReader charArrayReader0 = new CharArrayReader(iOUtils0.replaceChars);
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("q6?c@,s0\"m:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = IOUtils.isIdent('(');
      boolean boolean1 = IOUtils.firstIdentifier('(');
      assertTrue(boolean1 == boolean0);
      
      int int0 = IOUtils.stringSize((-784));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("");
      char[] charArray0 = new char[0];
      int int0 = IOUtils.decodeUTF8(byteArray0, (-15), (-15), charArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 42, 8, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("UTF-8");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      char[] charArray0 = new char[5];
      charArray0[1] = 'L';
      charArray0[4] = 'H';
      IOUtils.decodeUTF8(byteArray0, 2, 2, charArray0);
      IOUtils.isIdent('L');
      byte[] byteArray1 = IOUtils.specicalFlags_doubleQuotes;
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("4wzM");
      assertArrayEquals(new byte[] {(byte) (-29), (byte)12, (byte) (-52)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IOUtils.stringSize((-784));
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("5=PT*", 1, 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("5=[ ", (-2490), (-2490));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-2010L), 21, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars(0L, 0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOUtils.close(dataInputStream0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      IOUtils.firstIdentifier('E');
      IOUtils.getChars((int) 'E', (int) (byte)4, charArray0);
      IOUtils.getChars((byte) (-92), (int) (byte)4, charArray0);
      assertArrayEquals(new char[] {'E', '-', '9', '2', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[6];
      IOUtils.firstIdentifier('\u0000');
      IOUtils.getChars((int) '\u0000', (int) (byte)4, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '0', '\u0000', '\u0000'}, charArray0);
      
      IOUtils.getChars((byte)4, (int) (byte)4, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '4', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = IOUtils.isIdent('/');
      assertFalse(boolean0);
      
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.encodeUTF8(iOUtils0.replaceChars, (-1), (-1), iOUtils0.specicalFlags_doubleQuotes);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IOUtils.close((Closeable) null);
      IOUtils iOUtils0 = new IOUtils();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = IOUtils.stringSize((-738));
      assertEquals(1, int0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = IOUtils.decodeBase64("5=PT3*");
      assertArrayEquals(new byte[] {(byte) (-28), (byte)3, (byte) (-45)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = IOUtils.decodeBase64("", 2118, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = IOUtils.stringSize((long) 0);
      assertEquals(1, int0);
      
      boolean boolean0 = IOUtils.isIdent('/');
      boolean boolean1 = IOUtils.isValidJsonpQueryParam("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IOUtils.isValidJsonpQueryParam("vqX.Bk1]fb");
      IOUtils.firstIdentifier('+');
      String string0 = IOUtils.getStringProperty("vqX.Bk1]fb");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = IOUtils.decodeBase64("&;Wn");
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("Qpq");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      IOUtils.stringSize(10L);
      IOUtils iOUtils0 = new IOUtils();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      IOUtils.decodeUTF8(iOUtils0.specicalFlags_singleQuotes, 1, 2, iOUtils0.CA);
      IOUtils.getStringProperty("fastjson.compatibleWithFieldName");
      boolean boolean0 = IOUtils.isValidJsonpQueryParam((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[3] = '\u0000';
      byte[] byteArray0 = new byte[3];
      int int0 = IOUtils.encodeUTF8(charArray0, (byte)2, (byte)2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, int0);
      
      byte[] byteArray1 = IOUtils.decodeBase64(charArray0, (int) (byte)2, (int) '\u0000');
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      char[] charArray0 = new char[3];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        IOUtils.getChars((long) (-11), 2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IOUtils.isIdent('f');
      byte[] byteArray0 = IOUtils.decodeBase64("");
      IOUtils.firstIdentifier('f');
      IOUtils.stringSize(2113L);
      IOUtils.stringSize(4);
      char[] charArray0 = new char[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[1] = 'f';
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 1, 1, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IOUtils.getStringProperty("UTF-8");
      StringReader stringReader0 = new StringReader("UTF-8");
      IOUtils.readAll(stringReader0);
      IOUtils iOUtils0 = new IOUtils();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-77), (-77), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -78
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray0 = IOUtils.decodeBase64("UTF-8", 2, 2);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray0 = IOUtils.decodeBase64("UP}xhfAZCQ<", 2, 2);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IOUtils.decodeBase64(":");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      IOUtils.stringSize(2);
      Charset charset0 = IOUtils.UTF8;
      charset0.encode("fastjson.propetis");
      LineNumberReader lineNumberReader0 = null;
      try {
        lineNumberReader0 = new LineNumberReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.alibaba.fastjson.util.UTF8Decoder");
      IOUtils.loadPropertiesFromFile();
      IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder", 3, 27);
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = IOUtils.decodeBase64("5=PT*", 2, 2);
      assertArrayEquals(new byte[] {(byte)61}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      ByteBuffer byteBuffer0 = charset0.encode("com.alibaba.fastjson.util.UTF8Decoder");
      IOUtils.decodeBase64("com.alibaba.fastjson.JSONException");
      IOUtils.isIdent('{');
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      IOUtils.decode(uTF8Decoder0, byteBuffer0, charBuffer0);
      assertEquals(0, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.reset();
      Charset charset0 = IOUtils.UTF8;
      ByteBuffer byteBuffer0 = charset0.encode("utf8 decode error, ");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        IOUtils.decode(charsetDecoder0, byteBuffer1, charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CoderResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long long0 = 2147483647L;
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.getChars(2147483647L, 3968, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3967
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("com.alibaba.fastjson.uqil.UTF8Deioder");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[24];
      charArray0[1] = '';
      Charset charset0 = uTF8Decoder0.charset();
      ByteBuffer byteBuffer0 = charset0.encode("com.alibaba.fastjson.uqil.UTF8Deioder");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      uTF8Decoder0.decode(byteBuffer1);
      ByteBuffer byteBuffer2 = charset0.encode("com.alibaba.fastjson.uqil.UTF8Deioder");
      uTF8Decoder0.decode(byteBuffer2);
      charArray0[4] = '';
      charArray0[4] = '';
      charArray0[5] = 'q';
      IOUtils.encodeUTF8(charArray0, 1, 1, byteArray0);
      IOUtils.decodeUTF8(byteArray0, 1, 1083, charArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)5;
      // Undeclared exception!
      try { 
        IOUtils.getChars((-1), 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long long0 = 10000000000L;
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = '*';
      // Undeclared exception!
      try { 
        IOUtils.getChars(10000000000L, 76, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 75
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      IOUtils.loadPropertiesFromFile();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      int int1 = 8;
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 42, 8, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      int int0 = 65536;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars(65536, 65536, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65535
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      int int1 = IOUtils.stringSize((-4143L));
      assertEquals(1, int1);
      
      IOUtils iOUtils0 = new IOUtils();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.isValidJsonpQueryParam((String) null);
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 1, 2);
      assertArrayEquals(new byte[] {(byte) (-45)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IOUtils.stringSize((-1295));
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.decodeBase64(iOUtils0.CA, 1, 21);
      IOUtils.decodeBase64("T2Wx");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOUtils.decodeBase64("5=*");
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\u00D7';
      charArray0[1] = '\u00D7';
      charArray0[2] = '\u00D7';
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)63;
      byteArray0[1] = (byte)63;
      IOUtils.encodeUTF8(charArray0, 1, 1, byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.getStringProperty("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = IOUtils.firstIdentifier('\u0000');
      assertFalse(boolean0);
      
      IOUtils.getChars((int) '\u0000', (int) (byte)4, charArray0);
      int int0 = IOUtils.stringSize(1);
      assertEquals(1, int0);
      
      IOUtils.getChars((long) (byte)4, 1, charArray0);
      byte[] byteArray0 = IOUtils.decodeBase64("fastjson.compatibleWithJavaBean");
      IOUtils.stringSize(434);
      int int1 = IOUtils.decodeUTF8(byteArray0, (byte)4, 1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = IOUtils.decodeBase64("utf8 decode error, ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'w';
      int int2 = IOUtils.decodeUTF8(byteArray0, 1, 857, charArray0);
      assertArrayEquals(new char[] {'q', 'q', 'w'}, charArray0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)29;
      char[] charArray0 = new char[21];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[2] = '3';
      charArray0[3] = ')';
      charArray0[5] = '#';
      IOUtils.decodeUTF8(byteArray0, (byte)1, 54, charArray0);
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.loadPropertiesFromFile();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      char[] charArray0 = new char[3];
      charArray0[1] = '\u0000';
      charArray0[2] = '7';
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 1, 1588, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      IOUtils.loadPropertiesFromFile();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      char[] charArray0 = new char[6];
      IOUtils.decodeUTF8(byteArray0, 42, 1, charArray0);
      int int2 = 63;
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", (-1), 63);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64(",<^ `|kMH");
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.loadPropertiesFromFile();
      IOUtils.stringSize((-1595L));
      IOUtils.stringSize((-29));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOUtils.stringSize((long) (-29));
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      charArray0[6] = '=';
      charArray0[7] = '=';
      IOUtils.decodeUTF8(byteArray0, 1, 18, charArray0);
      IOUtils.decodeUTF8(byteArray0, 1, 7, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.getChars(1, 192, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 191
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "ABCDEFGHIJKLMNO]QRSTUVWXYZabcdefghijklmnopqstuvwxyz0123456789+/";
      byte[] byteArray0 = IOUtils.decodeBase64("ABCDEFGHIJKLMNO]QRSTUVWXYZabcdefghijklmnopqstuvwxyz0123456789+/");
      int int0 = 42;
      char[] charArray0 = new char[6];
      IOUtils.decodeUTF8(byteArray0, 42, 32, charArray0);
      int int1 = 64;
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 64, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }
}
