/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:34:12 GMT 2018
 */

package org.apache.bcel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.util.regex.Pattern;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.util.Class2HTML;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Class2HTML_ESTest extends Class2HTML_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = " but failed";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class2HTML.referenceType("q%;-");
      Class2HTML.toHTML("<A HREF=\"q%;-.html\" TARGET=_top>q%;-</A>");
      String[] stringArray0 = new String[0];
      Class2HTML.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class2HTML.referenceType("byte");
      Class2HTML.toHTML("<FONT COLOR=\"#00FF00\">byte</FONT>");
      ClassPath classPath0 = new ClassPath("<FONT COLOR=\"#00FF00\">byte</FONT>");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<FONT COLOR=\"#00FF00\">byte</FONT>";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\t\t<";
      stringArray0[1] = "-zip";
      stringArray0[2] = "J#p`:Ft_}?f";
      stringArray0[3] = "float";
      stringArray0[4] = "Illegal signature: ";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // J#p`:Ft_}?f (No such file or directory)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.getClassPath();
      SyntheticRepository.getInstance((ClassPath) null);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.copy();
      Class<Method> class1 = Method.class;
      classLoaderRepository0.loadClass(class1);
      javaClass1.dump("<A HREF=\"_cp.html\"\n MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\" FRAMEBORDER=\"1\" SCROLLING=\"AUTO\">\n<FRAME NAME=\"Attributes\" SRC=\".html\" TARGET=_top>_cp.html\"\n MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\" FRAMEBORDER=\"1\" SCROLLING=\"AUTO\">\n<FRAME NAME=\"AttriPutes\" SRC=\"</A>");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<A HREF=\"_cp.html\"\n MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\" FRAMEBORDER=\"1\" SCROLLING=\"AUTO\">\n<FRAME NAME=\"Attributes\" SRC=\".html\" TARGET=_top>_cp.html\"\n MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\" FRAMEBORDER=\"1\" SCROLLING=\"AUTO\">\n<FRAME NAME=\"AttriPutes\" SRC=\"</A>";
      stringArray0[1] = "<A HREF=\"_cp.html\"\n MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\" FRAMEBORDER=\"1\" SCROLLING=\"AUTO\">\n<FRAME NAME=\"Attributes\" SRC=\".html\" TARGET=_top>_cp.html\"\n MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\" FRAMEBORDER=\"1\" SCROLLING=\"AUTO\">\n<FRAME NAME=\"AttriPutes\" SRC=\"</A>";
      Class2HTML.main(stringArray0);
      String string0 = Class2HTML.referenceType("<A HREF=\"_cp.html\"\n MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\" FRAMEBORDER=\"1\" SCROLLING=\"AUTO\">\n<FRAME NAME=\"Attributes\" SRC=\".html\" TARGET=_top>_cp.html\"\n MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\" FRAMEBORDER=\"1\" SCROLLING=\"AUTO\">\n<FRAME NAME=\"AttriPutes\" SRC=\"</A>");
      assertEquals("<A HREF=\"<A HREF=\"_cp.html\"\n MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\" FRAMEBORDER=\"1\" SCROLLING=\"AUTO\">\n<FRAME NAME=\"Attributes\" SRC=\".html\" TARGET=_top>_cp.html\"\n MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\" FRAMEBORDER=\"1\" SCROLLING=\"AUTO\">\n<FRAME NAME=\"AttriPutes\" SRC=\"</A>.html\" TARGET=_top><A HREF=\"_cp.html\"\n MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\" FRAMEBORDER=\"1\" SCROLLING=\"AUTO\">\n<FRAME NAME=\"Attributes\" SRC=\".html\" TARGET=_top>_cp.html\"\n MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\" FRAMEBORDER=\"1\" SCROLLING=\"AUTO\">\n<FRAME NAME=\"AttriPutes\" SRC=\"<.A></A>", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      java.lang.ClassLoader.getSystemClassLoader();
      java.lang.ClassLoader.getSystemClassLoader();
      Class2HTML.referenceType("Q6~kGK]}xff");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pattern.quote("<A HREF=\"Q6~kGK]}xff.html\" TARGET=_top>Q6~kGK]}xff</A>");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "lCtL";
      stringArray0[1] = "-d";
      stringArray0[2] = "<A HREF=\"Q6~kGK]}xff.html\" TARGET=_top>Q6~kGK]}xff</A>";
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Pattern.quote("zip");
      Class2HTML.toHTML("zip");
      ClassPath classPath0 = new ClassPath("QzipE");
      ClassPath classPath1 = new ClassPath("zip");
      ClassPath classPath2 = new ClassPath(classPath1, "zip");
      java.lang.ClassLoader.getSystemClassLoader();
      java.lang.ClassLoader.getSystemClassLoader();
      Class2HTML.referenceType("Q6~kGK]}xjff");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class2HTML.referenceType("~~.,h^,");
      Class2HTML.toHTML("-d/");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "~~.,h^,";
      stringArray0[1] = "Q6~kGK]}xjff";
      stringArray0[2] = "-d/";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Pattern.quote("$&/MvH>c]s0wvVAFR");
      ClassPath classPath0 = new ClassPath("Q$&/MvH>c]s0wvVAFRE");
      ClassPath classPath1 = new ClassPath("Q$&/MvH>c]s0wvVAFRE");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<Object> class0 = Object.class;
      classPathRepository0.loadClass(class0);
      java.lang.ClassLoader.getSystemClassLoader();
      Pattern.quote("Q$&/MvH>c]s0wvVAFRE");
      SyntheticRepository.getInstance(classPath0);
      Class2HTML.referenceType("Q$&/MvH>c]s0wvVAFRE");
      Class2HTML.toHTML("/");
      Class2HTML.toHTML("$&/MvH>c]s0wvVAFR");
      Class2HTML.referenceType("$&/MvH>c]s0wvVAFR");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-d";
      stringArray0[1] = "/";
      stringArray0[2] = "H\"Z(M}P%D*>q";
      stringArray0[3] = "$&/MvH>c]s0wvVAFR";
      stringArray0[4] = "-d";
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      java.lang.ClassLoader.getSystemClassLoader();
      java.lang.ClassLoader.getSystemClassLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class2HTML.toHTML("_code.html\"\n MARGINWIDTH=0 MARGINHEIGHT=0 FRAMEBORDER=1 SCROLLING=\"AUTO\">\n<FRAME NAME=\"Methods\" SRC=\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class2HTML.toHTML("-d");
      Class2HTML.toHTML("sun.misc.JavaLangAccess");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-d";
      stringArray0[1] = "sun.misc.JavaLangAccess";
      Class2HTML.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      String string0 = "-zip";
      ClassPath classPath0 = new ClassPath("-zip");
      ClassPath classPath1 = new ClassPath(classPath0, "-zip");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class2HTML.referenceType("6p&,Z;KDCeLt8zX5RP");
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      Class2HTML.toHTML("<A HREF=\"6p&,Z;KDCeLt8zX5RP.html\" TARGET=_top>6p&,Z;KDCeLt8zX5RP</A>");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "-d";
      Class2HTML.toHTML("_code.html\"\n MARGINWIDTH=0 MARGINHEIGHT=0 FRAMEBORDER=1 SCROLLING=\"AUTO\">\n<FcAME NAME=\"Methods\" SRC=\"");
      ClassPathRepository classPathRepository1 = new ClassPathRepository(classPath0);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      JavaClass javaClass0 = classPathRepository1.loadClass(class0);
      javaClass0.setClassName("6p&,Z;KDCeLt8zX5RP");
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, "6p&,Z;KDCeLt8zX5RP");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6p&,Z;KDCeLt8zX5RP";
      stringArray0[1] = "_code.html\"\n MARGINWIDTH=0 MARGINHEIGHT=0 FRAMEBORDER=1 SCROLLING=\"AUTO\">\n<FcAME NAME=\"Methods\" SRC=\"";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
