/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 23:00:02 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0, class0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap0.put((String) null, hashMap1);
      doubleKeyMap0.remove((String) null, "");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Object, Object>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, String>(class0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      doubleKeyMap0.put(hashMap0, object0, "us.codecraft.webmag'c.utils.DoubleKeyMap");
      String string0 = doubleKeyMap0.get(hashMap0, (Object) class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0, class0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.put((String) null, "{Rsu;");
      hashMap0.put((String) null, hashMap1);
      doubleKeyMap0.remove((String) null, (String) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Integer>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, String, Integer>();
      Map<Object, Map<String, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Object, Object>, Object, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Object>, Object, String>((Map<HashMap<Object, Object>, Map<Object, String>>) null);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      doubleKeyMap1.put(hashMap0, (Object) map0, "QM:ws6qVlYZBuct?");
      String string0 = doubleKeyMap1.put(hashMap0, (Object) map0, (String) null);
      assertEquals("QM:ws6qVlYZBuct?", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(class0);
      Map<String, Map<HashMap<String, Object>, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, HashMap<String, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<String, HashMap<String, Object>, Object>(map0, class0);
      Map<HashMap<Object, Object>, Map<Object, Integer>> map1 = doubleKeyMap1.newMap();
      DoubleKeyMap<HashMap<Object, Object>, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<HashMap<Object, Object>, Object, Integer>(map1);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = doubleKeyMap2.remove(hashMap0, (Object) doubleKeyMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, String, String>();
      DoubleKeyMap<Object, HashMap<Object, String>, Map<Integer, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, String>, Map<Integer, Integer>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Map<Integer, Integer> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0, hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      Map<Object, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(map0);
      Object object0 = new Object();
      Map<Object, String> map1 = doubleKeyMap1.remove(object0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      DoubleKeyMap<Map<Object, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put((Map<Object, Object>) hashMap0, object0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>((Map<String, Map<Object, Object>>) null);
      Object object0 = doubleKeyMap0.put("-z:7MV;. mzw,HA'i", (Object) null, (Object) "mR%@|(");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>(class0);
      Integer integer0 = new Integer((-1));
      doubleKeyMap0.put((String) null, integer0, (String) null);
      Map<Integer, String> map0 = doubleKeyMap0.remove((String) null);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Object, Map<HashMap<Integer, Integer>, Object>> hashMap0 = new HashMap<Object, Map<HashMap<Integer, Integer>, Object>>();
      DoubleKeyMap<Object, HashMap<Integer, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Integer, Integer>, Object>(hashMap0);
      Map<String, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(map0, class0);
      HashMap<Object, Map<Object, Integer>> hashMap1 = new HashMap<Object, Map<Object, Integer>>();
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Integer>(hashMap1, class1);
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap2.put((Object) doubleKeyMap1, (Object) hashMap2, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0, class0);
      Object object0 = doubleKeyMap0.get((String) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(hashMap0, class0);
      HashMap<String, Map<Object, Object>> hashMap1 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(hashMap1, class0);
      Object object0 = doubleKeyMap1.get("", (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      DoubleKeyMap<Object, String, Map<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Object, String, Map<Object, String>>();
      Map<Object, String> map0 = doubleKeyMap1.get((Object) doubleKeyMap0, "us.codecraft.webmagic.utils.DoubleKeyMap");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Map<Object, HashMap<String, Object>>> hashMap0 = new HashMap<Integer, Map<Object, HashMap<String, Object>>>();
      DoubleKeyMap<Integer, Object, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, HashMap<String, Object>>(hashMap0);
      Map<Object, HashMap<String, Object>> map0 = doubleKeyMap0.get((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Object, Object, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<Integer, Object>>();
      DoubleKeyMap<Object, String, Map<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, String, Map<Object, Object>>();
      Map<String, Map<Object, Object>> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0, class0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.put("w>#Z+", (Object) null);
      hashMap0.put((String) null, hashMap1);
      doubleKeyMap0.remove((String) null, "");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }
}
