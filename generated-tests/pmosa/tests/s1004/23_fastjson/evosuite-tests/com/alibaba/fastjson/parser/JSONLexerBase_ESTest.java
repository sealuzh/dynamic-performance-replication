/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 00:53:41 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8aW`;TwFf]Xe", 0);
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = 'i';
      charArray0[2] = ',';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanDouble('i');
      jSONReaderScanner0.scanFloat('3');
      jSONReaderScanner0.next();
      jSONReaderScanner0.close();
      Feature feature0 = Feature.InternFieldNames;
      jSONReaderScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.ASMUtils", (-1434182755));
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanFloat(';');
      boolean boolean0 = jSONScanner0.isEnabled((-1434182755));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[0];
      Feature feature0 = Feature.SupportArrayToBean;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6H~\u0000_lq#", 58);
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.isEnabled(58);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanDouble('y');
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"5", 1688);
      jSONScanner0.scanDecimal('n');
      jSONScanner0.scanFloat('n');
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.scanDouble('P');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fa$~e");
      jSONScanner0.scanType("fa$~e");
      Feature feature0 = Feature.IgnoreAutoType;
      jSONScanner0.config(feature0, true);
      assertEquals(263133, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8aW`;TwFf]Xe", 0);
      jSONReaderScanner0.matchStat = (int) '>';
      jSONReaderScanner0.scanFloat('3');
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 1688;
      JSONScanner jSONScanner0 = new JSONScanner("\"15");
      jSONScanner0.scanDecimal('n');
      jSONScanner0.scanFloat('n');
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      jSONScanner0.close();
      jSONScanner0.scanInt('\\');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".");
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      charArray0[1] = 'K';
      jSONReaderScanner0.token = (-5370);
      charArray0[2] = '#';
      charArray0[3] = 'y';
      charArray0[4] = '$';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.close();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal state.V");
      jSONScanner0.nextToken(80);
      char[] charArray0 = new char[5];
      double double0 = jSONScanner0.scanFieldDouble(charArray0);
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/H-M>UZ_C\">ATbg?f!", (-1434182780));
      jSONScanner0.isEnabled((-1434182780));
      // Undeclared exception!
      try { 
        jSONScanner0.skipWhitespace();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("55~3*%c&)", 58);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[3];
      charArray0[1] = 'F';
      jSONScanner0.scanFieldBigInteger(charArray0);
      long long0 = jSONScanner0.longValue();
      assertEquals(18, jSONScanner0.token());
      assertEquals(38L, long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-1235));
      jSONScanner0.setToken((-1235));
      jSONScanner0.tokenName();
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = 'V';
      charArray0[4] = 'C';
      charArray0[5] = '^';
      jSONScanner0.token = 2135;
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanSymbol((SymbolTable) null);
      jSONScanner0.scanDate(' ');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.ASMUtils", (-1434182755));
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.isEnabled((-1434182755));
      assertEquals(1, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.np = 0;
      char char0 = 'G';
      jSONScanner0.scanDouble('G');
      jSONScanner0.scanNumber();
      jSONScanner0.bytesValue();
      jSONScanner0.bytesValue();
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.nextToken();
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.scanFieldDecimal(charArray0);
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      jSONScanner0.isEnabled(feature0);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.nextToken((-2375));
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8Dh8+", 150);
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.isEnabled(102);
      assertEquals('h', jSONScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6j#2ZdSI");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0);
      mockGregorianCalendar0.getCalendarType();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6j#2ZdSI");
      jSONScanner0.nextToken();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(102, 0, 0, 2, 0);
      mockGregorianCalendar0.getCalendarType();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7]D<_W@LY!=w");
      jSONScanner0.nextIdent();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      int int0 = jSONScanner0.scanType("java.time.ZoneRegion");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.scanBoolean('g');
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID('+');
      boolean boolean0 = jSONScanner0.isEnabled((-1434182755));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("BGTgg?N$cvoKR'}");
      jSONScanner0.scanDate('-');
      jSONScanner0.nextToken();
      char char0 = 'C';
      jSONScanner0.indexOf('C', (-1283));
      jSONScanner0.info();
      jSONScanner0.isBlankInput();
      jSONScanner0.scanUUID('-');
      char char1 = '6';
      char char2 = '.';
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('6', '-', 'f', '6', '>', '.');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("VI6Ze'3[PY-bA2u");
      jSONScanner0.isBlankInput();
      jSONScanner0.resetStringPosition();
      jSONScanner0.nextToken();
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.nextToken();
      jSONScanner0.scanUUID('Q');
      boolean boolean0 = jSONScanner0.isEnabled(71);
      assertTrue(jSONScanner0.isEOF());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      charArray0[1] = 'L';
      charArray0[2] = '.';
      charArray0[3] = 'h';
      charArray0[4] = '%';
      charArray0[5] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 61);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.ch = 'h';
      jSONReaderScanner0.isBlankInput();
      char[] charArray1 = jSONReaderScanner0.sub_chars(61, 0);
      jSONReaderScanner0.scanFieldBoolean(charArray1);
      jSONReaderScanner0.getCalendar();
      jSONReaderScanner0.info();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6H~\u0000_lq#", 58);
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaa.fastjon.utilASMUtils", 117);
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = '.';
      charArray0[2] = '~';
      charArray0[3] = '.';
      charArray0[4] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 853, 853);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanBoolean('{');
      jSONReaderScanner0.scanDouble('Q');
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("O5");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 117);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("oWH,T");
      jSONScanner0.scanType((String) null);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-1235));
      jSONScanner0.setToken((-1235));
      jSONScanner0.tokenName();
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = 'V';
      charArray0[4] = 'C';
      charArray0[5] = '^';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.bytesValue();
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.next();
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1235), jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-1235));
      jSONScanner0.setToken((-1235));
      jSONScanner0.tokenName();
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = '8';
      charArray0[2] = '8';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 499);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.matchField(charArray1);
      jSONReaderScanner0.scanFieldDecimal(charArray1);
      LineNumberReader lineNumberReader0 = null;
      try {
        lineNumberReader0 = new LineNumberReader((Reader) null, 75);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58, 58);
      jSONReaderScanner0.scanInt('*');
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 61);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.isBlankInput();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      jSONReaderScanner0.scanInt('o');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")");
      jSONReaderScanner0.isEnabled(1147);
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 103);
      jSONReaderScanner0.close();
      char[] charArray0 = new char[0];
      Class<DataInputStream> class0 = DataInputStream.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.DataInputStream
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Lr7,U1Yzw", 144);
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '$';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanInt('{');
      jSONReaderScanner0.getCurrent();
      jSONReaderScanner0.scanNumber();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = 'U';
      charArray0[2] = '&';
      charArray0[3] = '1';
      charArray0[4] = 'U';
      charArray0[5] = 'N';
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      jSONScanner0.nextToken();
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.scanFieldDecimal(charArray0);
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      jSONScanner0.isEnabled(feature0);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      jSONScanner0.intValue();
      Locale locale0 = Locale.CANADA_FRENCH;
      jSONScanner0.locale = locale0;
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I pL#)T8)S`Mz;Y_", 0);
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      charArray0[1] = '^';
      charArray0[2] = 'q';
      charArray0[3] = '}';
      charArray0[4] = '_';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.token = 91;
      jSONReaderScanner0.stringDefaultValue = "S;a";
      char[] charArray1 = new char[5];
      jSONReaderScanner0.matchField(charArray1);
      charArray1[0] = 'K';
      charArray1[1] = 'J';
      jSONReaderScanner0.ch = 'K';
      charArray1[2] = '5';
      charArray1[3] = '*';
      charArray1[4] = 'v';
      jSONReaderScanner0.scanFieldDecimal(charArray1);
      jSONReaderScanner0.scanFieldDate(charArray1);
      jSONReaderScanner0.sub_chars(91, 83);
      jSONReaderScanner0.nextToken();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFieldDouble(charArray1);
      jSONReaderScanner0.scanBoolean('*');
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("55~3*%c&)", 144);
      jSONReaderScanner0.scanBoolean('b');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = (-1434182755);
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.ASMUtils", (-1434182755));
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-1434182755));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - c, info : pos 0, json : com.alibaba.fastjson.util.ASMUtils
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = (-5770);
      JSONScanner jSONScanner0 = new JSONScanner("", (-5770));
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(1710);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("O5~3*%c&)");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("m=NO", (-1235));
      jSONScanner0.setToken((-1235));
      jSONScanner0.tokenName();
      char[] charArray0 = new char[9];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.nextIdent();
      Feature feature0 = Feature.SupportArrayToBean;
      jSONScanner0.config(feature0, false);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-677), (-677));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      char[] charArray1 = new char[4];
      charArray1[0] = '*';
      charArray1[1] = '*';
      charArray1[2] = '*';
      charArray1[3] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 61);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 61, (-1042));
      jSONReaderScanner1.scanFieldLong(charArray0);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner1.scanInt('*');
      char[] charArray2 = new char[6];
      charArray2[0] = 'o';
      charArray2[1] = 'o';
      charArray2[2] = 'o';
      charArray2[3] = '*';
      charArray2[4] = '*';
      charArray2[5] = 'o';
      jSONReaderScanner1.close();
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanFieldStringArray(charArray2, class0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanFieldBoolean(charArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = (-1434182755);
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.ASMUtils", (-1434182755));
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("qKY9se/}k`N.b");
      jSONScanner0.nextToken(989);
      jSONScanner0.getCalendar();
      jSONScanner0.stringDefaultValue();
      assertEquals('K', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.ASMUtils", (-1434182755));
      jSONScanner0.nextToken();
      jSONScanner0.scanISO8601DateIfMatch(true);
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner("bx8 yA~9p2kQH|(");
      jSONScanner0.scanDate('V');
      jSONScanner0.nextToken();
      jSONScanner0.indexOf('o', 66);
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner("F\"A`sJIpOv3W30iEK", (-1235));
      jSONScanner0.setToken((-1235));
      jSONScanner0.tokenName();
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.token();
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = 'Q';
      charArray0[2] = '$';
      charArray0[3] = '+';
      charArray0[4] = '.';
      charArray0[5] = 'j';
      charArray0[6] = 'x';
      charArray0[7] = '{';
      charArray0[8] = '{';
      int int0 = 78;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 78);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('.');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match . - 6, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "error parse false");
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4);
      Calendar calendar0 = MockCalendar.getInstance();
      jSONReaderScanner0.calendar = calendar0;
      jSONReaderScanner0.scanInt('y');
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      JSONScanner jSONScanner0 = new JSONScanner("error parse false");
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONScanner0.getLocale();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H=Sur(0", (-1235));
      jSONScanner0.scanIdent();
      jSONScanner0.setToken((-1235));
      jSONScanner0.tokenName();
      char[] charArray0 = new char[9];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.scanISO8601DateIfMatch(true);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H=Sur(0", (-1235));
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      jSONScanner0.setTimeZone(timeZone0);
      jSONScanner0.setToken((-1235));
      jSONScanner0.tokenName();
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 116, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`v$$hLG]/t;baE'fMF");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString('n');
      jSONScanner0.scanUUID('+');
      boolean boolean0 = jSONScanner0.isEnabled(590);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'v';
      charArray0[1] = 'E';
      charArray0[2] = '8';
      charArray0[3] = '=';
      charArray0[4] = 'M';
      charArray0[5] = 'f';
      charArray0[6] = '&';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 109, (-1015));
      jSONReaderScanner0.scanString('v');
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanInt('=');
      jSONReaderScanner0.getFeatures();
      JSONScanner jSONScanner0 = new JSONScanner("*e=2%tc]N[0$T-?J");
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H=Sur(0", (-1235));
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner1 = new JSONScanner("F\"A`sJIpOv3W30iEK", 102);
      jSONScanner0.scanNumber();
      jSONScanner0.setToken(72);
      jSONScanner0.tokenName();
      jSONScanner1.scanFieldFloatArray2(charArray0);
      jSONScanner1.scanISO8601DateIfMatch(false);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((Reader) null, (-410));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner("F\"A`sJIpOv3W30iEK", (-1235));
      jSONScanner0.setToken((-1235));
      jSONScanner0.tokenName();
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.token();
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Be7%2k!x", (-623));
      jSONScanner0.scanDecimal('A');
      jSONScanner0.scanFloat('4');
      assertEquals((-623), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H=Sur(0", (-1235));
      jSONScanner0.setToken((-1235));
      jSONScanner0.tokenName();
      jSONScanner0.scanDecimal('v');
      char[] charArray0 = new char[9];
      jSONScanner0.ch = 'I';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/H-M>UZ_C\">ATbg?f!", (-1434182755));
      jSONScanner0.ch = 'g';
      boolean boolean0 = jSONScanner0.scanBoolean('g');
      jSONScanner0.scanDecimal('(');
      boolean boolean1 = jSONScanner0.isEnabled((-1434182755));
      assertFalse(boolean1 == boolean0);
      assertEquals((-1434182755), jSONScanner0.getFeatures());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";7]D<_W@LY!=w");
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONScanner0.scanStringArray(hashSet0, '');
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1yfrpi|%B s`,___");
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1yfrpi|%B s`,___", (-1434182755));
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONReaderScanner0.scanStringArray(set0, '(');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 2;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("m", 2);
      char[] charArray0 = new char[1];
      char char0 = ':';
      charArray0[0] = ':';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      char[] charArray1 = new char[1];
      char char1 = '[';
      charArray1[0] = '[';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/H-M>UZ_C\">ATbg?f!", 45);
      boolean boolean0 = jSONScanner0.isEnabled(45);
      assertTrue(boolean0);
      
      char char0 = jSONScanner0.getCurrent();
      assertEquals(45, jSONScanner0.getFeatures());
      assertEquals('/', char0);
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".", (-1434182755));
      jSONScanner0.isEnabled((-1434182755));
      jSONScanner0.nextToken((-1434182755));
      jSONScanner0.matchStat();
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = 's';
      jSONScanner0.scanFieldDate(charArray0);
      charArray0[2] = 'S';
      Class<Feature> class0 = Feature.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals(25, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/H-M>UZ_C\">ATbg?f!", 78);
      JSONScanner jSONScanner1 = new JSONScanner("com.alibaba.fastjson.util.ASMUtils", 0);
      boolean boolean0 = jSONScanner1.isEnabled(78);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      jSONScanner0.setLocale(locale0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(78, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6+ ~M}Aw's");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : +pos 1, json : 6+ ~M}Aw's
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.time.LocalDateTime");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.LocalDateTime", 110);
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "scan false error");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]i-t{siZ=#)");
      jSONScanner0.nextIdent();
      jSONScanner0.scanSymbol((SymbolTable) null);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanSymbol((SymbolTable) null);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("O5");
      jSONScanner0.resetStringPosition();
      Locale locale0 = Locale.CANADA_FRENCH;
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("55~3*%c&)", (-1718569341));
      jSONScanner0.scanDate(']');
      jSONScanner0.nextIdent();
      jSONScanner0.isEnabled((-1718569341));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      int int0 = 61;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 61);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(61);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 61, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = (-1608);
      JSONScanner jSONScanner0 = new JSONScanner("Type: ", (-1608));
      SymbolTable symbolTable0 = new SymbolTable(1994);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'x');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("upl|A");
      SymbolTable symbolTable0 = new SymbolTable(31);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, ';');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")");
      Feature feature0 = Feature.SupportArrayToBean;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.isEnabled(1147);
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ), info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[0];
      Feature feature0 = Feature.SupportArrayToBean;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6H~\u0000_lq#", 58);
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.isEnabled(58);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 6, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~%,GK$D&'&Z(FZi0", 41);
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = '0';
      charArray0[2] = 'L';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 99, 41);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("55~3*%c&)");
      jSONScanner0.nextToken();
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.integerValue();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6j#2ZdSI");
      jSONScanner0.nextToken();
      Locale.forLanguageTag("6j#2ZdSI");
      jSONScanner0.integerValue();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")");
      jSONReaderScanner0.scanFloat('R');
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("egnFJ5$*d'=RyTx", (-1235));
      SymbolTable symbolTable0 = new SymbolTable(14);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.setToken(78);
      JSONScanner jSONScanner1 = new JSONScanner("null", 3189);
      jSONScanner1.tokenName();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner1.lexError("KN;@Ku0nhcz_O JKj$B", (Object[]) null);
      jSONScanner1.scanISO8601DateIfMatch(false);
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(11, 3189, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONLexerBase.isWhitespace('q');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rME]-<`Q");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(2302);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '=');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DisableCheckSpecialChar");
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      SymbolTable symbolTable0 = new SymbolTable(45);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, ' ');
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(45, 45, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" is not a primitive type");
      jSONScanner0.scanBoolean('!');
      jSONScanner0.skipWhitespace();
      assertEquals('i', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(");
      jSONScanner0.putChar('D');
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : (pos 0, json : (
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      jSONScanner0.nextToken(2629);
      long long0 = jSONScanner0.longValue();
      assertEquals(18, jSONScanner0.token());
      assertEquals(757770282L, long0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";7]D<_W@LY!=w");
      jSONScanner0.nextIdent();
      jSONScanner0.intValue();
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("\"5", 1688);
      char char0 = 'n';
      char[] charArray0 = new char[6];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'm';
      charArray0[5] = 'E';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanDecimal('n');
      SymbolTable symbolTable0 = new SymbolTable(40);
      // Undeclared exception!
      jSONScanner0.scanEnum(class0, symbolTable0, '<');
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("O5~3*%c&)");
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("O5~3*%c&)", (-1744));
      double double0 = jSONReaderScanner0.scanDouble('{');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/H-M>UZ_C\">ATbg?f!", (-1434182755));
      JSONScanner jSONScanner1 = new JSONScanner("uBtim=z<X3", (-1091));
      char[] charArray0 = new char[0];
      jSONScanner1.scanFieldBigInteger(charArray0);
      jSONScanner0.scanFloat(';');
      jSONScanner1.isEnabled((-1434182755));
      assertEquals((-1), jSONScanner1.matchStat);
      
      char[] charArray1 = new char[8];
      charArray1[0] = ';';
      charArray1[1] = ';';
      charArray1[2] = ';';
      charArray1[3] = ';';
      charArray1[4] = ';';
      charArray1[6] = ';';
      charArray1[7] = ';';
      jSONScanner0.scanFieldInt(charArray1);
      assertEquals((-1434182755), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("qKY9se/}k`N.b");
      jSONScanner0.nextToken(59);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(85, 85, 0);
      mockGregorianCalendar0.getCalendarType();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[;j/}*}u}r+#gM?xIm");
      jSONScanner0.nextToken();
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4347);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanIdent();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("O5~3*%c&)");
      jSONScanner0.scanIdent();
      jSONScanner0.intValue();
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fa$~e");
      jSONScanner0.scanBoolean('!');
      jSONScanner0.pos();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fbwW{!yHz$L");
      assertEquals(0, jSONScanner0.matchStat);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONScanner0.scanBoolean('R');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.scanType("Set");
      jSONScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-2), 45);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";7]D<_W@LY!=w");
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '`';
      charArray0[2] = '>';
      charArray0[3] = '`';
      charArray0[4] = '^';
      charArray0[5] = '_';
      charArray0[6] = '5';
      charArray0[7] = 'E';
      charArray0[8] = '4';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanType("_");
      jSONScanner0.nextToken((-2));
      jSONScanner0.scanDecimal('s');
      assertEquals(24, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";7]D<_W@LY!=w");
      jSONScanner0.nextIdent();
      jSONScanner0.scanDecimal('\u0083');
      assertEquals(24, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SupportNonPublicField");
      jSONScanner0.nextToken();
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONLexerBase.isWhitespace('>');
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1384, 1384);
      jSONReaderScanner0.sub_chars(1384, 1384);
      boolean boolean0 = jSONReaderScanner0.isEnabled(84, 1384);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(1384, jSONReaderScanner0.getFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 884, (-1803));
      jSONReaderScanner0.scanLong('u');
      int int0 = 847;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(847, (-2326));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2326
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1_:=`87+YBi@\"Tjo");
      jSONReaderScanner0.scanLong('$');
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONLexerBase.isWhitespace('q');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Y})F[eA^46ffx{T");
      SymbolTable symbolTable0 = new SymbolTable('q');
      jSONReaderScanner0.scanLong('g');
      Class<DataInputStream> class0 = DataInputStream.class;
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('J');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58, 58);
      jSONReaderScanner0.scanInt('*');
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6+ ~M}Aw's");
      JSONScanner jSONScanner0 = new JSONScanner("6+ ~M}Aw's");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      jSONScanner0.scanType("net.sf.json.JSONNull");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanBoolean('k');
      jSONScanner0.scanFloat('R');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[4] = 'g';
      JSONScanner jSONScanner0 = new JSONScanner("\"5");
      // Undeclared exception!
      try { 
        jSONScanner0.scanUUID('g');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}|;,&^JZ&\"cFz5lDD");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanDecimal('<');
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("bg");
      jSONScanner0.nextToken(48);
      jSONScanner0.scanSymbol((SymbolTable) null);
      // Undeclared exception!
      try { 
        jSONScanner0.subString(117, 117);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"5");
      StringReader stringReader0 = new StringReader("l");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 0);
      char[] charArray0 = new char[5];
      charArray0[1] = 'Q';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString('O');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4827, 4827);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.nextToken(4827);
      jSONReaderScanner0.nextIdent();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanFieldString(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(83);
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'C');
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H=Sur(0", (-1235));
      jSONScanner0.setToken((-1235));
      jSONScanner0.tokenName();
      StringReader stringReader0 = new StringReader("H=Sur(0");
      JSONScanner jSONScanner1 = new JSONScanner("$OR)&y8].gS].;)y3?");
      jSONScanner1.scanDouble('-');
      char char0 = '5';
      jSONScanner1.scanUUID('5');
      jSONScanner1.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner1.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined", 127);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.nextToken(127);
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = ')';
      charArray0[2] = '8';
      charArray0[3] = 'X';
      charArray0[4] = ':';
      charArray0[5] = 'U';
      charArray0[6] = '>';
      JSONLexerBase.readString(charArray0, 3);
      jSONScanner0.stringVal();
      assertEquals(23, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'v';
      charArray0[1] = 'E';
      charArray0[2] = '8';
      charArray0[3] = '=';
      charArray0[4] = 'M';
      charArray0[5] = 'f';
      JSONScanner jSONScanner0 = new JSONScanner("t)@gV'jy`YeY5+7");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("V}XiTj(i8%jq%w");
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      int int0 = jSONScanner0.scanType("net.sf.json.JSONNull");
      assertEquals((-2), int0);
      
      boolean boolean0 = jSONScanner0.scanBoolean('k');
      assertFalse(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("net.sf.json.JSONNull", (-1));
      jSONScanner0.scanDecimal('k');
      jSONScanner0.getLocale();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fDK27N*\u0002?zE.7#,J", 3554);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("net.sf.json.JSONNull");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      PushbackReader pushbackReader0 = new PushbackReader(lineNumberReader0, 76);
      BufferedReader bufferedReader0 = new BufferedReader(lineNumberReader0, 76);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONReaderScanner0.scanStringArray(set0, '(');
      jSONReaderScanner0.scanIdent();
      assertEquals('.', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"5");
      char[] charArray0 = new char[5];
      jSONScanner0.scanFieldDecimal(charArray0);
      charArray0[0] = 'U';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 119, (-2683));
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.nextToken(13);
      jSONReaderScanner0.nextIdent();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanFieldString(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-296));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6+ ~M}Aw's");
      jSONScanner0.nextIdent();
      jSONScanner0.scanBoolean('J');
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58);
      jSONReaderScanner0.scanFieldString(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("(");
      jSONScanner0.nextToken((-509));
      jSONReaderScanner0.indexOf('Y', 22);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" d,3Rq7Crl/U'/oRt!`", 39);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      SymbolTable symbolTable0 = new SymbolTable(39);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '}');
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 4827;
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = 'E';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000");
      jSONReaderScanner0.scanLong('7');
      jSONReaderScanner0.setToken(4827);
      JSONScanner jSONScanner0 = new JSONScanner("\u0000");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("^K:9s^/}k`N.b");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.nextToken(59);
      jSONScanner0.scanFieldString(charArray0);
      boolean boolean0 = jSONScanner0.isEnabled((-2776), 0);
      assertEquals(1, jSONScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 8064;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xiOy/~xsAiTAAa", 8064);
      jSONReaderScanner0.isBlankInput();
      SymbolTable symbolTable0 = null;
      jSONReaderScanner0.features = 81;
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'a');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. i
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9, 9);
      char[] charArray1 = new char[3];
      charArray1[0] = '\"';
      charArray1[1] = '\"';
      charArray1[2] = 'n';
      jSONReaderScanner0.scanFieldDate(charArray1);
      jSONReaderScanner0.nextToken(9);
      jSONReaderScanner0.nextIdent();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jSONReaderScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 70, 3507);
      jSONReaderScanner1.scanFieldString(charArray1);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1539));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = (-1193);
      String string0 = "toString";
      JSONScanner jSONScanner0 = new JSONScanner("toString", (-1193));
      jSONScanner0.setToken((-1193));
      jSONScanner0.tokenName();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-8p-$\u0005Pg5_;r-&~", 499);
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = '8';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanInt('3');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.isEnabled((-1635530114));
      LineNumberReader lineNumberReader0 = null;
      try {
        lineNumberReader0 = new LineNumberReader((Reader) null, 54);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.isBlankInput();
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '5';
      charArray0[4] = 'X';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46, 0);
      jSONReaderScanner0.scanInt('z');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 4
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.isBlankInput();
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '+';
      charArray0[3] = '5';
      charArray0[4] = 'X';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46, 0);
      jSONReaderScanner0.scanInt('z');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 4
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{h!i:7*1hq(DilF7D(]");
      jSONScanner0.nextToken();
      jSONScanner0.intValue();
      int int0 = jSONScanner0.scanType((String) null);
      assertEquals(12, jSONScanner0.token());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":NH<QR|$?K9pDQI|");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")");
      jSONReaderScanner0.ch = 'b';
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanDate('9');
      jSONReaderScanner0.close();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6+ ~M}Aw's");
      SymbolTable symbolTable0 = new SymbolTable(41);
      jSONReaderScanner0.scanLong('$');
      char[] charArray0 = new char[0];
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = ']';
      Locale locale0 = Locale.CANADA_FRENCH;
      char[] charArray1 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~H^(]^9a5G8L]U*uqA", 694);
      jSONReaderScanner0.scanDate(':');
      int int0 = jSONReaderScanner0.token();
      assertEquals(694, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6+ ~M}Aw's");
      jSONScanner0.putChar('Q');
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken(27);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("qKY9se/}k`N.b");
      jSONScanner0.next();
      jSONScanner0.nextToken(59);
      jSONScanner0.scanSymbol((SymbolTable) null);
      jSONScanner0.longValue();
      jSONScanner0.scanDouble('3');
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6+ ~M}Aw's");
      SymbolTable symbolTable0 = new SymbolTable(41);
      jSONReaderScanner0.scanLong('$');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("vEH");
      jSONReaderScanner1.scanDouble('J');
      jSONReaderScanner0.next();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner1.scanFieldBigInteger(charArray0);
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("j&va.time.LocalDateTime");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONScanner0.scanDecimal('3');
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 211);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("y_##Qg!J5kC%5,JP[ ", 3073);
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.isEnabled(3073);
      char[] charArray0 = new char[9];
      charArray0[0] = 'a';
      charArray0[1] = 'G';
      charArray0[2] = 'v';
      charArray0[3] = '/';
      charArray0[5] = 'I';
      charArray0[6] = ':';
      charArray0[7] = 'f';
      charArray0[8] = 'I';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 58);
      jSONReaderScanner1.longValue();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 3073);
      jSONReaderScanner2.scanFieldFloat(charArray0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner1.scanDouble('v');
      jSONReaderScanner0.close();
      assertEquals(1025, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner1.next();
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x0ynu");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = '8';
      charArray0[2] = '#';
      charArray0[3] = ')';
      charArray0[4] = '8';
      charArray0[5] = '8';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2034, (-2659));
      jSONReaderScanner0.close();
      JSONScanner jSONScanner0 = new JSONScanner("ID`7");
      JSONScanner jSONScanner1 = new JSONScanner("1.2.46", 8192);
      jSONScanner1.nextIdent();
      jSONScanner1.stringDefaultValue();
      assertEquals('.', jSONScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = '8';
      charArray0[2] = '#';
      charArray0[4] = '8';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2034, '#');
      JSONScanner jSONScanner0 = new JSONScanner("ID`7");
      JSONScanner jSONScanner1 = new JSONScanner("1.2.46", 8192);
      jSONScanner1.nextIdent();
      assertEquals('.', jSONScanner1.getCurrent());
      
      jSONReaderScanner0.isBlankInput();
      assertEquals(35, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6+ ~M}Aw's");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6+ ~M}Aw's", 1557);
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      jSONReaderScanner0.matchField(charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('v');
      int int0 = jSONReaderScanner0.token();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6+ ~M}Aw's");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("6+ ~M}Aw's", 113);
      jSONScanner0.scanDecimal('3');
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 111);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~H^(]^9a5G8L]U*uqA");
      JSONScanner jSONScanner1 = new JSONScanner("TODO");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("H", 0);
      Feature feature0 = Feature.AutoCloseSource;
      jSONReaderScanner0.config(feature0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanDouble('G');
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      char[] charArray0 = new char[0];
      Feature feature0 = Feature.SupportArrayToBean;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6H~\u0000_lq#", 58);
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.isEnabled(58);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("6H~\u0000_lq#");
      jSONReaderScanner1.longValue();
      jSONReaderScanner1.matchField(charArray0);
      jSONReaderScanner0.scanDate('5');
      int int0 = jSONReaderScanner1.token();
      assertEquals('H', jSONReaderScanner1.getCurrent());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.LocalDateTime");
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 853, 0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      jSONScanner0.scanEnum(class0, (SymbolTable) null, 'k');
      jSONScanner0.scanSymbol((SymbolTable) null);
      jSONScanner0.isRef();
      jSONScanner0.stringDefaultValue();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6j#2ZdSI");
      jSONScanner0.nextToken();
      jSONScanner0.intValue();
      jSONScanner0.close();
      jSONScanner0.floatValue();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.isBlankInput();
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '+';
      charArray0[2] = '4';
      charArray0[3] = '5';
      charArray0[4] = 'X';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46, 0);
      jSONReaderScanner0.scanInt('z');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 4
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6j2ZdSI");
      jSONScanner0.next();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6j2ZdSI");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("undefined", 26);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("undefined", 0);
      jSONReaderScanner0.scanDouble('j');
      jSONReaderScanner0.next();
      assertEquals(3, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner2.scanFieldBigInteger(charArray0);
      assertEquals(0, jSONReaderScanner2.getFeatures());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("qKY9se/}k`N.b");
      jSONScanner0.pos = 22;
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextToken(59);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(59, 0, 23, 0, (-2322), 99);
      char[] charArray0 = new char[2];
      jSONScanner0.hasSpecial = true;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$u,L*3q0@H( ivi");
      charArray0[1] = 'H';
      jSONScanner0.scanSymbol((SymbolTable) null);
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, pos 6, json : qKY9se/}k`N.b
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("oWH,T");
      jSONScanner0.scanType((String) null);
      jSONScanner0.scanDecimal('8');
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      SymbolTable symbolTable0 = new SymbolTable(1809);
      jSONScanner0.scanEnum(class0, symbolTable0, '8');
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"oWH\", pos 3, json : oWH,T
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = ']';
      charArray0[2] = '^';
      char char0 = 'c';
      charArray0[3] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2109, 26);
      int int0 = (-724);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = ']';
      charArray0[2] = '^';
      charArray0[3] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2109, 26);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("O5");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1_:=`87+YBi@\"Tjo");
      jSONReaderScanner0.scanLong('$');
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, Integer.MAX_VALUE, 3112);
      jSONReaderScanner0.nextToken(15);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)120;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONReaderScanner0.isEnabled((-1331));
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanFieldFloat(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 512, 512);
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      jSONReaderScanner1.scanDouble('y');
      jSONReaderScanner0.close();
      assertEquals(20, jSONReaderScanner0.token());
      
      jSONReaderScanner1.next();
      assertEquals(512, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char[] charArray0 = new char[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, Integer.MAX_VALUE, 3112);
      jSONScanner0.scanInt('j');
      jSONReaderScanner0.nextToken(15);
      assertEquals(20, jSONReaderScanner0.token());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)120;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      char[] charArray1 = new char[5];
      charArray1[0] = 'D';
      charArray1[1] = 'c';
      charArray1[2] = 'J';
      charArray1[3] = '$';
      charArray1[4] = 'Y';
      jSONScanner0.scanFieldDecimal(charArray1);
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WriteMapNullValue");
      Class<DataInputStream> class0 = DataInputStream.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONScanner0.scanDecimal('e');
      jSONScanner0.scanEnum(class0, (SymbolTable) null, 'e');
      jSONScanner0.nextToken(5);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONScanner0.scanSymbol((SymbolTable) null);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.LocalDateTime");
      char[] charArray0 = new char[2];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-121);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 571, (byte) (-121));
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, uTF8Decoder0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(inputStreamReader0, (byte) (-79));
      jSONReaderScanner0.nextToken(17);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONReaderScanner0.isEnabled((int) (byte)120);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanDouble('y');
      jSONReaderScanner0.close();
      jSONReaderScanner0.next();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6j2ZdSI");
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 'k';
      charArray0[2] = 'T';
      charArray0[3] = 'k';
      charArray0[4] = 'a';
      charArray0[5] = '>';
      charArray0[6] = '0';
      charArray0[7] = '}';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 113);
      jSONReaderScanner0.scanBoolean('a');
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanDouble('k');
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TODO");
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(120);
      jSONScanner0.stringDefaultValue();
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1_:=`87+YBi@\"Tjo");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONScanner jSONScanner0 = new JSONScanner("NotWriteRootClassName", 0);
      jSONScanner0.nextToken(0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      boolean boolean0 = jSONScanner0.isEnabled(3596, (-890));
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("qKY9se/}k`N.b");
      JSONScanner jSONScanner1 = new JSONScanner("fieldName", 361);
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = '5';
      charArray0[4] = 'X';
      charArray0[5] = 'X';
      charArray0[6] = '5';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 41, 0);
      jSONReaderScanner0.scanInt('X');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. X
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      char[] charArray0 = new char[0];
      Feature feature0 = Feature.SupportArrayToBean;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6H~\u0000_lq#", 58);
      jSONReaderScanner0.scanString('7');
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-121);
      jSONReaderScanner0.nextToken((int) (byte) (-69));
      byteArray0[3] = (byte)78;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte) (-128);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONReaderScanner0.isEnabled(58);
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6H~\u0000_lq#", 58);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("6H~\u0000_lq#");
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner1.scanIdent();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6j2ZdSI");
      jSONScanner0.nextToken();
      jSONScanner0.intValue();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("kuw");
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = '#';
      charArray0[2] = 'z';
      charArray0[3] = 'M';
      charArray0[4] = 'b';
      charArray0[5] = '(';
      jSONReaderScanner0.matchField(charArray0);
      jSONScanner0.nextToken(6);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = '\'';
      charArray0[0] = ']';
      charArray0[2] = '^';
      JSONScanner jSONScanner0 = new JSONScanner("TODO");
      int int0 = 8;
      jSONScanner0.nextToken(8);
      char[] charArray1 = new char[1];
      charArray1[0] = '\'';
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray1, (-520), (-1000));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6+ ~M}Aw's");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6+ ~M}Aw's", (-2021));
      char char0 = '9';
      jSONReaderScanner0.scanDouble('9');
      jSONReaderScanner0.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";C=zQ^R");
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("encodeUTF8 error");
      jSONReaderScanner0.sub_chars(17, 40);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      jSONReaderScanner1.scanDouble('Z');
      jSONReaderScanner1.scanDate('E');
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      jSONReaderScanner1.stringVal();
  }
}
