/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:26:33 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.nio.cs.US_ASCII;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.readByteString();
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals((-1L), long0);
      
      long long1 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)102;
      int int0 = buffer1.read(byteArray0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-1526L));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      buffer1.readFully(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("", 696, 696);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 696 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      ByteString byteString0 = buffer0.md5();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      long long0 = buffer0.indexOf((byte)0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), long0);
      
      Buffer buffer1 = buffer0.writeInt(1198);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      ByteString byteString0 = buffer0.snapshot();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      String string0 = buffer0.readUtf8();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Inflater inflater0 = new Inflater();
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertNotNull(inflater0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      int int0 = 3105;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("a1@0(g(Tl'5", 3105, (-515));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -515 < 3105
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((-429L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-429
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeUtf8("SHA-256", 0, 0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertNotNull(buffer1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1089);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Buffer buffer2 = buffer1.writeUtf8(")x5P|a.5'VSx-8h##");
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(17L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(17L, buffer2.size());
      assertNotNull(buffer2);
      
      buffer1.clear();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      buffer0.hashCode();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Buffer buffer1 = buffer0.writeShortLe((-2147483386));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertNotNull(buffer1);
      
      buffer0.skip(1L);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      long long0 = buffer1.indexOf((byte) (-107), 1L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflaterSource0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(inflaterSource0, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertNotNull(hashingSource0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertNotNull(realBufferedSource0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      List<Integer> list0 = realBufferedSource0.buffer.segmentSizes();
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer2 = realBufferedSource0.buffer.writeDecimalLong(0L);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(1L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      String string0 = buffer0.readUtf8Line();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNull(string0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      
      int int0 = buffer1.readUtf8CodePoint();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(48, int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        buffer0.readUtf8LineStrict(4L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertEquals((-1L), long0);
      
      String string0 = buffer0.readUtf8();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(string0);
      assertEquals("", string0);
      
      OutputStream outputStream0 = buffer0.outputStream();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertNotNull(inflater0);
      
      InputStream inputStream0 = buffer0.inputStream();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(inputStream0);
      
      try { 
        buffer0.skip(2938L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      long long0 = 6L;
      try { 
        buffer0.require(6L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration0).hasMoreElements();
      doReturn(pipedInputStream0).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readFrom((InputStream) sequenceInputStream0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeUtf8("SHA-256", 0, 0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1089);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0, 8L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeIntLe(99);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertNotNull(buffer1);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor1);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      
      int int0 = buffer_UnsafeCursor1.next();
      assertSame(buffer0, buffer1);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(4, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals(4, buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertEquals(4, int0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(796);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      Buffer buffer2 = buffer_UnsafeCursor1.buffer.writeTo((OutputStream) byteArrayOutputStream0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("c\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(buffer2);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(4, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals(4, buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.writeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("", (-1001), (-1842));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -1001
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      assertNotNull(buffer1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString0, (-1438L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      long long0 = buffer0.indexOfElement(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertEquals((-1L), long0);
      
      Buffer buffer1 = buffer0.writeLong(1000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertNotNull(buffer1);
      
      Segment segment0 = buffer1.head;
      assertNotNull(segment0);
      
      int int0 = buffer1.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0, int0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertSame(buffer0, buffer1);
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      long long1 = buffer_UnsafeCursor0.buffer.indexOf(byteString0);
      assertSame(buffer0, buffer1);
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertTrue(long1 == long0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1L), long1);
      
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      long long0 = buffer0.indexOf(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertEquals((-1L), long0);
      
      byte[] byteArray0 = buffer0.readByteArray();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      InputStream inputStream0 = buffer0.inputStream();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(inputStream0);
      
      Buffer buffer1 = buffer0.write(byteArray0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean2 = buffer0.equals(byteArray0);
      assertSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        buffer1.writeString("size < 2: ", 65535, 65535, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 65535 > 10
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      Timeout timeout0 = hashingSource0.timeout();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(timeout0);
      
      long long0 = buffer0.size();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, long0);
      
      HashingSource hashingSource1 = HashingSource.sha1(buffer0);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotSame(hashingSource0, hashingSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      
      long long1 = buffer0.indexOfElement(byteString0, (long) (byte)90);
      assertNotSame(hashingSource0, hashingSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
      
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertNotNull(inflaterSource0);
      
      ByteString byteString0 = buffer0.md5();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      Buffer buffer1 = buffer0.writeInt(1200);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      byte byte0 = buffer1.readByte();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((byte)0, byte0);
      
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeLongLe((-1026L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer1, 100000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      String string0 = buffer0.readUtf8();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(string0);
      assertEquals("", string0);
      
      OutputStream outputStream0 = buffer0.outputStream();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(outputStream0);
      
      Pipe pipe0 = new Pipe(42L);
      assertNotNull(pipe0);
      
      Buffer buffer1 = pipe0.buffer;
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      try { 
        buffer0.readFully(buffer1, 42L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertNotNull(inflater0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer1 = buffer0.writeInt(1198);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer1.writeDecimalLong((-817L));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(8L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      
      ByteString byteString0 = buffer0.readByteString();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8, byteString0.size());
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        buffer2.readUtf8(9223372036854L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=9223372036854
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      buffer0.require((-2319L));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        buffer0.readByteString((-771L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-771
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      ByteString byteString0 = buffer0.md5();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 101);
      assertNotNull(pushbackInputStream0);
      
      byte[] byteArray0 = buffer0.readByteArray();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSink0);
      
      ByteString byteString1 = hashingSink0.hash();
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      
      ByteString byteString2 = buffer0.hmacSha1(byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString1.size());
      assertEquals(20, byteString2.size());
      assertNotNull(byteString2);
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      
      ByteString byteString3 = buffer0.md5();
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString3.size());
      assertNotNull(byteString3);
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      
      Buffer buffer1 = buffer0.writeInt(2429);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)13, (long) 1198, (-560L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=4 fromIndex=1198 toIndex=-560
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeLong(1573L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer0.writeDecimalLong(1573L);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertEquals(12L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteString byteString0 = buffer0.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      
      boolean boolean1 = buffer_UnsafeCursor0.buffer.rangeEquals((-1L), byteString1);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(20, byteString1.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(1573L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=1573 > size=12
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflaterSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      List<Integer> list0 = realBufferedSource0.buffer.segmentSizes();
      assertNotSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertTrue(buffer0.equals((Object)buffer1));
      
      Buffer buffer2 = buffer1.writeDecimalLong(8L);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(1L, buffer2.size());
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      
      String string0 = buffer0.readUtf8Line();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNull(string0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(1, byteString0.size());
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      int int1 = buffer_UnsafeCursor0.next();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(int1 == int0);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), int1);
      
      boolean boolean0 = buffer_UnsafeCursor0.buffer.rangeEquals((long) (byte)0, byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      long long0 = buffer0.readAll((Sink) null);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, long0);
      
      long long1 = buffer0.indexOfElement(byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
      
      String string0 = buffer0.toString();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(string0);
      assertEquals("[size=0]", string0);
      
      byteString0.utf8 = "dsa N%#Y_49T";
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      buffer_UnsafeCursor0.offset = (-1L);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      int int0 = buffer_UnsafeCursor0.seek((-1L));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "endIndex < beginIndex");
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-9223372036854L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(14L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(14L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer0.readByteString();
      assertSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(14, byteString0.size());
      assertNotNull(byteString0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("endIndex < beginIndex");
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) byteString0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "cT8>}{L-}nm8Z", objectArray0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(printStream0);
      
      // Undeclared exception!
      try { 
        buffer1.copyTo((OutputStream) printStream0, 100000L, (-4116L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=100000 byteCount=-4116
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Pipe pipe0 = new Pipe(15L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-4);
      Buffer buffer1 = buffer0.write(byteArray0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)8, (byte)91, (byte) (-4)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString byteString1 = buffer_UnsafeCursor0.buffer.hmacSha1(byteString0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean0 = buffer_UnsafeCursor0.buffer.rangeEquals((long) (byte)0, byteString0);
      assertNotSame(byteString0, byteString1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, byteString0.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(100000000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=100000000000000 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      buffer0.clear();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      byte[] byteArray0 = new byte[8];
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte)49, (long) (-1), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=5 fromIndex=-1 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflater0);
      
      Buffer buffer1 = buffer0.writeLong(31L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      SegmentPool.next = segment0;
      String string0 = buffer0.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001F", string0);
      
      try { 
        buffer1.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      long long0 = 224L;
      Buffer buffer1 = buffer0.writeDecimalLong(224L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString1, byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertEquals(32, byteString1.size());
      assertNotNull(byteString1);
      assertTrue(byteString1.equals((Object)byteString0));
      
      // Undeclared exception!
      try { 
        buffer0.writeAll(buffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflater0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(56290);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      // Undeclared exception!
      try { 
        buffer1.write((byte[]) null, 2153, (-150));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeLong(1000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      int int0 = buffer1.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0, int0);
      
      ByteString[] byteStringArray0 = new ByteString[3];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(7, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(7, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      
      // Undeclared exception!
      try { 
        buffer1.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertNotNull(inflater0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-435L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      buffer0.close();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      assertNotNull(pushbackInputStream0);
      
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) dataInputStream0, 8L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeUtf8("A#|A]Q`#|%kB:3!bJ|`N");
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(20L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(20L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSink0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer_UnsafeCursor1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      InputStream inputStream0 = buffer0.inputStream();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(inputStream0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink1);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      
      Buffer buffer1 = realBufferedSink1.buffer;
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      Buffer buffer2 = new Buffer();
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      
      Buffer buffer3 = buffer2.writeDecimalLong(100000000000L);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertEquals(12L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(12L, buffer3.size());
      assertNotNull(buffer3);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      
      Buffer buffer4 = realBufferedSink1.buffer;
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertNotNull(buffer4);
      assertTrue(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      
      // Undeclared exception!
      try { 
        buffer4.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-121);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-52);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-121), (byte)0, (byte) (-121), (byte) (-52), (byte)0, (byte)0}, byteArray0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-52);
      ByteString byteString0 = new ByteString(byteArray1);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-52)}, byteArray1);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      String string0 = byteString0.string(charset0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteString0.size());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(string0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("\uFFFD", string0);
      assertArrayEquals(new byte[] {(byte) (-52)}, byteArray1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertNotSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertTrue(buffer0.equals((Object)buffer1));
      
      Buffer buffer2 = buffer0.writeDecimalLong(100000000000000L);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(15L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(15L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(15L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer1));
      
      try { 
        realBufferedSink0.buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.clone();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      // Undeclared exception!
      try { 
        buffer1.read(buffer0, (-1652L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1652
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertNotNull(inflater0);
      
      String string0 = buffer0.readUtf8();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(string0);
      assertEquals("", string0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-1554L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-1554 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(1, byteString0.size());
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      String string0 = byteString0.toString();
      assertEquals(1, byteString0.size());
      assertNotNull(string0);
      assertEquals("[hex=00]", string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      int int1 = buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(int1 == int0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), int1);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      Buffer buffer1 = buffer0.writeString("[hex=00]", charset0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      boolean boolean0 = buffer_UnsafeCursor0.buffer.rangeEquals((long) (byte)0, byteString0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(1, byteString0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(1000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      Buffer buffer2 = buffer0.writeString("p@(md>\"|8cl)B}0", charset0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(22L, buffer0.size());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(22L, buffer2.size());
      assertNotNull(buffer2);
      
      String string0 = buffer1.readUtf8();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(string0);
      assertEquals("1000000p@(md>\"|8cl)B}0", string0);
      
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer1, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ": ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Pipe pipe0 = new Pipe(100000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = (Buffer)buffer0.emit();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      pipe0.sourceClosed = false;
      ByteString byteString0 = buffer0.md5();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      
      buffer0.hashCode();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      long long0 = buffer0.indexOf((byte) (-78), 100000000000000L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeLongLe((-1526L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer0.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(13L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(13L, buffer2.size());
      assertNotNull(buffer2);
      
      int int0 = buffer0.readInt();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertEquals(184221695, int0);
      
      ByteString byteString0 = buffer0.sha256();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertEquals((-1L), long0);
      
      Buffer buffer1 = buffer0.writeLong((-1L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      int int0 = buffer0.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(65533, int0);
      
      HashingSource hashingSource1 = HashingSource.hmacSha1(buffer0, byteString0);
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      
      HashingSource hashingSource2 = HashingSource.sha1(hashingSource1);
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource2);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(hashingSource2, hashingSource0);
      assertNotSame(hashingSource2, hashingSource1);
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(hashingSource2);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      
      long long1 = 100000L;
      long long2 = buffer0.indexOf((byte)31, 100000L);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals((-1L), long2);
      
      ByteString byteString1 = hashingSource2.hash();
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource1, hashingSource2);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(hashingSource2, hashingSource0);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotSame(byteString1, byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource2));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertFalse(byteString1.equals((Object)byteString0));
      
      // Undeclared exception!
      try { 
        buffer1.read(buffer0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      short short0 = buffer0.readShortLe();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals((short)12589, short0);
      
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertEquals(32, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      
      byte[] byteArray0 = new byte[9];
      long long0 = buffer1.indexOfElement(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString0, byteString1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals(1L, long0);
      
      ByteString byteString2 = new ByteString(byteArray0);
      assertEquals(9, byteString2.size());
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      assertNull(buffer2);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)85;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)85}, byteArray0);
      
      int int0 = 50;
      String string0 = byteString0.hex();
      assertEquals(2, byteString0.size());
      assertNotNull(string0);
      assertEquals("0055", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)85}, byteArray0);
      
      int int1 = byteString0.lastIndexOf(byteArray0, 50);
      assertEquals(2, byteString0.size());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)85}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      long long0 = buffer0.indexOfElement(byteString0);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2, byteString0.size());
      assertEquals((-1L), long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)85}, byteArray0);
      
      byte byte0 = buffer1.getByte(0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals((byte)45, byte0);
      
      // Undeclared exception!
      try { 
        buffer1.writeAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals((-1L), long0);
      
      Buffer buffer1 = buffer0.writeLong((-1L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertNotNull(buffer1);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      int int0 = buffer0.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(65533, int0);
      
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(3, options0.size());
      assertNotNull(options0);
      
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = options0.removeAll(linkedList0);
      assertEquals(3, options0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        buffer1.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflaterSource0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(inflaterSource0, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertNotNull(hashingSource0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      boolean boolean0 = buffer_UnsafeCursor0.buffer.rangeEquals((long) (byte)0, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, byteString0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      ByteString byteString1 = buffer_UnsafeCursor0.buffer.sha1();
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertNotNull(inflaterSource0);
      
      ByteString byteString0 = buffer0.md5();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      Buffer buffer1 = buffer0.writeInt(1200);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertNotNull(buffer1);
      
      // Undeclared exception!
      try { 
        buffer1.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      Buffer buffer2 = buffer0.copyTo((OutputStream) byteArrayOutputStream0);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertNotNull(buffer2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer1));
      
      // Undeclared exception!
      try { 
        buffer0.copyTo(buffer1, (long) (byte) (-12), 1812L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-12 byteCount=1812
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflaterSource0);
      
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      byteString0.utf8 = null;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(20, byteString0.size());
      
      long long0 = buffer0.indexOfElement(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(20, byteString0.size());
      assertEquals((-1L), long0);
      
      Buffer buffer1 = buffer0.writeUtf8("E`=X7K6");
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      int int0 = buffer1.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(69, int0);
      
      short short0 = buffer0.readShort();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((short)24637, short0);
      
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      try { 
        buffer0.write((Source) inflaterSource0, (long) 69);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: incorrect header check
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Pipe pipe0 = new Pipe(10L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflater0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      ByteString byteString1 = buffer0.snapshot();
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      boolean boolean1 = realBufferedSink0.buffer.equals(byteString0);
      assertNotSame(byteString0, byteString1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeLong(1573L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertNotNull(buffer1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      assertEquals((short) (-21267), short0);
      
      try { 
        buffer0.readUtf8LineStrict(4L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=4 content=0000000000000625\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer.writeLong(999989L);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      
      String string0 = buffer1.readUtf8Line(6L);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(string0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u000F", string0);
      
      Buffer buffer2 = (Buffer)buffer0.emit();
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      
      // Undeclared exception!
      try { 
        buffer2.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeUtf8("SHA-256", 0, 0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1089);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertNotNull(inflaterSource0);
      
      boolean boolean0 = inflaterSource0.refill();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertTrue(boolean0);
      
      byte byte0 = (byte)0;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = 9;
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        buffer0.readByteString((long) 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=9
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      boolean boolean1 = buffer0.request((-3537L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      Buffer buffer1 = buffer0.writeInt(1200);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      Buffer buffer3 = buffer1.clone();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      assertEquals(4L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer1));
      
      String string0 = "LnHb~)";
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("LnHb~)");
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertNotNull(bufferedSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      
      int int0 = (-1908874352);
      // Undeclared exception!
      try { 
        Charset.forName("LnHb~)");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // LnHb~)
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      short short0 = buffer0.readShortLe();
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertEquals((short)12589, short0);
      
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertEquals(32, byteString0.size());
      assertEquals(32, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      
      long long0 = buffer0.readHexadecimalUnsignedLong();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1318L, long0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = (Buffer)realBufferedSink0.buffer.emit();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      assertEquals((short) (-21267), short0);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)6;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)6}, byteArray0);
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertTrue(uS_ASCII0.canEncode());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertNotNull(uS_ASCII0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        realBufferedSink0.writeString("", (-477), (-120), (Charset) uS_ASCII0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -477
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflaterSource0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      String string0 = buffer_UnsafeCursor0.buffer.toString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(string0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals("[size=0]", string0);
      
      // Undeclared exception!
      try { 
        buffer0.rangeEquals((long) (byte)0, (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      short short0 = buffer0.readShortLe();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((short)12589, short0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)48;
      byteArray0[8] = (byte) (-44);
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(9, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)0, (byte) (-44), (byte)48, (byte)48, (byte)0, (byte) (-44)}, byteArray0);
      
      ByteString byteString2 = new ByteString(byteArray0);
      assertEquals(9, byteString2.size());
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString1));
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)0, (byte) (-44), (byte)48, (byte)48, (byte)0, (byte) (-44)}, byteArray0);
      
      byte byte0 = ObjectStreamConstants.TC_CLASSDESC;
      assertEquals((byte)114, byte0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      buffer0.hashCode();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(realBufferedSource0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "]");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = buffer1.exhausted();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      boolean boolean0 = buffer0.request(8257536);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-9223372036854775761L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(20L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(20L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      int int1 = buffer1.readInt();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(int1 == int0);
      assertEquals(758723122, int1);
      
      long long0 = buffer1.readDecimalLong();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3372036854775761L, long0);
      
      // Undeclared exception!
      try { 
        Charset.forName("zS;_/|");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // zS;_/|
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(56290);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x3f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = buffer0.snapshot();
      assertSame(buffer0, buffer1);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(5, byteString1.size());
      assertNotNull(byteString1);
      
      Buffer buffer2 = buffer1.writeLongLe((-1526L));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(13L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(13L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(13L, buffer2.size());
      assertNotNull(buffer2);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3XYwp3co{T");
      assertFalse(boolean0);
      
      long long0 = buffer1.readDecimalLong();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1526L), long0);
      
      Buffer buffer3 = buffer2.writeByte(2968);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertEquals(9L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(9L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(9L, buffer2.size());
      assertEquals(9L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(buffer3);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("dH)");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflater0);
      
      Buffer buffer1 = buffer0.writeLong((-1797L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertNotNull(buffer1);
      
      int int0 = buffer1.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals(65533, int0);
      
      byte byte0 = (byte)72;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        buffer1.readAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Inflater inflater0 = new Inflater();
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertNotNull(inflater0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(172);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      buffer0.flush();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(realBufferedSource0);
      
      List<Integer> list0 = realBufferedSource0.buffer.segmentSizes();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      hashingSource0.close();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      Buffer buffer2 = realBufferedSource0.buffer.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(5L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      
      long long0 = buffer1.read(realBufferedSource0.buffer, (long) (byte)94);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertEquals(5L, long0);
      
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1526L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1526
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(999987L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertNotNull(buffer1);
      
      short short0 = buffer1.readShort();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertEquals((short)14649, short0);
      
      Pipe pipe0 = new Pipe(999987L);
      assertNotNull(pipe0);
      
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer1, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Inflater inflater0 = new Inflater();
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertNotNull(inflater0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(65536L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      int int0 = 2921;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)117;
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-95);
      int int1 = (-836);
      // Undeclared exception!
      try { 
        buffer1.write(byteArray0, (int) (byte) (-95), (-836));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=-95 byteCount=-836
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      Buffer buffer1 = realBufferedSource0.buffer.writeIntLe(73);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      
      Buffer buffer2 = realBufferedSink0.buffer.writeDecimalLong(2248L);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      
      long long0 = buffer1.read(realBufferedSink0.buffer, (long) 2);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      Buffer buffer1 = buffer0.writeLong(1000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      boolean boolean0 = buffer0.request(1000L);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertFalse(boolean0);
      
      byte byte0 = ObjectStreamConstants.TC_ENDBLOCKDATA;
      assertEquals((byte)120, byte0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(4, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)120, (byte)120, (byte)0, (byte)0}, byteArray0);
      
      long long0 = buffer1.indexOfElement(byteString0, 119L);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals((-1L), long0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qqWX");
      assertFalse(boolean0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(10L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      boolean boolean1 = buffer1.equals(buffer0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      OutputStream outputStream0 = buffer1.outputStream();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertNotNull(outputStream0);
      
      short short0 = buffer1.readShortLe();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals((short)12337, short0);
      
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-3714L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -3714
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertNotNull(inflater0);
      
      Buffer buffer1 = buffer0.writeLong((-1797L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      int int0 = buffer1.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(65533, int0);
      
      ByteString byteString0 = buffer0.md5();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(hashingSource0);
      
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      
      Pipe pipe0 = new Pipe(65533);
      assertNotNull(pipe0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Buffer buffer3 = buffer2.copyTo((OutputStream) pipedOutputStream0);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      
      Buffer buffer4 = realBufferedSource0.buffer;
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertTrue(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer3));
      
      boolean boolean0 = buffer3.equals(buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer4);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer4));
      assertTrue(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertTrue(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer3));
      assertTrue(boolean0);
      
      Buffer buffer5 = buffer1.clone();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer4);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer5.completeSegmentByteCount());
      assertEquals(7L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertNotNull(buffer5);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer2));
      assertTrue(buffer5.equals((Object)buffer0));
      assertTrue(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer4));
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertNotNull(inflaterSource0);
      
      ByteString byteString0 = buffer0.md5();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      Buffer buffer1 = buffer0.writeInt(1200);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      byte byte0 = buffer1.readByte();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals((byte)0, byte0);
      
      String string0 = "okio.Timeout";
      // Undeclared exception!
      try { 
        buffer0.read((Buffer) null, (long) 1200);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      long long0 = buffer0.indexOf((byte)90);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1L), long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer1 = buffer0.writeLong((byte)90);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      SegmentPool.byteCount = 47L;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteString byteString0 = buffer0.readByteString();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (-4219L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeLong(1000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      int int0 = buffer1.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0, int0);
      
      ByteString[] byteStringArray0 = new ByteString[3];
      short short0 = buffer1.readShort();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((short)0, short0);
      
      Options options0 = Options.of(byteStringArray0);
      assertEquals(3, options0.size());
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        buffer1.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      long long0 = 100000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(100000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(9L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(9L, buffer1.size());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(9L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertEquals(9L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(9L, buffer1.size());
      assertNotNull(hashingSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      
      ByteString byteString0 = hashingSink0.hash();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertEquals(9L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(9L, buffer1.size());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(9L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(9L, buffer1.size());
      assertEquals(20, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(byteString1.equals((Object)byteString0));
      
      // Undeclared exception!
      try { 
        buffer0.readAll(buffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalOut());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalOut());
      assertNotNull(inflaterSource0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeByte(1610612736);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink1);
      
      Buffer buffer1 = realBufferedSink1.buffer;
      assertNotSame(buffer1, buffer0);
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      
      Buffer buffer2 = realBufferedSink1.buffer.writeDecimalLong(1610612736);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(11L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(1610612736);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 60000000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertEquals((-1L), long0);
      
      Buffer buffer1 = buffer0.writeLong(1000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertNotNull(buffer1);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      int int0 = buffer1.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0, int0);
      
      short short0 = buffer0.readShort();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((short)0, short0);
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      assertEquals(0, options0.size());
      assertNotNull(options0);
      
      int int1 = buffer1.selectPrefix(options0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0, options0.size());
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflater0);
      
      Buffer buffer1 = buffer0.writeLong(31L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      short short0 = buffer1.readShort();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertEquals((short)0, short0);
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertNotNull(hashingSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = buffer1.hmacSha1(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertEquals(20, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      
      SegmentPool.byteCount = 31L;
      ByteString byteString2 = buffer1.md5();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertEquals(16, byteString2.size());
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      
      Buffer buffer2 = buffer0.writeInt(1198);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(10L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer2);
      
      Buffer buffer3 = (Buffer)buffer1.write((Source) buffer2, (-72057594037927936L));
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(10L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(10L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertNotNull(buffer3);
      
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-59), (long) (byte) (-59));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=10 fromIndex=-59 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertNotNull(inflaterSource0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(inflaterSource0, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, byteString0.size());
      assertNotNull(hashingSource0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, byteString0.size());
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, byteString0.size());
      assertNotNull(realBufferedSource0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int int0 = 1579;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1579, 1579);
      assertEquals((-1578), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      try { 
        buffer0.readFrom((InputStream) byteArrayInputStream0, (long) 1579);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertNotNull(inflater0);
      
      Buffer buffer1 = buffer0.writeLong(1573L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      Buffer buffer2 = new Buffer();
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      ByteString byteString0 = buffer0.sha256();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer2));
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-14);
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)52;
      boolean boolean0 = buffer0.equals(buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)75;
      int int0 = byteString0.indexOf(byteArray0, (int) (byte)52);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-14), (byte)52, (byte)52, (byte)75}, byteArray0);
      
      OutputStream outputStream0 = buffer1.outputStream();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(outputStream0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      
      // Undeclared exception!
      try { 
        buffer2.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertNotNull(inflaterSource0);
      
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(20, byteString0.size());
      assertEquals((-1L), long0);
      
      Buffer buffer1 = buffer0.writeUtf8("E`=X7K6");
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      int int0 = buffer1.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      assertEquals(69, int0);
      
      short short0 = buffer0.readShort();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((short)24637, short0);
      
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(3, options0.size());
      assertNotNull(options0);
      
      Options options1 = Options.of(byteStringArray0);
      assertNotSame(options1, options0);
      assertEquals(3, options1.size());
      assertNotNull(options1);
      assertTrue(options1.equals((Object)options0));
      
      // Undeclared exception!
      try { 
        buffer1.selectPrefix(options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      Buffer buffer1 = buffer0.writeLong(1000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      int int0 = buffer0.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0, int0);
      
      Buffer buffer2 = buffer0.writeDecimalLong(819L);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(10L, buffer2.size());
      assertNotNull(buffer2);
      
      byte[] byteArray0 = new byte[0];
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(0, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(2, options0.size());
      assertNotNull(options0);
      
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Options options1 = Options.of(byteStringArray0);
      assertNotSame(options1, options0);
      assertEquals(2, options1.size());
      assertNotNull(options1);
      assertTrue(options1.equals((Object)options0));
      
      boolean boolean0 = options1.removeAll(linkedList0);
      assertNotSame(options1, options0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, options1.size());
      assertTrue(options1.equals((Object)options0));
      assertFalse(boolean0);
      
      int int1 = buffer1.select(options1);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(options1, options0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(2, options1.size());
      assertTrue(options1.equals((Object)options0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      short short0 = buffer0.readShortLe();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((short)12589, short0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      buffer0.size = (long) (byte)48;
      assertFalse(buffer0.exhausted());
      assertEquals(45L, buffer0.completeSegmentByteCount());
      assertEquals(48L, buffer0.size());
      
      byteArray0[2] = (byte)48;
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(4, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-44), (byte)48, (byte)0}, byteArray0);
      
      long long0 = buffer0.indexOf((byte)48);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(45L, buffer0.completeSegmentByteCount());
      assertEquals(48L, buffer0.size());
      assertEquals((-1L), long0);
      
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(4, options0.size());
      assertNotNull(options0);
      
      int int0 = buffer1.select(options0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(4, options0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(45L, buffer0.completeSegmentByteCount());
      assertEquals(48L, buffer0.size());
      assertEquals(45L, buffer1.completeSegmentByteCount());
      assertEquals(48L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals((-1), int0);
      
      long long1 = buffer1.indexOf(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString0, byteString1);
      assertFalse(buffer0.exhausted());
      assertEquals(45L, buffer0.completeSegmentByteCount());
      assertEquals(48L, buffer0.size());
      assertEquals(45L, buffer1.completeSegmentByteCount());
      assertEquals(48L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertTrue(long1 == long0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals((-1L), long1);
      
      ByteString byteString2 = new ByteString(byteArray0);
      assertEquals(4, byteString2.size());
      assertNotNull(byteString2);
      assertTrue(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-44), (byte)48, (byte)0}, byteArray0);
      
      Buffer buffer2 = buffer0.writeUtf8CodePoint((byte) (-44));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(45L, buffer0.completeSegmentByteCount());
      assertEquals(49L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(45L, buffer2.completeSegmentByteCount());
      assertEquals(49L, buffer2.size());
      assertNotNull(buffer2);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readUnsafe();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(45L, buffer0.completeSegmentByteCount());
      assertEquals(49L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(45L, buffer2.completeSegmentByteCount());
      assertEquals(49L, buffer2.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      buffer_UnsafeCursor0.close();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(45L, buffer0.completeSegmentByteCount());
      assertEquals(49L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(45L, buffer2.completeSegmentByteCount());
      assertEquals(49L, buffer2.size());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflater0);
      
      Buffer buffer1 = buffer0.writeLong((-1797L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer0.md5();
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertNotNull(hashingSource0);
      
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      
      HashingSource hashingSource2 = HashingSource.md5(hashingSource0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource2, hashingSource0);
      assertNotSame(hashingSource2, hashingSource1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertNotNull(hashingSource2);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      
      String string0 = hashingSource0.toString();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertNotNull(string0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      
      Timeout timeout0 = hashingSource2.timeout();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource2, hashingSource0);
      assertNotSame(hashingSource2, hashingSource1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertNotNull(timeout0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      
      ByteString byteString1 = hashingSource2.hash();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource2, hashingSource0);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotSame(byteString1, byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(16, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertFalse(byteString1.equals((Object)byteString0));
      
      Buffer buffer2 = buffer0.writeShortLe(19);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(10L, buffer2.size());
      assertNotNull(buffer2);
      
      String string1 = buffer1.toString();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[hex=fffffffffffff8fb1300]", string1);
      
      ByteString byteString2 = buffer0.hmacSha512(byteString0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertEquals(64, byteString2.size());
      assertNotNull(byteString2);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      int int0 = buffer0.read(byteArray0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      
      // Undeclared exception!
      try { 
        buffer0.copyTo(buffer2, (-3314L), (-1484L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=9 offset=-3314 byteCount=-1484
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertNotNull(inflater0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertNotNull(inflaterSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeShortLe((-1));
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(bufferedSink0);
      
      String string0 = ((RealBufferedSink) bufferedSink0).buffer.toString();
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(string0);
      assertEquals("[hex=ffff]", string0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      Buffer buffer1 = realBufferedSource0.buffer.writeIntLe(73);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      
      Buffer buffer2 = buffer1.copyTo(buffer_UnsafeCursor0.buffer, (long) 2, (long) 2);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(6L, buffer1.size());
      assertEquals(6L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(6L, buffer2.completeSegmentByteCount());
      assertEquals(6L, buffer2.size());
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(inflaterSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      Buffer buffer3 = buffer1.writeDecimalLong(19L);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(6L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer3.exhausted());
      assertEquals(8L, buffer3.size());
      assertEquals(6L, buffer3.completeSegmentByteCount());
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.hmacSha512(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      ByteString byteString0 = buffer0.sha256();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = buffer0.hmacSha256(byteString0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertEquals(32, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      OutputStream outputStream0 = buffer0.outputStream();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(outputStream0);
      
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflater0);
      
      Inflater inflater1 = new Inflater();
      assertEquals(0L, inflater1.getBytesRead());
      assertEquals(1, inflater1.getAdler());
      assertEquals(0, inflater1.getRemaining());
      assertFalse(inflater1.needsDictionary());
      assertEquals(0, inflater1.getTotalOut());
      assertEquals(0, inflater1.getTotalIn());
      assertTrue(inflater1.needsInput());
      assertEquals(0L, inflater1.getBytesWritten());
      assertNotNull(inflater1);
      assertFalse(inflater1.equals((Object)inflater0));
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer.writeUtf8CodePoint(1163);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(224L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      short short0 = buffer1.readShortLe();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((short)12850, short0);
      
      boolean boolean0 = buffer0.rangeEquals((-471L), byteString0, (int) (short)12850, (int) (short)12850);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)41;
      Segment segment0 = buffer0.head;
      assertNotNull(segment0);
      
      long long0 = buffer1.indexOf(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals((-1L), long0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      long long1 = buffer_UnsafeCursor0.resizeBuffer((short)12850);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(12850L, buffer0.size());
      assertEquals(8190L, buffer0.completeSegmentByteCount());
      assertFalse(long1 == long0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(1L, long1);
      
      buffer0.require((short)12850);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(12850L, buffer0.size());
      assertEquals(8190L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      buffer_UnsafeCursor0.buffer.indexOf(byteString0, (long) (byte)41);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeUtf8("E`=X7K6");
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(7L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer0.writeLong(1000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer0.size());
      assertEquals(15L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer2);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      int int0 = buffer2.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(14L, buffer0.size());
      assertEquals(14L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(69, int0);
      
      ByteString[] byteStringArray0 = new ByteString[1];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-121);
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)51;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(9, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)61, (byte) (-121), (byte) (-121), (byte)0, (byte) (-48), (byte) (-117), (byte)0, (byte)0, (byte)51}, byteArray0);
      
      byteStringArray0[0] = byteString0;
      long long0 = buffer0.indexOf((byte)0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(14L, buffer0.size());
      assertEquals(6L, long0);
      
      Options options0 = Options.of(byteStringArray0);
      assertEquals(1, options0.size());
      assertNotNull(options0);
      
      int int1 = buffer0.select(options0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(14L, buffer0.size());
      assertEquals(1, options0.size());
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      long long1 = buffer2.indexOf(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(14L, buffer0.size());
      assertEquals(14L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(9, byteString0.size());
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
      assertArrayEquals(new byte[] {(byte)61, (byte) (-121), (byte) (-121), (byte)0, (byte) (-48), (byte) (-117), (byte)0, (byte)0, (byte)51}, byteArray0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(9, byteString1.size());
      assertNotNull(byteString1);
      assertTrue(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)61, (byte) (-121), (byte) (-121), (byte)0, (byte) (-48), (byte) (-117), (byte)0, (byte)0, (byte)51}, byteArray0);
      
      Buffer buffer3 = buffer2.emitCompleteSegments();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(14L, buffer0.size());
      assertEquals(14L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(14L, buffer3.size());
      assertNotNull(buffer3);
      
      MockFile mockFile0 = new MockFile("E`=X7K6", "E`=X7K6");
      assertEquals(0L, mockFile0.length());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/E`=X7K6", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("E`=X7K6", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/E`=X7K6/E`=X7K6", mockFile0.toString());
      assertNotNull(mockFile0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(224L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      short short0 = buffer1.readShortLe();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals((short)12850, short0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Segment segment0 = buffer0.head;
      assertNotNull(segment0);
      
      long long0 = buffer1.indexOf(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(32, byteString0.size());
      assertEquals((-1L), long0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      long long1 = buffer1.indexOfElement(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(32, byteString0.size());
      assertTrue(long1 == long0);
      assertEquals((-1L), long1);
      
      long long2 = buffer_UnsafeCursor0.offset;
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals((-1L), long2);
      
      try { 
        buffer0.require((short)12850);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = buffer0.snapshot();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(5, byteString1.size());
      assertNotNull(byteString1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3XYwp3co{T");
      assertFalse(boolean0);
      
      long long0 = buffer1.readDecimalLong();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals((-1526L), long0);
      
      // Undeclared exception!
      try { 
        buffer0.copyTo(buffer1, 72L, 296L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=72 byteCount=296
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflater0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      List<Integer> list0 = realBufferedSource0.buffer.segmentSizes();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = buffer1.toString();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertNotNull(string0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals("[size=0]", string0);
      
      Buffer buffer2 = realBufferedSource0.buffer.writeLong((-1152921504606846976L));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(8L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      
      int int0 = realBufferedSource0.buffer.readUtf8CodePoint();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals(65533, int0);
      
      byte[] byteArray0 = new byte[2];
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[size=0]");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[1] = (byte)57;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)57}, byteArray0);
      
      Buffer buffer3 = buffer2.writeDecimalLong(10000000000000000L);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(24L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(24L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      
      ByteString byteString1 = buffer2.readByteString();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(24, byteString1.size());
      assertNotNull(byteString1);
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(byteString1.equals((Object)byteString0));
      
      ByteString byteString2 = realBufferedSource0.buffer.hmacSha1(byteString0);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString2.size());
      assertNotNull(byteString2);
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0, (byte)57}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(2067L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      short short0 = buffer1.readShortLe();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals((short)12338, short0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)30;
      byteArray0[5] = (byte)0;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      Buffer buffer2 = buffer0.copyTo((OutputStream) byteArrayOutputStream0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("67", byteArrayOutputStream0.toString());
      assertEquals(2, byteArrayOutputStream0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertNotNull(buffer2);
      
      // Undeclared exception!
      try { 
        buffer2.copyTo(buffer1, (long) (byte)0, (long) (byte)30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=0 byteCount=30
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1520L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      short short0 = buffer0.readShortLe();
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((short)12589, short0);
      
      ByteString byteString0 = buffer0.sha512();
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      assertNotNull(byteString0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[2] = (byte)122;
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertNotNull(realBufferedSink0);
      
      // Undeclared exception!
      try { 
        realBufferedSink0.writeString("", (int) (byte)39, 1, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 1 < 39
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      long long0 = buffer0.indexOfElement(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals((-1L), long0);
      
      Buffer buffer1 = buffer0.writeUtf8("E`=X7K6");
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer0.writeLong((-1L));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(15L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(15L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      int int0 = buffer2.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(14L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(14L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(69, int0);
      
      short short0 = buffer2.readShortLe();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(12L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals((short)15712, short0);
      
      // Undeclared exception!
      try { 
        buffer1.readUtf8LineStrict((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(hashingSource0);
      
      Buffer buffer2 = buffer0.writeByte((byte)94);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(6L, buffer2.size());
      assertNotNull(buffer2);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0 p@G");
      assertFalse(boolean0);
      
      long long0 = buffer0.indexOf((byte)94);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, long0);
      
      OutputStream outputStream0 = buffer0.outputStream();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertNotNull(outputStream0);
      
      String string0 = buffer1.readUtf8();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertNotNull(string0);
      assertEquals("-1526^", string0);
      
      Buffer buffer3 = buffer0.writeUtf8CodePoint((-2101792505));
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(1L, buffer3.size());
      assertNotNull(buffer3);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      long long0 = buffer0.indexOf((byte)55);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), long0);
      
      Buffer buffer1 = buffer0.writeLong(1L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer1.writeIntLe(1941);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(12L, buffer2.size());
      assertNotNull(buffer2);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      GzipSource gzipSource0 = new GzipSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(gzipSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      // Undeclared exception!
      try { 
        buffer1.writableSegment(2146764704);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)17;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)17;
      Segment segment0 = new Segment(byteArray0, (byte)0, (byte)17, false, false);
      assertNotNull(segment0);
      assertArrayEquals(new byte[] {(byte)0, (byte)17, (byte)0, (byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer((byte)17);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(17L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(17L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(5L, long0);
      
      buffer1.require((byte)17);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(17L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(17L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      long long1 = buffer1.completeSegmentByteCount();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(17L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(17L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getsocoPname failed");
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertNotNull(inflaterSource0);
      
      Buffer buffer1 = buffer0.writeLong(1000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertNotNull(buffer1);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      int int0 = buffer0.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0, int0);
      
      Buffer buffer2 = buffer1.writeDecimalLong(1730L);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(11L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(11L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(11L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)117;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)117}, byteArray0);
      
      long long0 = buffer2.indexOfElement(byteString0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(11L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(11L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(11L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2, byteString0.size());
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)117}, byteArray0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(11L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(11L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(11L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer3 = buffer1.writeShortLe(37);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(13L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(13L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(13L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertNotNull(buffer3);
      
      String string0 = buffer1.toString();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(13L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(13L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(string0);
      assertEquals("[hex=000000000003e8313733302500]", string0);
      
      // Undeclared exception!
      try { 
        buffer1.write(buffer0, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      byte[] byteArray0 = new byte[8];
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertSame(buffer0, buffer1);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer((byte)0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(5L, long0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")lfkI03");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertNotNull(buffer2);
      
      buffer2.require((-1));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      // Undeclared exception!
      try { 
        buffer2.indexOf(byteString0, (-6247L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(2123L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(4, buffer_UnsafeCursor0.end);
      assertEquals(4, int0);
      
      buffer_UnsafeCursor0.end = (-1);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      int int1 = buffer0.readInt();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(int1 == int0);
      assertEquals(842084915, int1);
      
      byte[] byteArray0 = buffer_UnsafeCursor0.data;
      assertNotNull(byteArray0);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(1020L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1020L, buffer0.size());
      assertEquals(1020L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1020, buffer_UnsafeCursor0.end);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, long0);
      
      int int2 = buffer_UnsafeCursor0.next();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1020L, buffer0.size());
      assertEquals(1020L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(1020L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        buffer0.getByte((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1020 offset=-1 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(2123L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(4, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(4, int0);
      
      buffer_UnsafeCursor0.end = (-1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      int int1 = buffer0.readInt();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(int1 == int0);
      assertEquals(842084915, int1);
      
      byte[] byteArray0 = buffer_UnsafeCursor0.data;
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeLong(2935);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      long long0 = buffer1.readLong();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(2935L, long0);
      
      // Undeclared exception!
      try { 
        buffer0.getByte(2935);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=2935 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflater0);
      
      long long0 = buffer0.indexOf((byte)11, (long) (byte)11);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1L), long0);
      
      Buffer buffer1 = buffer0.writeUtf8("f:;+@^iTG,2");
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(12L, buffer0.size());
      assertEquals(12L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      long long1 = buffer0.readLong();
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(long1 == long0);
      assertEquals(7366265197467429204L, long1);
      
      // Undeclared exception!
      try { 
        buffer1.getByte(3003L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=3003 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer1 = buffer0.writeUtf8("E`=X7K6");
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer0.writeLong(998L);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(15L, buffer2.size());
      assertNotNull(buffer2);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      int int0 = buffer0.readUtf8CodePoint();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(14L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(69, int0);
      
      ByteString[] byteStringArray0 = new ByteString[2];
      byte[] byteArray0 = new byte[10];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArray0[4] = (byte)0;
      byteArray0[8] = (byte)0;
      Buffer buffer3 = buffer1.writeIntLe((byte)0);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(18L, buffer1.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(18L, buffer3.size());
      assertNotNull(buffer3);
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(10, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteStringArray0[0] = byteString0;
      long long0 = buffer0.indexOf((byte)0);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, long0);
      
      ByteString[] byteStringArray1 = new ByteString[1];
      assertFalse(byteStringArray1.equals((Object)byteStringArray0));
      
      SegmentPool.next = segment0;
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(10, byteString1.size());
      assertNotNull(byteString1);
      assertTrue(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteStringArray0[0] = byteString1;
      Options options0 = Options.of(byteStringArray1);
      assertNotSame(byteStringArray1, byteStringArray0);
      assertEquals(1, options0.size());
      assertNotNull(options0);
      assertFalse(byteStringArray1.equals((Object)byteStringArray0));
      
      Integer integer0 = new Integer(415);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(415, (int)integer0);
      
      int int1 = ObjectStreamConstants.baseWireHandle;
      assertFalse(int1 == int0);
      assertEquals(8257536, int1);
      
      long long1 = buffer2.indexOf(byteString1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertEquals(18L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10, byteString1.size());
      assertEquals(18L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        buffer2.readString((-1L), charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=18 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Pipe pipe0 = new Pipe(533L);
      assertNotNull(pipe0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)102;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)31, (byte)102}, byteArray0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(100000000000000L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(2321);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertNotNull(buffer1);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      // Undeclared exception!
      try { 
        buffer1.getByte(7205759403792L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=7205759403792 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      String string0 = buffer0.readUtf8();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(string0);
      assertEquals("", string0);
      
      OutputStream outputStream0 = buffer0.outputStream();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(outputStream0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(2L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertNotNull(buffer1);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertNotNull(realBufferedSink1);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      
      String string1 = realBufferedSink1.toString();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertNotNull(string1);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("buffer([text=2])", string1);
      
      Buffer buffer2 = realBufferedSink1.buffer;
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      Buffer buffer3 = realBufferedSink1.buffer.writeDecimalLong(2L);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(1L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(buffer3);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer1));
      
      int int0 = buffer2.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(50, int0);
      
      Buffer buffer4 = new Buffer();
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertNotNull(buffer4);
      assertTrue(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertTrue(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer1));
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(outputStream0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(mockPrintStream0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) buffer_UnsafeCursor0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "beginIndex < 0", objectArray0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertNotNull(printStream0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      
      Buffer buffer5 = buffer_UnsafeCursor0.buffer.writeTo((OutputStream) mockPrintStream0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer3);
      assertSame(buffer5, buffer0);
      assertSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer4);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertSame(mockPrintStream0, printStream0);
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(15L, buffer1.size());
      assertNotNull(buffer5);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer6 = realBufferedSink0.buffer;
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer4);
      assertEquals(0L, buffer6.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertTrue(buffer6.exhausted());
      assertNotNull(buffer6);
      assertTrue(buffer6.equals((Object)buffer2));
      assertTrue(buffer6.equals((Object)buffer4));
      assertTrue(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer1));
      assertFalse(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer0));
      
      // Undeclared exception!
      try { 
        buffer6.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflaterSource0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      List<Integer> list0 = buffer1.segmentSizes();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      
      OutputStream outputStream0 = buffer0.outputStream();
      assertNotSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(outputStream0);
      assertTrue(buffer0.equals((Object)buffer1));
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      
      Buffer buffer3 = buffer2.writeIntLe((-436));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      
      ByteString byteString1 = realBufferedSource0.readByteString();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(4, byteString1.size());
      assertNotNull(byteString1);
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteString1.equals((Object)byteString0));
      
      ByteString byteString2 = realBufferedSource0.buffer.hmacSha1(byteString1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(4, byteString1.size());
      assertEquals(20, byteString2.size());
      assertNotNull(byteString2);
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      
      Buffer buffer4 = buffer2.writeUtf8("50RN)*hFE7Z9");
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer4);
      assertNotSame(buffer4, buffer0);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(13L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(13L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer0));
      
      Buffer buffer5 = buffer4.writeTo(outputStream0);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer4);
      assertSame(buffer2, buffer5);
      assertNotSame(buffer4, buffer0);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer5);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer0);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer3);
      assertSame(buffer5, buffer4);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(13L, buffer0.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(0L, buffer5.size());
      assertTrue(buffer5.exhausted());
      assertNotNull(buffer5);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer0));
      
      // Undeclared exception!
      try { 
        buffer3.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertNotNull(inflater0);
      
      inflater0.reset();
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertNotNull(inflaterSource0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink1);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      
      String string0 = realBufferedSink1.buffer.toString();
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(string0);
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertEquals("[size=0]", string0);
      
      String string1 = realBufferedSink1.buffer.readUtf8Line();
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNull(string1);
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      
      Buffer buffer1 = realBufferedSink1.buffer;
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      Buffer buffer2 = realBufferedSink0.buffer.writeInt(2800);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      String string2 = realBufferedSink0.buffer.readUtf8LineStrict((long) 2800);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(string2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\u0000\u0000", string2);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertNotNull(locale1);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertSame(locale0, locale1);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      try { 
        realBufferedSink0.buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 4: 1 (to read code point prefixed 0xfffffff0)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Buffer buffer0 = new Buffer();
          assertEquals(0L, buffer0.completeSegmentByteCount());
          assertTrue(buffer0.exhausted());
          assertEquals(0L, buffer0.size());
          assertNotNull(buffer0);
          
          ByteString[] byteStringArray0 = new ByteString[2];
          byte[] byteArray0 = new byte[2];
          byte byte0 = (byte)1;
          byteArray0[0] = (byte)1;
          byteArray0[1] = (byte)47;
          ByteString byteString0 = new ByteString(byteArray0);
          assertEquals(2, byteString0.size());
          assertNotNull(byteString0);
          assertArrayEquals(new byte[] {(byte)1, (byte)47}, byteArray0);
          
          byteStringArray0[0] = byteString0;
          ByteString byteString1 = new ByteString(byteArray0);
          assertEquals(2, byteString1.size());
          assertNotNull(byteString1);
          assertTrue(byteString1.equals((Object)byteString0));
          assertArrayEquals(new byte[] {(byte)1, (byte)47}, byteArray0);
          
          byteStringArray0[1] = byteString1;
          Options options0 = Options.of(byteStringArray0);
          assertEquals(2, options0.size());
          assertNotNull(options0);
          
          boolean boolean0 = buffer0.rangeEquals((long) (byte)47, byteString0);
          assertNotSame(byteString0, byteString1);
          assertEquals(0L, buffer0.completeSegmentByteCount());
          assertTrue(buffer0.exhausted());
          assertEquals(0L, buffer0.size());
          assertEquals(2, byteString0.size());
          assertTrue(byteString0.equals((Object)byteString1));
          assertFalse(boolean0);
          assertArrayEquals(new byte[] {(byte)1, (byte)47}, byteArray0);
          
          Options options1 = Options.of(byteStringArray0);
          assertNotSame(options1, options0);
          assertEquals(2, options1.size());
          assertNotNull(options1);
          assertTrue(options1.equals((Object)options0));
          
          int int0 = buffer0.selectPrefix(options0);
          assertNotSame(options0, options1);
          assertEquals(0L, buffer0.completeSegmentByteCount());
          assertTrue(buffer0.exhausted());
          assertEquals(0L, buffer0.size());
          assertEquals(2, options0.size());
          assertTrue(options0.equals((Object)options1));
          assertEquals(0, int0);
          
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          assertFalse(fileDescriptor0.valid());
          assertNotNull(fileDescriptor0);
          
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1556)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeUtf8("E`=X7K6");
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer1.size());
      assertNotNull(buffer1);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      String string0 = realBufferedSink0.toString();
      assertSame(buffer0, buffer1);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(string0);
      assertEquals("buffer([text=E`=X7K6])", string0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer1.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8CodePoint((-1));
      assertSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(bufferedSink0);
      
      boolean boolean0 = buffer1.exhausted();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer1.size());
      assertFalse(boolean0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertSame(buffer0, buffer1);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      
      ByteString byteString1 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString1, byteString0);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(byteString1.equals((Object)byteString0));
      
      int int0 = buffer_UnsafeCursor0.next();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(7, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(7, int0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      
      Buffer buffer2 = new Buffer();
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertNotNull(inflater0);
      
      SegmentPool.byteCount = 24L;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      Buffer buffer2 = realBufferedSink0.buffer.clone();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertNotNull(buffer2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("");
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(bufferedSink0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      
      int int1 = 615;
      Buffer buffer3 = realBufferedSink0.buffer.writeUtf8CodePoint(615);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer3.exhausted());
      assertEquals(2L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(buffer3);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      
      int int2 = buffer3.readUtf8CodePoint();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(615, int2);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer0));
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer0));
      
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Pipe pipe0 = new Pipe(802L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1877));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertNotNull(buffer1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1877));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1877
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      byte[] byteArray0 = new byte[8];
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer2 = buffer1.writeShortLe((-1));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(7L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer((byte)0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(7L, long0);
      
      try { 
        buffer1.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      short short0 = buffer0.readShortLe();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((short)12589, short0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)85;
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(2, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte) (-50), (byte)85}, byteArray0);
      
      long long0 = buffer0.indexOfElement(byteString1);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals((-1L), long0);
      assertArrayEquals(new byte[] {(byte) (-50), (byte)85}, byteArray0);
      
      ByteString byteString2 = new ByteString(byteArray0);
      assertEquals(2, byteString2.size());
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString1));
      assertArrayEquals(new byte[] {(byte) (-50), (byte)85}, byteArray0);
      
      long long1 = buffer0.indexOf((byte) (-50));
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertTrue(long1 == long0);
      assertEquals((-1L), long1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      assertNull(buffer2);
      
      Buffer buffer3 = new Buffer();
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      
      try { 
        buffer3.write((Source) buffer1, (long) (byte)85);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertNotNull(inflater0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-435L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16L, buffer1.size());
      assertNotNull(buffer1);
      
      buffer0.close();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertNotNull(hashingSource0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte)117;
      byteArray0[8] = (byte)70;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(9, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)117, (byte)117, (byte)0, (byte)117, (byte)117, (byte)117, (byte)117, (byte)117, (byte)70}, byteArray0);
      
      long long0 = buffer1.indexOf((byte) (-107));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16L, buffer1.size());
      assertEquals((-1L), long0);
      
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(1, options0.size());
      assertNotNull(options0);
      
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = options0.removeAll(linkedList0);
      assertEquals(1, options0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      
      int int0 = buffer1.select(options0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(1, options0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16L, buffer1.size());
      assertEquals((-1), int0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor1);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      
      long long1 = buffer_UnsafeCursor0.buffer.indexOf(byteString0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals(9, byteString0.size());
      assertTrue(long1 == long0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), long1);
      assertArrayEquals(new byte[] {(byte)117, (byte)117, (byte)0, (byte)117, (byte)117, (byte)117, (byte)117, (byte)117, (byte)70}, byteArray0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(9, byteString1.size());
      assertNotNull(byteString1);
      assertTrue(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)117, (byte)117, (byte)0, (byte)117, (byte)117, (byte)117, (byte)117, (byte)117, (byte)70}, byteArray0);
      
      boolean boolean1 = buffer0.rangeEquals(1526L, byteString0, (int) (byte)117, (-227));
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(9, byteString0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)117, (byte)117, (byte)0, (byte)117, (byte)117, (byte)117, (byte)117, (byte)117, (byte)70}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals((-1L), long0);
      
      Buffer buffer1 = buffer0.writeLong((-1L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      int int0 = buffer0.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(65533, int0);
      
      HashingSource hashingSource1 = HashingSource.hmacSha1(buffer0, byteString0);
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      
      long long1 = buffer0.indexOf((byte)31, 100000L);
      assertSame(buffer0, buffer1);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(long1 == long0);
      assertEquals((-1L), long1);
      
      ByteString byteString1 = hashingSource1.hash();
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString1, byteString0);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString1.equals((Object)byteString0));
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      long long2 = buffer_UnsafeCursor0.resizeBuffer(65533);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(65533L, buffer0.size());
      assertEquals(57343L, buffer0.completeSegmentByteCount());
      assertEquals(57343L, buffer1.completeSegmentByteCount());
      assertEquals(65533L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(7L, long2);
      
      // Undeclared exception!
      try { 
        buffer1.read(buffer0, 100000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      long long0 = 1437L;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1510L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeUtf8("5Nn3H");
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertNotNull(buffer1);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      int int0 = buffer1.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(53, int0);
      
      short short0 = buffer1.readShort();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((short)20078, short0);
      
      Buffer buffer2 = buffer1.writeUtf8CodePoint(53);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(3L, buffer2.size());
      assertNotNull(buffer2);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      // Undeclared exception!
      try { 
        buffer0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflaterSource0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      ByteString byteString1 = buffer0.readByteString();
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      
      long long0 = buffer0.indexOfElement(byteString0);
      assertNotSame(byteString0, byteString1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(1, byteString0.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals((-1L), long0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(102);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertNotNull(buffer1);
      
      long long1 = buffer0.completeSegmentByteCount();
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      
      String string0 = buffer1.readUtf8();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(string0);
      assertEquals("f", string0);
      
      Buffer buffer2 = buffer1.writeByte(102);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer2);
      
      Buffer buffer3 = buffer1.writeIntLe(38);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(5L, buffer3.size());
      assertNotNull(buffer3);
      
      long long2 = buffer3.indexOf(byteString0, 168L);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(1, byteString0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(5L, buffer3.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals((-1L), long2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      byte byte0 = (byte)33;
      long long0 = realBufferedSink0.buffer.indexOf((byte)33);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), long0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      long long1 = buffer0.indexOf((byte)80, (long) 1610612736);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(long1 == long0);
      assertEquals((-1L), long1);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      long long2 = buffer0.indexOf((byte)33);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals((-1L), long2);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(2, options0.size());
      assertNotNull(options0);
      
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = realBufferedSource0.buffer.select(options0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2, options0.size());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals(0, int0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      // Undeclared exception!
      try { 
        buffer1.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeUtf8("E`=X7K6");
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer0.writeUtf8CodePoint((-1610612735));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer2);
      
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte)61;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte) (-117);
      byteArray0[7] = (byte)0;
      Buffer buffer3 = new Buffer();
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      
      Buffer buffer4 = buffer3.writeIntLe((byte) (-117));
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertSame(buffer4, buffer3);
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertFalse(buffer4.exhausted());
      assertEquals(4L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertNotNull(buffer4);
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertNotNull(realBufferedSource1);
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      Buffer buffer5 = realBufferedSource1.buffer;
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer1);
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertNotNull(buffer5);
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer1));
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(9, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)61, (byte)0, (byte)0, (byte)0, (byte) (-52), (byte) (-117), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer5);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer6 = buffer5.emitCompleteSegments();
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer3);
      assertSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer3, buffer6);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer5);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer0);
      assertSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer1);
      assertTrue(buffer6.exhausted());
      assertEquals(0L, buffer6.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertNotNull(buffer6);
      assertFalse(buffer6.equals((Object)buffer1));
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer1));
      
      long long0 = buffer4.read(realBufferedSource0.buffer, 1L);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer5);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer3, buffer6);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer5);
      assertNotSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer6);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertSame(buffer4, buffer3);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(3L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer3.equals((Object)buffer6));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(buffer4.equals((Object)buffer5));
      assertFalse(buffer4.equals((Object)buffer6));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      boolean boolean0 = buffer0.request(8257536);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(9223372036854775807L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      long long0 = buffer1.readDecimalLong();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(9223372036854775807L, long0);
      
      buffer0.clear();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)126;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      // Undeclared exception!
      try { 
        buffer1.writeUtf8CodePoint(8257536);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7e0000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflater0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      Buffer buffer2 = buffer0.writeDecimalLong(2123L);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      
      Buffer buffer3 = buffer1.writeInt((-1));
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      
      String string0 = realBufferedSink0.toString();
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertNotNull(string0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertEquals("buffer([text=2123])", string0);
      
      Segment segment0 = buffer1.writableSegment(2959);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(segment0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      
      int int0 = realBufferedSink0.buffer.readUtf8CodePoint();
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertEquals(65533, int0);
      
      Segment segment1 = new Segment();
      assertNotNull(segment1);
      assertFalse(segment1.equals((Object)segment0));
      
      Buffer buffer4 = realBufferedSink0.buffer();
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer4.exhausted());
      assertEquals(3L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      
      Buffer buffer5 = buffer1.writeShortLe(65533);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer5, buffer0);
      assertSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer2);
      assertSame(buffer5, buffer4);
      assertSame(buffer5, buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(5L, buffer5.size());
      assertNotNull(buffer5);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer2));
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer4);
      assertSame(buffer2, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer5));
      assertFalse(buffer2.equals((Object)buffer4));
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      buffer_UnsafeCursor0.end = (-1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      byte[] byteArray0 = buffer_UnsafeCursor0.data;
      assertNull(byteArray0);
      
      int int2 = buffer_UnsafeCursor0.next();
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer4);
      assertSame(buffer2, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer5));
      assertFalse(buffer2.equals((Object)buffer4));
      assertEquals(4, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(4, int2);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer3));
      
      Buffer buffer6 = realBufferedSink0.buffer;
      assertSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer0);
      assertSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer2);
      assertSame(buffer6, buffer4);
      assertSame(buffer6, buffer3);
      assertFalse(buffer6.exhausted());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(5L, buffer6.size());
      assertNotNull(buffer6);
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer2));
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(buffer_UnsafeCursor0.data, 1031, 1031);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(1031, byteArrayInputStream0.available());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertNotNull(byteArrayInputStream0);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer6));
      assertFalse(buffer2.equals((Object)buffer5));
      assertFalse(buffer2.equals((Object)buffer4));
      assertEquals(4, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      byteArrayInputStream0.reset();
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer6);
      assertNotSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer4);
      assertSame(buffer2, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(1031, byteArrayInputStream0.available());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer6));
      assertFalse(buffer2.equals((Object)buffer5));
      assertFalse(buffer2.equals((Object)buffer4));
      assertEquals(4, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer7 = buffer6.readFrom((InputStream) byteArrayInputStream0);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer0);
      assertSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer2);
      assertSame(buffer6, buffer4);
      assertSame(buffer6, buffer7);
      assertSame(buffer6, buffer3);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer6);
      assertNotSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer7);
      assertSame(buffer2, buffer0);
      assertSame(buffer7, buffer3);
      assertNotSame(buffer7, buffer0);
      assertSame(buffer7, buffer1);
      assertSame(buffer7, buffer6);
      assertSame(buffer7, buffer5);
      assertSame(buffer7, buffer4);
      assertNotSame(buffer7, buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer6.exhausted());
      assertEquals(1036L, buffer6.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertFalse(buffer7.exhausted());
      assertEquals(1036L, buffer7.size());
      assertNotNull(buffer7);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer6));
      assertFalse(buffer2.equals((Object)buffer5));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer2));
      assertEquals(4, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer8 = realBufferedSource0.buffer;
      assertNotSame(buffer8, buffer6);
      assertNotSame(buffer8, buffer4);
      assertNotSame(buffer8, buffer1);
      assertNotSame(buffer8, buffer5);
      assertNotSame(buffer8, buffer2);
      assertNotSame(buffer8, buffer7);
      assertNotSame(buffer8, buffer3);
      assertNotSame(buffer8, buffer0);
      assertEquals(0L, buffer8.size());
      assertTrue(buffer8.exhausted());
      assertEquals(0L, buffer8.completeSegmentByteCount());
      assertNotNull(buffer8);
      assertFalse(buffer8.equals((Object)buffer6));
      assertFalse(buffer8.equals((Object)buffer4));
      assertFalse(buffer8.equals((Object)buffer1));
      assertFalse(buffer8.equals((Object)buffer5));
      assertFalse(buffer8.equals((Object)buffer2));
      assertFalse(buffer8.equals((Object)buffer7));
      assertFalse(buffer8.equals((Object)buffer3));
      assertFalse(buffer8.equals((Object)buffer0));
      
      // Undeclared exception!
      try { 
        buffer2.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 4
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(2067L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      short short0 = buffer1.readShortLe();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals((short)12338, short0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)30;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      Buffer buffer2 = buffer0.copyTo((OutputStream) byteArrayOutputStream0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("67", byteArrayOutputStream0.toString());
      assertEquals(2, byteArrayOutputStream0.size());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      
      short short1 = buffer0.readShortLe();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(short1 == short0);
      assertEquals((short)14134, short1);
      
      // Undeclared exception!
      try { 
        buffer2.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater(true);
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertNotNull(inflater0);
      
      ByteString byteString0 = buffer0.snapshot();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      Pipe pipe0 = new Pipe(456L);
      assertNotNull(pipe0);
      
      Buffer buffer1 = pipe0.buffer;
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      Buffer buffer2 = buffer0.writeUtf8("+]j9oE$kYhpc");
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertEquals(12L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertEquals(12L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(1L);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(12L, long0);
      
      Buffer buffer3 = (Buffer)buffer_UnsafeCursor0.buffer.emit();
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(1L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer1));
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      MockFile mockFile0 = new MockFile("Pk`H3eKE=3[(A", "not acquired");
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/Pk`H3eKE=3[(A", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/Pk`H3eKE=3[(A/not acquired", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertEquals("not acquired", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNotNull(mockFile0);
      
      Buffer buffer4 = new Buffer();
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      
      Buffer buffer5 = pipe0.buffer;
      assertNotSame(buffer5, buffer3);
      assertSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer4);
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(0L, buffer5.size());
      assertTrue(buffer5.exhausted());
      assertNotNull(buffer5);
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer2));
      assertTrue(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer0));
      
      Buffer buffer6 = buffer_UnsafeCursor0.buffer;
      assertNotSame(buffer6, buffer5);
      assertSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer4);
      assertSame(buffer6, buffer2);
      assertSame(buffer6, buffer3);
      assertEquals(1L, buffer6.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertFalse(buffer6.exhausted());
      assertNotNull(buffer6);
      assertFalse(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer1));
      assertFalse(buffer6.equals((Object)buffer4));
      
      // Undeclared exception!
      try { 
        buffer6.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x2b
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      String string0 = hashingSource0.toString();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)102;
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals((-1L), long0);
      
      Buffer buffer1 = buffer0.writeUtf8("E");
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertNotNull(buffer1);
      
      Segment segment0 = buffer1.head;
      assertNotNull(segment0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      boolean boolean0 = buffer1.request(2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(boolean0);
      
      byte byte0 = buffer0.readByte();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((byte)69, byte0);
      
      // Undeclared exception!
      try { 
        buffer1.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      
      Buffer buffer3 = realBufferedSink0.buffer;
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertNotNull(buffer3);
      assertTrue(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readUnsafe();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      Integer integer0 = new Integer(714);
      assertNotNull(integer0);
      assertEquals(714, (int)integer0);
      
      Buffer buffer4 = buffer_UnsafeCursor0.buffer.writeIntLe((-2714));
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer4);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer3);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(4L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(hashingSource0);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSource2);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      boolean boolean0 = realBufferedSink0.closed;
      assertFalse(boolean0);
      
      long long0 = buffer4.readHexadecimalUnsignedLong();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer4);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer3);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(3L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(3L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(15L, long0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      String string0 = buffer0.toString();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(string0);
      assertEquals("[size=0]", string0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SHA-1");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertNull(buffer1);
      
      // Undeclared exception!
      try { 
        buffer0.copyTo((Buffer) null, 3121L, 152L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer_UnsafeCursor0.buffer);
      assertNotSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Buffer buffer2 = realBufferedSource0.buffer.writeIntLe((-936));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      boolean boolean0 = realBufferedSink0.closed;
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x58
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1529L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      Buffer buffer2 = new Buffer();
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      long long0 = 60L;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer3 = buffer0.writeDecimalLong((-92233720368547L));
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(20L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(20L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      
      short short0 = buffer3.readShortLe();
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(18L, buffer3.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertEquals((short)12589, short0);
      
      ByteString byteString0 = buffer3.sha512();
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(18L, buffer3.size());
      assertEquals(64, byteString0.size());
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(18L, buffer3.size());
      assertNotNull(realBufferedSink1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      
      Buffer buffer4 = realBufferedSink1.buffer();
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(18L, buffer3.size());
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertTrue(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer3));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(16711680L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      ByteString byteString0 = buffer2.sha256();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      // Undeclared exception!
      try { 
        buffer2.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Inflater inflater0 = new Inflater();
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflater0);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertNotNull(realBufferedSource0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertNotNull(inputStream0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertNotNull(dataInputStream0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      HashingSink hashingSink0 = HashingSink.sha256(buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertNotNull(hashingSink0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      boolean boolean2 = buffer1.rangeEquals((long) 2959, byteString0, (-1), (-1));
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      short short0 = buffer0.readShortLe();
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((short)12589, short0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      buffer0.size = (long) (byte)48;
      assertFalse(buffer0.exhausted());
      assertEquals(45L, buffer0.completeSegmentByteCount());
      assertEquals(48L, buffer0.size());
      
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-44);
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(4, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-44), (byte)48, (byte) (-44)}, byteArray0);
      
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(2, options0.size());
      assertNotNull(options0);
      
      int int0 = buffer1.selectPrefix(options0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(45L, buffer0.completeSegmentByteCount());
      assertEquals(48L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(45L, buffer1.completeSegmentByteCount());
      assertEquals(48L, buffer1.size());
      assertEquals(2, options0.size());
      assertEquals((-1), int0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(45L, buffer0.completeSegmentByteCount());
      assertEquals(48L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(45L, buffer1.completeSegmentByteCount());
      assertEquals(48L, buffer1.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(45L, buffer0.completeSegmentByteCount());
      assertEquals(48L, buffer0.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertFalse(buffer1.exhausted());
      assertEquals(45L, buffer1.completeSegmentByteCount());
      assertEquals(48L, buffer1.size());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      ByteString byteString0 = buffer0.sha256();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      byteString0.write(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(bufferedSink0);
      
      HashingSink hashingSink0 = HashingSink.hmacSha1(buffer0, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(hashingSink0);
      
      ByteString byteString1 = hashingSink0.hash();
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      
      ByteString byteString2 = hashingSink0.hash();
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(20, byteString2.size());
      assertNotNull(byteString2);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString1));
      
      byte byte0 = ObjectStreamConstants.TC_CLASSDESC;
      assertEquals((byte)114, byte0);
      
      BufferedSink bufferedSink1 = bufferedSink0.writeByte(1879048192);
      assertSame(realBufferedSink0, bufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertSame(bufferedSink0, bufferedSink1);
      assertSame(bufferedSink0, realBufferedSink0);
      assertSame(bufferedSink1, realBufferedSink0);
      assertSame(bufferedSink1, bufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(bufferedSink1);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      
      ByteString byteString3 = ((RealBufferedSink) bufferedSink1).buffer.hmacSha1(byteString0);
      assertSame(realBufferedSink0, bufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString3);
      assertSame(bufferedSink0, bufferedSink1);
      assertSame(bufferedSink0, realBufferedSink0);
      assertSame(bufferedSink1, realBufferedSink0);
      assertSame(bufferedSink1, bufferedSink0);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(20, byteString3.size());
      assertNotNull(byteString3);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      
      int int0 = ((RealBufferedSink) bufferedSink1).buffer.readUtf8CodePoint();
      assertSame(realBufferedSink0, bufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString3);
      assertSame(bufferedSink0, bufferedSink1);
      assertSame(bufferedSink0, realBufferedSink0);
      assertSame(bufferedSink1, realBufferedSink0);
      assertSame(bufferedSink1, bufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString3));
      assertEquals(65533, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      // Undeclared exception!
      try { 
        Charset.forName("I5^v::M99");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // I5^v::M99
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertNotNull(inflater0);
      
      Buffer buffer1 = buffer0.writeLong((-1779L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertNotNull(buffer1);
      
      int int0 = buffer1.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals(65533, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteString byteString0 = buffer0.md5();
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      Pipe pipe0 = new Pipe(65533);
      assertNotNull(pipe0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Buffer buffer3 = realBufferedSink0.buffer.writeUtf8CodePoint(65533);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(3L, buffer3.size());
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      
      Pipe pipe1 = new Pipe(24L);
      assertNotNull(pipe1);
      assertFalse(pipe1.equals((Object)pipe0));
      
      int int1 = buffer2.readUtf8CodePoint();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(int1 == int0);
      assertEquals(65533, int1);
      
      // Undeclared exception!
      try { 
        buffer3.readUtf8((-1779L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1779
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflaterSource0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(inflaterSource0, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertNotNull(hashingSource0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertNotNull(realBufferedSource0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertEquals(32, byteString1.size());
      assertNotNull(byteString1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#e\rC/.cVxb-&");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = buffer_UnsafeCursor0.buffer.rangeEquals((long) (byte)0, byteString0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer2 = buffer1.writeIntLe((-1));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HashingSource hashingSource2 = HashingSource.hmacSha256(hashingSource0, byteString1);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotSame(hashingSource2, hashingSource0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertEquals(32, byteString1.size());
      assertNotNull(hashingSource2);
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      HashingSource hashingSource3 = HashingSource.hmacSha256(buffer0, byteString1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource3, hashingSource2);
      assertNotSame(hashingSource3, hashingSource0);
      assertNotSame(hashingSource3, hashingSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource3);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertEquals(32, byteString1.size());
      assertNotNull(hashingSource3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource3.equals((Object)hashingSource2));
      assertFalse(hashingSource3.equals((Object)hashingSource0));
      assertFalse(hashingSource3.equals((Object)hashingSource1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      long long0 = realBufferedSource0.buffer.indexOf((byte)80, (long) (byte)80);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource3);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource2);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(hashingSource1, hashingSource3);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource0.equals((Object)hashingSource3));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource2));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(hashingSource1.equals((Object)hashingSource3));
      assertEquals((-1L), long0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer3 = new Buffer();
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(buffer3);
      assertTrue(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      
      Segment segment0 = new Segment((byte[]) null, (byte)80, (byte)80, true, false);
      assertNotNull(segment0);
      
      buffer3.head = segment0;
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      Buffer buffer4 = new Buffer();
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      assertNotNull(buffer4);
      assertTrue(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      
      int int0 = buffer_UnsafeCursor0.next();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource3);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource2);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(hashingSource1, hashingSource3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer4);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource0.equals((Object)hashingSource3));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource2));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(hashingSource1.equals((Object)hashingSource3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals(4, buffer_UnsafeCursor0.end);
      assertEquals(4, int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int int1 = buffer_UnsafeCursor0.end;
      assertTrue(int1 == int0);
      assertEquals(4, int1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      byte[] byteArray1 = buffer_UnsafeCursor0.data;
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer5 = realBufferedSource0.buffer();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource3);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource2);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(hashingSource1, hashingSource3);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer0);
      assertSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer3);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertFalse(buffer5.exhausted());
      assertEquals(4L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertNotNull(buffer5);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource0.equals((Object)hashingSource3));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource2));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(hashingSource1.equals((Object)hashingSource3));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer3));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer5.readAndWriteUnsafe();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource3);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource2);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(hashingSource1, hashingSource3);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer0);
      assertSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertFalse(buffer5.exhausted());
      assertEquals(4L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource0.equals((Object)hashingSource3));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource2));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(hashingSource1.equals((Object)hashingSource3));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource0.equals((Object)hashingSource3));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource2));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(hashingSource1.equals((Object)hashingSource3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer6 = realBufferedSource0.buffer;
      assertSame(buffer6, buffer1);
      assertSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer0);
      assertSame(buffer6, buffer2);
      assertFalse(buffer6.exhausted());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(4L, buffer6.size());
      assertNotNull(buffer6);
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer2.readUnsafe();
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor0);
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource3);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource2);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(hashingSource1, hashingSource3);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer6);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer_UnsafeCursor2);
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource0.equals((Object)hashingSource3));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource2));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(hashingSource1.equals((Object)hashingSource3));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertEquals((-1), buffer_UnsafeCursor2.end);
      assertFalse(buffer_UnsafeCursor2.readWrite);
      assertEquals((-1), buffer_UnsafeCursor2.start);
      assertEquals((-1L), buffer_UnsafeCursor2.offset);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      buffer_UnsafeCursor2.close();
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor0);
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource3);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource2);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(hashingSource1, hashingSource3);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer6);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, byteString0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource0.equals((Object)hashingSource3));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource2));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(hashingSource1.equals((Object)hashingSource3));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertEquals((-1), buffer_UnsafeCursor2.end);
      assertFalse(buffer_UnsafeCursor2.readWrite);
      assertEquals((-1), buffer_UnsafeCursor2.start);
      assertEquals((-1L), buffer_UnsafeCursor2.offset);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer7 = buffer0.writeHexadecimalUnsignedLong(0);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer7, buffer0);
      assertNotSame(buffer7, buffer2);
      assertNotSame(buffer7, buffer4);
      assertNotSame(buffer7, buffer5);
      assertNotSame(buffer7, buffer1);
      assertNotSame(buffer7, buffer3);
      assertNotSame(buffer7, buffer6);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer7.exhausted());
      assertEquals(1L, buffer7.size());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertNotNull(buffer7);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer7.equals((Object)buffer2));
      assertFalse(buffer7.equals((Object)buffer4));
      assertFalse(buffer7.equals((Object)buffer5));
      assertFalse(buffer7.equals((Object)buffer1));
      assertFalse(buffer7.equals((Object)buffer3));
      assertFalse(buffer7.equals((Object)buffer6));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflater0);
      
      byte[] byteArray0 = new byte[1];
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertNotNull(charset0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(buffer2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      
      Buffer buffer3 = realBufferedSink0.buffer();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertNotNull(buffer3);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer0));
      
      Buffer buffer4 = buffer3.writeDecimalLong((-1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer4);
      assertSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer3);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(2L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertFalse(buffer4.exhausted());
      assertEquals(2L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer0));
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long long0 = buffer2.indexOf((byte)51);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals((-1L), long0);
      
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      buffer1.head = segment0;
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      
      byteStringArray0[4] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(5, options0.size());
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        buffer1.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      long long0 = realBufferedSource0.buffer.writeAll(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, long0);
      
      long long1 = 1000000L;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer1 = realBufferedSource0.buffer.writeLong(1000000L);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      byte[] byteArray0 = new byte[10];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteString byteString0 = buffer0.sha256();
      assertNotSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer1));
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 2);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Buffer buffer2 = buffer0.readFrom((InputStream) pushbackInputStream0, 0L);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      assertNull(buffer3);
      
      try { 
        buffer2.skip(1000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflater0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflaterSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeShortLe((-1));
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(bufferedSink0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      Buffer buffer1 = realBufferedSource0.buffer.writeIntLe(73);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      
      Buffer buffer2 = buffer1.copyTo(buffer_UnsafeCursor0.buffer, (long) 2, (long) 2);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(6L, buffer2.size());
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer3 = realBufferedSink0.buffer.writeDecimalLong(2248L);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(6L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      
      long long0 = buffer1.read(realBufferedSink0.buffer, (long) 2);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertEquals(2L, long0);
      
      long long1 = new Integer((-1));
      assertFalse(long1 == long0);
      assertEquals((-1), long1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      // Undeclared exception!
      try { 
        buffer1.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer2);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(hashingSource0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(byteString1, byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(16, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(byteString1.equals((Object)byteString0));
      
      Buffer buffer3 = realBufferedSource0.buffer();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      Buffer buffer4 = buffer0.clone();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(5L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(5L, buffer4.completeSegmentByteCount());
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer4);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(5L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(5L, buffer4.completeSegmentByteCount());
      assertNotNull(realBufferedSink1);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(realBufferedSink2);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      
      Buffer buffer5 = buffer4.writeShortLe((byte)48);
      assertNotSame(buffer5, buffer2);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer5);
      assertFalse(buffer5.exhausted());
      assertEquals(5L, buffer5.completeSegmentByteCount());
      assertEquals(7L, buffer5.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(7L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(5L, buffer4.completeSegmentByteCount());
      assertNotNull(buffer5);
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      
      Buffer buffer6 = realBufferedSink0.buffer();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer6);
      assertNotSame(buffer3, buffer5);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer6.size());
      assertTrue(buffer6.exhausted());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertNotNull(buffer6);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer1));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer0));
      assertTrue(buffer6.equals((Object)buffer2));
      assertTrue(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      
      long long0 = buffer3.read(realBufferedSource0.buffer, 100L);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer6);
      assertNotSame(buffer3, buffer5);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(buffer3.equals((Object)buffer4));
      assertTrue(buffer3.equals((Object)buffer6));
      assertFalse(buffer3.equals((Object)buffer0));
      assertEquals((-1L), long0);
      
      Buffer buffer7 = buffer5.writeLongLe((-1));
      assertSame(buffer5, buffer7);
      assertNotSame(buffer5, buffer2);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer7, buffer6);
      assertSame(buffer7, buffer5);
      assertSame(buffer7, buffer4);
      assertNotSame(buffer7, buffer0);
      assertNotSame(buffer7, buffer3);
      assertNotSame(buffer7, buffer1);
      assertNotSame(buffer7, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer7);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer6);
      assertEquals(15L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals(5L, buffer5.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer7.exhausted());
      assertEquals(5L, buffer7.completeSegmentByteCount());
      assertEquals(15L, buffer7.size());
      assertEquals(15L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(5L, buffer4.completeSegmentByteCount());
      assertNotNull(buffer7);
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer7.equals((Object)buffer6));
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer3));
      assertFalse(buffer7.equals((Object)buffer1));
      assertFalse(buffer7.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer6));
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer7.readAndWriteUnsafe();
      assertSame(buffer5, buffer7);
      assertNotSame(buffer5, buffer2);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer7, buffer6);
      assertSame(buffer7, buffer5);
      assertSame(buffer7, buffer4);
      assertNotSame(buffer7, buffer0);
      assertNotSame(buffer7, buffer3);
      assertNotSame(buffer7, buffer1);
      assertNotSame(buffer7, buffer2);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer7);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer6);
      assertEquals(15L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals(5L, buffer5.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer7.exhausted());
      assertEquals(5L, buffer7.completeSegmentByteCount());
      assertEquals(15L, buffer7.size());
      assertEquals(15L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(5L, buffer4.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor1);
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer7.equals((Object)buffer6));
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer3));
      assertFalse(buffer7.equals((Object)buffer1));
      assertFalse(buffer7.equals((Object)buffer2));
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer6));
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      
      int int1 = buffer_UnsafeCursor1.next();
      assertSame(buffer5, buffer7);
      assertNotSame(buffer5, buffer2);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer7, buffer6);
      assertSame(buffer7, buffer5);
      assertSame(buffer7, buffer4);
      assertNotSame(buffer7, buffer0);
      assertNotSame(buffer7, buffer3);
      assertNotSame(buffer7, buffer1);
      assertNotSame(buffer7, buffer2);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer7);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer6);
      assertEquals(15L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals(5L, buffer5.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer7.exhausted());
      assertEquals(5L, buffer7.completeSegmentByteCount());
      assertEquals(15L, buffer7.size());
      assertEquals(15L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(5L, buffer4.completeSegmentByteCount());
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer7.equals((Object)buffer6));
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer3));
      assertFalse(buffer7.equals((Object)buffer1));
      assertFalse(buffer7.equals((Object)buffer2));
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(int1 == int0);
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer6));
      assertEquals(5, buffer_UnsafeCursor1.end);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertEquals(5, int1);
      
      List<Integer> list0 = buffer5.segmentSizes();
      assertSame(buffer5, buffer7);
      assertNotSame(buffer5, buffer2);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer7);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer6);
      assertEquals(15L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals(5L, buffer5.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(15L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(5L, buffer4.completeSegmentByteCount());
      assertNotNull(list0);
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer6));
      
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(buffer5);
      assertEquals(15L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals(5L, buffer5.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(15L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(5L, buffer4.completeSegmentByteCount());
      assertNotNull(realBufferedSink3);
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer6));
      
      String string0 = realBufferedSink3.toString();
      assertSame(buffer5, buffer7);
      assertNotSame(buffer5, buffer2);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSink3, realBufferedSink1);
      assertNotSame(realBufferedSink3, realBufferedSink2);
      assertNotSame(realBufferedSink3, realBufferedSink0);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer7);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer6);
      assertEquals(15L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals(5L, buffer5.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(15L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(5L, buffer4.completeSegmentByteCount());
      assertNotNull(string0);
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer6));
      assertEquals("buffer([hex=2d313532363000ffffffffffffffff])", string0);
      
      RealBufferedSink realBufferedSink4 = new RealBufferedSink(realBufferedSink2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(realBufferedSink4);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer5));
      assertFalse(buffer2.equals((Object)buffer4));
      assertTrue(buffer2.equals((Object)buffer6));
      assertFalse(buffer2.equals((Object)buffer7));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(realBufferedSink4.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink4.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink4.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink4.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink3));
      
      short short0 = buffer0.readShortLe();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals((short)12589, short0);
      
      ByteString byteString2 = new ByteString(buffer_UnsafeCursor1.data);
      assertEquals(15L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals(5L, buffer5.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer7.exhausted());
      assertEquals(5L, buffer7.completeSegmentByteCount());
      assertEquals(15L, buffer7.size());
      assertEquals(8192, byteString2.size());
      assertEquals(15L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(5L, buffer4.completeSegmentByteCount());
      assertNotNull(byteString2);
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer7.equals((Object)buffer6));
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer3));
      assertFalse(buffer7.equals((Object)buffer1));
      assertFalse(buffer7.equals((Object)buffer2));
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer6));
      assertEquals(5, buffer_UnsafeCursor1.end);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertEquals(0, buffer_UnsafeCursor1.start);
      
      byteString1.write(buffer6);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer7);
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer6);
      assertNotSame(buffer2, buffer7);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(buffer3, buffer7);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer6);
      assertNotSame(buffer3, buffer5);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertNotSame(realBufferedSink0, realBufferedSink4);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer6.exhausted());
      assertEquals(16L, buffer6.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(16, byteString1.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer7));
      assertFalse(buffer6.equals((Object)buffer1));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer5));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer6));
      assertFalse(buffer2.equals((Object)buffer7));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(buffer3.equals((Object)buffer7));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer6));
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink4));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      
      List<Integer> list1 = realBufferedSink0.buffer.segmentSizes();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer3, buffer7);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer6);
      assertNotSame(buffer3, buffer5);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertNotSame(realBufferedSink0, realBufferedSink4);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertNotSame(list1, list0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer7));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer6));
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink4));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      InputStream inputStream0 = buffer0.inputStream();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(inputStream0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink1);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      
      Buffer buffer1 = realBufferedSink1.buffer;
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      Buffer buffer2 = new Buffer();
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      
      Buffer buffer3 = buffer2.writeDecimalLong(99999999978L);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(11L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(11L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(buffer3);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      
      Buffer buffer4 = realBufferedSink1.buffer;
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertSame(buffer4, buffer1);
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer0));
      
      // Undeclared exception!
      try { 
        buffer4.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      short short0 = buffer0.readShortLe();
      assertSame(buffer0, buffer1);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((short)12589, short0);
      
      byte byte0 = (byte)48;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(realBufferedSource0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSource0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(hashingSource0);
      
      ByteString byteString1 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString1, byteString0);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(20, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      Buffer buffer3 = buffer0.clone();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer3.completeSegmentByteCount());
      assertEquals(3L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer3);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer3.completeSegmentByteCount());
      assertEquals(3L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertNotNull(realBufferedSink1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(realBufferedSink2);
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      
      Buffer buffer4 = buffer3.writeShortLe((byte)48);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer3);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer4.size());
      assertEquals(3L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(3L, buffer3.completeSegmentByteCount());
      assertEquals(5L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      
      Buffer buffer5 = realBufferedSink0.buffer();
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer5);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(buffer5);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer4));
      assertTrue(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      
      long long0 = buffer2.read(realBufferedSource0.buffer, 100L);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer5);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer1);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer4));
      assertTrue(buffer2.equals((Object)buffer5));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals((-1L), long0);
      
      Buffer buffer6 = realBufferedSink2.buffer();
      assertNotSame(realBufferedSink2, realBufferedSink0);
      assertNotSame(realBufferedSink2, realBufferedSink1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer5);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer3);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertTrue(buffer6.exhausted());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(0L, buffer6.size());
      assertNotNull(buffer6);
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer4));
      assertTrue(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer0));
      assertTrue(buffer6.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer1));
      assertFalse(buffer6.equals((Object)buffer3));
      
      byte byte1 = ObjectStreamConstants.TC_CLASSDESC;
      assertFalse(byte1 == byte0);
      assertEquals((byte)114, byte1);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      int int1 = buffer3.hashCode();
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer5);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer6);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer3.completeSegmentByteCount());
      assertEquals(5L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(int1 == int0);
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(buffer3.equals((Object)buffer6));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer7 = new Buffer();
      assertEquals(0L, buffer7.size());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertTrue(buffer7.exhausted());
      assertNotNull(buffer7);
      assertFalse(buffer7.equals((Object)buffer3));
      assertTrue(buffer7.equals((Object)buffer5));
      assertFalse(buffer7.equals((Object)buffer4));
      assertFalse(buffer7.equals((Object)buffer1));
      assertFalse(buffer7.equals((Object)buffer0));
      assertTrue(buffer7.equals((Object)buffer2));
      assertTrue(buffer7.equals((Object)buffer6));
      
      Pipe pipe0 = new Pipe((short)12589);
      assertNotNull(pipe0);
      
      Buffer buffer8 = pipe0.buffer;
      assertNotSame(buffer8, buffer4);
      assertNotSame(buffer8, buffer6);
      assertNotSame(buffer8, buffer7);
      assertNotSame(buffer8, buffer3);
      assertNotSame(buffer8, buffer0);
      assertNotSame(buffer8, buffer5);
      assertNotSame(buffer8, buffer1);
      assertNotSame(buffer8, buffer2);
      assertEquals(0L, buffer8.completeSegmentByteCount());
      assertTrue(buffer8.exhausted());
      assertEquals(0L, buffer8.size());
      assertNotNull(buffer8);
      assertTrue(buffer8.equals((Object)buffer2));
      assertFalse(buffer8.equals((Object)buffer4));
      assertTrue(buffer8.equals((Object)buffer5));
      assertFalse(buffer8.equals((Object)buffer3));
      assertFalse(buffer8.equals((Object)buffer0));
      assertTrue(buffer8.equals((Object)buffer7));
      assertTrue(buffer8.equals((Object)buffer6));
      assertFalse(buffer8.equals((Object)buffer1));
      
      // Undeclared exception!
      try { 
        buffer2.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      long long0 = (-922337203685477580L);
      Buffer buffer1 = buffer0.writeDecimalLong((-922337203685477580L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertNotNull(buffer1);
      
      short short0 = buffer0.readShortLe();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(17L, buffer0.size());
      assertEquals((short)14637, short0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(17L, buffer0.size());
      assertEquals(17L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(realBufferedSink0);
      
      ByteString byteString0 = realBufferedSink0.buffer.sha512();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(17L, buffer0.size());
      assertEquals(17L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(64, byteString0.size());
      assertNotNull(byteString0);
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(17L, buffer0.size());
      assertEquals(17L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      
      Buffer buffer3 = buffer1.writeUtf8("E`=X7K6");
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertEquals(24L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(24L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(24L, buffer3.size());
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      
      short short1 = buffer3.readShort();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(22L, buffer0.size());
      assertEquals(22L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(22L, buffer3.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(short1 == short0);
      assertEquals((short)12850, short1);
      
      int int0 = buffer1.readInt();
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(18L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(18L, buffer1.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertEquals(858994482, int0);
      
      // Undeclared exception!
      try { 
        buffer2.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string0 = buffer0.readUtf8Line();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNull(string0);
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = buffer0.toString();
      assertNotSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(string1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals("[size=0]", string1);
      
      long long0 = (-1152921504606846976L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.equals((Object)buffer1));
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertNotNull(buffer2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, 8192, 8192, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      Buffer buffer2 = realBufferedSink0.buffer.clone();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(buffer2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readUnsafe();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer_UnsafeCursor0.buffer);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(hashingSource0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Buffer buffer3 = realBufferedSource0.buffer.writeIntLe((-910));
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(4L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertNotNull(buffer3);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSource1);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      Buffer buffer4 = realBufferedSource0.buffer;
      assertSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(4L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x72
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1526L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[3] = (byte)48;
      long long0 = buffer0.indexOfElement(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertEquals(32, byteString0.size());
      assertEquals(3L, long0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(9, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)48, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      long long1 = buffer0.indexOf((byte)48, 3L);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      assertNull(buffer2);
      
      Buffer buffer3 = buffer1.copyTo((OutputStream) byteArrayOutputStream0);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertEquals("-1526", byteArrayOutputStream0.toString());
      assertEquals(5, byteArrayOutputStream0.size());
      assertEquals(5L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertNotNull(buffer3);
      
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertNotNull(inflater0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertNotNull(inflaterSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      ByteString byteString0 = buffer0.sha512();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertNotNull(byteString0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<8EX5`E8Se`*mZ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeShortLe((-1));
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink1);
      
      String string0 = realBufferedSink1.buffer.toString();
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(string0);
      assertEquals("[hex=ffff]", string0);
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertTrue(uS_ASCII0.canEncode());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertNotNull(uS_ASCII0);
      
      ByteString byteString1 = buffer0.sha256();
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      Buffer buffer1 = realBufferedSource0.buffer.writeIntLe(73);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      
      Buffer buffer2 = buffer1.copyTo(buffer_UnsafeCursor0.buffer, (long) 2, (long) 2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(6L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(6L, buffer2.size());
      assertEquals(6L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer3 = realBufferedSink0.buffer.writeDecimalLong(2248L);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(6L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      
      long long0 = buffer1.read(realBufferedSink0.buffer, (long) 2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer3));
      assertEquals(2L, long0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      long long1 = buffer_UnsafeCursor0.offset;
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
      
      Buffer buffer4 = new Buffer();
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer4.readUnsafe();
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor1);
      assertFalse(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      
      Buffer buffer5 = realBufferedSink1.buffer.emitCompleteSegments();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer5, buffer2);
      assertSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer0);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer5.exhausted());
      assertEquals(8L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertNotNull(buffer5);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer0));
      
      Buffer buffer6 = realBufferedSink1.buffer;
      assertSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer2);
      assertSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer1);
      assertFalse(buffer6.exhausted());
      assertEquals(8L, buffer6.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertNotNull(buffer6);
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer1));
      
      US_ASCII uS_ASCII1 = (US_ASCII)Charset.defaultCharset();
      assertSame(uS_ASCII1, uS_ASCII0);
      assertEquals("US-ASCII", uS_ASCII1.displayName());
      assertEquals("US-ASCII", uS_ASCII1.name());
      assertTrue(uS_ASCII1.canEncode());
      assertTrue(uS_ASCII1.isRegistered());
      assertEquals("US-ASCII", uS_ASCII1.toString());
      assertNotNull(uS_ASCII1);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = realBufferedSource0.buffer.readUnsafe();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer_UnsafeCursor2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer6));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor0));
      assertEquals((-1), buffer_UnsafeCursor2.end);
      assertEquals((-1L), buffer_UnsafeCursor2.offset);
      assertEquals((-1), buffer_UnsafeCursor2.start);
      assertFalse(buffer_UnsafeCursor2.readWrite);
      
      boolean boolean3 = buffer_UnsafeCursor2.buffer.rangeEquals((-4262L), byteString0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertNotSame(byteString0, byteString1);
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer6));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals((-1), buffer_UnsafeCursor2.end);
      assertEquals((-1L), buffer_UnsafeCursor2.offset);
      assertEquals((-1), buffer_UnsafeCursor2.start);
      assertFalse(buffer_UnsafeCursor2.readWrite);
      assertFalse(boolean3);
      
      ByteString byteString2 = buffer_UnsafeCursor0.buffer.hmacSha1(byteString0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertEquals(20, byteString2.size());
      assertNotNull(byteString2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer6));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      short short0 = realBufferedSink0.buffer.readShort();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer6));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer5));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      GzipSink gzipSink0 = new GzipSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(gzipSink0);
      
      Timeout timeout0 = gzipSink0.timeout();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(timeout0);
      
      gzipSink0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      gzipSink0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      String string0 = buffer0.readUtf8Line(10L);
      assertEquals(9L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(string0);
      assertEquals("\u001F\uFFFD\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(9L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      buffer0.close();
      assertEquals(9L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      
      Buffer buffer1 = (Buffer)realBufferedSink0.buffer.emit();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(9L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      assertEquals(9L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSink1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      
      Buffer buffer2 = new Buffer();
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      
      Buffer buffer3 = buffer0.writeUtf8("\u001F\uFFFD\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(21L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(21L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      
      Buffer buffer4 = realBufferedSource0.buffer();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(21L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertTrue(buffer4.equals((Object)buffer1));
      assertTrue(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(21, byteString0.size());
      assertNotNull(byteString0);
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("XX\",N !HS");
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      ByteString byteString0 = buffer0.sha256();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      byteString0.write(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.write(byteString0);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertNotNull(realBufferedSink1);
      
      HashingSink hashingSink0 = HashingSink.hmacSha1(buffer0, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertNotNull(hashingSink0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)7;
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(8, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte)7, (byte)7, (byte)7, (byte)7, (byte)7, (byte)7}, byteArray0);
      
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(4, options0.size());
      assertNotNull(options0);
      
      int int0 = realBufferedSink1.buffer.selectPrefix(options0);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(byteString0, byteString1);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertEquals(4, options0.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals(0, int0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink1.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertNotNull(realBufferedSource0);
      assertFalse(byteString0.equals((Object)byteString1));
      
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(8, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(8, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBufferR[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(8, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(8, byteString1.size());
      assertNotNull(byteBuffer0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte)7, (byte)7, (byte)7, (byte)7, (byte)7, (byte)7}, byteArray0);
      
      int int1 = ObjectStreamConstants.baseWireHandle;
      assertFalse(int1 == int0);
      assertEquals(8257536, int1);
      
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writableSegment((-2489));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)75;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)75}, byteArray0);
      
      String string0 = byteString0.hex();
      assertEquals(2, byteString0.size());
      assertNotNull(string0);
      assertEquals("004b", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)75}, byteArray0);
      
      int int0 = byteString0.lastIndexOf(byteArray0, (int) (byte)75);
      assertEquals(2, byteString0.size());
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)75}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeByte((byte)75);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      long long0 = buffer0.indexOfElement(byteString0);
      assertSame(buffer0, buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2, byteString0.size());
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)75}, byteArray0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      Buffer buffer3 = buffer2.emitCompleteSegments();
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      
      try { 
        buffer2.readUtf8LineStrict((long) (byte)75);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(224L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      short short0 = buffer1.readShortLe();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals((short)12850, short0);
      
      boolean boolean0 = buffer0.rangeEquals((-471L), byteString0, (int) (short)12850, (int) (short)12850);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertFalse(boolean0);
      
      Segment segment0 = buffer0.head;
      assertNotNull(segment0);
      
      long long0 = buffer1.indexOf(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertEquals((-1L), long0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      long long1 = buffer1.indexOfElement(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertTrue(long1 == long0);
      assertEquals((-1L), long1);
      
      long long2 = buffer_UnsafeCursor0.resizeBuffer((short)12850);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8190L, buffer0.completeSegmentByteCount());
      assertEquals(12850L, buffer0.size());
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(1L, long2);
      
      buffer0.require((short)12850);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8190L, buffer0.completeSegmentByteCount());
      assertEquals(12850L, buffer0.size());
      
      Buffer buffer2 = buffer1.buffer();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(8190L, buffer0.completeSegmentByteCount());
      assertEquals(12850L, buffer0.size());
      assertEquals(8190L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(12850L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(8190L, buffer2.completeSegmentByteCount());
      assertEquals(12850L, buffer2.size());
      assertNotNull(buffer2);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      ByteString byteString1 = buffer_UnsafeCursor0.buffer.sha512();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(8190L, buffer0.completeSegmentByteCount());
      assertEquals(12850L, buffer0.size());
      assertEquals(64, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(8190L, buffer0.completeSegmentByteCount());
      assertEquals(12850L, buffer0.size());
      assertEquals(8190L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(12850L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(8190L, buffer2.completeSegmentByteCount());
      assertEquals(12850L, buffer2.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer3 = realBufferedSink0.buffer();
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8190L, buffer0.completeSegmentByteCount());
      assertEquals(12850L, buffer0.size());
      assertEquals(8190L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(12850L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(8190L, buffer2.completeSegmentByteCount());
      assertEquals(12850L, buffer2.size());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short short1 = buffer_UnsafeCursor0.buffer.readShortLe();
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(12848L, buffer0.size());
      assertEquals(8188L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(short1 == short0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((short)52, short1);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8LineStrict((-471L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -471
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertNull(buffer1);
      
      // Undeclared exception!
      try { 
        buffer0.write((Buffer) null, 8L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(10000000000000L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(14L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(14L, buffer1.size());
      assertNotNull(buffer1);
      
      long long0 = buffer1.readDecimalLong();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(10000000000000L, long0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = buffer0.readString(charset0);
      assertSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(string0);
      assertEquals("", string0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(realBufferedSink0);
      
      GzipSink gzipSink0 = new GzipSink(realBufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(gzipSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8CodePoint(65536);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(bufferedSink0);
      
      byte[] byteArray0 = null;
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        byteString0.sha512();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(2067L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      short short0 = buffer1.readShortLe();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals((short)12338, short0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)122;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(5, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)69, (byte)69, (byte)122, (byte)0, (byte)0}, byteArray0);
      
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5, byteString0.size());
      assertNotNull(hashingSink0);
      assertArrayEquals(new byte[] {(byte)69, (byte)69, (byte)122, (byte)0, (byte)0}, byteArray0);
      
      Buffer buffer2 = (Buffer)hashingSink0.delegate();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5, byteString0.size());
      assertEquals(2L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer2);
      assertArrayEquals(new byte[] {(byte)69, (byte)69, (byte)122, (byte)0, (byte)0}, byteArray0);
      
      ByteString byteString1 = hashingSink0.hash();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5, byteString0.size());
      assertEquals(32, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)69, (byte)69, (byte)122, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = buffer0.rangeEquals((long) (byte)69, byteString1);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5, byteString0.size());
      assertEquals(32, byteString1.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)69, (byte)69, (byte)122, (byte)0, (byte)0}, byteArray0);
      
      Pipe pipe0 = new Pipe((byte)69);
      assertNotNull(pipe0);
      
      long long0 = buffer2.readHexadecimalUnsignedLong();
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(byteString0, byteString1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5, byteString0.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals(103L, long0);
      assertArrayEquals(new byte[] {(byte)69, (byte)69, (byte)122, (byte)0, (byte)0}, byteArray0);
      
      Buffer buffer3 = buffer1.writeDecimalLong(9999999999999977L);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(16L, buffer3.size());
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16L, buffer1.size());
      assertNotNull(buffer3);
      
      Buffer buffer4 = new Buffer();
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer3));
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5, byteString0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(16L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(buffer2.equals((Object)buffer4));
      assertArrayEquals(new byte[] {(byte)69, (byte)69, (byte)122, (byte)0, (byte)0}, byteArray0);
      
      short short1 = buffer3.readShort();
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(14L, buffer3.size());
      assertFalse(buffer0.exhausted());
      assertEquals(14L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(14L, buffer1.size());
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(short1 == short0);
      assertEquals((short)14649, short1);
      
      Buffer buffer5 = buffer3.writeShort((byte)69);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer5);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer5);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer0);
      assertSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer4);
      assertSame(buffer5, buffer1);
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(16L, buffer3.size());
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16L, buffer1.size());
      assertFalse(buffer5.exhausted());
      assertEquals(16L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertNotNull(buffer5);
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer4));
      
      Integer integer0 = new Integer((-577));
      assertNotNull(integer0);
      assertEquals((-577), (int)integer0);
      
      long long1 = buffer5.indexOfElement(byteString1, 3014L);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer5);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer5);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer0);
      assertSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer4);
      assertSame(buffer5, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(16L, buffer3.size());
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16L, buffer1.size());
      assertFalse(buffer5.exhausted());
      assertEquals(16L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(5, byteString0.size());
      assertEquals(32, byteString1.size());
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(long1 == long0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals((-1L), long1);
      assertArrayEquals(new byte[] {(byte)69, (byte)69, (byte)122, (byte)0, (byte)0}, byteArray0);
      
      try { 
        buffer1.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=16 content=39393939393939393939393937370045\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer1 = new Buffer();
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      byte[] byteArray0 = new byte[8];
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer2 = buffer1.writeShortLe((-1));
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertNotNull(buffer2);
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer((byte)0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, long0);
      
      int int0 = buffer1.readUtf8CodePoint();
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.equals((Object)buffer0));
      assertEquals(65533, int0);
      
      String string0 = buffer2.toString();
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertNotNull(string0);
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals("[hex=ff]", string0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      InputStream inputStream0 = buffer0.inputStream();
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(inputStream0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      
      Buffer buffer3 = new Buffer();
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      
      Buffer buffer4 = buffer_UnsafeCursor0.buffer.writeIntLe(5);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(4L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer1));
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer3);
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer1));
      
      ByteString byteString0 = realBufferedSource0.buffer.sha256();
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer1);
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer1));
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      
      Buffer buffer5 = buffer_UnsafeCursor0.buffer.writeShort((-1107));
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer5, buffer2);
      assertSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer3);
      assertSame(buffer5, buffer4);
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(6L, buffer5.size());
      assertNotNull(buffer5);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString byteString1 = buffer5.snapshot();
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer5, buffer2);
      assertSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer3);
      assertSame(buffer5, buffer4);
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(6L, buffer5.size());
      assertEquals(6, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer6 = new Buffer();
      assertEquals(0L, buffer6.size());
      assertTrue(buffer6.exhausted());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertNotNull(buffer6);
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer4));
      assertTrue(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer1));
      assertFalse(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer0));
      
      long long1 = buffer0.indexOfElement(byteString1, 4L);
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer5, buffer2);
      assertSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer3);
      assertSame(buffer5, buffer4);
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(6L, buffer5.size());
      assertEquals(6, byteString1.size());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(long1 == long0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(4L, long1);
      
      Buffer buffer7 = realBufferedSource1.buffer();
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer7, buffer6);
      assertNotSame(buffer7, buffer0);
      assertNotSame(buffer7, buffer5);
      assertNotSame(buffer7, buffer3);
      assertNotSame(buffer7, buffer2);
      assertNotSame(buffer7, buffer4);
      assertNotSame(buffer7, buffer1);
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertEquals(0L, buffer7.size());
      assertTrue(buffer7.exhausted());
      assertNotNull(buffer7);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer5));
      assertTrue(buffer7.equals((Object)buffer6));
      assertFalse(buffer7.equals((Object)buffer2));
      assertFalse(buffer7.equals((Object)buffer4));
      assertFalse(buffer7.equals((Object)buffer1));
      assertTrue(buffer7.equals((Object)buffer3));
      
      String string1 = buffer7.readUtf8();
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer7, buffer6);
      assertNotSame(buffer7, buffer0);
      assertNotSame(buffer7, buffer5);
      assertNotSame(buffer7, buffer3);
      assertNotSame(buffer7, buffer2);
      assertNotSame(buffer7, buffer4);
      assertNotSame(buffer7, buffer1);
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertEquals(0L, buffer7.size());
      assertTrue(buffer7.exhausted());
      assertNotNull(string1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer5));
      assertTrue(buffer7.equals((Object)buffer6));
      assertFalse(buffer7.equals((Object)buffer2));
      assertFalse(buffer7.equals((Object)buffer4));
      assertFalse(buffer7.equals((Object)buffer1));
      assertTrue(buffer7.equals((Object)buffer3));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Buffer buffer8 = buffer7.writeShort((-1));
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer8);
      assertNotSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer7, buffer6);
      assertNotSame(buffer7, buffer0);
      assertNotSame(buffer7, buffer5);
      assertNotSame(buffer7, buffer3);
      assertSame(buffer7, buffer8);
      assertNotSame(buffer7, buffer2);
      assertNotSame(buffer7, buffer4);
      assertNotSame(buffer7, buffer1);
      assertNotSame(buffer8, buffer2);
      assertNotSame(buffer8, buffer3);
      assertNotSame(buffer8, buffer1);
      assertNotSame(buffer8, buffer6);
      assertNotSame(buffer8, buffer4);
      assertSame(buffer8, buffer7);
      assertNotSame(buffer8, buffer0);
      assertNotSame(buffer8, buffer5);
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertFalse(buffer7.exhausted());
      assertEquals(2L, buffer7.size());
      assertFalse(buffer8.exhausted());
      assertEquals(2L, buffer8.size());
      assertEquals(0L, buffer8.completeSegmentByteCount());
      assertNotNull(buffer8);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer7.equals((Object)buffer6));
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer5));
      assertFalse(buffer7.equals((Object)buffer3));
      assertFalse(buffer7.equals((Object)buffer2));
      assertFalse(buffer7.equals((Object)buffer4));
      assertFalse(buffer7.equals((Object)buffer1));
      assertFalse(buffer8.equals((Object)buffer2));
      assertFalse(buffer8.equals((Object)buffer3));
      assertFalse(buffer8.equals((Object)buffer1));
      assertFalse(buffer8.equals((Object)buffer6));
      assertFalse(buffer8.equals((Object)buffer4));
      assertFalse(buffer8.equals((Object)buffer0));
      assertFalse(buffer8.equals((Object)buffer5));
      
      Integer integer0 = new Integer((-905));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-905), (int)integer0);
      
      byte byte0 = buffer0.readByte();
      assertSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer8);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer8));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals((byte)5, byte0);
      
      Buffer buffer9 = realBufferedSource0.buffer;
      assertNotSame(buffer9, buffer2);
      assertNotSame(buffer9, buffer7);
      assertNotSame(buffer9, buffer6);
      assertNotSame(buffer9, buffer8);
      assertNotSame(buffer9, buffer4);
      assertNotSame(buffer9, buffer0);
      assertNotSame(buffer9, buffer1);
      assertNotSame(buffer9, buffer5);
      assertNotSame(buffer9, buffer3);
      assertEquals(0L, buffer9.size());
      assertEquals(0L, buffer9.completeSegmentByteCount());
      assertTrue(buffer9.exhausted());
      assertNotNull(buffer9);
      assertFalse(buffer9.equals((Object)buffer2));
      assertTrue(buffer9.equals((Object)buffer6));
      assertFalse(buffer9.equals((Object)buffer7));
      assertTrue(buffer9.equals((Object)buffer3));
      assertFalse(buffer9.equals((Object)buffer8));
      assertFalse(buffer9.equals((Object)buffer4));
      assertFalse(buffer9.equals((Object)buffer0));
      assertFalse(buffer9.equals((Object)buffer1));
      assertFalse(buffer9.equals((Object)buffer5));
      
      Buffer buffer10 = (Buffer)buffer9.emit();
      assertNotSame(buffer9, buffer2);
      assertNotSame(buffer9, buffer7);
      assertNotSame(buffer9, buffer6);
      assertNotSame(buffer9, buffer8);
      assertNotSame(buffer9, buffer4);
      assertNotSame(buffer9, buffer0);
      assertNotSame(buffer9, buffer1);
      assertNotSame(buffer9, buffer5);
      assertSame(buffer9, buffer10);
      assertNotSame(buffer9, buffer3);
      assertSame(buffer10, buffer9);
      assertNotSame(buffer10, buffer3);
      assertNotSame(buffer10, buffer8);
      assertNotSame(buffer10, buffer7);
      assertNotSame(buffer10, buffer6);
      assertNotSame(buffer10, buffer2);
      assertNotSame(buffer10, buffer5);
      assertNotSame(buffer10, buffer0);
      assertNotSame(buffer10, buffer4);
      assertNotSame(buffer10, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer8);
      assertNotSame(buffer3, buffer10);
      assertNotSame(buffer3, buffer9);
      assertNotSame(buffer3, buffer5);
      assertNotSame(buffer3, buffer6);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer7);
      assertNotSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(0L, buffer9.size());
      assertEquals(0L, buffer9.completeSegmentByteCount());
      assertTrue(buffer9.exhausted());
      assertEquals(0L, buffer10.completeSegmentByteCount());
      assertTrue(buffer10.exhausted());
      assertEquals(0L, buffer10.size());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(buffer10);
      assertFalse(buffer9.equals((Object)buffer2));
      assertTrue(buffer9.equals((Object)buffer6));
      assertFalse(buffer9.equals((Object)buffer7));
      assertTrue(buffer9.equals((Object)buffer3));
      assertFalse(buffer9.equals((Object)buffer8));
      assertFalse(buffer9.equals((Object)buffer4));
      assertFalse(buffer9.equals((Object)buffer0));
      assertFalse(buffer9.equals((Object)buffer1));
      assertFalse(buffer9.equals((Object)buffer5));
      assertTrue(buffer10.equals((Object)buffer6));
      assertFalse(buffer10.equals((Object)buffer8));
      assertFalse(buffer10.equals((Object)buffer7));
      assertFalse(buffer10.equals((Object)buffer2));
      assertFalse(buffer10.equals((Object)buffer5));
      assertFalse(buffer10.equals((Object)buffer0));
      assertFalse(buffer10.equals((Object)buffer4));
      assertTrue(buffer10.equals((Object)buffer3));
      assertFalse(buffer10.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer6));
      assertFalse(buffer3.equals((Object)buffer8));
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer7));
      assertFalse(buffer3.equals((Object)buffer4));
      assertTrue(buffer3.equals((Object)buffer9));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      assertFalse(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer6));
      assertFalse(buffer3.equals((Object)buffer8));
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer10));
      assertFalse(buffer3.equals((Object)buffer7));
      assertFalse(buffer3.equals((Object)buffer4));
      assertTrue(buffer3.equals((Object)buffer9));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      
      Buffer buffer11 = realBufferedSink0.buffer();
      assertNotSame(buffer3, buffer11);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer8);
      assertNotSame(buffer3, buffer10);
      assertNotSame(buffer3, buffer9);
      assertNotSame(buffer3, buffer5);
      assertNotSame(buffer3, buffer6);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer7);
      assertNotSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer11, buffer2);
      assertNotSame(buffer11, buffer8);
      assertNotSame(buffer11, buffer10);
      assertNotSame(buffer11, buffer3);
      assertNotSame(buffer11, buffer4);
      assertNotSame(buffer11, buffer1);
      assertNotSame(buffer11, buffer5);
      assertNotSame(buffer11, buffer9);
      assertNotSame(buffer11, buffer0);
      assertNotSame(buffer11, buffer6);
      assertNotSame(buffer11, buffer7);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer11.completeSegmentByteCount());
      assertTrue(buffer11.exhausted());
      assertEquals(0L, buffer11.size());
      assertNotNull(buffer11);
      assertFalse(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer6));
      assertFalse(buffer3.equals((Object)buffer8));
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer10));
      assertFalse(buffer3.equals((Object)buffer7));
      assertFalse(buffer3.equals((Object)buffer4));
      assertTrue(buffer3.equals((Object)buffer9));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer11.equals((Object)buffer2));
      assertFalse(buffer11.equals((Object)buffer8));
      assertTrue(buffer11.equals((Object)buffer6));
      assertTrue(buffer11.equals((Object)buffer9));
      assertFalse(buffer11.equals((Object)buffer4));
      assertFalse(buffer11.equals((Object)buffer1));
      assertFalse(buffer11.equals((Object)buffer5));
      assertTrue(buffer11.equals((Object)buffer10));
      assertFalse(buffer11.equals((Object)buffer0));
      assertFalse(buffer11.equals((Object)buffer7));
      assertTrue(buffer11.equals((Object)buffer3));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer11.readAndWriteUnsafe();
      assertNotSame(buffer3, buffer11);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer8);
      assertNotSame(buffer3, buffer10);
      assertNotSame(buffer3, buffer9);
      assertNotSame(buffer3, buffer5);
      assertNotSame(buffer3, buffer6);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer7);
      assertNotSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer11, buffer2);
      assertNotSame(buffer11, buffer8);
      assertNotSame(buffer11, buffer10);
      assertNotSame(buffer11, buffer3);
      assertNotSame(buffer11, buffer4);
      assertNotSame(buffer11, buffer1);
      assertNotSame(buffer11, buffer5);
      assertNotSame(buffer11, buffer9);
      assertNotSame(buffer11, buffer0);
      assertNotSame(buffer11, buffer6);
      assertNotSame(buffer11, buffer7);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer11.completeSegmentByteCount());
      assertTrue(buffer11.exhausted());
      assertEquals(0L, buffer11.size());
      assertNotNull(buffer_UnsafeCursor1);
      assertFalse(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer6));
      assertFalse(buffer3.equals((Object)buffer8));
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer10));
      assertFalse(buffer3.equals((Object)buffer7));
      assertFalse(buffer3.equals((Object)buffer4));
      assertTrue(buffer3.equals((Object)buffer9));
      assertTrue(buffer3.equals((Object)buffer11));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer11.equals((Object)buffer2));
      assertFalse(buffer11.equals((Object)buffer8));
      assertTrue(buffer11.equals((Object)buffer6));
      assertTrue(buffer11.equals((Object)buffer9));
      assertFalse(buffer11.equals((Object)buffer4));
      assertFalse(buffer11.equals((Object)buffer1));
      assertFalse(buffer11.equals((Object)buffer5));
      assertTrue(buffer11.equals((Object)buffer10));
      assertFalse(buffer11.equals((Object)buffer0));
      assertFalse(buffer11.equals((Object)buffer7));
      assertTrue(buffer11.equals((Object)buffer3));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      
      // Undeclared exception!
      try { 
        buffer3.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = new Buffer();
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      Buffer buffer2 = buffer1.writeLong(1000L);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(8L, buffer2.size());
      assertNotNull(buffer2);
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      
      String string0 = buffer2.toString();
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(8L, buffer2.size());
      assertNotNull(string0);
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals("[hex=00000000000003e8]", string0);
      
      Buffer buffer3 = buffer0.writeUtf8CodePoint((-2608));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(1L, buffer3.size());
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      
      Segment segment0 = buffer2.head;
      assertNotNull(segment0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      int int0 = buffer2.readUtf8CodePoint();
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(7L, buffer2.size());
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[9];
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = buffer2.read(byteArray0);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)3, (byte) (-24), (byte)0, (byte)0}, byteArray0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      InputStream inputStream0 = buffer0.inputStream();
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertNotNull(inputStream0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      
      byteArray0[4] = (byte)113;
      byteArray0[1] = (byte)0;
      Buffer buffer4 = new Buffer();
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer1));
      assertTrue(buffer4.equals((Object)buffer2));
      
      SegmentPool.byteCount = (long) 0;
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      Buffer buffer5 = buffer4.writeIntLe((byte)113);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer1);
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(4L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals(4L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertNotNull(buffer5);
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      
      ByteString byteString0 = realBufferedSource0.readByteString((long) 0);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer5);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer4);
      assertEquals(4L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      
      Buffer buffer6 = buffer1.writeShort(0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer5);
      assertSame(buffer1, buffer6);
      assertSame(buffer6, buffer1);
      assertSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer0);
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer6.exhausted());
      assertEquals(2L, buffer6.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertNotNull(buffer6);
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer3));
      
      ByteString byteString1 = buffer6.snapshot();
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer5);
      assertSame(buffer1, buffer6);
      assertSame(buffer6, buffer1);
      assertSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer0);
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer6.exhausted());
      assertEquals(2L, buffer6.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(2, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer3));
      
      Buffer buffer7 = new Buffer();
      assertEquals(0L, buffer7.size());
      assertTrue(buffer7.exhausted());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertNotNull(buffer7);
      assertFalse(buffer7.equals((Object)buffer3));
      assertFalse(buffer7.equals((Object)buffer2));
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer1));
      assertFalse(buffer7.equals((Object)buffer6));
      assertFalse(buffer7.equals((Object)buffer5));
      assertFalse(buffer7.equals((Object)buffer4));
      
      ByteString byteString2 = new ByteString(byteArray0);
      assertEquals(9, byteString2.size());
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)113, (byte)3, (byte) (-24), (byte)0, (byte)0}, byteArray0);
      
      long long0 = buffer0.indexOfElement(byteString2, (long) 0);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString2, byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(9, byteString2.size());
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals((-1L), long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)113, (byte)3, (byte) (-24), (byte)0, (byte)0}, byteArray0);
      
      ByteString byteString3 = realBufferedSource1.readByteString((long) (byte)0);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer6);
      assertSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer7);
      assertEquals(0, byteString3.size());
      assertEquals(4L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertNotNull(byteString3);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertTrue(byteString3.equals((Object)byteString0));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer6));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer7));
      
      Buffer buffer8 = new Buffer();
      assertEquals(0L, buffer8.size());
      assertTrue(buffer8.exhausted());
      assertEquals(0L, buffer8.completeSegmentByteCount());
      assertNotNull(buffer8);
      assertTrue(buffer8.equals((Object)buffer7));
      assertFalse(buffer8.equals((Object)buffer4));
      assertFalse(buffer8.equals((Object)buffer5));
      assertFalse(buffer8.equals((Object)buffer3));
      assertFalse(buffer8.equals((Object)buffer0));
      assertFalse(buffer8.equals((Object)buffer1));
      assertFalse(buffer8.equals((Object)buffer6));
      assertFalse(buffer8.equals((Object)buffer2));
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer9 = buffer_UnsafeCursor0.buffer;
      assertNull(buffer9);
      
      buffer0.readFrom(inputStream0);
      buffer9.readAndWriteUnsafe();
  }
}
