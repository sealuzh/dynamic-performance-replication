/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:48:51 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.8664195522433147E-8);
      assertEquals(1.8664195676472666E-8, rationalNumber0.doubleValue(), 0.01);
      assertEquals(53578521, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0L);
      String string0 = rationalNumber0.toString();
      assertEquals("0", string0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-2147483647", string0);
      
      int int0 = rationalNumber0.intValue();
      assertEquals((-2147483647), int0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      int int0 = rationalNumber0.intValue();
      assertEquals(0, int0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0L, long0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.1474836449361475E9));
      int int0 = rationalNumber0.intValue();
      assertEquals((-2147483645), int0);
      assertEquals((-2.147483645E9), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.3678140931006055E-6);
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.3678132E-6F, float0, 0.01F);
      assertEquals(1.3678131676638024E-6, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.6000000000000227);
      String string0 = rationalNumber0.toString();
      assertEquals("3/5 (0.6)", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-842.5));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-842.5", string0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(2, rationalNumber0.divisor);
      assertEquals((-842L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(944.8);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      int int0 = rationalNumber0.intValue();
      assertEquals(944, int0);
      
      int int1 = rationalNumber1.intValue();
      assertEquals((-944), int1);
      assertEquals((-944.8), rationalNumber1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(3842, 11);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("349.273", string0);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(349, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-1877L), 0L);
      rationalNumber0.toString();
      // Undeclared exception!
      try { 
        rationalNumber0.intValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("2147483647", string0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1371.00316863023));
      assertEquals((-1371.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2147483648L));
      RationalNumber rationalNumber1 = RationalNumber.valueOf((-2147483648L));
      rationalNumber1.toString();
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(1, (-2147483647));
      String string0 = rationalNumber2.toDisplayString();
      assertEquals("-0", string0);
      
      String string1 = rationalNumber0.toDisplayString();
      assertEquals("-2147483647", string1);
      
      String string2 = rationalNumber0.toString();
      assertEquals("-2,147,483,647", string2);
      
      rationalNumber2.floatValue();
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(1, 2147483652L);
      assertEquals((-4.65661288175101E-10), rationalNumber3.doubleValue(), 0.01);
      
      String string3 = rationalNumber2.toString();
      assertEquals("1/-2147483647 (-0)", string3);
      
      RationalNumber rationalNumber4 = rationalNumber0.negate();
      assertEquals(2.14748365E9F, rationalNumber4.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483661L), (-2147483661L));
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = rationalNumber0.negate();
      rationalNumber2.toString();
      RationalNumber rationalNumber3 = RationalNumber.valueOf((-1));
      assertEquals((-1L), rationalNumber3.longValue());
      assertEquals((-1), rationalNumber3.numerator);
      
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod(2147483652L, 1);
      RationalNumber rationalNumber5 = rationalNumber1.negate();
      rationalNumber4.toDisplayString();
      RationalNumber rationalNumber6 = new RationalNumber(29701, 1);
      rationalNumber4.toDisplayString();
      String string0 = rationalNumber4.toDisplayString();
      assertEquals("-2147483644", string0);
      
      rationalNumber6.toString();
      String string1 = rationalNumber5.toString();
      assertEquals("1", string1);
      
      String string2 = rationalNumber6.toString();
      assertEquals("29,701", string2);
      
      rationalNumber4.intValue();
      rationalNumber5.doubleValue();
      int int0 = rationalNumber1.intValue();
      assertEquals((-1), int0);
      
      RationalNumber rationalNumber7 = RationalNumber.factoryMethod(1, (-4L));
      assertEquals((-4), rationalNumber7.divisor);
      assertEquals((short)0, rationalNumber7.shortValue());
      assertEquals(0L, rationalNumber7.longValue());
      
      rationalNumber0.negate();
      rationalNumber6.toDisplayString();
      rationalNumber4.longValue();
      assertEquals((-2.147483644E9), rationalNumber4.doubleValue(), 0.01);
      
      String string3 = rationalNumber5.toDisplayString();
      assertEquals("1", string3);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1.0));
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-1), 1);
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      String string0 = rationalNumber2.toString();
      assertEquals("1", string0);
      assertEquals(1, rationalNumber2.divisor);
      
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(1, (-2147483670L));
      rationalNumber3.floatValue();
      String string1 = rationalNumber0.toDisplayString();
      assertEquals("-1", string1);
      
      RationalNumber rationalNumber4 = RationalNumber.valueOf(4.656613E-10F);
      assertEquals(4.656613E-10F, rationalNumber4.floatValue(), 0.01F);
      
      RationalNumber.factoryMethod(1, 1);
      rationalNumber0.doubleValue();
      assertEquals((-1.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals(1, rationalNumber0.divisor);
      
      String string2 = rationalNumber3.toDisplayString();
      assertEquals("0", string2);
      assertEquals(1, rationalNumber3.numerator);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(266.574199);
      rationalNumber0.negate();
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(2147483670L, 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 2147483670, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }
}
