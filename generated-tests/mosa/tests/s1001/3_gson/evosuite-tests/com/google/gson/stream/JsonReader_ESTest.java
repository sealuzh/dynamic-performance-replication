/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:18:30 GMT 2018
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.google.gson.stream.MalformedJsonException");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=A ])B)");
      char[] charArray0 = new char[1];
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0e!-+.|:sYu");
      StringReader stringReader1 = new StringReader("0e!-+.|:sYu");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.getPath();
      boolean boolean0 = jsonReader0.nextBoolean();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("END_ARRAY");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.getPath();
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=A ])B)");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=A ])B)");
      StringReader stringReader1 = new StringReader("=A ])B)");
      char[] charArray0 = new char[3];
      stringReader1.read(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      StringReader stringReader0 = new StringReader(",h");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{g5E[a&zTW");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{g5E[a&zTW");
      StringReader stringReader1 = new StringReader("+s&qZ?8V`Wd\"s");
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[2] = ']';
      charArray0[2] = 'u';
      charArray0[3] = '*';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.skip(1L);
      charArrayReader0.read();
      StringReader stringReader2 = new StringReader("45\"okfMVaJ}'P4k");
      stringReader2.read(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("NULL");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 9;
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.getPath();
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NUL");
      stringReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was END_DOCUMENT at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.skipValue();
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was END_DOCUMENT at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=A ])B)");
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[4];
      stringReader0.read(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      JsonReader jsonReader0 = new JsonReader(lineNumberReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("//9gFyV}k");
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.hasNext();
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" path ");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
      
      try { 
        jsonReader1.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t\"rus");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("t\"rus");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("com.google.gson.internal.JsonReaderInternalAccess");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("'X{;ta&goeJj+jKv@");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertNotNull(jsonReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      assertNotNull(jsonReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
      
      try { 
        jsonReader1.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("true");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("true");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertNotNull(jsonReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.nextBoolean();
      assertTrue(boolean0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader0.isLenient());
      
      int int0 = jsonReader0.doPeek();
      assertEquals(17, int0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.peeked = 939;
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      StringReader stringReader0 = new StringReader("{g5E[a&zTW");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("true");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      assertNotNull(bufferedReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JsonReader jsonReader0 = new JsonReader(bufferedReader0);
      assertNotNull(jsonReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("true");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertNotNull(jsonReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader0.isLenient());
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.BOOLEAN, jsonToken0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(" +oj#C");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertNotNull(jsonReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      StringReader stringReader0 = new StringReader(".*39zbIx-X-NSn(!v,N");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=A ])B)");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'=', 'A', ' ', ']'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'=', 'A', ' ', ']'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {';'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {';'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader1);
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {';'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertNotNull(string0);
      assertEquals("$", string0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertArrayEquals(new char[] {';'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("true");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean1 = jsonReader0.hasNext();
      assertTrue(boolean1);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(boolean1 == boolean0);
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[9];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)4;
      byteArray0[4] = (byte)92;
      charArray0[1] = '4';
      charArray0[2] = 'b';
      charArray0[3] = '\'';
      charArray0[4] = '2';
      charArray0[5] = '4';
      charArray0[6] = 'H';
      charArray0[7] = 'b';
      charArray0[8] = 'Y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '4', 'b', '\'', '2', '4', 'H', 'b', 'Y'}, charArray0);
      
      charArrayReader0.mark((-808));
      assertArrayEquals(new char[] {'\u0000', '4', 'b', '\'', '2', '4', 'H', 'b', 'Y'}, charArray0);
      
      long long0 = charArrayReader0.skip(1L);
      assertEquals(1L, long0);
      assertArrayEquals(new char[] {'\u0000', '4', 'b', '\'', '2', '4', 'H', 'b', 'Y'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertEquals(52, int0);
      assertArrayEquals(new char[] {'\u0000', '4', 'b', '\'', '2', '4', 'H', 'b', 'Y'}, charArray0);
      
      StringReader stringReader0 = new StringReader("45\"okfMVaJ}'P4k");
      assertNotNull(stringReader0);
      
      int int1 = stringReader0.read(charArray0);
      assertEquals(9, int1);
      assertArrayEquals(new char[] {'4', '5', '\"', 'o', 'k', 'f', 'M', 'V', 'a'}, charArray0);
      assertFalse(int1 == int0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.peeked = (int) (byte)6;
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was BOOLEAN at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("true");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = 'h';
      charArray0[2] = '!';
      charArray0[3] = 'h';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'}', 'h', '!', 'h'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'}', 'h', '!', 'h'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'}', 'h', '!', 'h'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader1);
      assertArrayEquals(new char[] {'}', 'h', '!', 'h'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
      
      try { 
        jsonReader1.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
      
      try { 
        jsonReader1.endArray();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("true");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      int int0 = jsonReader0.doPeek();
      assertEquals(17, int0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.nextBoolean();
      assertTrue(boolean0);
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("true");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertNotNull(jsonReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      StringReader stringReader1 = new StringReader("K");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("Expected name");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader2);
      assertNotNull(bufferedReader0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(bufferedReader0);
      assertNotNull(jsonReader0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
      
      jsonReader1.nextNull();
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.isLenient();
      assertFalse(boolean0);
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      StringReader stringReader0 = new StringReader("*/");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(42, int0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("//9gFyV}k");
      assertNotNull(stringReader0);
      
      stringReader0.mark(36);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader("f '8SDT");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'n', 'n', 'W'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'n', 'n', 'W'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'n', 'n', 'W'}, charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      
      long long0 = charArrayReader2.skip((-9223372036854775808L));
      assertEquals(0L, long0);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertArrayEquals(new char[] {'n', 'n', 'W'}, charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      
      int int0 = charArrayReader1.read();
      assertEquals(110, int0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertArrayEquals(new char[] {'n', 'n', 'W'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader2);
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'n', 'n', 'W'}, charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertArrayEquals(new char[] {'n', 'n', 'W'}, charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("true");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.BOOLEAN, jsonToken0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.toString();
      assertNotNull(string0);
      assertEquals("JsonReader at line 1 column 5 path $", string0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      assertNotNull(jsonReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("FLkLtEt0G+fYN7zrr");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '5'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'5', '5', '5', '5'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'5', '5', '5', '5'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertEquals("5555", string0);
      assertArrayEquals(new char[] {'5', '5', '5', '5'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      StringReader stringReader0 = new StringReader("{g5E[a&zTW");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.beginObject();
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertNotNull(string0);
      assertEquals("$.", string0);
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      StringReader stringReader0 = new StringReader("{g5E[a&zTW");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.beginObject();
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{g5E[a&zTW");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
      
      try { 
        jsonReader1.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '4';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader2);
      assertNotNull(jsonReader1);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
      
      double double0 = jsonReader1.nextDouble();
      assertEquals(44.0, double0, 0.01);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(jsonReader1, jsonReader0);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'5', '5'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'5', '5'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      long long0 = charArrayReader0.skip((-555L));
      assertEquals(0L, long0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertArrayEquals(new char[] {'5', '5'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      int int0 = charArrayReader1.read();
      assertEquals(53, int0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertArrayEquals(new char[] {'5', '5'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      StringReader stringReader0 = new StringReader("45\"okfMVaJ}'P4k");
      assertNotNull(stringReader0);
      
      int int1 = stringReader0.read(charArray0);
      assertEquals(2, int1);
      assertArrayEquals(new char[] {'4', '5'}, charArray0);
      assertFalse(int1 == int0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader1);
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'4', '5'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader0.isLenient());
      
      long long1 = jsonReader0.nextLong();
      assertEquals(5L, long1);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertArrayEquals(new char[] {'4', '5'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(long1 == long0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oI$@/o&d#czMNv");
      assertFalse(boolean0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader1);
      assertNotNull(jsonReader1);
      assertArrayEquals(new char[] {'4', '5'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
      
      try { 
        jsonReader1.endObject();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      StringReader stringReader0 = new StringReader("Ou>cA)Tq'Em,i");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.peeked = (-1288);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("true");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.BOOLEAN, jsonToken0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("true");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = ']';
      charArray0[2] = '{';
      charArray0[3] = 'z';
      charArray0[4] = 'K';
      charArray0[5] = 'z';
      charArray0[6] = '*';
      charArray0[7] = '?';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {')', ']', '{', 'z', 'K', 'z', '*', '?'}, charArray0);
      
      long long0 = charArrayReader0.skip(1L);
      assertEquals(1L, long0);
      assertArrayEquals(new char[] {')', ']', '{', 'z', 'K', 'z', '*', '?'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertEquals(93, int0);
      assertArrayEquals(new char[] {')', ']', '{', 'z', 'K', 'z', '*', '?'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertNotNull(string0);
      assertEquals("$", string0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      stringReader0.mark(93);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      int int1 = jsonReader0.doPeek();
      assertEquals(5, int1);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(int1 == int0);
      assertFalse(jsonReader0.isLenient());
      
      String string1 = jsonReader0.toString();
      assertNotNull(string1);
      assertEquals("JsonReader at line 1 column 5 path $", string1);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{g5E[a&zTW");
      assertNotNull(stringReader0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      assertNotNull(mockFileReader0);
      assertFalse(fileDescriptor0.valid());
      
      StringReader stringReader1 = new StringReader("ZfDbuzc@PWKAa3");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = 'b';
      charArray0[2] = '*';
      charArray0[3] = '|';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, int0);
      assertNotSame(stringReader0, stringReader1);
      assertArrayEquals(new char[] {'{', 'g', '5', 'E'}, charArray0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '(';
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'#', '('}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'#', '('}, charArray0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '+';
      int int0 = stringReader0.read(charArray1);
      assertEquals(1, int0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'N'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      int int1 = stringReader0.read(charArray1);
      assertEquals(1, int1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'U'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(int1 == int0);
      
      jsonReader0.close();
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertNotNull(string0);
      assertEquals("$", string0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      charArray0[1] = '[';
      charArray0[2] = '>';
      charArray0[3] = 'O';
      charArray0[4] = 'n';
      charArray0[5] = '!';
      charArray0[6] = '\'';
      charArray0[7] = 'R';
      charArray0[8] = 'O';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'5', '[', '>', 'O', 'n', '!', '\'', 'R', 'O'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'5', '[', '>', 'O', 'n', '!', '\'', 'R', 'O'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      charArrayReader0.reset();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertArrayEquals(new char[] {'5', '[', '>', 'O', 'n', '!', '\'', 'R', 'O'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'5', '[', '>', 'O', 'n', '!', '\'', 'R', 'O'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pyfh");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '_';
      charArray0[2] = '{';
      charArray0[3] = 'l';
      charArray0[4] = 'Q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'4', '_', '{', 'l', 'Q'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'4', '_', '{', 'l', 'Q'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader1);
      assertNotNull(jsonReader1);
      assertArrayEquals(new char[] {'4', '_', '{', 'l', 'Q'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
      
      jsonReader1.setLenient(true);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(jsonReader1, jsonReader0);
      assertArrayEquals(new char[] {'4', '_', '{', 'l', 'Q'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertTrue(jsonReader1.isLenient());
      
      jsonReader1.skipValue();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(jsonReader1, jsonReader0);
      assertArrayEquals(new char[] {'4', '_', '{', 'l', 'Q'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertTrue(jsonReader1.isLenient());
      
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      StringReader stringReader0 = new StringReader(".*39zbIx-X-NSn(!v,N");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 19 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{g5E[a&zTW");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = 'C';
      charArray0[2] = 'Y';
      charArray0[3] = '~';
      charArray0[4] = ')';
      charArray0[5] = 'E';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'T', 'C', 'Y', '~', ')', 'E'}, charArray0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader1);
      assertArrayEquals(new char[] {'T', 'C', 'Y', '~', ')', 'E'}, charArray0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
      
      try { 
        jsonReader1.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'5', '5', '5', '5'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'5', '5', '5', '5'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      
      int int0 = jsonReader0.nextInt();
      assertEquals(5555, int0);
      assertArrayEquals(new char[] {'5', '5', '5', '5'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = '5';
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }
}
