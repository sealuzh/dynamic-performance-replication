/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:27:53 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import com.google.re2j.Simplify;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Simplify_ESTest extends Simplify_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp0;
      Simplify.simplify(regexpArray0[2]);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.subs = regexpArray0;
      regexp1.max = (-13);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-10);
      regexp0.subs = regexpArray0;
      regexp0.max = (-13);
      regexp0.max = 2;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp2.subs = regexpArray0;
      regexp2.max = (-25);
      Regexp regexp3 = Simplify.simplify(regexp2);
      regexp3.subs = regexpArray0;
      Simplify.simplify(regexp3);
      Regexp regexp4 = new Regexp(regexp_Op1);
      Simplify.simplify(regexp4);
      Regexp regexp5 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.reinit();
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexp3.subs = regexpArray0;
      regexp3.max = 8;
      Regexp regexp4 = Simplify.simplify(regexp3);
      // Undeclared exception!
      try { 
        regexp4.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp0 = Simplify.simplify(regexpArray0[3]);
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.subs = regexpArray0;
      regexp1.max = (-2);
      regexp1.max = (-1);
      regexp1.cap = (-2);
      Simplify.simplify(regexp0);
      Simplify.simplify((Regexp) null);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[4] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.reinit();
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexp3.subs = regexpArray0;
      regexp3.max = (-13);
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexp4.toString();
      Regexp.Op regexp_Op2 = Regexp.Op.REPEAT;
      regexp0.op = regexp_Op2;
      regexp0.cap = (-13);
      Regexp regexp5 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[7];
      regexp3.max = 2;
      intArray0[0] = 3073;
      intArray0[1] = 2;
      intArray0[0] = 2;
      intArray0[4] = 2;
      Regexp regexp6 = new Regexp(regexp_Op0);
      Simplify.simplify(regexp3);
      Regexp regexp7 = Simplify.simplify(regexp0);
      assertNotSame(regexp7, regexp3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp0;
      regexpArray0[4] = regexp0;
      regexp0.reinit();
      Simplify.simplify(regexpArray0[3]);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp2.subs = regexpArray0;
      regexp2.min = (-2);
      regexp2.max = (-2);
      Simplify.simplify(regexp2);
      regexp2.max = (-1);
      Simplify.simplify(regexp2);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp1 = new Regexp((Regexp.Op) null);
      regexpArray0[1] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexp0.reinit();
      Regexp regexp2 = null;
      Simplify.simplify((Regexp) null);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexp3.subs = regexpArray0;
      regexp3.max = (-13);
      Simplify.simplify(regexp3);
      Simplify.simplify((Regexp) null);
      regexp3.max = (-1);
      regexp3.min = 518;
      regexp3.min = 3869;
      Regexp.Op regexp_Op2 = Regexp.Op.ANY_CHAR;
      Regexp regexp4 = new Regexp(regexp_Op2);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp0 = new Regexp((Regexp.Op) null);
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.subs = regexpArray0;
      Regexp regexp2 = Simplify.simplify(regexp1);
      regexp2.reinit();
      Regexp regexp3 = new Regexp(regexp2);
      regexp1.min = 3869;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp4 = new Regexp(regexp_Op1);
      Regexp regexp5 = Simplify.simplify(regexp1);
      regexp5.flags = 0;
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      Regexp.Op regexp_Op2 = Regexp.Op.ALTERNATE;
      Regexp regexp2 = new Regexp(regexp_Op2);
      regexp0.toString();
      regexp0.equals(regexp1);
      Regexp regexp3 = Simplify.simplify(regexp1);
      Simplify.simplify(regexp3);
      Regexp.Op regexp_Op3 = Regexp.Op.CHAR_CLASS;
      Regexp regexp4 = new Regexp(regexp_Op3);
      Simplify.simplify(regexp0);
      Regexp regexp5 = new Regexp(regexp_Op1);
      Simplify.simplify(regexp0);
      Regexp regexp6 = new Regexp(regexp_Op2);
      Regexp regexp7 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp7;
      regexpArray0[1] = regexp1;
      regexp1.reinit();
      regexp6.subs = regexpArray0;
      Simplify.simplify(regexp7);
      Regexp regexp8 = new Regexp(regexp_Op0);
      Simplify.simplify(regexp4);
      Simplify.simplify(regexp6);
      Regexp regexp9 = Simplify.simplify(regexp7);
      assertNotSame(regexp9, regexp5);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp0;
      regexpArray0[4] = regexp0;
      regexp0.reinit();
      Simplify.simplify(regexpArray0[3]);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp2.subs = regexpArray0;
      regexp2.min = (-2);
      regexp2.max = (-2);
      Simplify.simplify(regexp2);
      regexp2.max = (-1);
      regexp2.cap = (-1010);
      regexp2.min = (-1);
      Simplify.simplify(regexp0);
      regexp2.min = 1;
      Regexp regexp3 = Simplify.simplify(regexp2);
      regexp3.min = (-1);
      regexp3.flags = 6660;
      Simplify.simplify(regexp3);
      Regexp.Op regexp_Op2 = Regexp.Op.CHAR_CLASS;
      Regexp regexp4 = new Regexp(regexp_Op2);
      // Undeclared exception!
      try { 
        regexp4.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp0;
      regexpArray0[4] = regexp0;
      regexp0.reinit();
      Simplify.simplify(regexpArray0[3]);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp2.subs = regexpArray0;
      regexp2.min = (-2);
      regexp2.max = (-2);
      Simplify.simplify(regexp2);
      regexp2.max = (-1);
      regexp2.cap = (-1010);
      regexp2.min = (-1);
      regexp2.max = (-2);
      Simplify.simplify(regexp0);
      regexp2.min = 1;
      Regexp regexp3 = Simplify.simplify(regexp2);
      regexp3.min = (-2);
      regexp3.flags = 6660;
      Simplify.simplify(regexp3);
      Regexp.Op regexp_Op2 = Regexp.Op.CHAR_CLASS;
      Regexp regexp4 = new Regexp(regexp_Op2);
      // Undeclared exception!
      try { 
        regexp4.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[2] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.reinit();
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexp3.subs = regexpArray0;
      regexp3.max = 1;
      Regexp regexp4 = Simplify.simplify(regexp3);
      String string0 = regexp4.toString();
      assertEquals("\\B?", string0);
      
      regexp4.max = 1;
      regexp4.name = "B?";
      regexp3.subs = regexpArray0;
      regexp0.cap = 1;
      regexp3.min = 1;
      regexp3.max = 2;
      Regexp regexp5 = new Regexp(regexp_Op0);
      Regexp regexp6 = new Regexp(regexp_Op1);
      Simplify.simplify(regexp5);
      Regexp regexp7 = Simplify.simplify(regexp5);
      regexp0.toString();
      regexp5.max = 199;
      Regexp regexp8 = Simplify.simplify(regexp0);
      Regexp regexp9 = new Regexp(regexp_Op0);
      Simplify.simplify(regexp7);
      Regexp regexp10 = new Regexp(regexp8);
      Simplify.simplify(regexp3);
      Regexp regexp11 = Simplify.simplify(regexp4);
      assertSame(regexp4, regexp11);
      
      Simplify.simplify(regexp5);
      Regexp regexp12 = Simplify.simplify(regexp5);
      assertFalse(regexp12.equals((Object)regexp11));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[2] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp2.subs = regexpArray0;
      regexp2.max = 1;
      Regexp regexp3 = Simplify.simplify(regexp2);
      String string0 = regexp3.toString();
      assertEquals("\\B?", string0);
      
      regexp3.max = 1;
      regexp2.subs = regexpArray0;
      regexp0.equals(regexp2);
      regexp0.cap = 1;
      regexp2.min = 1;
      Regexp regexp4 = new Regexp(regexp_Op0);
      Regexp regexp5 = new Regexp(regexp_Op1);
      Simplify.simplify(regexp4);
      regexp4.cap = 4226;
      regexp0.toString();
      Regexp regexp6 = Simplify.simplify(regexp0);
      regexp3.runes = null;
      Regexp regexp7 = new Regexp(regexp_Op0);
      Regexp regexp8 = new Regexp(regexp2);
      Regexp regexp9 = new Regexp(regexp6);
      Simplify.simplify(regexp2);
      Regexp regexp10 = Simplify.simplify(regexp3);
      Simplify.simplify(regexp3);
      assertSame(regexp3, regexp10);
      
      Regexp regexp11 = new Regexp(regexp_Op1);
      Simplify.simplify(regexp0);
      Simplify.simplify(regexp0);
      assertNotSame(regexp0, regexp10);
  }
}
