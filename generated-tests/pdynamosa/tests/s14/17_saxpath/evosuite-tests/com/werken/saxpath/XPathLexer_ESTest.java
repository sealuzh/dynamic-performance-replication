/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 23:36:06 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">m&40");
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">#");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(9, token0.getTokenType());
      assertEquals(">", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*\"R<R4T");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("*", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("\"", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("R", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("<", token3.getTokenText());
      assertEquals(7, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("os");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wXodC'!4");
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h< IZ+tzMm");
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mkA*/0{B<JiW");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!@8B7yaMwK%");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(23, token0.getTokenType());
      assertEquals("!", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h< IZ+tzMm");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("h", token0.getTokenText());
      
      Token token1 = xPathLexer0.relationalOperator();
      assertNotNull(token1);
      assertEquals("<", token1.getTokenText());
      assertEquals(7, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dh.umrJ;']v!n7n'P");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8d6z1kk<");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("8", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("d", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("6", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("z", token3.getTokenText());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("1", token4.getTokenText());
      
      Token token5 = xPathLexer0.literal();
      assertEquals(27, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      assertNotNull(token5);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/+#2]B%/C3kEU[h");
      boolean boolean0 = xPathLexer0.isIdentifierChar('$');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";.9N_A1/N:ax");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = xPathLexer0.getXPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      String string0 = xPathLexer0.getXPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("9aZ,UQmHPOU-nb");
      Token token0 = xPathLexer0.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      int int0 = xPathLexer0.endPosition();
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*\"R<R4T");
      int int0 = xPathLexer0.currentPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-3026));
      int int0 = xPathLexer0.currentPosition();
      assertEquals((-3026), int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";.9N_A1/N:ax");
      Token token0 = xPathLexer0.slashes();
      assertEquals(";", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(".", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals("", token2.getTokenText());
      assertEquals((-2), token2.getTokenType());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h< IZ+tzMm");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("h", token0.getTokenText());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals('h', char0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("");
      assertEquals("", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setPreviousToken((Token) null);
      assertNull(xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("TO<G6NdnJ5>S");
      Token token0 = new Token(0, "", 0, 0);
      xPathLexer0.setPreviousToken(token0);
      assertEquals(0, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.setPreviousToken(token0);
      assertEquals((-2), token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";.9N_A1/N:ax");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('|');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('4');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      boolean boolean0 = xPathLexer0.isIdentifierChar('-');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      boolean boolean0 = xPathLexer0.isIdentifierChar('2');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r|bn>}&?~F\"");
      boolean boolean0 = xPathLexer0.isIdentifierChar('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume(0);
      assertNull(xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h< IZ+tzMm");
      // Undeclared exception!
      try { 
        xPathLexer0.LA(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8d6z1kk<");
      char char0 = xPathLexer0.LA(384);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-3026));
      // Undeclared exception!
      try { 
        xPathLexer0.operatorName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.consume((-393));
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m[A*(/0s;B<JNWg@");
      xPathLexer0.consume((-954));
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*\"R<R4T");
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-3613));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = null;
      try {
        xPathLexer0 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":oJ-[");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(":", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">");
      String string0 = xPathLexer0.getXPath();
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mk-0");
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h< IZ+tzMm");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("h", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MMp");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("MMp", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("TO G6NdnJ>S");
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MMp");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">");
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wXodC'!4");
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u.+HNm");
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.rightBracket();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")@(`@1+je");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(")", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">h^_9\"M@2");
      Token token0 = new Token(24, ">h^_9\"M@2", 24, 24);
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*\"R<R4T");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("*", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("R", token2.getTokenText());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals(22, token1.getTokenType());
      assertEquals("\"R", token1.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("4", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("T", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k");
      Token token0 = xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(21, token0.getTokenType());
      assertEquals("k", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wXodC'!4");
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("wX", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("odC", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h< IZ+tzMm");
      Token token0 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(18, token0.getTokenType());
      assertEquals("h", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h< IZ+tzMm");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("h", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token1);
      assertEquals("<", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("IZ", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":oJ-[");
      Token token0 = xPathLexer0.at();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(16, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("oJ-", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";.9NDC_A1/N:ax");
      Token token0 = xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("./2\"e,j$ZVKb&`^$[");
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("./", token0.getTokenText());
      assertEquals(12, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("2", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h< IZ+tzMm");
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("h", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h< IZ+tzMm");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(4, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("IZ+tzMm", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r45[C{");
      Token token0 = xPathLexer0.colon();
      assertEquals("r", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("4", token1.getTokenText());
      
      xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("[", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("C", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bL.2lBwTFJm]P;Gv");
      Token token0 = xPathLexer0.dollar();
      assertEquals("b", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("L", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(31, token2.getTokenType());
      assertEquals(".2", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("B:::AiX**$:b0?SRrK");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("B:", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(19, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|Zal).s+P");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(17, token0.getTokenType());
      assertEquals("|", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r45[C{");
      Token token0 = xPathLexer0.colon();
      assertEquals("r", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals("4", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("5", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals("[", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      assertEquals("{", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y6Y(*ky*`9R74i");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("y6Y", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xcVG_xoYL");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("xcVG_xoYL", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werkensaxpath.XPathLexer");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals("o", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("m", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(13, token3.getTokenType());
      assertEquals(".", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("werkensaxpath.XPathLexer", token4.getTokenText());
      assertEquals((-1), token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("v~QY@aqZsr2L/D");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("v", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h< IZ+tzMm");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.notEquals();
      assertEquals("< ", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("Z", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("+", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("tzMm", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("isWA!");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("i", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("sWA", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r45[C{");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("r45", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r|bn>}&?~F\"");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("r", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("|", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("b", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("n", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("m.werken.saxpath.Token", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zlzI*<;GYv})JEz");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("lzI", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("k", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gj!\"S&}G[U#|bL~)@B?");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("g", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("j", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-i{bR~mfXT@i)R");
      Token token0 = xPathLexer0.dollar();
      assertEquals("-", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("i", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h< IZ+tzMm");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("h", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("sgvI{<Ia");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("s", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("gvI", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("fYi){_U");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("fYi", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathexer");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("co", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("m.", token1.getTokenText());
      assertEquals(14, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals("w", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("erken.saxpath.XPathexer", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("TO G6NdnJ>S");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("TO", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("G", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("6", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("N", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("dnJ>S", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werkensaxpath.XPathLexer");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("com.werkensaxpath.XPathLexer", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-i{bR~mfXT@i)R");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("-", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("{", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("bR", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")@(`@1+je");
      Token token0 = xPathLexer0.dots();
      assertEquals(")", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("@", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals("(", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("`@1+je", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";.9N_A1/N:ax");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(".", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("9", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("N", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("_A1", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/+#2]B%/C3kEU[h");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("/+", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.colon();
      Token token1 = xPathLexer0.colon();
      assertEquals("", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("2", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("]", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/+#2]B%/C3kEU[h");
      String string0 = "\\ue$cdL";
      xPathLexer0.setXPath(string0);
      Token token0 = xPathLexer0.nextToken();
      assertEquals("\\ue$cdL", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ZiU");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("ZiU", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("JYklZ%Sg>Ii dYqga");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("J", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("YklZ", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("M_}XchoL7;01.5jDW");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("M_", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("}", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("XchoL7;01.5jDW", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("isWA!");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("i", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("s", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("WA", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V!UzISq';;|rS^hZ");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("V", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V!UISq';;|rS^hZ");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("V", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals("!", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("UISq", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SA};^Cd;M4pJb");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("SA", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*\"R<R4T");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("*", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("\"", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("<", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("R4T", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("v~QY@aqZsr2L/D");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("v", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals("~", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("QY", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">");
      xPathLexer0.setXPath("P^R~:");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("P", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("^R~:", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("TO G6NdnJ>S");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("TO", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("G", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("6", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("NdnJ>S", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MMp");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("MMp", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("", token1.getTokenText());
      
      xPathLexer0.setXPath("MMp");
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bL.2lBwTFJm]P;Gv");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("b", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("L.2lBwTFJm", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("KUfn=u ye\"*<R6+/");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("KUfn", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("=b?*i'H*");
      Token token0 = xPathLexer0.dots();
      assertEquals("=", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("b", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("?", token2.getTokenText());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("*", token3.getTokenText());
      
      Token token4 = xPathLexer0.plus();
      assertEquals("i", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("'", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("H", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r|bn>}&?~F\"");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("r", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals("|", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("b", token2.getTokenText());
      
      xPathLexer0.leftBracket();
      xPathLexer0.not();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("?", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("~", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("F", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("E>DMa`f");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("E", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wXodC'!4");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("w", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals("X", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("o", token2.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("d", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("C", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";.9N_A1/N:ax");
      Token token0 = xPathLexer0.at();
      assertEquals(";", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(".9", token1.getTokenText());
      assertEquals(31, token1.getTokenType());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("_", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("A1/N:ax", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(JwX`$_@fR97@G_w!");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.identifier();
      assertEquals("JwX", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("`", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(26, token2.getTokenType());
      assertEquals("$", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("_", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(16, token4.getTokenType());
      assertEquals("@", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r|bn>}&?~F\"");
      Token token0 = xPathLexer0.dots();
      assertEquals("r", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("|", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("b", token2.getTokenText());
      
      xPathLexer0.leftBracket();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals(">", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("}", token4.getTokenText());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("&", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("?~F\"", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("E>DMa`f");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(">", token1.getTokenText());
      assertEquals(9, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("DMa", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=b?*i'H*");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("=", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";.9N_A1/N:ax");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.getPreviousToken();
      assertEquals(";.9N_A1/N:ax", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":oJ-[");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("J-", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("9aZ,UQmHPOU-nb");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("9", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("aZ,UQmHPOU-nb", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8d6z1kk<");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.not();
      assertEquals("d", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("6", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("z1kk<", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Njr=|7q");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("Nj", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("r", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("=", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals("|", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("7", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      assertEquals("q", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r45[C{");
      Token token0 = xPathLexer0.not();
      assertEquals("r", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("4", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("5", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3)?8-!}");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("3", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/+#2]B%/C3kEU[h");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("/", token0.getTokenText());
      
      xPathLexer0.colon();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("#", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      assertEquals("2", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";.9N_A1/N:ax");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals(";", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("N_", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("A", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(30, token4.getTokenType());
      assertEquals("1", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mk-0");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("m", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("k", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("-", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      assertEquals("0", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/+#2]B%/C3kEU[h");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(11, token0.getTokenType());
      assertEquals("/", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.equals();
      xPathLexer0.star();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.rightParen();
      xPathLexer0.doubleColon();
      xPathLexer0.at();
      xPathLexer0.colon();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("9aZ,UQmHPOU-nb");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("9aZ", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(",", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("UQmHPOU-nb", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/+#2]B%/C3kEU[h");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("/", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("+", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals("", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*\"R<R4T");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("*", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("\"R", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("R", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("4", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (19) (/+)");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("(", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("19", token2.getTokenText());
      assertNotNull(token2);
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wXodC'!4");
      xPathLexer0.setXPath("',m)<+Z''Eqfqz)");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(",m)<+Z", token0.getTokenText());
      assertEquals(27, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals("'", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("Eqfqz)", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r|bn>}&?~F\"");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("r", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals("|", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals("b", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token3 = xPathLexer0.not();
      assertEquals(">", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("}", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("&?~F\"", token5.getTokenText());
      assertEquals((-1), token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/+#2]B%/C3kEU[h");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("/+", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.colon();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("2", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("]", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals("B", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("%/C3kEU[h", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/+#2]B%/C3kEU[h");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("/", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals("+", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("#2]B%/C3kEU[h", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*\"R<R4T");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("", token0.getTokenText());
      assertEquals((-1), token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!;^|9\"M@2");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("TO G6NdnJ>S");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("T", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("O", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("G6NdnJ", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wXodC'!4");
      xPathLexer0.consume(5);
      assertEquals("wXodC'!4", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("-i{bR~mfXT@i)R");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("-", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("B<<,b3].&_`mGUa{BT");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("B", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MMp");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("M", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("M", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("p", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("B<<,b3].&_`mGUa{BT");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("B", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("<", token1.getTokenText());
      assertEquals(7, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("B<<,b3].&_`mGUa{BT");
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }
}
