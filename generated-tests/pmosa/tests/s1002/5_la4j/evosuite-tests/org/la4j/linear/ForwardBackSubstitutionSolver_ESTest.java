/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 20:31:31 GMT 2018
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.linear.ForwardBackSubstitutionSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ForwardBackSubstitutionSolver_ESTest extends ForwardBackSubstitutionSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(17, 17);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      ForwardBackSubstitutionSolver forwardBackSubstitutionSolver0 = new ForwardBackSubstitutionSolver(matrix0);
      MockRandom mockRandom0 = new MockRandom((-271L));
      columnMajorSparseMatrix0.subtract(0.0);
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(17, 0.0, (Random) mockRandom0);
      sparseMatrix0.hadamardProduct(matrix0);
      Locale locale0 = new Locale("", "");
      locale0.stripExtensions();
      NumberFormat.getPercentInstance(locale0);
      SparseVector sparseVector0 = SparseVector.random(17, 0.0, (Random) mockRandom0);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      sparseVector0.mkString(numberFormat0, "");
      forwardBackSubstitutionSolver0.solve(sparseVector0);
      ForwardBackSubstitutionSolver forwardBackSubstitutionSolver1 = new ForwardBackSubstitutionSolver(sparseMatrix0);
      Matrix matrix1 = sparseVector0.toColumnMatrix();
      forwardBackSubstitutionSolver1.applicableTo(matrix1);
      // Undeclared exception!
      try { 
        forwardBackSubstitutionSolver1.solve(sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system can not be solved: coefficient matrix is singular.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }
}
