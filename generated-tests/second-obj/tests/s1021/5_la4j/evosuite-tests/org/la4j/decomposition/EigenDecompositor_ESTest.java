/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:36:45 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.EigenDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositor_ESTest extends EigenDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(16);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      EigenDecompositor eigenDecompositor0 = null;
      try {
        eigenDecompositor0 = new EigenDecompositor(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(3, 3);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor0.applicableTo(denseMatrix0);
      eigenDecompositor0.applicableTo(denseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Random.setNextRandom(2);
      Random.setNextRandom(2);
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(2, mockRandom0);
      denseMatrix0.removeFirstColumn();
      Matrix matrix0 = denseMatrix0.rotate();
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Random.setNextRandom(2);
      Random.setNextRandom(2);
      double[] doubleArray0 = new double[21];
      doubleArray0[15] = (double) 2;
      doubleArray0[1] = 0.5414749117218594;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(2, 2, doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Random.setNextRandom(2);
      DenseMatrix.identity(15);
      Random.setNextRandom(2);
      Random.setNextRandom(2);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 15;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = 0.964;
      doubleArray0[5] = 2001.844658;
      doubleArray0[6] = (double) 1591;
      doubleArray0[7] = (double) 1591;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(2, 2, doubleArray0);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      eigenDecompositor0.decompose();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(3);
      assertEquals(3, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = 3;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(3, 3);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      double[] doubleArray0 = null;
      DenseMatrix denseMatrix1 = DenseMatrix.from1DArray(2, 11, (double[]) null);
      eigenDecompositor0.matrix = (Matrix) denseMatrix1;
      eigenDecompositor0.applicableTo(denseMatrix0);
      DenseMatrix.identity(6);
      Random.setNextRandom(2);
      Random.setNextRandom(2);
      // Undeclared exception!
      try { 
        eigenDecompositor0.decompose();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't decompose rectangle matrix
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Random.setNextRandom(2);
      Random.setNextRandom(2);
      double[] doubleArray0 = new double[21];
      doubleArray0[1] = 0.5414749117218594;
      doubleArray0[10] = (double) 2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(2, 2, doubleArray0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)rowMajorSparseMatrix0.transpose();
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(cCSMatrix0);
      eigenDecompositor0.decompose();
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(0.25, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(5, mockRandom0);
      denseMatrix0.removeFirstColumn();
      Matrix matrix0 = denseMatrix0.rotate();
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      eigenDecompositor0.decompose();
      Random.setNextRandom(5);
      Random.setNextRandom(3105);
      Random.setNextRandom(3105);
      EigenDecompositor eigenDecompositor1 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor1.matrix = matrix0;
      eigenDecompositor1.decompose();
      eigenDecompositor1.decompose();
      eigenDecompositor0.applicableTo(matrix0);
      Matrix matrix1 = matrix0.rotate();
      EigenDecompositor eigenDecompositor2 = new EigenDecompositor(matrix1);
      eigenDecompositor0.decompose();
      // Undeclared exception!
      try { 
        eigenDecompositor2.applicableTo((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }
}
