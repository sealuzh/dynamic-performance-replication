/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 10:00:58 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Arrays;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.CheckClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.RandomCommittee;
import weka.clusterers.SimpleKMeans;
import weka.core.Instances;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.Filter;
import weka.filters.MultiFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CheckClassifier_ESTest extends CheckClassifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      boolean boolean1 = true;
      int int0 = 0;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(true, true, true, true, true, false, 42, true, true, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '42' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.testToString();
      checkClassifier0.getRevision();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(false, false, false, true, false, true, 7, true, false, (-641));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '7' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = 8;
      checkClassifier0.setNumDate(8);
      int int1 = 1;
      checkClassifier0.setNumRelational(1);
      checkClassifier0.printAttributeSummary(false, true, false, false, true, true, (-2324));
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(true, false, true, true, false, false, (-676));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-676' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(false, false, true, true, false, true, (-3017));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-3017' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      int int0 = 24;
      boolean boolean1 = true;
      boolean boolean2 = false;
      boolean boolean3 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(true, true, false, true, true, true, 14);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '14' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      checkClassifier0.listOptions();
      boolean boolean1 = false;
      boolean boolean2 = true;
      boolean boolean3 = true;
      int int0 = (-4930);
      int int1 = 100;
      int int2 = (-1099);
      int int3 = (-1461);
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(false, true, true, true, true, true, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      checkClassifier0.setClassifier(simpleLogistic0);
      checkClassifier0.updateableClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(false, false, false, true, false, true, 4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SMO sMO0 = new SMO();
      checkClassifier0.setClassifier(sMO0);
      boolean[] booleanArray0 = checkClassifier0.multiInstanceHandler();
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      checkClassifier0.m_Classifier = (Classifier) multilayerPerceptron0;
      checkClassifier0.setNumInstances(144);
      checkClassifier0.updateableClassifier();
      checkClassifier0.declaresSerialVersionUID();
      Classifier classifier0 = checkClassifier0.getClassifier();
      checkClassifier0.setClassifier(classifier0);
      checkClassifier0.testToString();
      try { 
        checkClassifier0.makeTestDataset((-1728), 144, 583, (-1728), 2, (-1788), (-1788), 583, 200, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getWords();
      checkClassifier0.multiInstanceHandler();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(false, false, false, false, false, true, 3570);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '3570' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(true, false, false, true, true, true, 1864);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1864' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getRevision();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      CheckClassifier.main(stringArray0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleClassAsNthAttribute(false, false, false, true, true, false, 34, 2403);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '34' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.weightedInstancesHandler();
      CheckClassifier checkClassifier1 = new CheckClassifier();
      boolean[] booleanArray0 = checkClassifier1.instanceWeights(false, false, true, false, false, false, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      boolean[] booleanArray1 = checkClassifier1.canTakeOptions();
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setSilent(true);
      checkClassifier0.setNumDate(640);
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.getOptions();
      boolean[] booleanArray0 = checkClassifier0.canHandleMissing(true, false, false, false, false, false, 2, false, true, 640);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.canTakeOptions();
      boolean boolean0 = true;
      CheckClassifier checkClassifier1 = new CheckClassifier();
      int int0 = 3;
      // Undeclared exception!
      try { 
        checkClassifier1.testsPerClassType(3, true, true, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.canTakeOptions();
      checkClassifier0.listOptions();
      checkClassifier0.doesntUseTestClassVal(true, false, false, false, false, false, 0);
      checkClassifier0.setDebug(true);
      checkClassifier0.setNumDate(0);
      checkClassifier0.setDebug(false);
      checkClassifier0.getOptions();
      checkClassifier0.doTests();
      checkClassifier0.listOptions();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setDebug(true);
      checkClassifier0.setNumDate(640);
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.getOptions();
      // Undeclared exception!
      try { 
        checkClassifier0.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.weightedInstancesHandler();
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = false;
      int int0 = 3;
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(true, true, false, false, true, true, 3, true, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(false, false, false, false, false, false, (-2844), false, false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-2844' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      String string0 = checkClassifier0.getRevision();
      assertEquals("8034", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      CheckClassifier.main(stringArray0);
      CheckClassifier.main(stringArray0);
      boolean[] booleanArray0 = checkClassifier0.instanceWeights(false, false, false, false, false, true, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.weightedInstancesHandler();
      checkClassifier0.multiInstanceHandler();
      checkClassifier0.setNumNominal(0);
      checkClassifier0.getRevision();
      checkClassifier0.weightedInstancesHandler();
      checkClassifier0.canPredict(true, true, true, true, true, false, 0);
      checkClassifier0.listOptions();
      checkClassifier0.printAttributeSummary(true, false, false, false, false, true, 1041);
      // Undeclared exception!
      try { 
        checkClassifier0.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Problem determining ZeroR performance: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setDebug(true);
      checkClassifier0.setSilent(true);
      checkClassifier0.setNumDate(640);
      checkClassifier0.declaresSerialVersionUID();
      boolean[] booleanArray0 = checkClassifier0.testToString();
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      checkClassifier0.getOptions();
      boolean[] booleanArray1 = checkClassifier0.canHandleMissing(true, false, false, false, false, false, 2, false, true, 640);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setDebug(true);
      checkClassifier0.setSilent(true);
      checkClassifier0.setNumDate(640);
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.getOptions();
      boolean[] booleanArray0 = checkClassifier0.canHandleMissing(true, false, false, false, false, false, 2, false, true, 640);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.canTakeOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(true, true, false, true, true, false, 60, true, false, 60);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '60' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      checkClassifier0.canTakeOptions();
      checkClassifier0.listOptions();
      int int0 = 0;
      checkClassifier0.doesntUseTestClassVal(true, false, false, false, false, false, 0);
      boolean boolean1 = false;
      boolean boolean2 = false;
      int int1 = 87;
      EvoSuiteFile evoSuiteFile0 = null;
      try { 
        checkClassifier0.setOptions((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.listOptions();
      CheckClassifier checkClassifier1 = new CheckClassifier();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        checkClassifier1.doesntUseTestClassVal(false, false, true, false, false, true, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      checkClassifier0.canTakeOptions();
      checkClassifier0.listOptions();
      int int0 = 0;
      checkClassifier0.doesntUseTestClassVal(true, false, false, false, false, false, 0);
      boolean boolean1 = false;
      boolean boolean2 = false;
      int int1 = 87;
      EvoSuiteFile evoSuiteFile0 = null;
      try { 
        checkClassifier0.setOptions((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumInstancesRelational(0);
      checkClassifier0.updatingEquality(true, true, true, false, false, false, 0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      checkClassifier0.setOptions(stringArray0);
      assertEquals(1, checkClassifier0.getNumDate());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumInstancesRelational(0);
      checkClassifier0.updatingEquality(true, true, true, false, false, false, 0);
      checkClassifier0.setNumNumeric(34);
      checkClassifier0.canTakeOptions();
      Enumeration enumeration0 = checkClassifier0.listOptions();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumInstancesRelational(0);
      boolean[] booleanArray0 = checkClassifier0.correctBuildInitialisation(false, false, true, false, false, false, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.weightedInstancesHandler();
      boolean[] booleanArray0 = checkClassifier0.datasetIntegrity(true, true, false, false, false, true, 3, true, false);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      boolean[] booleanArray1 = checkClassifier0.canHandleOnlyClass(false, true, true, false, true, 3);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.canTakeOptions();
      Enumeration enumeration0 = new WordTokenizer();
      checkClassifier0.correctBuildInitialisation(false, false, false, false, false, false, 0);
      checkClassifier0.updatingEquality(false, true, false, false, true, false, 0);
      checkClassifier0.setNumNumeric(26);
      checkClassifier0.canTakeOptions();
      Enumeration enumeration1 = checkClassifier0.listOptions();
      assertFalse(enumeration1.equals((Object)enumeration0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      CheckClassifier checkClassifier1 = new CheckClassifier();
      int int0 = 3;
      boolean boolean0 = false;
      boolean boolean1 = false;
      checkClassifier1.testsPerClassType(3, false, false, false);
      boolean boolean2 = false;
      boolean boolean3 = true;
      boolean boolean4 = true;
      boolean boolean5 = false;
      checkClassifier1.updatingEquality(boolean1, boolean3, boolean2, boolean4, boolean0, boolean5, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setDebug(false);
      boolean[] booleanArray0 = checkClassifier0.weightedInstancesHandler();
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      CheckClassifier checkClassifier1 = new CheckClassifier();
      boolean[] booleanArray1 = checkClassifier0.instanceWeights(false, true, true, false, false, false, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      boolean[] booleanArray2 = checkClassifier1.canTakeOptions();
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumRelational(2408);
      checkClassifier0.setDebug(true);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.testsPerClassType(4, true, false, false);
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(true, true, false, false, true, true, 640);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumInstancesRelational(0);
      checkClassifier0.updatingEquality(false, false, true, true, false, false, 0);
      checkClassifier0.setNumNumeric(42);
      checkClassifier0.canTakeOptions();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setDebug(true);
      checkClassifier0.weightedInstancesHandler();
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier0.instanceWeights(false, true, true, false, false, false, 0);
      checkClassifier1.canTakeOptions();
  }
}
