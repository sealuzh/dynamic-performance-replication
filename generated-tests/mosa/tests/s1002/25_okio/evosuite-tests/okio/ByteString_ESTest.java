/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:04:31 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteString.decodeBase64("okio.SegmentPool");
      // Undeclared exception!
      try { 
        ByteString.decodeHex("okio.SegmentPool");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: o
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("M}0gdk2H<AB~.K]34Q");
      charset0.decode(byteBuffer0);
      ByteString byteString0 = ByteString.encodeString("M}0gdk2H<AB~.K]34Q", charset0);
      byteString0.toString();
      byte[] byteArray0 = byteString0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        byteString0.substring((-2539));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byteString0.base64Url();
      // Undeclared exception!
      try { 
        byteString0.substring(17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=000000000000]", string0);
      
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      byteBuffer0.asDoubleBuffer();
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      int int1 = ByteString.codePointIndexToCharIndex("\r", 2);
      assertEquals(1, int1);
      
      ByteString byteString0 = ByteString.encodeUtf8("\r");
      byteString0.md5();
      assertEquals(1, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.base64Url();
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      byte byte0 = byteString0.getByte((byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("M}0gdk2H<AB~.K]34Q", charset0);
      byteString0.toString();
      ByteString byteString1 = byteString0.sha1();
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      int int1 = ByteString.codePointIndexToCharIndex("^y#A[oJ2o[L(Dqnv", 2);
      assertEquals(2, int1);
      
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=000000000000000000]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("M}0gdk2H<AB~.K]34Q", charset0);
      String string0 = byteString0.base64();
      assertEquals("TX0wZ2RrMkg8QUJ+LktdMzRR", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      int int0 = byteString0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("M}0gdk2H<AB~.K]34Q", charset0);
      byteString0.toString();
      String string0 = byteString0.toString();
      assertEquals("[text=M}0gdk2H<AB~.K]34Q]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.md5();
      byteString1.lastIndexOf(byteString0, 16);
      ByteString byteString2 = byteString0.sha512();
      assertNotSame(byteString0, byteString2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString.codePointIndexToCharIndex("\r", (byte)17);
      ByteString byteString0 = ByteString.decodeBase64("\r");
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.equals(hashingSource0);
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex(";%d[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: ;
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("fOeo}+:XX`#lJf9)fM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: O
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
      
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      ByteString byteString1 = hashingSource1.hash();
      int int0 = byteString1.indexOf(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        byteString0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      ByteString byteString0 = hashingSource1.hash();
      byteString0.equals(hashingSource0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString1.hmacSha1(byteString0);
      ByteString byteString3 = byteString2.sha256();
      byteString1.indexOf(byteString3);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("out == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString byteString0 = new ByteString(byteArray0);
      int int1 = byteString0.EMPTY.indexOf(byteArray0);
      assertEquals((-1), int1);
      
      int int2 = ByteString.codePointIndexToCharIndex("out == null", 2);
      assertEquals(2, int2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)0;
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.EMPTY.lastIndexOf(byteString1, 97);
      assertEquals((-1), int0);
      
      int int1 = ByteString.codePointIndexToCharIndex("HmacSHA512", 7);
      assertEquals(7, int1);
      
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      byteString1.toString();
      byteString1.lastIndexOf(byteArray0, (-484));
      ByteString byteString2 = byteString1.sha1();
      assertNotSame(byteString1, byteString2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      Pipe pipe0 = new Pipe(1000000000000L);
      MockPrintStream mockPrintStream0 = new MockPrintStream("n>S V5)V");
      PrintStream printStream0 = mockPrintStream0.append('8');
      byteString0.write(printStream0);
      Buffer buffer0 = pipe0.buffer;
      byteString0.write(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      byteString1.toString();
      byteString1.lastIndexOf(byteString0);
      // Undeclared exception!
      try { 
        byteString1.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      boolean boolean0 = byteString1.EMPTY.endsWith(byteArray0);
      assertSame(byteString1, byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("closed");
      // Undeclared exception!
      try { 
        byteString0.substring(13, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(6)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (int) (byte)74, (int) (byte)74);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=74 byteCount=74
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString1 = byteString0.substring(2);
      assertEquals(5, byteString1.size());
      
      byteString0.utf8();
      int int1 = ByteString.codePointIndexToCharIndex("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", 2);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.equals(hashingSource0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.of(byteArray0);
      byteString1.indexOf(byteString0, (-7));
      // Undeclared exception!
      try { 
        byteString0.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-44);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      inflaterSource0.close();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("('(HJy~*", charset0);
      String string0 = byteString0.toString();
      assertEquals("[hex=000000000000]", string0);
      
      byteString0.toByteArray();
      int int0 = byteString1.indexOf(byteArray0, (int) (byte) (-44));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-44);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      inflaterSource0.close();
      HashingSource hashingSource0 = HashingSource.hmacSha1(inflaterSource0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      ByteString byteString2 = hashingSource0.hash();
      boolean boolean0 = byteString2.equals(byteString0);
      assertFalse(boolean0);
      
      ByteString byteString3 = new ByteString(byteArray0);
      String string0 = byteString2.toString();
      assertTrue(byteString2.equals((Object)byteString1));
      assertEquals("[hex=0000000000000000000000000000000000000000]", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha512();
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = new ByteString(byteArray0);
      int int1 = byteString1.compareTo(byteString2);
      assertEquals(0, int1);
      
      Pipe pipe0 = new Pipe(2);
      int int2 = ByteString.codePointIndexToCharIndex("\u2026]", (-1885));
      assertEquals(2, int2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.sha1();
      Inflater inflater0 = new Inflater();
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.sha512();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString3 = byteString2.substring((int) (byte)20);
      ByteString byteString4 = new ByteString(byteArray0);
      byteString3.lastIndexOf(byteString2, (int) (byte)20);
      byteString0.compareTo(byteString3);
      ByteString byteString5 = byteString4.hmacSha1(byteString1);
      assertFalse(byteString5.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Pipe pipe0 = new Pipe(560L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      ByteString byteString0 = hashingSource1.hash();
      boolean boolean0 = pipe0.sinkClosed;
      ByteString byteString1 = hashingSource1.hash();
      byteString0.toString();
      byteString1.sha512();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      ByteString byteString2 = new ByteString(byteArray0);
      byteString0.compareTo(byteString2);
      ByteString byteString3 = byteString0.sha512();
      assertFalse(byteString3.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      int int1 = ByteString.codePointIndexToCharIndex("\r", (byte)17);
      assertEquals(1, int1);
      
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      byteString1.toString();
      String string0 = byteString1.toString();
      assertEquals("[hex=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]", string0);
      
      byteString1.utf8();
      boolean boolean0 = byteString1.startsWith(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.EMPTY.startsWith(byteArray0);
      String string0 = byteString1.hex();
      assertEquals("000000", string0);
      
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Pipe pipe0 = new Pipe(560L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource.sha1(pipe_PipeSource0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("+Kgs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: +
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      Charset.defaultCharset();
      byteString0.toString();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      byteBuffer0.asDoubleBuffer();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.sha1();
      Inflater inflater0 = new Inflater();
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString0.sha512();
      byteString2.write(buffer0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)39;
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      byteString1.endsWith(byteString2);
      boolean boolean0 = byteString2.rangeEquals(4, byteArray0, (int) (byte)39, (int) (byte)20);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)9;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      byteString0.toString();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString(0L);
      byteString0.compareTo(byteString1);
      ByteString byteString2 = hashingSource0.hash();
      realBufferedSource0.readByteString(0L);
      ByteString byteString3 = byteString1.hmacSha1(byteString2);
      assertNotSame(byteString1, byteString3);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = byteString0.sha1();
      Inflater inflater0 = new Inflater();
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString byteString3 = byteString1.sha512();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString4 = byteString3.substring((int) (byte)20);
      ByteString byteString5 = new ByteString(byteArray0);
      byteString3.lastIndexOf(byteString4, (-36));
      byteString1.compareTo(byteString5);
      ByteString byteString6 = byteString3.hmacSha1(byteString1);
      assertNotSame(byteString0, byteString6);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      Charset.defaultCharset();
      byteString0.toString();
      byteString0.asByteBuffer();
      byteString0.toString();
      ByteString byteString1 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.hmacSha512(byteString1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      ByteString byteString0 = ByteString.encodeString("RfT", charset0);
      byteString0.hex();
      byteString0.toString();
      charset0.decode(byteBuffer0);
      ByteString byteString1 = ByteString.encodeString("", charset0);
      byteString0.toString();
      boolean boolean0 = byteString1.endsWith(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Inflater inflater0 = new Inflater();
      byteString0.equals(hashingSink0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString1.EMPTY.toAsciiUppercase();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteString byteString3 = ByteString.read(byteArrayInputStream0, 2);
      Charset charset0 = Charset.defaultCharset();
      byteString3.string(charset0);
      assertEquals(1, byteArrayInputStream0.available());
      
      ByteString byteString4 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString byteString5 = realBufferedSource0.readByteString(0L);
      boolean boolean0 = byteString2.equals(byteString5);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Pipe pipe0 = new Pipe(1053L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString0.endsWith(byteString1);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 1478, 1478);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Pipe pipe0 = new Pipe(560L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      HashingSource.md5(hashingSource0);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      ByteString byteString0 = hashingSource1.hash();
      boolean boolean0 = pipe0.sinkClosed;
      ByteString byteString1 = byteString0.sha1();
      int int0 = byteString1.indexOf(byteString0, (-1988));
      assertEquals((-1), int0);
      
      hashingSource0.hash();
      ByteString byteString2 = new ByteString(byteArray0);
      byteString1.lastIndexOf(byteString2);
      String string0 = byteString2.utf8;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("q}");
      charset0.decode(byteBuffer0);
      ByteString.encodeString("q}", charset0);
      ByteString byteString3 = byteString0.toAsciiLowercase();
      assertNotSame(byteString0, byteString3);
      
      String string1 = byteString2.toString();
      assertEquals("[hex=00000000]", string1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      byteString0.toAsciiUppercase();
      byteString0.hex();
      byteString0.size();
      ByteString.of(byteArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("M}0gdk2H<AB~.K]34Q", charset0);
      byteString0.toAsciiUppercase();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      byteString0.EMPTY.base64Url();
      byteString0.EMPTY.utf8 = "Jb2^R]G";
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 97);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-44);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      Inflater inflater1 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer();
      HashingSource hashingSource0 = HashingSource.hmacSha1(inflaterSource0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      HashingSource hashingSource1 = HashingSource.sha1(buffer1);
      ByteString byteString2 = hashingSource1.hash();
      byteString1.equals(byteString2);
      byteString0.sha1();
      ByteString byteString3 = new ByteString(byteArray0);
      byteString3.toString();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        ByteString.read(pipedInputStream0, (-32));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -32
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)17;
      byteArray0[0] = (byte)17;
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Inflater inflater0 = new Inflater();
      byteString0.equals(hashingSink0);
      ByteString byteString1 = byteString0.sha1();
      byteString1.EMPTY.toAsciiUppercase();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.reset();
      try { 
        ByteString.read(byteArrayInputStream0, (byte)17);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-44);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("2A=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: 2A=
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      // Undeclared exception!
      try { 
        byteString1.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString.codePointIndexToCharIndex("\r", (byte)17);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha512();
      // Undeclared exception!
      try { 
        ByteString.encodeString("\r", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString byteString3 = new ByteString(byteArray0);
      byteString2.compareTo(byteString3);
      Pipe pipe0 = new Pipe(2);
      Source source0 = pipe0.source();
      HashingSource hashingSource0 = HashingSource.sha256(source0);
      hashingSource0.hash();
      byteString1.substring(0);
  }
}
