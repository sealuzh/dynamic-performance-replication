/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 20:58:37 GMT 2018
 */

package wheel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Component;
import wheel.components.ElExpression;
import wheel.components.StandaloneComponent;
import wheel.util.DynamicSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DynamicSelectModel_ESTest extends DynamicSelectModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      String string0 = "DB51z]s=UlnsSp3Vk_";
      dynamicSelectModel0.value("DB51z]s=UlnsSp3Vk_");
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("DB51z]s=UlnsSp3Vk_");
      dynamicSelectModel1.label("DB51z]s=UlnsSp3Vk_");
      // Undeclared exception!
      dynamicSelectModel1.getValue(59);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "_LCd>:)/'F&mm>o]T";
      ElExpression elExpression0 = new ElExpression("_LCd>:)/'F&mm>o]T");
      elExpression0.subSequence(0, 0);
      DynamicSelectModel dynamicSelectModel0 = null;
      try {
        dynamicSelectModel0 = new DynamicSelectModel(elExpression0, elExpression0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.label("asset/wheel/components/jquery.js?expires=88");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.enumeration("");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.empty(dynamicSelectModel1);
      StandaloneComponent standaloneComponent0 = dynamicSelectModel3.getTopLevelComponent();
      assertNull(standaloneComponent0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection((String) null);
      dynamicSelectModel1.label((String) null);
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getOptionCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression null evaluated to null. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "";
      ActionExpression actionExpression0 = new ActionExpression("");
      ActionExpression actionExpression1 = actionExpression0.event("");
      actionExpression1.getJavascript();
      Any any0 = new Any(errorPage0, (CharSequence) null);
      errorPage0.label();
      DynamicSelectModel dynamicSelectModel0 = any0.selectModel();
      actionExpression1.javascript("");
      dynamicSelectModel0.getComponent();
      any0.wrapSelf();
      actionExpression0.event((String) null);
      String string1 = "text/xml";
      // Undeclared exception!
      try { 
        any0.end("text/xml");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression 'text/xml'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      Object object0 = new Object();
      String string0 = "Could not create DynamicSelection model. Collection attribute was null or not an el-expression.";
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("Could not create DynamicSelection model. Collection attribute was null or not an el-expression.");
      // Undeclared exception!
      try { 
        dynamicSelectModel1.getLabel((-4428));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression Could not create DynamicSelection model. Collection attribute was null or not an el-expression..values() to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("[=");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.label("[=");
      dynamicSelectModel2.reset();
      StandaloneComponent standaloneComponent0 = dynamicSelectModel2.getTopLevelComponent();
      assertNull(standaloneComponent0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("|-8mpXUY8WolJ6");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.label("~3FS]YG?z40GU(|1(");
      dynamicSelectModel0.validate();
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value("$");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.enumeration("$");
      dynamicSelectModel2.validate();
      int int0 = 0;
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getLabel(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression $.values() to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.getComponent();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.label("");
      dynamicSelectModel1.setComponent((Component) null);
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel0.value("");
      // Undeclared exception!
      try { 
        dynamicSelectModel2.translateValue("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Any any0 = new Any(errorPage0, (CharSequence) null);
      DynamicSelectModel dynamicSelectModel0 = any0.selectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("zUzU");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.enumeration("namespace processing feature can only be changed before parsing");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.translator("");
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel3.label("zUzU");
      dynamicSelectModel0.getTopLevelComponent();
      dynamicSelectModel4.setTopLevelComponent((StandaloneComponent) null);
      assertSame(dynamicSelectModel4, dynamicSelectModel3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.collection((String) null);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.empty(mockThaiBuddhistDate0);
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.enumeration("|-8mpXUY8WolJ6");
      // Undeclared exception!
      try { 
        dynamicSelectModel2.getOptionCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression |-8mpXUY8WolJ6.values() evaluated to an object that is not an instance of Collection or Object[]. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }
}
