/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:09:56 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Proxy;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.time.chrono.ChronoLocalDate;
import java.util.List;
import java.util.Properties;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.error.StandardException;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.compile.InsertNode;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.store.access.btree.BTreeController;
import org.apache.derby.impl.store.raw.RawStore;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.apache.derby.impl.store.raw.log.ReadOnly;
import org.apache.derby.impl.store.raw.xact.ConcurrentXactFactory;
import org.databene.commons.ErrorHandler;
import org.databene.commons.Level;
import org.databene.commons.bean.TypedPropertyMutator;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.DBExecutionResult;
import org.databene.jdbacl.DBUtil;
import org.databene.jdbacl.JDBCConnectData;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.gds.impl.wire.isc_db_handle_impl;
import org.firebirdsql.jdbc.FBPreparedStatement;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.command.ddl.CreateTableData;
import org.h2.engine.SessionRemote;
import org.h2.schema.Schema;
import org.h2.tools.Recover;
import org.h2.tools.SimpleResultSet;
import org.h2.value.ValueDecimal;
import org.hsqldb.jdbcDriver;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.Driver;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DBUtil.wrapWithPooledConnection((Connection) null, true);
      DBUtil.getOpenStatementCount();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "[lA,`g5]AM }8");
      DBUtil.close((Statement) null);
      DBUtil.getOpenConnectionCount();
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = ", BranchQual=";
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, ", BranchQual=");
      Level level0 = Level.ignore;
      String string1 = "";
      ErrorHandler errorHandler0 = new ErrorHandler("", level0);
      ErrorHandler.setDefaultLevel(level0);
      // Undeclared exception!
      try { 
        DBUtil.runScript(", BranchQual=", (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBUtil.assertAllDbResourcesClosed(false);
      VersionNumber.valueOf("*zKq8HIGB");
      boolean boolean0 = DBUtil.existsEnvironment("--, BranchQual=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      try { 
        DBUtil.getMetaData((Connection) null, "P$epQoN|l'U)ZR|Y+=D", "--, BranchQual=", false, false, true, false, "S", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultSet resultSet0 = null;
      // Undeclared exception!
      try { 
        DBUtil.closeResultSetAndStatement((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = " block: ";
      jdbcDriver jdbcDriver0 = new jdbcDriver();
      String string1 = "There are unclosed database resources";
      InsertNode insertNode0 = new InsertNode();
      Properties properties0 = insertNode0.targetProperties;
      jdbcDriver0.connect("There are unclosed database resources", (Properties) null);
      // Undeclared exception!
      try { 
        DBUtil.query(" block: ", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getTempFileDeleter();
      boolean boolean0 = true;
      DBUtil.checkReadOnly("pa?>kX*[\"X_1m+", false);
      String string0 = "):$fw7msx'9u}A&:r),";
      // Undeclared exception!
      try { 
        DBUtil.connect("):$fw7msx'9u}A&:r),", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '):$fw7msx'9u}A&:r),.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("C)$H Yvt._Zav^");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "C)$H Yvt._Zav^";
      stringArray0[2] = "C)$H Yvt._Zav^";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      boolean boolean0 = false;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "X8N`Ba", false, stringArray0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      // Undeclared exception!
      try { 
        DBUtil.equivalent((DBUniqueConstraint) null, dBPrimaryKeyConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      Connection connection0 = null;
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow("", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript((String) null, "--S ol;md/h2<%\"I..P=", (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Connection connection0 = null;
      boolean boolean0 = true;
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, true);
      DBUtil.executeUpdate("", (Connection) proxy0);
      DBUtil.resetMonitors();
      String string0 = "";
      String string1 = null;
      char char0 = '9';
      ErrorHandler errorHandler0 = null;
      try {
        errorHandler0 = new ErrorHandler((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name argument cannot be null
         //
         verifyException("ch.qos.logback.classic.LoggerContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf(", BranchQual=");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("Error in executing SQL: ", "#V'/UtttTNj3e}l<hz", versionNumber0);
      List<DBTable> list0 = DBUtil.dependencyOrderedTables(defaultDatabase0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.currentLine((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, ", BranchQual=", true, 652, 652, 2266);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: , BranchQual=
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DBUtil.available("float", "float", "float", "float");
      DBUtil.escape("float");
      String string0 = "`:F<Z]v\"WC ";
      // Undeclared exception!
      try { 
        DBUtil.connect("`:F<Z]v\"WC ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '`:F<Z]v\"WC .env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Random.setNextRandom(59);
      DBUtil.assertAllDbResourcesClosed(false);
      Connection connection0 = null;
      // Undeclared exception!
      try { 
        DBUtil.queryAndSimplify("mo*<>V<^]S:PIO", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBUtil.available("", "", "", "");
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getTempFileDeleter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("CREATE_TABLE", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.NO_ACTION;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      // Undeclared exception!
      try { 
        DBUtil.containsMandatoryColumn(dBForeignKeyConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf(", BranchQual=");
      VersionNumber.valueOf(", ");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("4fq\"y", "#V'/UtttTNj3e}l<hz", versionNumber0);
      DBUtil.existsEnvironment("#V'/UtttTNj3e}l<hz");
      DBUtil.createLoggingStatementHandler((Statement) null, true);
      DBUtil.resetMonitors();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Connection connection0 = null;
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      DBUtil.getOpenStatementCount();
      DBUtil.close((Statement) null);
      String string0 = "se";
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript("se", (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      DBUtil.close((Connection) null);
      DBUtil.getOpenPreparedStatementCount();
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.parseAndSimplifyResultSet(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.countRows("u", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobStorage();
      sessionRemote0.getLobConnection();
      DBUtil.close((Connection) null);
      DBUtil.getOpenPreparedStatementCount();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/databene/B*GDH8%5;`h.env.properties");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "#K\"Gk!Q`*");
      // Undeclared exception!
      try { 
        DBUtil.connect("B*GDH8%5;`h", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC URL specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "ixM\\\"[$";
      Connection connection0 = null;
      boolean boolean0 = true;
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, true);
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("ixM\"[$", (Connection) proxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Recover recover0 = new Recover();
      Recover.execute("t#", "t#");
      recover0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.logMetaData((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = ",";
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "CREATE CONSTRINT ");
      Level level0 = Level.info;
      ErrorHandler errorHandler0 = new ErrorHandler("", level0);
      Level level1 = Level.warn;
      ErrorHandler.setDefaultLevel(level1);
      String string1 = "--t#";
      Connection connection0 = null;
      DBUtil.runScript("--t#", (Connection) null, true, errorHandler0);
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.parseAndSimplifyResultSet(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Random.setNextRandom(59);
      DBUtil.assertAllDbResourcesClosed(true);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "Tried to mutate a database with read-only settings: ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }
}
