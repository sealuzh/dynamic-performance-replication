/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 07:50:08 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.net.URI;
import java.util.regex.Pattern;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.ReferenceType;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      constantPoolGen0.addClass("");
      constantPoolGen0.addDouble((-1761.159981));
      constantPoolGen0.addInteger(3);
      constantPoolGen0.lookupMethodref("d|Iw", (String) null, "3>@G)/{lZX*0$@rVdl#");
      constantPoolGen0.lookupFloat(618.0F);
      String string0 = null;
      constantPoolGen0.lookupNameAndType((String) null, (String) null);
      constantPoolGen0.adjustSize();
      constantPoolGen0.getConstantPool();
      constantPoolGen0.lookupDouble((-1));
      constantPoolGen0.addMethodref("", "", "EGOi");
      constantPoolGen0.lookupString("|t?Kt-*LJEIlO)%R]");
      constantPoolGen0.addUtf8("|t?Kt-*LJEIlO)%R]");
      String string1 = "%";
      constantPoolGen0.lookupInterfaceMethodref("WL?a12q)afc,E+u", (String) null, "%");
      String string2 = "\n";
      constantPoolGen0.addMethodref("\n", "d|Iw", "");
      int int0 = 237;
      GETFIELD gETFIELD0 = null;
      try {
        gETFIELD0 = new GETFIELD((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Negative index value: -1
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addInteger(53);
      int int0 = constantPoolGen0.lookupClass("r)+S5Xj`$Pdu");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ReferenceType referenceType0 = Type.NULL;
      ArrayType arrayType0 = new ArrayType(referenceType0, 47);
      int int0 = constantPoolGen0.addArrayClass(arrayType0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupFloat(1110.4292F);
      int int1 = constantPoolGen0.lookupNameAndType("{;n<% ,u/q", "{;n<% ,u/q");
      assertEquals(2, constantPoolGen0.getSize());
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addDouble(0.0);
      int int0 = constantPoolGen0.addDouble(0.0);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      String string0 = constantPoolGen0.toString();
      assertEquals("1)null\n", string0);
      
      int int0 = constantPoolGen0.lookupNameAndType("#", "TvUohJzP&Yb");
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-1708);
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref("T%!pa*ip4SBM", "T%!pa*ip4SBM", "T%!pa*ip4SBM");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupInterfaceMethodref(")", "*/]bU^.3AVJpOGmR", ")");
      int int1 = constantPoolGen0.lookupString("/Ei\r]lPR");
      assertEquals(2, constantPoolGen0.getSize());
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2022, 1047);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addMethodref("[oZlb", "[oZlb", "[oZlb");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray1 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray1);
      constantPoolGen0.lookupInteger(31);
      int int0 = constantPoolGen0.addDouble(329.900962);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupClass(":");
      assertEquals((-1), int0);
      
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      assertEquals(2, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      String string0 = "";
      String string1 = "";
      constantPoolGen0.addLong(126L);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("CONSTANT_Integer", "JOQG#gt~-|g8oW4dJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"JOQG#gt~-|g8oW4dJ\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(1833.86F);
      int int0 = constantPoolGen0.lookupLong(74L);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2726, 2726);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantLong constantLong0 = new ConstantLong(4680L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(199, 2310);
      constantArray0[2] = (Constant) constantFieldref0;
      constantLong0.copy();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("P:s]OjW|^eL");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte) (-100);
      byteArray0[8] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant.readConstant(byteSequence0);
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantLong constantLong2 = new ConstantLong(constantLong1);
      constantArray0[4] = (Constant) constantLong2;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P:s]OjW|^eL");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      dataOutputStream0.writeDouble(2310);
      constantUtf8_0.dump(dataOutputStream0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(32);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(31);
      constantArray0[0] = (Constant) constantString0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(31, 31);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addInterfaceMethodref((String) null, "{;n<V% ,u/Q", "tnuC");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("", "", "{;n<% ,u/q");
      constantPoolGen0.addLong(1290L);
      ObjectType objectType0 = Type.OBJECT;
      constantPoolGen0.addClass(objectType0);
      String string0 = "'vzT";
      constantPoolGen0.addMethodref("5uWqx>V. $)AZr!x0b1", "5uWqx>V. $)AZr!x0b1", "'vzT");
      constantPoolGen0.lookupFieldref(":U:#Uo1bkb='RZ|", (String) null, (String) null);
      constantPoolGen0.addFloat((-1.0F));
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((String) null, "%", "~2$~NT-_Q2N2AM{e3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getSize();
      constantPoolGen0.lookupLong(1);
      String string0 = "'";
      constantPoolGen0.lookupNameAndType("'", "'");
      constantPoolGen0.getConstantPool();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1, (-1));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantInterfaceMethodref cannot be cast to org.apache.bcel.classfile.ConstantClass
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(31);
      constantString0.setStringIndex(31);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(0.0F);
      constantPoolGen0.toString();
      String string0 = "]sj{Ifsm'_]'uD";
      constantPoolGen0.addInterfaceMethodref("", "]sj{Ifsm'_]'uD", "");
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.getFinalConstantPool();
      Type type0 = null;
      Type[] typeArray0 = new Type[5];
      GETFIELD gETFIELD0 = new GETFIELD();
      // Undeclared exception!
      try { 
        gETFIELD0.getFieldType(constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantClass constantClass0 = new ConstantClass((-1454));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantClass0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("org.apache.bcel.generic.ConstantPoolGen");
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1454
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(0);
      constantArray0[0] = (Constant) constantString0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("L@z~'Z6<y_=p~y");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      DADD dADD0 = new DADD();
      Type type0 = dADD0.getType(constantPoolGen0);
      ArrayType arrayType0 = new ArrayType(type0, 47);
      constantPoolGen0.addArrayClass(arrayType0);
      constantPoolGen0.addUtf8("");
      constantPoolGen0.getConstant(5);
      assertEquals(6, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addNameAndType("", "");
      constantPoolGen0.addString("#");
      constantPoolGen0.addFieldref("#", "hNJqE,oOTsl$;M <xX", "hNJqE,oOTsl$;M <xX");
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addFloat(0.0F);
      constantPoolGen0.lookupNameAndType("", "H)]l|Aug,'Bv> ");
      constantPoolGen0.addClass("hNJqE,oOTsl$;M <xX");
      constantPoolGen0.lookupDouble((-146.281293));
      constantPoolGen0.lookupLong(0L);
      constantPoolGen0.lookupClass("hNJqE,oOTsl$;M <xX");
      constantPoolGen0.lookupFieldref("", "", "");
      int int0 = constantPoolGen0.addFloat(2267.51F);
      assertEquals(12, constantPoolGen0.getSize());
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addFieldref("[olb", "[olb", "[olb");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(0.0F);
      int int0 = constantPoolGen0.lookupFloat(0.0F);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("", "", "{;n<% ,u/q");
      constantPoolGen0.addLong(1290L);
      ObjectType objectType0 = Type.OBJECT;
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(5);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-195), (-195));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2013265918), 5);
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2013265918
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ObjectType objectType0 = Type.STRING;
      constantPoolGen0.addClass(objectType0);
      ConstantDouble constantDouble0 = new ConstantDouble(182);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantPoolGen0.setConstant(3, constantDouble1);
      assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(2109L);
      constantPoolGen0.addString(",B$D[7wtNS1");
      int int0 = constantPoolGen0.addLong(4);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2047, 1047);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2047, 1047);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.toString();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      constantPoolGen0.addInterfaceMethodref("1)CONSTANT_MethodHandle[15](reference_kind = 2047, reference_index = 1047)\n", " vs. ", " vs. ");
      constantPoolGen0.addLong((-2269L));
      int int0 = constantPoolGen0.addLong(1047);
      assertEquals(11, constantPoolGen0.getSize());
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantString constantString0 = new ConstantString(114);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantDouble constantDouble0 = new ConstantDouble(2483.45799325657);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantDouble1, constantPoolGen1);
      int int0 = constantPoolGen0.addDouble(968.7815);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Unknown constant type ");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      Constant constant0 = constantUtf8_1.copy();
      constantArray0[5] = (Constant) constantUtf8_1;
      Constant[] constantArray1 = new Constant[7];
      constantArray1[0] = (Constant) constantUtf8_0;
      constantArray1[1] = (Constant) constantUtf8_1;
      constantArray1[2] = (Constant) constantUtf8_0;
      constantArray1[3] = constant0;
      constantArray1[4] = (Constant) constantUtf8_1;
      constantArray1[5] = (Constant) constantUtf8_0;
      constantArray1[6] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray1);
      assertEquals(7, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Unknown constant type ");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantUtf8_1.copy();
      constantArray0[5] = (Constant) constantUtf8_1;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.getConstantPool();
      LCMP lCMP0 = new LCMP();
      Type type0 = lCMP0.getType(constantPoolGen1);
      String[] stringArray0 = new String[0];
      PUSH pUSH0 = new PUSH(constantPoolGen1, 104.229571958);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionList instructionList1 = instructionList0.copy();
      MethodGen methodGen0 = new MethodGen(98, type0, type0.NO_ARGS, stringArray0, " 6FQPoDH*WyleD", "~bN", instructionList1, constantPoolGen0);
      MethodGen methodGen1 = methodGen0.copy("@1", constantPoolGen0);
      int int0 = constantPoolGen0.addInterfaceMethodref(methodGen1);
      assertEquals(8, constantPoolGen1.getSize());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      int int0 = 1047;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2047, 1047);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2047, 1047);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[0], constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2047
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantString constantString0 = new ConstantString(114);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      int int0 = 2;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2, 2);
      ConstantFloat constantFloat0 = new ConstantFloat(2);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantClass constantClass0 = new ConstantClass(2);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantString constantString0 = new ConstantString(114);
      ConstantLong constantLong0 = new ConstantLong(114);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantPoolGen0.addConstant(constantLong1, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      
      int int0 = constantPoolGen1.lookupInteger(64);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2, 2);
      ConstantFloat constantFloat0 = new ConstantFloat(2);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constantFloat1, constantPoolGen1);
      int int0 = Pattern.UNICODE_CASE;
      assertEquals(64, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(31);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantString0;
      constantString0.setStringIndex(31);
      Constant[] constantArray1 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray1);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-402));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodType1, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodType[16](descriptor_index = -402)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantPoolGen0.addInteger(2);
      int int0 = constantPoolGen0.lookupInteger(2);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2, 2);
      ConstantFloat constantFloat0 = new ConstantFloat(2);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantFloat constantFloat2 = new ConstantFloat(constantFloat1);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2, 1095);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantMethodref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1095
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      ConstantString constantString0 = new ConstantString(114);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = (-3969);
      ConstantClass constantClass0 = new ConstantClass((-3969));
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantClass0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3969
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2, 2);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong(0L);
      constantPoolGen0.addString("~dnqgXP,zP}LgO:Vx{QL+1Z${Gh&g(J0<&:[foZlb");
      constantPoolGen0.addInteger(1);
      int int0 = constantPoolGen0.lookupInteger((-4389));
      assertEquals(8, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("[oZlb", "{;n<V% ,u/q", "{;n<V% ,u/q");
      ConstantInteger constantInteger0 = new ConstantInteger(18);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      DUP dUP0 = new DUP();
      Type type0 = dUP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{;n<V% ,u/q";
      stringArray0[1] = "[oZlb";
      stringArray0[2] = "[oZlb";
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(5, type0, type0.NO_ARGS, stringArray0, "Wyy\u0004yS]d:H[C!<~", "", (InstructionList) null, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = 130;
      ConstantString constantString0 = new ConstantString(130);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(130, 130);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref1, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(256, 909);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("1G_:)9j$kl$v]@gP");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addMethodref("1G_:)9j$kl$v]@gP", "t_", "org.apache.bcel.generic.ConstantPoolGen");
      ConstantInteger constantInteger0 = new ConstantInteger(6);
      int int0 = constantPoolGen0.addConstant(constantArray0[1], constantPoolGen1);
      assertEquals(7, constantPoolGen1.getSize());
      assertEquals(1, int0);
  }
}
