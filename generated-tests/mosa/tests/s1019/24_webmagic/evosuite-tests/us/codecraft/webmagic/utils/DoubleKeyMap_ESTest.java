/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:42:05 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<String, Map<String, Integer>> hashMap0 = new HashMap<String, Map<String, Integer>>();
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>(hashMap0);
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>();
      Integer integer0 = doubleKeyMap1.remove((Object) hashMap0, "");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>(class0);
      Integer integer0 = new Integer((-1));
      DoubleKeyMap<String, String, Object> doubleKeyMap2 = new DoubleKeyMap<String, String, Object>();
      doubleKeyMap2.newMap();
      Map<Object, Map<Object, String>> map0 = doubleKeyMap2.newMap();
      DoubleKeyMap<Object, Object, String> doubleKeyMap3 = new DoubleKeyMap<Object, Object, String>(map0);
      Object object0 = new Object();
      doubleKeyMap3.get((Object) null, (Object) "");
      Map<String, Map<Object, Integer>> map1 = doubleKeyMap3.newMap();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap4 = new DoubleKeyMap<String, Object, Integer>(map1);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      doubleKeyMap4.put("", (Object) doubleKeyMap2, integer2);
      doubleKeyMap4.remove("", (Object) class0);
      DoubleKeyMap<Object, String, String> doubleKeyMap5 = new DoubleKeyMap<Object, String, String>();
      Integer integer3 = new Integer(535);
      doubleKeyMap5.remove((Object) null);
      DoubleKeyMap<String, Object, String> doubleKeyMap6 = new DoubleKeyMap<String, Object, String>();
      Map<Object, String> map2 = doubleKeyMap6.remove((String) null);
      assertNull(map2);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, Map<Object, String>> hashMap0 = new HashMap<String, Map<Object, String>>();
      String string0 = "";
      hashMap0.clear();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap1.put("", "");
      hashMap0.put("", hashMap1);
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(hashMap0);
      doubleKeyMap0.put("", (Object) hashMap1, "[gqB\"z}`bw");
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(class0);
      Map<String, Map<String, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<String, String, Object> doubleKeyMap2 = new DoubleKeyMap<String, String, Object>(map0);
      Map<String, Map<String, Object>> map1 = doubleKeyMap2.newMap();
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap3 = new DoubleKeyMap<String, String, Object>(map1, class1);
      doubleKeyMap3.put("[gqB\"z}`bw", "", (Object) "[gqB\"z}`bw");
      doubleKeyMap3.remove((String) null);
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap4 = new DoubleKeyMap<Integer, Integer, Integer>();
      HashMap<Object, Map<Object, Object>> hashMap2 = new HashMap<Object, Map<Object, Object>>();
      Class<HashMap> class2 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap5 = new DoubleKeyMap<Object, Object, Object>(hashMap2, class2);
      doubleKeyMap5.remove((Object) null);
      // Undeclared exception!
      try { 
        doubleKeyMap5.put((Object) "", (Map<Object, Object>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(class0);
      Object object0 = new Object();
      doubleKeyMap0.remove(object0, (Object) null);
      doubleKeyMap0.put(object0, (Object) null, (String) null);
      Integer integer0 = new Integer((-1));
      doubleKeyMap0.get(object0, object0);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1);
      Object object1 = new Object();
      doubleKeyMap0.get((Object) integer2, object1);
      Object object2 = new Object();
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>(class0);
      Integer integer0 = new Integer((-1));
      DoubleKeyMap<String, String, Object> doubleKeyMap2 = new DoubleKeyMap<String, String, Object>();
      doubleKeyMap2.newMap();
      Map<Object, Map<Object, String>> map0 = doubleKeyMap2.newMap();
      DoubleKeyMap<Object, Object, String> doubleKeyMap3 = new DoubleKeyMap<Object, Object, String>(map0);
      Object object0 = new Object();
      doubleKeyMap3.get((Object) null, (Object) "");
      Map<String, Map<Object, Integer>> map1 = doubleKeyMap3.newMap();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap4 = new DoubleKeyMap<String, Object, Integer>(map1);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      doubleKeyMap4.put("", (Object) doubleKeyMap2, integer2);
      Integer integer3 = new Integer((-1));
      doubleKeyMap1.put("", (Object) integer3, (Integer) null);
      doubleKeyMap1.remove("", (Object) integer3);
      DoubleKeyMap<Object, String, String> doubleKeyMap5 = new DoubleKeyMap<Object, String, String>();
      Integer integer4 = new Integer(0);
      doubleKeyMap5.remove((Object) doubleKeyMap1);
      DoubleKeyMap<String, Object, String> doubleKeyMap6 = new DoubleKeyMap<String, Object, String>();
      Map<Object, String> map2 = doubleKeyMap6.remove("");
      assertNull(map2);
  }
}
