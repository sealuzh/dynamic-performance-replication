/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 02 19:21:33 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<Integer, Map<Object, Object>> hashMap0 = new HashMap<Integer, Map<Object, Object>>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put(integer0, hashMap1);
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(hashMap0);
      Map<Object, Object> map0 = doubleKeyMap0.remove(integer0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(integer0, (Object) integer0, "");
      Map<Object, String> map0 = doubleKeyMap0.remove(integer0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(integer0, (Object) integer0, "4");
      String string0 = doubleKeyMap0.get(integer0, (Object) integer0);
      assertEquals("4", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Map<Object, Object>>();
      Integer integer0 = new Integer(1);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      doubleKeyMap0.put((Object) class0, integer0, (Map<Object, Object>) hashMap0);
      Map<Integer, Map<Object, Object>> map0 = doubleKeyMap0.get((Object) class0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Object>, Object, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Object, HashMap<Integer, Object>>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      HashMap<Integer, Object> hashMap1 = doubleKeyMap0.remove(hashMap0, (Object) null);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Map<Object, HashMap<String, Object>>, HashMap<Object, String>, Map<Object, HashMap<String, Object>>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, HashMap<String, Object>>, HashMap<Object, String>, Map<Object, HashMap<String, Object>>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Map<Object, HashMap<String, Object>> map0 = doubleKeyMap0.remove((Map<Object, HashMap<String, Object>>) null, hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.remove(object0, integer0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Map<Object, Object>>((Map<Object, Map<Integer, Map<Object, Object>>>) null);
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      Map<String, Object> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      String string0 = doubleKeyMap0.put("us.codecraft.webmagic.utils.DoubleKeyMap", "us.codecraft.webmagic.utils.DoubleKeyMap", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      DoubleKeyMap<String, HashMap<Integer, Object>, HashMap<String, Object>> doubleKeyMap1 = new DoubleKeyMap<String, HashMap<Integer, Object>, HashMap<String, Object>>();
      Map<Map<Object, String>, HashMap<Map<HashMap<Integer, String>, Map<Map<Object, HashMap<String, Object>>, Integer>>, String>> map0 = doubleKeyMap1.newMap();
      Integer integer0 = new Integer(1);
      Object object0 = doubleKeyMap0.put((Object) map0, integer0, (Object) doubleKeyMap1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>();
      Integer integer0 = new Integer(3542);
      Integer integer1 = doubleKeyMap0.put((Object) doubleKeyMap1, (Object) null, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>();
      Integer integer0 = new Integer(0);
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>(hashMap0, class0);
      Object object0 = doubleKeyMap1.get((Object) doubleKeyMap0, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Integer>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, Integer, Object>();
      Map<Integer, Object> map0 = doubleKeyMap0.get((HashMap<String, Integer>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(hashMap0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, "", "");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>();
      Integer integer0 = new Integer(0);
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((String) null, (Object) doubleKeyMap0, (Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>((Map<String, Map<Integer, Integer>>) null, (Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Map<Object, HashMap<String, Object>>, String>, HashMap<String, Map<Object, HashMap<String, Object>>>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Map<Map<Object, HashMap<String, Object>>, String>, HashMap<String, Map<Object, HashMap<String, Object>>>>((Map<Object, Map<Map<Map<Object, HashMap<String, Object>>, String>, HashMap<String, Map<Object, HashMap<String, Object>>>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<String, HashMap<String, Map<Object, HashMap<String, Object>>>, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Map<Object, HashMap<String, Object>>>, String>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Map<Integer, Map<Object, HashMap<String, Object>>>> hashMap0 = new HashMap<String, Map<Integer, Map<Object, HashMap<String, Object>>>>();
      DoubleKeyMap<String, Integer, Map<Object, HashMap<String, Object>>> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Map<Object, HashMap<String, Object>>>(hashMap0);
      Map<Integer, Map<Object, HashMap<String, Object>>> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<Integer, Map<Object, HashMap<String, Object>>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, HashMap<String, Object>>, Object>();
      Map<HashMap<Map<Object, HashMap<String, Object>>, Object>, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Map<Object, HashMap<String, Object>>, Object>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Map<Object, HashMap<String, Object>>, Object>, Object, Object>(map0);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Object>();
      Map<Object, Object> map1 = doubleKeyMap2.get((Object) doubleKeyMap1);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      HashMap<Object, HashMap<String, Object>> hashMap0 = new HashMap<Object, HashMap<String, Object>>();
      Integer integer0 = new Integer(1206);
      doubleKeyMap0.put("", (Object) hashMap0, integer0);
      Integer integer1 = doubleKeyMap0.remove("", (Object) "Fp&fL)Vv");
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Integer, Map<String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>>> hashMap0 = new HashMap<Integer, Map<String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>>>();
      DoubleKeyMap<Integer, String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>>(hashMap0);
      Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>> map0 = doubleKeyMap0.newMap();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(integer0, "us.codecraft.webmagic.utils.DoubleKeyMap", map0);
      HashMap<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>> hashMap1 = new HashMap<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>();
      Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>> map1 = doubleKeyMap0.put(integer0, "us.codecraft.webmagic.utils.DoubleKeyMap", (Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>) hashMap1);
      assertSame(map1, map0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleKeyMap<Object, Map<Object, HashMap<String, Object>>, Map<String, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Object, HashMap<String, Object>>, Map<String, String>>();
      Map<String, String> map0 = doubleKeyMap0.get((Object) null, (Map<Object, HashMap<String, Object>>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>();
      Integer integer0 = new Integer((-648));
      doubleKeyMap0.put(integer0, (Object) integer0, "us.codecraft.webmagic.utils.DoubleKeyMap");
      String string0 = doubleKeyMap0.get(integer0, (Object) "us.codecraft.webmagic.utils.DoubleKeyMap");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Object, HashMap<String, Object>>, Map<Object, HashMap<String, Object>>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Map<Object, HashMap<String, Object>>, Map<Object, HashMap<String, Object>>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Integer, Map<String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>>> hashMap0 = new HashMap<Integer, Map<String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>>>();
      DoubleKeyMap<Integer, String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>>(hashMap0);
      Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>> map0 = doubleKeyMap0.newMap();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(integer0, "us.codecraft.webmagic.utils.DoubleKeyMap", map0);
      doubleKeyMap0.remove(integer0, "us.codecraft.webmagic.utils.DoubleKeyMap");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DoubleKeyMap<String, Object, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<String, Object>>();
      Object object0 = new Object();
      HashMap<String, Object> hashMap0 = doubleKeyMap0.remove("|H)y`\"R\"X|", object0);
      assertNull(hashMap0);
  }
}
