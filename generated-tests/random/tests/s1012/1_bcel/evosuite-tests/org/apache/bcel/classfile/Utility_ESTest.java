/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 11:35:58 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.LinkedList;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!tO[U|6=Qa)[G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: tO[U|6=Qa)[G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)104;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 64, (-2210), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte) (-75);
      byteArray0[8] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(180, 3763);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantString constantString0 = new ConstantString((byte)31);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("l2f", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pv<3RxPj");
      Utility.convertString("pv<3RxPj");
      Utility.classOrInterface(3353);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-20);
      Constant[] constantArray0 = new Constant[2];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "monitorenter");
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-65), (byte) (-111));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("x'%?|Xx?4_Svs}3");
      constantArray0[1] = (Constant) constantUtf8_0;
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-65), 3353);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    athrow
         // 1:    i2b
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "2.";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      try { 
        Utility.typeOfSignature("2.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.clearBit(228, 259);
      Utility.methodTypeToSignature("interface", (String[]) null);
      Utility.compactClassName("QF[1d@", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-62);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte) (-86));
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<String> class0 = String.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass1, emptyVisitor0);
      constantString0.accept(descendingVisitor0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 42, 75, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)42;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-88), (int) (byte) (-101), false);
      assertEquals("0:    ineg\n1:    <illegal opcode>\n2:    iflt\t\t#-22484\n", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)88;
      byteArray0[8] = (byte) (-107);
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      constantArray0[1] = (Constant) constantFloat0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-63));
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)88, (int) (byte) (-107), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 22677. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-106);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)71;
      Utility.encode(byteArray0, false);
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1505, 142);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)47);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 72, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1071. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString((-2395));
      Utility.setBit((-2395), (-2395));
      Utility.accessToString((-2395));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)49, (int) (byte) (-3), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)79;
      byte byte0 = (byte)102;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-1);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, 6132, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(945, 209);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2109, 593);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantClass constantClass0 = new ConstantClass(97);
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)52, (int) (byte)34, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.getSignature("._");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-70);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-77), 5235);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 17074. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(733.28);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantDouble constantDouble2 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iadd", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)52;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[7] = (byte)19;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-111), (int) (byte)55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fsub
         // 1:    impdep2
         // 2:    goto\t\t#14227
         // 5:    astore_1
         // 6:    caload
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-57);
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(66, 65535);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantInteger constantInteger0 = new ConstantInteger(4131);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantString constantString0 = new ConstantString((byte) (-57));
      constantArray0[2] = (Constant) constantString0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("if_acmpeq");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(65535, 491);
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)20, (byte)67);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[5] = (Constant) constantFieldref1;
      ConstantFloat constantFloat0 = new ConstantFloat((-2240.2673F));
      constantArray0[6] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)7, 1786, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1991. Constant pool size is: 7
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.compactClassName("int");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)47;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (int) (byte) (-74), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[7];
      byte byte0 = (byte)76;
      byteArray1[0] = (byte)76;
      byteArray1[1] = (byte)79;
      byteArray1[2] = (byte)85;
      byteArray1[3] = (byte) (-21);
      byteArray1[4] = (byte)49;
      byte byte1 = (byte) (-82);
      byteArray1[5] = (byte) (-82);
      byteArray1[6] = (byte)0;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$l$8b$I$A$A$A$A$A$A$A");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 43, (int) (byte)79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@LI/%#`i|a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @LI/%#`i|a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.accessToString(994);
      Utility.setBit(994, 248);
      Utility.compactClassName("ph<yWc6w");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "private synchronized volatile transient native interface";
      objectArray0[1] = (Object) "ph<yWc6w";
      objectArray0[2] = (Object) "ph<yWc6w";
      objectArray0[3] = (Object) "ph<yWc6w";
      objectArray0[4] = (Object) "ph<yWc6w";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 122, (int) (byte)42, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("%c;(,m.n4P", stringArray0);
      Utility.searchOpcode("N");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.methodSignatureArgumentTypes("()L%c;(,m/n4P;");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)102;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 99, (int) (byte)52, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "//`ODO";
      try { 
        Utility.typeOfSignature("//`ODO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: //`ODO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-35);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("fload_3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fload_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)50;
      int int0 = 99;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 99, (int) (byte) (-104), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4F[?y)xLq8WEr $~L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4F[?y)xLq8WEr $~L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)99;
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(3755, 2);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ifle\t\t#25346", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byte byte0 = (byte)42;
      byteArray0[1] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1978, (int) (byte)42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "5CNPXrONX,'\\d";
      try { 
        Utility.typeOfSignature("5CNPXrONX,'d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5CNPXrONX,'d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.classOrInterface(4);
      Utility.setBit(20, 145);
      Utility.clearBit(131092, 77);
      Utility.accessToString(90, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte) (-39);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 79, (int) (byte)43, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-21);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-21), (int) (byte) (-21));
      // Undeclared exception!
      try { 
        constantPool0.getConstantString((-745), (byte) (-21));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)0;
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte)62);
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)62, (-3256), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 119;
      Utility.clearBit(119, 3);
      String string0 = "7 1u7";
      try { 
        Utility.typeOfSignature("7 1u7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7 1u7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*++X|Ox=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X|Ox=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-40);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.replace("false", ",8v>6=#N~t ~H7", "false");
      assertEquals("false", string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-40);
      objectArray0[1] = (Object) ",8v>6=#N~t ~H7";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"-40\", \",8v>6=#N~t ~H7\"}", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "false";
      stringArray0[1] = "{\"-40\", \",8v>6=#N~t ~H7\"}";
      stringArray0[2] = "re>Dq ";
      stringArray0[3] = "false";
      String string2 = Utility.methodTypeToSignature("# oF|![]8S`h3%", stringArray0);
      assertEquals("(Lfalse;L{\"-40\",;Lre>Dq;Lfalse;)[L#;", string2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)15;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, (int) (byte)79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("compiler version\t", true);
      assertEquals("compiler version\t", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte)17;
      byteArray0[8] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_0", string1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-115);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(4096, (byte) (-115));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)57, (int) (byte) (-115));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 45754. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString(";zyn?;r 1E-g,v.G");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)8;
      byte byte0 = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)8, (int) (byte)8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)91;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-86);
      byteArray0[6] = (byte) (-22);
      byteArray0[7] = (byte)28;
      byte byte0 = (byte) (-77);
      byteArray0[8] = (byte) (-77);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-1097));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_2
         // 1:    pop2
         // 2:    dup_x2
         // 3:    pop
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.format((-607), 72, false, '}');
      Utility.replace("? super ", "putfield", "InnerClass(");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "? super ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "InnerClass(";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4367, (-607), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = Utility.accessToString((-422));
      assertEquals("private static final volatile interface abstract strictfp synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("if_icmplt\t\t#18121", string1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+={ubUt:?XB\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ={ubUt:?XB\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-19);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)122, (int) (byte) (-19), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("#HN[$-G'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #HN[$-G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte) (-31);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)7, (-2584), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "|B`YZrRuyTl@~FC~>>@";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|B`YZrRuyTl@~FC~>>@");
      Utility.format((-893), (-893), false, '\'');
      Utility.accessToString((-893));
      Utility.getSignature("-893");
      Utility.classOrInterface(68);
      try { 
        Utility.typeOfSignature("-893");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -893
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "UE/?TWOr6v69#=";
      try { 
        Utility.typeOfSignature("UE/?TWOr6v69#=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UE/?TWOr6v69#=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "\n     Method Arguments:";
      boolean boolean0 = false;
      Utility.fillup("\n     Method Arguments:", 381, false, 'p');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byte byte0 = (byte)53;
      byteArray0[1] = (byte)53;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 381, 381);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("lxor", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Utility.clearBit(48, 48);
      assertEquals(48, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-62);
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass((byte) (-62));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantClass constantClass2 = new ConstantClass((byte) (-100));
      constantArray0[1] = (Constant) constantClass2;
      ConstantString constantString0 = new ConstantString((-940));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[2] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-62), 48);
      assertEquals("0:    ifge\t\t#23746\n", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('J');
      assertTrue(boolean0);
      
      String string1 = Utility.accessToString((-1196), true);
      assertEquals("protected final volatile native strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = Utility.accessToString((-422));
      assertEquals("private static final volatile interface abstract strictfp synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lstore\t\t%161", string1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.format(188, 188, true, 'j');
      Utility.clearBit(3576, 188);
      Utility.convertString("188jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj");
      String string0 = "HZ^2wfp~yhOc6[VS";
      try { 
        Utility.methodSignatureReturnType("HZ^2wfp~yhOc6[VS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HZ^2wfp~yhOc6[VS'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.clearBit(232, 666);
      Utility.convertString("$UqBM!yI?[Zl]WsTW");
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)58;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, (-1482), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wide");
      Utility.getSignature("J8(j.hrV");
      Utility.accessToString(183);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wide");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "public private protected final synchronized transient";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)59;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-73), 161);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-650), (-334));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 46907. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte)108;
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1296), (int) (byte)48, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 396, 2447);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "K:~V+[";
      try { 
        Utility.typeOfSignature("K:~V+[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K:~V+[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "a";
      stringArray0[1] = "a";
      stringArray0[2] = "a";
      Utility.methodTypeToSignature("a", stringArray0);
      String string0 = "static";
      Utility.methodSignatureToString("(La;La;La;)La;", "a", "static", false);
      Utility.searchOpcode("a");
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)18;
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-44);
      Utility.toHexString(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("k");
      Locale locale0 = Locale.forLanguageTag("a");
      mockPrintWriter0.printf("a", (Object[]) stringArray0);
      locale0.getUnicodeLocaleAttributes();
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "static a a(a arg0, a arg1, a arg2)", (Object[]) stringArray0);
      Utility.printArray(printWriter0, (Object[]) stringArray0);
      try { 
        Utility.methodSignatureReturnType("k", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `k'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fconst_2");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-89);
      byteArray0[7] = (byte)22;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-426), (-3623));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-426), (byte)22);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("2C*'nouwC>");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantDouble constantDouble0 = new ConstantDouble(3059.0);
      constantArray0[3] = (Constant) constantDouble0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[4] = (Constant) constantString0;
      ConstantLong constantLong0 = new ConstantLong((-2389L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[5] = (Constant) constantLong1;
      ConstantString constantString1 = new ConstantString(byteSequence0);
      constantArray0[6] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-115);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 167, 269);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Unreachable default case reached!";
      Utility.methodTypeToSignature("Unreachable default case reached!", stringArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-96);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1248, 1248, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-105);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("7f 6c 52 aa fd 97", string0);
      
      boolean boolean0 = Utility.isSet(793, 2048);
      byte[] byteArray1 = Utility.decode("$%oK-y$a3Yuo4", false);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)111, (byte)75, (byte)45, (byte)121, (byte) (-93), (byte)89, (byte)117, (byte)111, (byte)52}, byteArray1);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('8');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte) (-39);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-13);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-13));
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    dconst_1\n4:    iload_1\n5:    nop\n6:    <illegal opcode>\n", string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0:    <illegal opcode>\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    dconst_1\n4:    iload_1\n5:    nop\n6:    <illegal opcode>\n");
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, true);
      assertEquals("{}", string1);
      
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      String string3 = Utility.toHexString(byteArray0);
      String string4 = Utility.compactClassName("e6 fa d9 0f 1b 00 f3");
      assertTrue(string4.equals((Object)string3));
      
      String string5 = Utility.convertString("instanceof");
      assertEquals("instanceof", string5);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-12);
      byte byte0 = (byte)78;
      byteArray0[2] = (byte)78;
      byte byte1 = (byte)119;
      byteArray0[3] = (byte)119;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)78, 62, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.classOrInterface((-1443910354));
      assertEquals("class", string0);
      
      int int0 = Utility.clearBit((-2907), (-1443910354));
      assertEquals((-19291), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(3755, 2);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ineg", string1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "A! _e*!4~cqga 5r";
      try { 
        Utility.typeOfSignature("A! _e*!4~cqga 5r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A! _e*!4~cqga 5r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("%c{89ML.jF]C$7N@~", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7N\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6?>v`,z%&2j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6?>v`,z%&2j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("java.lang.Object@5815bcb2", "java.lang.Object@5815bcb2", false);
      Utility.searchOpcode("float");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byte byte0 = (byte)70;
      byteArray0[1] = (byte)70;
      Utility.encode(byteArray0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("QF");
      mockPrintWriter0.print((double) (short) (-1));
      mockPrintWriter0.checkError();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.println(false);
      mockPrintWriter1.close();
      mockPrintWriter1.println("java.lang.Object@5815bcb2");
      Utility.printArray((PrintWriter) mockPrintWriter1, objectArray0);
      try { 
        Utility.typeOfSignature("Rn56j]p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rn56j]p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-62);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-42);
      byteArray0[7] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)95, 193);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      descendingVisitor0.visitConstantInvokeDynamic(constantInvokeDynamic1);
      constantPool0.accept(descendingVisitor0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.typeOfSignature("TF;a|0");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "TF;a|0";
      stringArray0[1] = ")o0l)=tkuRMT";
      stringArray0[2] = ")o0l)=tkuRMT";
      stringArray0[3] = ")o0l)=tkuRMT";
      Utility.methodTypeToSignature(")o0l)=tkuRMT", stringArray0);
      Utility.compactClassName("No95^l|cD2`DN`JaGa");
      Utility.fillup("boolean", 376, false, 'N');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)91;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-22);
      byteArray0[7] = (byte)28;
      byte byte0 = (byte) (-77);
      byteArray0[8] = (byte) (-77);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-85), (-1097));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_2
         // 1:    pop2
         // 2:    dup_x2
         // 3:    pop
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utility.compactClassName("i2b", false);
      short short0 = Utility.searchOpcode("i2b");
      assertEquals((short)145, short0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("i2b");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "i2b");
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "i2b";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintStream1;
      objectArray0[3] = (Object) "i2b";
      objectArray0[4] = (Object) "i2b";
      objectArray0[5] = (Object) "i2b";
      objectArray0[6] = (Object) printStream0;
      Utility.printArray((PrintStream) mockPrintStream1, objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-106);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-4), (int) (short)145, true);
      assertEquals("0:    iconst_1\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    fcmpg\n", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)65, 1706);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ifnull\t\t#17904", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.typeOfSignature("Jtd");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Jtd";
      objectArray0[1] = (Object) "Jtd";
      objectArray0[2] = (Object) "Jtd";
      objectArray0[3] = (Object) "Jtd";
      objectArray0[4] = (Object) null;
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Jtd, Jtd, Jtd, Jtd, null", "C*", "<", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Jtd, Jtd, Jtd, Jtd, null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)87;
      Utility.getSignature("double");
      Utility.convertString("D");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.typeOfSignature("D");
      Utility.compactClassName("double", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("double", "D", "D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.clearBit(232, 666);
      Utility.convertString("$UqBM!yI?[Zl]WsTW");
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, (-1482), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-29);
      byte byte0 = (byte) (-115);
      byteArray0[5] = (byte) (-115);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.encode(byteArray0, false);
      Utility.decode("$U$3b$9c$ed$e3$8d", false);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((byte) (-115));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(22);
      stringWriter0.append('N');
      stringWriter0.write("Urib]#[.X?^KGw#x^c");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      mockPrintWriter0.print(22);
      objectArray0[1] = (Object) stringWriter0;
      int int0 = 2881;
      mockPrintWriter0.println(2881);
      objectArray0[2] = (Object) stringWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      try { 
        Utility.typeOfSignature("P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.setBit(4502, 4502);
      String string0 = Utility.fillup("\"", 1181, false, 'i');
      String[] stringArray0 = new String[8];
      stringArray0[0] = ")\t";
      stringArray0[1] = "\"";
      stringArray0[2] = ")\t";
      stringArray0[3] = "ZB ";
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = "a[%I4#P]=bqUk]np+hC";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(")\t", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[%I4#P]=bqUk]np+hC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)118;
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-28);
      Utility.toHexString(byteArray0);
      String string0 = "Excep";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Excep";
      Utility.methodTypeToSignature("Excep", stringArray0);
      int int0 = 73;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)118, 73, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Utility.typeOfSignature("Illegal type: ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)13;
      Constant[] constantArray0 = new Constant[7];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-4486), 842);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantString constantString0 = new ConstantString(2220);
      constantArray0[2] = (Constant) constantString0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantLong constantLong0 = new ConstantLong((byte)10);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[4] = (Constant) constantLong1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("getfield");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[5] = (Constant) constantUtf8_1;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)10);
      constantArray0[6] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 189, (-817));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = ".^";
      try { 
        Utility.typeOfSignature(".^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ddiv", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString((-3873), false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-103);
      Utility.equals(byteArray0, byteArray0);
      Utility.classOrInterface((byte)125);
      Utility.decode("public private protected static final volatile transient synthetic annotation enum", false);
      Utility.searchOpcode("public private protected static final volatile transient synthetic annotation enum");
      Utility.isJavaIdentifierPart('H');
      String[] stringArray0 = new String[8];
      stringArray0[0] = "class";
      stringArray0[1] = "[]";
      stringArray0[2] = "public private protected static final volatile transient synthetic annotation enum";
      stringArray0[3] = "class";
      stringArray0[4] = "public private protected static final volatile transient synthetic annotation enum";
      stringArray0[5] = "class";
      stringArray0[6] = "class";
      stringArray0[7] = "public private protected static final volatile transient synthetic annotation enum";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("class", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("/5FmfdClkW", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/5FmfdClkW";
      stringArray0[1] = "/5FmfdClkW";
      stringArray0[2] = ".5FmfdClkW";
      stringArray0[3] = ".5FmfdClkW";
      stringArray0[4] = "/5FmfdClkW";
      stringArray0[5] = ".5FmfdClkW";
      Utility.methodTypeToSignature("/5FmfdClkW", stringArray0);
      Utility.compactClassName(".5FmfdClkW");
      Utility.printArray((Object[]) stringArray0, false, true);
      Utility.searchOpcode("/5FmfdClkW");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "/5FmfdClkW");
      Utility.printArray(printWriter0, (Object[]) stringArray0);
      Utility.isSet((short) (-1), 166);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-61);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(161, 99);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1168, 191);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "'!";
      try { 
        Utility.typeOfSignature("'!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      byte byte0 = (byte) (-117);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal opcode>");
      Utility.printArray((Object[]) constantArray0);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("<illegal opcode>", stringArray0);
      Utility.searchOpcode("iconst_0");
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-117), (int) (byte) (-39));
      Constant[] constantArray1 = new Constant[9];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(">");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray1[0] = (Constant) constantUtf8_1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-39), 13);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray1[1] = (Constant) constantMethodHandle1;
      MockFile mockFile0 = new MockFile("dneg");
      File file0 = MockFile.createTempFile("dneg", "frem", (File) mockFile0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "tm5dPI@la)%8uO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"tm5dPI@la)%8uO\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.clearBit(161, 196);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("L52;V", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, true);
      Object[] objectArray0 = new Object[5];
      mockPrintStream0.checkError();
      mockFileOutputStream0.release();
      objectArray0[0] = (Object) "L52;V";
      objectOutputStream0.writeChar(2048);
      objectArray0[1] = (Object) "L52;V";
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) objectOutputStream0;
      objectArray0[4] = (Object) "L52;V";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte) (-113);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 755, (-997));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.compactClassName("J^+sq'#w<`=hDGXUN3", true);
      assertEquals("J^+sq'#w<`=hDGXUN3", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lsub", string1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)30;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-109);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)30, 1903, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.isJavaIdentifierPart('x');
      String string0 = "Mm{E]B_vf\\@!+";
      try { 
        Utility.typeOfSignature("Mm{E]B_vf@!+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mm{E]B_vf@!+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "dx|G-*j:.~";
      Utility.replace("dx|G-*j:.~", "dx|G-*j:.~", "dx|G-*j:.~");
      String string1 = ";Y/J(Tq*KoATi!Lg7Jt";
      try { 
        Utility.typeOfSignature(";Y/J(Tq*KoATi!Lg7Jt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;Y/J(Tq*KoATi!Lg7Jt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-46);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2113, (int) (byte)25, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)106;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)1, (int) (byte)106);
      Utility.accessToString((int) (byte)60, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.replace("1:    aconst_null\n2:    istore_1\n3:    fmul\n", "#6qeJt5mpIX^YFq", "protected static final");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)106;
      byteArray1[1] = (byte)60;
      byteArray1[2] = (byte)60;
      byteArray1[4] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "#6qeJt5mpIX^YFq";
      stringArray0[1] = "istore_1";
      stringArray0[2] = "iK<8";
      stringArray0[3] = "1:    aconst_null\n2:    istore_1\n3:    fmul\n";
      stringArray0[4] = "istore_1";
      stringArray0[5] = "1:    aconst_null\n2:    istore_1\n3:    fmul\n";
      stringArray0[6] = "iK<8";
      Utility.methodTypeToSignature("iK<8", stringArray0);
      try { 
        Utility.methodSignatureReturnType("1:    aconst_null\n2:    istore_1\n3:    fmul\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `1:    aconst_null
         // 2:    istore_1
         // 3:    fmul
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "boE\"");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((byte)5);
      constantArray0[0] = (Constant) constantLong0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantMethodType0.setDescriptorIndex((byte)0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("boE\"");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "Warning: Padding byte != 0 in ";
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.compactClassName("<");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte) (-7);
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("<");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      Constant constant0 = constantUtf8_1.copy();
      constantArray0[2] = constant0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)100, (byte)41);
      constantArray0[3] = (Constant) constantMethodref0;
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[4] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.replace("/W.gL XQ,yS", "/W.gL XQ,yS", "\"$GH+]rva9tSWa:p}8");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "/W.gL XQ,yS";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "/W.gL XQ,yS";
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0, true);
      Utility.compactClassName("{/W.gL XQ,yS, java.lang.Object@6c90606f, /W.gL XQ,yS}");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1162, 1162);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet(95, 209);
      byte[] byteArray0 = new byte[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)86;
      byte byte0 = (byte) (-82);
      byteArray0[2] = (byte) (-82);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      byteArray0[3] = (byte)39;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("9g,jz|WKMCM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9g,jz|WKMCM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-9);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((-1829));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-120), (-3854));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    l2i
         // 1:    iconst_2
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      Constant[] constantArray0 = new Constant[1];
      String string0 = "";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      ConstantUtf8.getInstance("");
      String string1 = "dreturn";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dreturn");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 3657, 393, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = Utility.setBit(14, (-1040));
      assertEquals(65550, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1461594796), 1475);
      Constant constant0 = constantNameAndType0.copy();
      constantArray0[0] = constant0;
      ConstantLong constantLong0 = new ConstantLong((byte)6);
      constantArray0[1] = (Constant) constantLong0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType((byte) (-84), 87);
      constantArray0[2] = (Constant) constantNameAndType1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("u5D?g*[(~y1j3");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[4] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)106;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)1, (int) (byte)106);
      Utility.accessToString((int) (byte)60, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.replace("1:    aconst_null\n2:    astore\t\t%106\n", "#6qeJt5mpIX^YFq", "protected static final");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)106;
      byteArray1[1] = (byte)60;
      byteArray1[2] = (byte)60;
      byteArray1[3] = (byte)58;
      byteArray1[4] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "#6qeJt5mpIX^YFq";
      stringArray0[1] = "istore_1";
      stringArray0[2] = "iK<8";
      stringArray0[3] = "1:    aconst_null\n2:    astore\t\t%106\n";
      stringArray0[4] = "istore_1";
      stringArray0[5] = "1:    aconst_null\n2:    astore\t\t%106\n";
      stringArray0[6] = "iK<8";
      Utility.methodTypeToSignature("iK<8", stringArray0);
      try { 
        Utility.methodSignatureReturnType("1:    aconst_null\n2:    astore\t\t%106\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `1:    aconst_null
         // 2:    astore\t\t%106
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)66, (int) (byte)117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore_2", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Utility.accessToString((-2239));
      boolean boolean0 = true;
      Utility.format((-2239), 65, true, '#');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("HjDb<;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HjDb<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "EnclosingMethod";
      try { 
        Utility.typeOfSignature("EnclosingMethod");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EnclosingMethod
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString(40);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "static synchronized";
      stringArray0[1] = "static synchronized";
      stringArray0[2] = "static synchronized";
      String string0 = Utility.methodTypeToSignature("static synchronized", stringArray0);
      assertEquals("(Lstatic;Lstatic;Lstatic;)Lstatic;", string0);
      
      String string1 = Utility.accessToString(40);
      assertEquals("static synchronized", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)10;
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(Lstatic;Lstatic;Lstatic;)Lstatic;", true);
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Utility.isJavaIdentifierPart(')');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-65);
      byteArray0[8] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)105, (int) (byte)11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)95;
      byte byte0 = (byte)88;
      byteArray0[3] = (byte)88;
      byte byte1 = (byte)66;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)82, 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)76;
      byteArray0[0] = (byte)76;
      byte byte1 = (byte)87;
      byteArray0[1] = (byte)87;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 48, (-1086), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "java.lang.org.apache.bcel.classfile.LocalVariableTypeTable";
      boolean boolean0 = false;
      Utility.compactClassName("java.lang.org.apache.bcel.classfile.LocalVariableTypeTable", false);
      String string1 = "Qkr>l";
      try { 
        Utility.typeOfSignature("Qkr>l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qkr>l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("$E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "#Z+_";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#Z+_");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = ":x&Lkeit~49";
      Utility.getSignature(":x&Lkeit~49");
      String string2 = "[6";
      Utility.typeOfSignature("[6");
      Utility.isSet((byte)13, 2164);
      Utility.compactClassName(":x&Lkeit~49", false);
      String string3 = "Invalid type: ";
      URI uRI0 = MockURI.URI("L:x&Lkeit~49;", ":x&Lkeit~49", "Invalid type: ");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not hierarchical
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-76);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-76));
      constantArray0[0] = (Constant) constantInteger0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jj=33QR095f");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      int int0 = 68;
      constantInteger0.setBytes(68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 68, 59, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.accessToString((-1731), true);
      Utility.compactClassName("Y?InP0", ", high = ", true);
      Utility.compactClassName("Q?*5Uk%X-Rocl{9j~", "Y?InP0", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1313, (int) (byte)92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("Rn56j]p", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-66);
      byte byte0 = (byte) (-65);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-21);
      byte byte1 = (byte)63;
      byteArray0[5] = (byte)63;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-21), 102, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte) (-21);
      objectArray0[1] = (Object) (byte) (-21);
      objectArray0[2] = (Object) "0:    fsub\n1:    dup2_x1\n2:    arraylength\n3:    athrow\n4:    <illegal opcode>\n5:    lstore_0\n";
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Utility.methodSignatureReturnType("Invalid type: ");
      Utility.accessToString((-531), false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T,");
      Utility.searchOpcode("T,");
      try { 
        Utility.methodSignatureReturnType("T,", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 56, 183);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lload_1", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", npairs = ");
      String string0 = "Z1Yeid(2]}a6G,{E";
      Utility.typeOfSignature("Z1Yeid(2]}a6G,{E");
      Utility.setBit((-1001), 3647);
      try { 
        Utility.methodSignatureArgumentTypes("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = ",3|3Ff";
      try { 
        Utility.typeOfSignature(",3|3Ff");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,3|3Ff
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Utility.replace("drem", "R", "R");
      Utility.setBit((-3763), (-3763));
      Utility.isJavaIdentifierPart('`');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-110);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantMethodType0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 73, (int) (byte)62, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("d2l", string1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[3];
      byte byte0 = (byte) (-78);
      byteArray1[0] = (byte) (-78);
      byteArray1[1] = (byte)25;
      byteArray1[2] = (byte) (-80);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.equals(byteArray1, byteArray0);
      Utility.signatureToString("T\"*;", false);
      Utility.toHexString(byteArray0);
      int int0 = 1791;
      Utility.accessToString(1791, true);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "YW/jyz";
      try { 
        Utility.methodSignatureReturnType("YW/jyz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YW/jyz'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "&";
      stringArray0[1] = "EeD(P!9dh";
      stringArray0[2] = "EeD(P!9dh";
      stringArray0[3] = "EeD(P!9dh";
      stringArray0[4] = "EeD(P!9dh";
      Utility.methodTypeToSignature("EeD(P!9dh", stringArray0);
      Utility.format(87, 1840, false, '&');
      Utility.typeOfSignature("FeQuI?U");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("EeD(P!9dh", "@*", "EeD(P!9dh", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EeD(P!9dh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (int) (byte)48, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)125;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1843), (int) (byte)9);
      assertEquals("0:    dup\n1:    dconst_0\n2:    lconst_0\n3:    lconst_0\n4:    <illegal opcode>\n5:    dup2\n6:    fsub\n7:    lushr\n", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("anewarray", (String[]) null);
      Utility.compactClassName("R9hsYoP", "R9hsYoP", false);
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "R9hsYoP");
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte)72;
      byteArray0[8] = (byte) (-27);
      Utility.toHexString(byteArray0);
      Utility.methodTypeToSignature("R9hsYoP", (String[]) null);
      Utility.compactClassName("'", true);
      Utility.typeOfMethodSignature("()LR9hsYoP;");
      Utility.isJavaIdentifierPart('{');
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("()Lanewarray;", "'");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // '
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)100;
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("ifnonnull", ")", true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("ifnonnull");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInteger constantInteger0 = new ConstantInteger(43);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantString constantString0 = new ConstantString((-5914));
      constantArray0[2] = (Constant) constantString0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)100);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[4] = (Constant) constantMethodType1;
      ConstantMethodType constantMethodType2 = new ConstantMethodType(byteSequence0);
      constantArray0[5] = (Constant) constantMethodType2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Utility.convertString("\nException handler(s) = \n");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-40);
      byteArray0[0] = (byte) (-40);
      Constant[] constantArray0 = new Constant[7];
      ConstantString constantString0 = new ConstantString(75);
      constantArray0[0] = (Constant) constantString0;
      MockFile mockFile0 = new MockFile(",v93 ");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "\nException handler(s) = \n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"
         // Exception handler(s) = 
         // \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Rljj^k^}bq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Rljj^k^}bq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)11, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fconst_0
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.isSet((-888), (-888));
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)49;
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)32;
      byte byte1 = (byte)73;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte)97;
      byte byte2 = (byte)8;
      byteArray0[8] = (byte)8;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2333, (-1392));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("java.lang.java.lang.156");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)47;
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)27;
      Utility.equals(byteArray0, byteArray0);
      Utility.replace("java.lang.java.lang.156", "#J.o_6XRaOFP", "#J.o_6XRaOFP");
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfMethodSignature("interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-107);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)52;
      Utility.toHexString(byteArray0);
      Utility.toHexString(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "95 34");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("Exceptions: ", "95 34", true);
      Utility.compactClassName("((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((ifgt");
      try { 
        Utility.methodSignatureArgumentTypes("((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((ifgt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((ifgt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = Utility.compactClassName("N%O\"oCc");
      assertEquals("N%O\"oCc", string0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.decode("B`9!SG1[XQ<77@GTP1$", false);
      byte[] byteArray0 = Utility.decode("B`9!SG1[XQ<77@GTP1$", false);
      assertEquals(18, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString(1875);
      Utility.isJavaIdentifierPart('z');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) fileSystemHandling0;
      objectArray0[1] = (Object) "public private final volatile native interface abstract";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) fileSystemHandling0;
      objectArray0[5] = (Object) fileSystemHandling0;
      objectArray0[6] = (Object) "public private final volatile native interface abstract";
      objectArray0[7] = (Object) "public private final volatile native interface abstract";
      objectArray0[8] = (Object) "public private final volatile native interface abstract";
      Utility.printArray(objectArray0);
      String string0 = ":i2%3Bg}";
      Utility.compactClassName(":i2%3Bg}", true);
      Utility.isSet(3, 3);
      try { 
        Utility.typeOfSignature(":i2%3Bg}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :i2%3Bg}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "  ");
      Utility.isSet(2221, 2221);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "  ";
      objectArray0[2] = (Object) "  ";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "  ";
      Utility.printArray(objectArray0);
      Utility.convertString("{null,   ,   , null,   }");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("if_acmpeq");
      Locale locale0 = Locale.PRC;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "areturn", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      Utility.accessToString(655, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)102;
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)24, 994);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 183, 655);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-80);
      byte byte0 = (byte)30;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)75;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.searchOpcode("Insensitive");
      char char0 = 'w';
      Utility.isJavaIdentifierPart('w');
      int int0 = 3342;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3342, (int) (byte) (-121));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 184;
      Utility.isSet(897, 184);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-112);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-112);
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-112), (-3521), false);
      constantPool1.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `long'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "|-dEw4t71~~$&+9_)XD";
      try { 
        Utility.methodSignatureReturnType("|-dEw4t71~~$&+9_)XD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lshr", string0);
      
      Utility.compactClassName("d)cLOvW~CCVX", false);
      String string1 = Utility.printArray((Object[]) constantArray0, false);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = Utility.compactClassName("g");
      assertEquals("g", string2);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "<illegal opcode>";
      boolean boolean0 = true;
      Utility.compactClassName("org.apache.bcel.classfile.Utility$1", "<illegal opcode>", true);
      try { 
        Utility.methodSignatureArgumentTypes("(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      try { 
        Utility.typeOfSignature("XzZ$ Lki}=im^4t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XzZ$ Lki}=im^4t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "class");
      try { 
        Utility.methodSignatureReturnType("L;cL3}%,DAtWo<;V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L;cL3}%,DAtWo<;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G#odE|>&%hhN.RFy)");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("3f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)37;
      byteArray0[8] = (byte) (-72);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)68, 8, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 246. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "G)l\"9u";
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("G)l\"9u", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G)l\"9u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)71;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 82, (-499), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-3);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)99;
      byteArray1[1] = (byte)20;
      byteArray1[2] = (byte)40;
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte)56;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "NL,+9}*m";
      Utility.convertString("NL,+9}*m");
      try { 
        Utility.typeOfSignature("NL,+9}*m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NL,+9}*m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Utility.typeOfSignature("S~[OUu-OPD;UGY07");
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)103;
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-91);
      byte byte1 = (byte) (-37);
      byteArray0[2] = (byte) (-37);
      byte byte2 = (byte)10;
      byteArray0[3] = (byte)10;
      byte byte3 = (byte)13;
      byteArray0[4] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[5] = (byte)62;
      byte byte4 = (byte)69;
      byteArray0[6] = (byte)69;
      byte byte5 = (byte) (-61);
      byteArray0[7] = (byte) (-61);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2199, 246);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "checkcast";
      Utility.fillup("checkcast", (-2533), false, '5');
      Utility.signatureToString("ZV&I6Hh0a_s4C5", false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "checkcast";
      stringArray0[1] = "float";
      stringArray0[2] = "checkcast";
      Utility.methodTypeToSignature("ZV&I6Hh0a_s4C5", stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("", true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "M$AKqH-:");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // M$AKqH-:
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Invalid frame type found while parsing stack map table: ");
      MockFile mockFile1 = new MockFile(mockFile0, "Invalid frame type found while parsing stack map table: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[4];
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockFile1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "Invalid frame type found while parsing stack map table: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Utility.printArray((PrintWriter) mockPrintWriter1, objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("lcmp", "lcmp", true);
      String string0 = "P?r";
      try { 
        Utility.methodSignatureReturnType("P?r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P?r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Utility.replace("1.'vaz'd}?=iPC 0", "1.'vaz'd}?=iPC 0", "getstatic");
      Utility.convertString("1.'vaz'd}?=iPC 0");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.accessToString(201, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "1.'vaz'd}?=iPC 0";
      objectArray0[1] = (Object) "1.'vaz'd}?=iPC 0";
      objectArray0[2] = (Object) "getstatic";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "getstatic";
      objectArray0[5] = (Object) "1.'vaz'd}?=iPC 0";
      Utility.printArray(objectArray0);
      String string1 = Utility.signatureToString("Vn<wH^");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)82, 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Utility.accessToString((-1472), true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-90);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-1205), (int) (byte)64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 32936. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("E8e8ZrUtw50g[@-Yx'", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E8e8ZrUtw50g[@-Yx''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.clearBit(60, 60);
      Utility.compactClassName("R2(0)[{CyulVhy[");
      Utility.accessToString(43, false);
      int int0 = 34;
      Utility.classOrInterface(34);
      // Undeclared exception!
      try { 
        Utility.getSignature("R2(0)[{CyulVhy[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[{CyulVhy[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-24);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)92, 2048, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = ")\t";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ")\t";
      stringArray0[1] = ")\t";
      Utility.methodTypeToSignature(")\t", stringArray0);
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-1910160264), (-1910160264));
      assertFalse(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("Invalid signature: ");
      assertEquals("int", string0);
      
      byte byte0 = Utility.typeOfSignature("Invalid signature: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "+p\"~9AJf#:,2~q,";
      try { 
        Utility.typeOfSignature("+p\"~9AJf#:,2~q,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: p\"~9AJf#:,2~q,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Utility.format(239, 239, false, ' ');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)86;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "\"";
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte) (-89);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-2911), 47, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    arraylength
         // 1:    astore_2
         // 2:    ldiv
         // 3:    iushr
         // 4:    <illegal opcode>
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mR.::>kO[G8");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = "jsr_w";
      String string1 = "p?Z";
      Utility.replace("NniylmS", "jsr_w", "p?Z");
      // Undeclared exception!
      try { 
        Utility.signatureToString("NniylmS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NniylmS'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "LF`_t_z,;V";
      Utility.signatureToString("LF`_t_z,;V");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-114);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte)113;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Sdb7ga7sQ:-4[V");
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte)81;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)81, 2216, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("KCoQ?,|W6`f", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KCoQ?,|W6`f'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "Qv{&6W=0(";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Qv{&6W=0(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qv{&6W=0('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.searchOpcode(">");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ">";
      objectArray0[1] = (Object) ">";
      objectArray0[2] = (Object) ">";
      objectArray0[3] = (Object) ">";
      objectArray0[4] = (Object) ">";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[5] = (Object) ">";
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[6] = (Object) ">";
      objectArray0[7] = (Object) ">";
      objectArray0[8] = (Object) ">";
      Utility.printArray(objectArray0, false);
      short short0 = Utility.searchOpcode(">, >, >, >, >, >, >, >, >");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.methodSignatureReturnType("F`_t_z,");
      assertEquals("float", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)123;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$7d$7b", string1);
      
      Utility.compactClassName(">", "F`_t_z,", false);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) (byte)125;
      objectArray1[1] = (Object) ">";
      String string2 = Utility.printArray(objectArray1, false);
      assertEquals("125, >", string2);
      
      String string3 = Utility.format((byte)125, (short) (-1), true, 'H');
      assertEquals("125", string3);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = ">";
      stringArray0[1] = ">, >, >, >, >, >, >, >, >";
      stringArray0[2] = ">";
      stringArray0[3] = "/";
      stringArray0[4] = "$7d$7b";
      stringArray0[5] = "F`_t_z,";
      stringArray0[6] = "float";
      String string4 = Utility.methodTypeToSignature("/", stringArray0);
      assertEquals("(L>;L>,;L>;L/;L$7d$7b;LF`_t_z,;F)L/;", string4);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wide");
      Utility.getSignature("J8(j.hrV");
      Utility.accessToString(183);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wide");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "public private protected final synchronized transient";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)59;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-73), 161);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-650), (-334));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 46907. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = "8`?TFX@8#.4c!xpu";
      try { 
        Utility.typeOfSignature("8`?TFX@8#.4c!xpu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8`?TFX@8#.4c!xpu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)3);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)107, 1748);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic((-12), 2114);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2114, (byte)3);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[4] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dmul", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) fileSystemHandling0;
      objectArray0[3] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) fileSystemHandling0;
      objectArray0[5] = (Object) fileSystemHandling0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) fileSystemHandling0;
      objectArray0[8] = (Object) fileSystemHandling0;
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("0wjM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0wjM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.fillup("if_icmpne", 68, true, '6');
      // Undeclared exception!
      try { 
        Utility.signatureToString("MC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MC'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "?>iqY.fj";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("?>iqY.fj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>iqY.fj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)33;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 40, 36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Utility.replace("'", "Fc7he`*<", "'");
      Utility.fillup("'", 73, true, '<');
      Utility.accessToString(73);
      Utility.isSet(73, 73);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)42;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.setBit((byte)45, (byte)74);
      Utility.fillup("\"", (byte)84, true, '<');
      try { 
        Utility.typeOfMethodSignature("public static volatile");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public static volatile
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.signatureToString("Lnull;V", true);
      try { 
        Utility.methodSignatureReturnType("Only element values of type array can be built with this ctor - type specified: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Only element values of type array can be built with this ctor - type specified: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 40, 36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_icmpgt\t\t#4171", string1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Utility.replace("drem", "R", "R");
      Utility.setBit((-3763), (-3763));
      Utility.isJavaIdentifierPart('`');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)20;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 73, (int) (byte)62, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = "\\n";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("\n");
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("\\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \\n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Utility.getSignature("LYn");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte) (-41);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.methodSignatureReturnType("LYn", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LYn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.accessToString((-2685), false);
      Utility.getSignature("public private transient native abstract synthetic annotation enum");
      Utility.typeOfSignature("B2,S!VDI*{W3-@LF2");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "public private transient native abstract synthetic annotation enum";
      objectArray0[2] = (Object) "B2,S!VDI*{W3-@LF2";
      objectArray0[3] = (Object) "Lpublic;";
      objectArray0[4] = (Object) "Lpublic;";
      Utility.printArray(objectArray0, true, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("eU}V}Q7% =*i``C");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(objectOutputStream0);
      Locale locale0 = Locale.forLanguageTag("B2,S!VDI*{W3-@LF2");
      PrintStream printStream0 = mockPrintStream1.format(locale0, "m6Q'fwKZHp9,g", objectArray0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) "B2,S!VDI*{W3-@LF2";
      objectArray1[1] = (Object) "{java.lang.Object@77b654db, public private transient native abstract synthetic annotation enum, B2,S!VDI*{W3-@LF2, Lpublic;, Lpublic;}";
      objectArray1[2] = object0;
      objectArray1[3] = (Object) "m6Q'fwKZHp9,g";
      objectArray1[4] = (Object) "B2,S!VDI*{W3-@LF2";
      objectArray1[5] = object0;
      Object object1 = new Object();
      objectArray1[6] = object1;
      objectArray1[7] = (Object) "Lpublic;";
      objectArray1[8] = object0;
      Utility.printArray(printStream0, objectArray1);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "java.lang.", "\"?t0<-_o9Ik}gQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = " methods:\n";
      Utility.replace("Z\"7", "Z\"7", " methods:\n");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Z\"7";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z\"7");
      stringArray0[1] = " methods:\n";
      stringArray0[2] = " methods:\n";
      Utility.methodTypeToSignature("Z\"7", stringArray0);
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode(" methods:\n", false);
      Utility.toHexString(byteArray0);
      Utility.classOrInterface((-3613));
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.getSignature("constant pool\t\t");
      Utility.searchOpcode("constant pool\t\t");
      String string0 = "java.lang.Byte";
      String string1 = ":m";
      Utility.replace("RUsuc2y6rcWF(#)Y", "java.lang.Byte", ":m");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -2
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-39);
      byte byte0 = (byte) (-85);
      byteArray0[5] = (byte) (-85);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("iload", "short", "putstatic", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = Utility.classOrInterface(91);
      assertEquals("class", string0);
      
      String string1 = Utility.methodSignatureReturnType("Code(max_stack = ");
      assertEquals("char", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)95;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("06 3a e4 6d 5f", string2);
      
      int int0 = Utility.setBit((byte)6, (-2316));
      assertEquals(1048582, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)2;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), 148);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    fneg\n1:    ior\n2:    lcmp\n3:    lmul\n4:    irem\n5:    dup2\n6:    iconst_m1\n", "lneg", "lneg", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    fneg
         // 1:    ior
         // 2:    lcmp
         // 3:    lmul
         // 4:    irem
         // 5:    dup2
         // 6:    iconst_m1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = Utility.accessToString((-420), true);
      assertEquals("protected static final volatile abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = ">\t";
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-77);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-77);
      byteArray1[1] = (byte)36;
      byteArray1[2] = (byte) (-96);
      byteArray1[3] = (byte)32;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)5;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "LIllegal;V";
      Utility.replace("LIllegal;V", "LIllegal;V", "LIllegal;V");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 247, 247, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean boolean0 = Utility.isSet(739, (-868));
      assertFalse(boolean0);
      
      String string0 = Utility.accessToString(739, false);
      assertEquals("public private synchronized volatile transient interface", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("pop", string1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Utility.methodSignatureReturnType("Dr=}lfx%Z[vKn3B.");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "he}");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)32;
      Utility.equals(byteArray0, byteArray0);
      Utility.getSignature("he}");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)32;
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(91);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantClass0.setNameIndex(256);
      constantClass1.toString();
      constantArray0[0] = (Constant) constantClass1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("org.apache.commons.io.filefilter.WildcardFilter");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)126, (int) (byte)32, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-127);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)88);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-38), 1102, true);
      assertEquals("0:    <illegal opcode>\n1:    dup_x2\n2:    pop2\n3:    lor\n", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Utility.searchOpcode("ixor");
      Utility.accessToString(101);
      try { 
        Utility.typeOfMethodSignature("6g|`dx=fDv$b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6g|`dx=fDv$b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "'-m1<'tWNfsmMvh";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'-m1<'tWNfsmMvh");
      // Undeclared exception!
      try { 
        Utility.getSignature("xZ[*E%^kC;X')v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[*E%^kC;X')v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.compactClassName("CLASSPATH component ");
      Utility.typeOfSignature("CLASSPATH component ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte)5;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, 2885, true);
      Utility.fillup("int", 75, true, '&');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.encode(byteArray0, true);
      Utility.accessToString((int) (byte)5);
      Utility.getSignature("int");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)5;
      objectArray0[1] = (Object) "CLASSPATH component ";
      objectArray0[2] = (Object) (byte)5;
      Utility.printArray(objectArray0);
      Utility.replace("public protected", "iconst_2", ">");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)5, 2885, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1969, 49);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)103;
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-91);
      byte byte1 = (byte) (-37);
      byteArray0[2] = (byte) (-37);
      byte byte2 = (byte)10;
      byteArray0[3] = (byte)10;
      byte byte3 = (byte)13;
      byteArray0[4] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[5] = (byte)62;
      byte byte4 = (byte)69;
      byteArray0[6] = (byte)69;
      byte byte5 = (byte) (-57);
      byteArray0[7] = (byte) (-57);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2199, 246);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)3);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)105, 1748);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic(10, 2114);
      constantArray0[3] = (Constant) constantInvokeDynamic2;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2114, (byte)3);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[4] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      Utility.methodTypeToSignature(",", (String[]) null);
      int int0 = 72;
      Utility.clearBit(72, 72);
      byte[] byteArray0 = new byte[0];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("{java.lang.Object@7a54262, java.lang.Object@55f67e94, java.lang.Object@2b9e193, java.lang.Object@2025123e, java.lang.Object@dbef20a}", "{java.lang.Object@7a54262, java.lang.Object@55f67e94, java.lang.Object@2b9e193, java.lang.Object@2025123e, java.lang.Object@dbef20a}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"{java.lang.Object@7a54262, java.lang.Object@55f67e94, java.lang.Object@2b9e193, java.lang.Object@2025123e, java.lang.Object@dbef20a}\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "Lm5l5G+Rqj=";
      Utility.typeOfSignature("Lm5l5G+Rqj=");
      String string1 = "]d['8{*C2+p? @^e";
      try { 
        Utility.methodSignatureArgumentTypes("]d['8{*C2+p? @^e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]d['8{*C2+p? @^e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "(Unknown attribute ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(Unknown attribute ");
      String string1 = "org.apache.bcel.classfile.BootstrapMethod";
      Utility.decode("org.apache.bcel.classfile.BootstrapMethod", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(Unknown attribute ", "org.apache.bcel.classfile.Utility$1", "org.apache.bcel.classfile.BootstrapMethod", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unknown attribute '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("[$PFB%J", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$PFB%J'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = Utility.accessToString((-2740), true);
      assertEquals("protected static volatile native abstract synthetic annotation enum", string0);
      
      boolean boolean0 = Utility.isSet((-2741), 40);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte) (-104);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("62 5b 03 53 54 87 a4 98", string1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString((-1659));
      Utility.compactClassName("L$@G2rsZ5Q", "L$@G2rsZ5Q", false);
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.classOrInterface(3477);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "##pzi'LiTJrt|C&";
      Utility.methodTypeToSignature("class", stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("3wE-]o&Nw%o}Wc-9Xz");
      try { 
        Utility.typeOfSignature("(L##pzi'LiTJrt|C&;)Lclass;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (L##pzi'LiTJrt|C&;)Lclass;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte) (-54);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$8c$3d$8c_sd$ca", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.classOrInterface(256);
      Utility.accessToString(256);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte) (-35);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 220, 181);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.searchOpcode("#v]l~u*Z");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      Utility.encode(byteArray0, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteArray0, constantPool0, (-536), 4314, false);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "0:    aastore\n", "0:    aastore\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.convertString("D$_!\"dY+5rZ");
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-31);
      byteArray0[0] = (byte) (-31);
      byte byte1 = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)13;
      byte byte2 = (byte) (-86);
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -24
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = "multianewarray";
      Utility.convertString("multianewarray");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 183, 4139, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      boolean boolean0 = true;
      Utility.signatureToString("B.*/ ~6CmX6oAqB8", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("B.*/ ~6CmX6oAqB8");
      Utility.clearBit(742, 742);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)56;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("byte", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("Rn56j]p", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)63;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-21), 102, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.clearBit(179, 179);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)6;
      byte byte0 = (byte) (-65);
      byteArray0[3] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.compactClassName("land", true);
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("@n=-n(Z PMfb", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `@n=-n(Z PMfb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantPool0.accept(descendingVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-128), (-1251));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)73;
      byteArray0[0] = (byte)73;
      byte byte1 = (byte)48;
      byteArray0[1] = (byte)48;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "O7ZNIU}/$~:%%'j\\";
      // Undeclared exception!
      try { 
        Utility.signatureToString("O7ZNIU}/$~:%%'j", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O7ZNIU}/$~:%%'j'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface(512);
      int int0 = 46;
      Utility.setBit(46, 512);
      // Undeclared exception!
      try { 
        Utility.signatureToString("constant pool\t\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `constant pool\t\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)39, 95, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.compactClassName("baload", "Q+W}?Mw4!?'<$,U", false);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int int0 = Utility.clearBit((-530), 50);
      assertEquals((-262674), int0);
      
      String string0 = Utility.convertString("iqa+d=_7XY7Z$");
      assertEquals("iqa+d=_7XY7Z$", string0);
      
      String string1 = Utility.classOrInterface((-530));
      assertEquals("class", string1);
      
      String string2 = Utility.compactClassName("0 .ae6ad{5xl", "iqa+d=_7XY7Z$", false);
      assertEquals("0 .ae6ad{5xl", string2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)43;
      String string3 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string3);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SkC6y/oA");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)52;
      byteArray0[0] = (byte)52;
      Utility.encode(byteArray0, true);
      Utility.signatureToString("SkC6y/oA");
      Utility.toHexString(byteArray0);
      Utility.methodSignatureReturnType("SkC6y/oA", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("invokevirtual");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokevirtual'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("a29'Y>");
      Utility.accessToString(83);
      Utility.fillup("e<|", 83, false, '6');
      Utility.classOrInterface(83);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte)85;
      Constant[] constantArray0 = new Constant[4];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("66666666666666666666666666666666666666666666666666666666666666666666666666666666e<|", "monitorenter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"monitorenter\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean boolean0 = false;
      Utility.signatureToString("Illegally nested brackets:", false);
      Utility.signatureToString("Illegally nested brackets:");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("int", ";", "ret");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BQ|lr/|~?+*FcV3TVsj");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 858, 858);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("UPtHz]+Y4)z*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UPtHz]+Y4)z*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("VN");
      assertEquals((byte)12, byte0);
      
      Utility.accessToString(16);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "VN";
      stringArray0[1] = "VN";
      stringArray0[2] = "final";
      Utility.methodTypeToSignature("VN", stringArray0);
      String string0 = Utility.accessToString((-3105));
      assertEquals("public private protected static final volatile transient native interface synthetic annotation enum", string0);
      
      String string1 = Utility.methodTypeToSignature("156", stringArray0);
      assertEquals("(LVN;LVN;Lfinal;)L156;", string1);
      
      String string2 = Utility.printArray((Object[]) stringArray0, true);
      assertEquals("{VN, VN, final}", string2);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = " &nZ'1";
      Utility.getSignature(" &nZ'1");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString(">%<*.8i{", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>%<*.8i{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte)56);
      byteSequence0.reset();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore\t\t%242", string1);
      
      String string2 = Utility.replace("U=dIbf[hWe#", "Z\"", "Z\"");
      assertEquals("U=dIbf[hWe#", string2);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Utility.compactClassName("iaload", "iaload", false);
      Utility.replace("p\"", "V!%<GYUmpWCt", "p\"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p\"");
      String string0 = Utility.compactClassName("double", "double", false);
      String string1 = Utility.fillup("double", (-196), false, ';');
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.replace("double", "double", (String) null);
      assertEquals("null", string2);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('J');
      assertTrue(boolean0);
      
      String string3 = Utility.accessToString((-350), false);
      assertEquals("private synchronized transient interface abstract strictfp synthetic annotation enum", string3);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "$@G2rsZ5Q8m\\4ZI";
      Utility.getSignature("$@G2rsZ5Q8m\u0004ZI");
      Utility.compactClassName("L$@G2rsZ5Q8m\u0004ZI;");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "$@G2rsZ5Q8m\u0004ZI";
      objectArray0[2] = (Object) "L$@G2rsZ5Q8m\u0004ZI;";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "L$@G2rsZ5Q8m\u0004ZI;";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)11;
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)91;
      byte byte1 = (byte)94;
      byteArray0[3] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 91
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      Utility.classOrInterface(1207);
      Utility.decode("0?D1AY", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('S');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "class";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals("S{S, class, , class}\n", stringWriter1.toString());
      assertEquals("S{S, class, , class}\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-121);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("10 97 87");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 10 97 87
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.InnerClasses";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.InnerClasses", "org.apache.bcel.classfile.InnerClasses", "org.apache.bcel.classfile.InnerClasses");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.InnerClasses
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hT");
      Utility.compactClassName("byte");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('3');
      Utility.clearBit(1912, 1912);
      Utility.accessToString(75, false);
      Utility.setBit(1912, 1912);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("8}g", "", "boolean", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8}g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)83;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char char0 = 'J';
      Utility.format((-806), 87, false, 'J');
      Utility.encode(byteArray0, false);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("java.lang.156", true);
      Utility.toHexString(byteArray0);
      Utility.signatureToString("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ-806", false);
      boolean boolean0 = false;
      Utility.accessToString((int) (byte)37, false);
      Utility.printArray((Object[]) null, false);
      try { 
        Utility.typeOfMethodSignature("25 53");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 25 53
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte) (-122);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Utility.isSet(62, 62);
      try { 
        Utility.methodSignatureArgumentTypes("Cmz{_&Ax\"5--Hr", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Cmz{_&Ax\"5--Hr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("OScdG;)b}w&q:");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "OScdG;)b}w&q:");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) printStream0;
      objectArray0[1] = (Object) printStream0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) printStream0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) mockPrintStream0;
      Utility.printArray(printStream0, objectArray0);
      try { 
        Utility.typeOfSignature("OScdG;)b}w&q:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OScdG;)b}w&q:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = "^";
      Utility.convertString("^");
      // Undeclared exception!
      try { 
        Utility.signatureToString("^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Utility.printArray((Object[]) null);
      Utility.clearBit(170, 1488);
      Utility.replace("if_acmpne", " 9nA", "java.lang.156");
      Utility.accessToString(176, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)73;
      Utility.encode(byteArray0, false);
      Utility.toHexString(byteArray0);
      Utility.classOrInterface((byte)73);
      Utility.classOrInterface(47);
      try { 
        Utility.typeOfMethodSignature("java.lang.156");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.156
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      int int0 = 156;
      int int1 = 3;
      Utility.format(156, 3, false, '\'');
      Utility.compactClassName("156");
      try { 
        Utility.typeOfSignature("156");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 156
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("SAME_EXTENDED");
      Locale locale0 = new Locale("SAME_EXTENDED", "dastore");
      Object[] objectArray0 = new Object[0];
      locale0.getDisplayVariant();
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "? super ", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)90;
      byteArray0[1] = (byte)90;
      MockFile mockFile0 = new MockFile("");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "? super ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"? super \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)91;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("12 56 00 b7 45 5b", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("O", "", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("if_acmpeq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_acmpeq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Utility.classOrInterface(25);
      Utility.isSet(74, 62);
      try { 
        Utility.decode("class", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = "<JQG&j&h;}#c[crOA";
      try { 
        Utility.typeOfSignature("<JQG&j&h;}#c[crOA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <JQG&j&h;}#c[crOA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = "? extends ";
      Utility.replace("Y36Wgg!:3@R!HL", "long", "? extends ");
      String string1 = "dup";
      Utility.compactClassName("dup");
      try { 
        Utility.typeOfSignature("Y36Wgg!:3@R!HL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y36Wgg!:3@R!HL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[8];
      mockPrintWriter0.printf("if_icmpge", objectArray0);
      objectArray0[0] = (Object) byteArrayOutputStream0;
      mockPrintWriter0.flush();
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      byteArrayOutputStream0.write(34);
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[5] = (Object) byteArrayOutputStream0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      mockPrintWriter0.println((double) 34);
      Utility.setBit(34, 90);
      Utility.printArray(objectArray0, false);
      Utility.accessToString(67108898);
      // Undeclared exception!
      try { 
        Utility.signatureToString("if_icmpge\", if_icmpge\", org.evosuite.runtime.mock.java.io.MockPrintWriter@5c71b688, if_icmpge\", if_icmpge\", if_icmpge\", org.evosuite.runtime.mock.java.io.MockPrintWriter@5c71b688, org.evosuite.runtime.mock.java.io.MockPrintWriter@5c71b688", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_icmpge\", if_icmpge\", org.evosuite.runtime.mock.java.io.MockPrintWriter@5c71b688, if_icmpge\", if_icmpge\", if_icmpge\", org.evosuite.runtime.mock.java.io.MockPrintWriter@5c71b688, org.evosuite.runtime.mock.java.io.MockPrintWriter@5c71b688'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte) (-93);
      byteArray0[8] = (byte) (-35);
      Utility.toHexString(byteArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "54 6b aa 84 f1 5d d0 a3 dd";
      stringArray0[1] = "54 6b aa 84 f1 5d d0 a3 dd";
      stringArray0[2] = "54 6b aa 84 f1 5d d0 a3 dd";
      stringArray0[3] = "54 6b aa 84 f1 5d d0 a3 dd";
      stringArray0[4] = "54 6b aa 84 f1 5d d0 a3 dd";
      stringArray0[5] = "54 6b aa 84 f1 5d d0 a3 dd";
      stringArray0[6] = "54 6b aa 84 f1 5d d0 a3 dd";
      Utility.methodTypeToSignature("54 6b aa 84 f1 5d d0 a3 dd", stringArray0);
      Utility.encode(byteArray0, true);
      Utility.classOrInterface(1178);
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureReturnType("dcmpl", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dcmpl'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Utility";
      String string1 = "N";
      Utility.compactClassName("org.apache.bcel.classfile.Utility", "N", true);
      Utility.isJavaIdentifierPart(':');
      Utility.getSignature("N");
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Utility$1";
      Utility.getSignature("org.apache.bcel.classfile.Utility$1");
      try { 
        Utility.typeOfSignature("org.apache.bcel.classfile.Utility$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility$1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Utility.getSignature("double");
      Utility.searchOpcode("double");
      File file0 = MockFile.createTempFile("double", "I");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "double";
      objectArray0[1] = (Object) "I";
      objectArray0[2] = (Object) "D";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(42L, file0.length());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)124;
      byte byte0 = (byte)115;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)45;
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1889), (-1909768686), false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("s>Rdhnm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `s>Rdhnm'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
