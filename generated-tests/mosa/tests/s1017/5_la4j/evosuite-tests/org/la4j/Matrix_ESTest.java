/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:31:30 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.setColumn((-1828), (double) (-1828));
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(18, 18);
      basic2DMatrix0.removeLastColumn();
      double double0 = basic2DMatrix0.determinant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "%%MatrixMarket matrix array real general\n";
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("o@*TOKamus%2UX@l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("   ");
      // Undeclared exception!
      try { 
        matrix0.setColumn(9, (double) (-1046));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(9, 9);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      basic2DMatrix0.updateColumn(8, vectorFunction0);
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.add((Matrix) basic1DMatrix0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = (-2054114792);
      // Undeclared exception!
      try { 
        Matrix.zero((-2054114792), (-2054114792));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2054114792x-2054114792
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.product();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.euclideanNorm();
      basic2DMatrix0.insert((Matrix) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(18, 18);
      basic2DMatrix0.determinant();
      basic2DMatrix0.sliceTopLeft(2, 2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        basic1DMatrix0.get(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(9, 9);
      Integer integer0 = new Integer(247);
      basic2DMatrix0.power(9);
      DenseMatrix.identity(6);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      basic2DMatrix0.trace();
      basic2DMatrix0.subtract(0.0);
      // Undeclared exception!
      try { 
        Matrix.from1DArray(2147483645, (-3215), (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 2147483645x-3215
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      // Undeclared exception!
      try { 
        basic1DMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      columnMajorSparseMatrix0.swapColumns((-840), (-840));
      int int0 = 48;
      MockRandom mockRandom0 = new MockRandom(48);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.eachInRow((-840), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -840
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.kroneckerProduct(basic1DMatrix0);
      basic2DMatrix0.sum();
      basic2DMatrix0.insert((Matrix) basic1DMatrix0);
      // Undeclared exception!
      try { 
        Matrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(18, 18);
      basic2DMatrix0.shuffle();
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(18, 18);
      // Undeclared exception!
      try { 
        basic2DMatrix0.maxInRow(18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.maxInRow(2348);
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(18, 18);
      basic2DMatrix0.removeFirstColumn();
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.maxInColumn(192);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(15, 15);
      // Undeclared exception!
      try { 
        Basic2DMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '16' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(7, 7, (-91.6692364551));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic1DMatrix0.transformColumn(7, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 9;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(9, 1016);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1016);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) denseMatrix0, 1016, 772, 772, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 1016, 772
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("");
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) null, (-2655), 2666);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -2655x2666
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic1DMatrix0.transformRow((-3816), vectorFunction0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3816);
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-3816), Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3816x2147483647
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("");
      matrix0.setRow(8, (double) 8);
      matrix0.determinant();
      matrix0.blankOfRows(8);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(18, 18);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      basic2DMatrix0.withInverter(linearAlgebra_InverterFactory0);
      basic2DMatrix0.norm();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV("");
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.toRowMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(25);
      basic2DMatrix0.subtract(2317.37);
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(3, 3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      matrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(9, 9, 9);
      Matrix matrix0 = basic1DMatrix0.rotate();
      matrix0.columns();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("0");
      cRSMatrix0.rank();
      Basic2DMatrix.fromCSV("0");
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      DenseVector.fromCSV("0");
      // Undeclared exception!
      try { 
        cRSMatrix0.minInColumn((-1749));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1749' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(18, 18);
      basic2DMatrix0.determinant();
      basic2DMatrix0.toBinary();
      // Undeclared exception!
      try { 
        basic2DMatrix0.maxInColumn(18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) basic1DMatrix0, 5, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 5 rows and 5 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int int0 = (-2953);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) basic1DMatrix0, 2, 2, 2, (-2953));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 2x-2953
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV(", ");
      Matrix matrix0 = basic1DMatrix0.multiply(7.105427357601002E-13);
      MatrixMatrixOperation<Vector> matrixMatrixOperation0 = (MatrixMatrixOperation<Vector>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((MatrixOperation) null).when(matrixMatrixOperation0).partiallyApply(any(org.la4j.matrix.DenseMatrix.class));
      // Undeclared exception!
      try { 
        matrix0.apply(matrixMatrixOperation0, (Matrix) basic1DMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(9, 9);
      basic2DMatrix0.copyOfRows(9);
      basic2DMatrix0.determinant();
      basic2DMatrix0.toRowMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(9, (-1090.1314968974));
      sparseMatrix0.toCSV((NumberFormat) decimalFormat0);
      Matrix matrix0 = sparseMatrix0.copyOfShape(15, 64);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix0.transformRow(6, vectorFunction0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      sparseMatrix0.non(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("");
      matrix0.determinant();
      matrix0.add(1878.982512911753);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(Integer.MAX_VALUE, Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV("0");
      basic2DMatrix0.determinant();
      basic2DMatrix0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(18, 18);
      basic2DMatrix0.determinant();
      basic2DMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.determinant();
      Vector vector0 = basic2DMatrix0.getColumn(1);
      basic2DMatrix0.multiply(vector0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(3, 3);
      MockRandom mockRandom0 = new MockRandom();
      matrix0.determinant();
      // Undeclared exception!
      try { 
        Matrix.unit(3, (-1431655764));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 3;
      // Undeclared exception!
      try { 
        Matrix.zero(3, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.updateRow((-604), vectorFunction0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      inPlaceCopyMatrixToMatrix0.apply((DenseMatrix) basic2DMatrix0, (DenseMatrix) basic2DMatrix0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("       ");
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      matrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(9, 9);
      basic2DMatrix0.determinant();
      basic2DMatrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      // Undeclared exception!
      try { 
        basic1DMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic1DMatrix0.add(3.0);
      basic2DMatrix0.insert((Matrix) basic1DMatrix0);
      basic1DMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[12];
      intArray0[0] = 1493;
      Matrix matrix0 = Matrix.identity(1493);
      Matrix.block(matrix0, matrix0, matrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("0");
      cRSMatrix0.rank();
      Matrix.identity(0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 903;
      Matrix matrix0 = Matrix.fromCSV("");
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix1 = matrix0.transformColumn(9, vectorFunction0);
      Matrix matrix2 = matrix1.multiply((double) 903);
      // Undeclared exception!
      try { 
        matrix2.insert(matrix1, 0, 778);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 0 rows and 778 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(9, 9);
      basic2DMatrix0.mkString("mnK,T.", "SWEEP");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(56);
      Matrix matrix0 = rowMajorSparseMatrix0.removeLastRow();
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix1 = Matrix.randomSymmetric(56, mockRandom0);
      matrix0.equals(matrix1, (double) 56);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(13, 13);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      basic2DMatrix0.mkString((NumberFormat) decimalFormat0);
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket matrix nrrayreal gYneralx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown format: nrrayreal.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(7, 7);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 7 rows and 7 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(9, 9);
      basic2DMatrix0.copy();
      MockRandom mockRandom0 = new MockRandom();
      Matrix.random(9, 9, mockRandom0);
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(56);
      rowMajorSparseMatrix0.removeLastRow();
      MockRandom mockRandom0 = new MockRandom();
      Matrix.randomSymmetric(56, mockRandom0);
      Vector vector0 = Vector.constant(7, 56);
      rowMajorSparseMatrix0.setRow(2147483645, vector0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(9, 9);
          basic2DMatrix0.toColumnMajorSparseMatrix();
          basic2DMatrix0.diagonalProduct();
          basic2DMatrix0.determinant();
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("");
      matrix0.setRow(8, (double) 8);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.foldColumns(vectorAccumulator0);
      matrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(9, (-1090.1314968974));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      sparseMatrix0.foldColumns(vectorAccumulator0);
      sparseMatrix0.toCSV((NumberFormat) decimalFormat0);
      sparseMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.trace();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertColumn(0, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      Matrix matrix0 = Matrix.zero(3, 3);
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight(429, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [429..3][3..3].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(7);
      basic2DMatrix0.toRowVector();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Matrix matrix0 = basic2DMatrix0.insert((Matrix) basic1DMatrix0);
      matrix0.hadamardProduct(basic1DMatrix0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.constant((-2034458190), 5, 5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(3, 3);
      MockRandom mockRandom0 = new MockRandom();
      matrix0.determinant();
      matrix0.blankOfColumns(3);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "";
      Matrix matrix0 = Matrix.fromCSV("");
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(8, mockRandom0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.insert(matrix0, 8, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 8 rows and 4 cols at 0, 0 from a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(18, 18);
      Locale locale0 = Locale.PRC;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      sparseMatrix0.toCSV(numberFormat0);
      sparseMatrix0.divide(18);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 8;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(8, mockRandom0);
      Vector vector0 = Vector.constant(8, 0.0);
      Matrix matrix1 = matrix0.insertColumn(3, vector0);
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        matrix1.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.columnMajorIterator();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.insert((Matrix) cRSMatrix0);
      SparseVector sparseVector0 = SparseVector.zero(1827);
      // Undeclared exception!
      try { 
        cRSMatrix0.setColumn(37, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1827. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.toDenseMatrix();
      double[][] doubleArray0 = new double[0][0];
      Matrix.from2DArray(doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      basic1DMatrix0.foldColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(24, 24);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.iteratorOfColumn((-1));
      basic2DMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      basic1DMatrix0.transform(matrixFunction0);
      basic1DMatrix0.toString();
      basic1DMatrix0.toMatrixMarket();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(9, 9);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      basic2DMatrix0.transform(matrixFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.eachInRow(9, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(3, 3);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3, 3);
      cRSMatrix0.subtract(matrix0);
      cRSMatrix0.setAll(3);
      cRSMatrix0.equals(matrix0, (double) 3);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV("");
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix0.is(matrixPredicate0);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(970, 3);
      // Undeclared exception!
      try { 
        basic2DMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(17, 17);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.swapColumns(541, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '541' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      Matrix matrix0 = Matrix.randomSymmetric(8, mockRandom0);
      Matrix matrix1 = Matrix.diagonal(8, 8);
      matrix0.subtract(matrix1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.sliceTopLeft(2003, (-1431655764));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..2003][0..-1431655764].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2, (-1090.1314968974));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      sparseMatrix0.foldRows(vectorAccumulator0);
      sparseMatrix0.toCSV(numberFormat0);
      sparseMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(24, 24);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(24);
      matrix0.equals((Object) cRSMatrix0);
      matrix0.minInRow(17);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[0];
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(573, 8, doubleArray0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.slice((-422), 8, 724, 573);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-422' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(9, (-1090.1314968974));
      sparseMatrix0.columnMajorIterator();
      sparseMatrix0.trace();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(8, 3096, 706);
      Matrix.zero(5, 961);
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(8, 8);
      sparseMatrix0.equals((Matrix) basic2DMatrix0, (double) 5);
      basic2DMatrix0.determinant();
      sparseMatrix0.setColumn(706, (double) 8);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.insert((Matrix) basic1DMatrix0);
      basic2DMatrix0.toDenseMatrix();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RowMajorSparseMatrix.identity(554);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(5);
      Locale locale0 = Locale.CANADA;
      sparseMatrix0.sum();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      sparseMatrix0.non(matrixPredicate0);
      sparseMatrix0.blank();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(0, 2083);
      Matrix matrix0 = basic1DMatrix0.copyOfColumns(2083);
      matrix0.sum();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      Matrix matrix0 = Matrix.randomSymmetric(8, mockRandom0);
      matrix0.determinant();
      matrix0.sliceBottomRight(8, 8);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(18, 18);
      basic2DMatrix0.determinant();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.updateRow(18, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(2659);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      rowMajorSparseMatrix0.non(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt(7);
      Matrix matrix0 = Matrix.randomSymmetric(7, mockRandom0);
      mockRandom0.setSeed(0L);
      Matrix matrix1 = matrix0.removeLastColumn();
      Matrix matrix2 = matrix1.subtract((double) 7);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix2.updateRow(0, vectorFunction0);
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 7;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (double) 0L;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0L;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0L;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 7;
      doubleArray3[4] = (double) 7;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 7;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (double) 7;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) 0L;
      doubleArray5[3] = (double) 0L;
      doubleArray5[4] = (double) 0L;
      doubleArray5[5] = (double) 7;
      doubleArray5[6] = (double) 7;
      doubleArray5[7] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (double) 0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (double) 0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = (double) 0;
      doubleArray6[6] = (double) 0L;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = (double) 0L;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = (double) 0;
      doubleArray0[6] = doubleArray7;
      Matrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      RowMajorSparseMatrix.identity(554);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Locale locale0 = Locale.CANADA;
      locale0.getScript();
      cRSMatrix0.sum();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(8, mockRandom0);
      Vector vector0 = Vector.constant(8, (-1.3817374685584094));
      matrix0.determinant();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      mockRandom0.nextGaussian();
      matrix0.non(advancedMatrixPredicate0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 54;
      doubleArray1[1] = (double) 54;
      doubleArray1[2] = (double) 8;
      doubleArray1[3] = (-0.0011476000000000001);
      doubleArray1[4] = (double) 8;
      doubleArray0[0] = doubleArray1;
      Basic2DMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.insertColumn(9, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(24, 24);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(24, 24);
      cRSMatrix0.setAll(24);
      cRSMatrix0.equals(matrix0, (double) 24);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(24, 24);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(24, 24, 24);
      matrix0.equals((Object) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(8, mockRandom0);
      matrix0.equals((Object) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Matrix matrix0 = basic2DMatrix0.insert((Matrix) basic1DMatrix0);
      matrix0.minInRow(32);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(10);
      DenseVector denseVector0 = DenseVector.zero(758);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow(10, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..9
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(112, (-52.0));
      sparseMatrix0.toColumnVector();
      sparseMatrix0.copyOfRows(112);
      sparseMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(18, 18);
      DenseVector denseVector0 = DenseVector.constant(18, 18);
      Matrix matrix0 = denseVector0.toRowMatrix();
      basic2DMatrix0.insert(matrix0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("");
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      basic1DMatrix0.toMatrixMarket(numberFormat0);
      matrix0.insert((Matrix) basic1DMatrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      basic1DMatrix0.foldRows(vectorAccumulator0);
      MockRandom mockRandom0 = new MockRandom();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        matrix0.insertColumn((-1073741823), sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      NumberFormat.getInstance();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(9);
      cRSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(9, (-1090.1314968974));
      sparseMatrix0.toCSV((NumberFormat) decimalFormat0);
      // Undeclared exception!
      try { 
        sparseMatrix0.removeRow(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..8
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.rank();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV("0");
      DenseVector denseVector0 = DenseVector.fromCSV("0");
      basic2DMatrix0.insertRow(0, denseVector0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = Double.MIN_EXPONENT;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV("0");
      DenseVector denseVector0 = DenseVector.fromCSV("0");
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow((-1022), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.determinant();
      basic2DMatrix0.minInColumn(9);
      Matrix.identity(9);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("0");
      cRSMatrix0.rank();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV("0");
      DenseVector.fromCSV("0");
      basic2DMatrix0.determinant();
      cRSMatrix0.setRow(0, (-1033.71536));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.insert((Matrix) basic1DMatrix0);
      basic1DMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(21, mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      double double0 = new Integer(21);
      matrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.iteratorOfColumn(3082);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.JACOBI;
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      cRSMatrix0.rank();
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(3, 3);
      matrix0.determinant();
      // Undeclared exception!
      try { 
        matrix0.power((-3203));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -3203.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toString();
      basic2DMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(2, 2);
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV("9");
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      basic2DMatrix0.select(intArray0, intArray0);
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(24, 24);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(24);
      cRSMatrix0.equals(matrix0, (double) 24);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("0");
      cRSMatrix0.rank();
      Basic2DMatrix.fromCSV("0");
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      DenseVector.fromCSV("0");
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (-1.0);
      doubleArray0[2] = doubleArray3;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      basic1DMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV(" ");
      cRSMatrix0.rank();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV(" ");
      DenseVector.fromCSV(" ");
      // Undeclared exception!
      try { 
        basic2DMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(10, 10);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(13, 10);
      basic2DMatrix0.removeLastRow();
      basic2DMatrix0.determinant();
      // Undeclared exception!
      try { 
        basic1DMatrix0.insert((Matrix) denseMatrix0, (-1052), 32, 32, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1052, 32
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(19, mockRandom0);
      matrix0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        basic1DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt((-1));
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("0");
      cRSMatrix0.rank();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV("0");
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      Matrix.randomSymmetric(0, mockRandom0);
      basic2DMatrix0.determinant();
      cRSMatrix0.swapRows(0, 0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV("9");
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[7];
      intArray0[0] = 1030;
      intArray0[1] = (-734);
      intArray0[2] = (-1179);
      intArray0[3] = 8;
      intArray0[4] = 2596;
      intArray0[5] = (-342);
      int int0 = 6;
      intArray0[6] = 6;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket matrix`nrrayrealVgYneralx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected object: matrix`nrrayrealVgYneralx.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setMaximumFractionDigits(Integer.MAX_VALUE);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(9, (-1090.1314968974));
      sparseMatrix0.toCSV((NumberFormat) decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.rank();
      Matrix matrix0 = Matrix.fromCSV("0");
      matrix0.toCSV();
      // Undeclared exception!
      try { 
        cRSMatrix0.insert(matrix0, Integer.MAX_VALUE, 883, 0, (-2027), 0, 1135);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 0, -2027
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
