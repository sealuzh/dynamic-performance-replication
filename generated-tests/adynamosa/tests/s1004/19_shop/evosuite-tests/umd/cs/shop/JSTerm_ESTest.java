/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 03:24:53 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<aQf\"9{=X.e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) (-4);
      SystemInUtil.addInputLine("(<aQf\"9{=X.e");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("1VfBnal;YFh-Ps");
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.call();
      Integer integer0 = new Integer((-3504));
      Integer integer1 = new Integer((-4));
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "(<aQf\"9{=X.e";
      StringReader stringReader0 = new StringReader("(<aQf\"9{=X.e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SystemInUtil.addInputLine("laqq9");
      StringReader stringReader0 = new StringReader("IL~8!T)$|&\"W");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.isFunction();
      jSTerm1.toStr();
      SystemInUtil.addInputLine("d~c#");
      SystemInUtil.addInputLine("d~c#");
      jSTerm1.print();
      streamTokenizer0.wordChars(3521, 3521);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.skip(41);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.makeVariable();
      stringReader0.reset();
      JSSubstitution jSSubstitution1 = jSTerm2.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      jSTerm2.makeEval(true);
      jSSubstitution0.clear();
      stringReader0.markSupported();
      streamTokenizer0.slashSlashComments(true);
      jSTerm2.spliterator();
      jSTerm1.add((Object) jSTerm2);
      streamTokenizer1.slashSlashComments(true);
      JSTerm jSTerm3 = jSTerm1.call();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm2.equals(jSTerm2);
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      jSTerm1.isGround();
      JSTerm jSTerm5 = jSTerm0.parseList(streamTokenizer0);
      streamTokenizer0.nval = (double) (-4);
      jSTerm1.matches(jSTerm3);
      jSTerm5.matches(jSTerm2, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(ut &e2PEec<l");
      jSTerm0.add((Object) "(ut &e2PEec<l");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("F+oJ.yxzu4FXN");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement("F+oJ.yxzu4FXN");
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm2.forEach(consumer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm2);
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm5 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.equals(jSTerm5);
      // Undeclared exception!
      try { 
        jSTerm4.add(4, (Object) "(ut &e2PEec<l");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4 > 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SystemInUtil.addInputLine("laqq9");
      StringReader stringReader0 = new StringReader("IL~8!T)$|&\"W");
      StringReader stringReader1 = new StringReader("IL~8!T)$|&\"W");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.isFunction();
      jSTerm1.toStr();
      SystemInUtil.addInputLine("d~c#");
      jSTerm1.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader1.skip((-2897L));
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.makeVariable();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      jSTerm2.makeEval(true);
      jSSubstitution0.clear();
      streamTokenizer2.pushBack();
      Integer integer0 = new Integer(1263);
      jSTerm2.spliterator();
      jSTerm1.add((Object) jSTerm2);
      streamTokenizer1.slashSlashComments(true);
      JSTerm jSTerm3 = jSTerm1.call();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm4.equals(jSTerm5);
      jSTerm1.matches(jSTerm3, jSSubstitution0);
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SystemInUtil.addInputLine("laqq9");
      StringReader stringReader0 = new StringReader("IL~8!T)$|&\"W");
      StringReader stringReader1 = new StringReader("IL~8!T)$|&\"W");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      stringReader1.ready();
      jSTerm1.toStr();
      jSTerm1.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader1.skip((-2897L));
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution0);
      stringReader0.reset();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      jSTerm2.makeEval(true);
      Integer integer0 = new Integer((-48668853));
      streamTokenizer2.pushBack();
      Integer integer1 = new Integer(1294);
      streamTokenizer2.ordinaryChars((-48668853), (-4));
      jSTerm4.add((Object) jSTerm2);
      JSTerm jSTerm5 = jSTerm4.call();
      JSTerm jSTerm6 = new JSTerm(streamTokenizer2);
      jSTerm3.equals(jSTerm2);
      jSTerm1.isGround();
      jSTerm0.parseList(streamTokenizer2);
      jSTerm4.matches(jSTerm5);
      JSTerm jSTerm7 = null;
      try {
        jSTerm7 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SystemInUtil.addInputLine("laqq9");
      SystemInUtil.addInputLine("laqq9");
      StringReader stringReader0 = new StringReader("IL~8`T)$|&\"W");
      StringReader stringReader1 = new StringReader("laqq9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      stringReader1.ready();
      jSTerm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.stream();
      streamTokenizer0.resetSyntax();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      SystemInUtil.addInputLine((String) null);
      stringReader0.reset();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      jSTerm0.equals(jSTerm0);
      jSTerm0.makeEval(true);
      jSTerm0.isGround();
      Integer integer0 = new Integer((-48668853));
      Integer integer1 = new Integer(1319);
      SystemInUtil.addInputLine("IL~8`T)$|&\"W");
      jSTerm0.equals(jSTerm3);
      SystemInUtil.addInputLine((String) null);
      JSTerm jSTerm4 = jSTerm0.call();
      jSTerm4.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SystemInUtil.addInputLine("ut");
      SystemInUtil.addInputLine("laqq9");
      StringReader stringReader0 = new StringReader("IL~8`T)$|&\"W");
      StringReader stringReader1 = new StringReader("laqq9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      stringReader1.ready();
      jSTerm1.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.stream();
      streamTokenizer0.resetSyntax();
      jSTerm0.makeVariable();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm1.applySubstitutionT(jSSubstitution0);
      stringReader0.reset();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      jSTerm0.equals(jSTerm0);
      jSTerm2.makeEval(true);
      jSTerm1.isGround();
      streamTokenizer2.slashSlashComments(true);
      Integer integer0 = new Integer((-48668853));
      Integer integer1 = new Integer(1319);
      jSTerm5.add((Object) jSTerm2);
      SystemInUtil.addInputLine("IL~8`T)$|&\"W");
      JSTerm jSTerm6 = jSTerm5.call();
      jSTerm5.call();
      jSTerm2.equals(jSTerm6);
      jSTerm2.call();
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SystemInUtil.addInputLine("laqq9");
      StringReader stringReader0 = new StringReader("IL~8`T)$|&\"W");
      StringReader stringReader1 = new StringReader("laqq9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      stringReader1.ready();
      jSTerm1.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.makeFunction();
      JSTerm jSTerm3 = new JSTerm();
      streamTokenizer0.resetSyntax();
      jSTerm0.makeVariable();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm1.applySubstitutionT(jSSubstitution0);
      stringReader0.reset();
      JSJshopVars.VarCounter = 41;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      jSSubstitution0.removeElement(streamTokenizer1);
      jSTerm2.makeEval(true);
      jSTerm4.isGround();
      streamTokenizer2.slashSlashComments(true);
      Integer integer0 = new Integer((-48668853));
      Integer integer1 = new Integer(1359);
      jSTerm5.add((Object) jSTerm2);
      jSTerm5.call();
      JSTerm jSTerm6 = jSTerm5.call();
      jSTerm5.print();
      jSTerm6.equals(jSTerm5);
      System.setCurrentTimeMillis(1L);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(ut &e2PEec<l");
      jSTerm0.add((Object) "(ut &e2PEec<l");
      JSTerm jSTerm1 = jSTerm0.call();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(4787);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.reset();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm1, jSSubstitution0);
      JSJshopVars.slash = (-4);
      stringReader0.read();
      SystemInUtil.addInputLine("fe@*r");
      jSTerm1.isGround();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm0.call();
      JSJshopVars.greaterT = (-4);
      stringReader0.reset();
      streamTokenizer0.ttype = (-4);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.makeEval(true);
      Integer integer0 = new Integer((-4));
      jSSubstitution0.remove((Object) jSTerm1);
      jSTerm0.applySubstitutionT(jSSubstitution1);
      Integer integer1 = new Integer((-4));
      JSTerm jSTerm4 = new JSTerm();
      JSJshopVars.dot = 40;
      jSTerm1.cloneT();
      jSTerm3.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SystemInUtil.addInputLine("756.0");
      SystemInUtil.addInputLine("laqq9");
      StringReader stringReader0 = new StringReader("IL~8!T)$|&\"W");
      StringReader stringReader1 = new StringReader("IL~8!T)$|&\"W");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      stringReader1.ready();
      jSTerm1.toStr();
      jSTerm1.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      stringReader1.skip((-2897L));
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.makeFunction();
      JSTerm jSTerm3 = new JSTerm();
      streamTokenizer0.resetSyntax();
      jSTerm0.makeVariable();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm1.applySubstitutionT(jSSubstitution0);
      stringReader0.reset();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      jSTerm2.makeEval(true);
      streamTokenizer2.slashSlashComments(true);
      Integer integer0 = new Integer((-48668853));
      Integer integer1 = new Integer(1316);
      jSTerm5.add((Object) jSTerm2);
      jSTerm5.call();
      jSTerm5.call();
      JSTerm jSTerm6 = new JSTerm(streamTokenizer2);
      System.setCurrentTimeMillis(4602L);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("()W`$KVs.XN5Ah");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      SystemInUtil.addInputLine((String) null);
      streamTokenizer0.ordinaryChar(4340);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "()W`$KVs.XN5Ah");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      stringReader0.skip(0L);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.makeFunction();
      JSTerm jSTerm3 = new JSTerm();
      streamTokenizer1.resetSyntax();
      jSTerm1.spliterator();
      jSTerm1.makeVariable();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm4);
      stringReader0.read();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.matches(jSTerm3, jSSubstitution1);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm6.iterator();
      jSTerm5.standardizerTerm();
      JSTerm jSTerm7 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(ut &e2PEec<l");
      SystemInUtil.addInputLine("Jh!iRzpvE");
      jSTerm0.add((Object) "(ut &e2PEec<l");
      JSTerm jSTerm1 = jSTerm0.call();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(4774);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.reset();
      jSTerm1.matches(jSTerm1, jSSubstitution0);
      JSJshopVars.slash = (-4);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.print();
      SystemInUtil.addInputLine("fe@*r");
      jSTerm2.isGround();
      jSTerm1.standarizerPredicateForm();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = jSTerm2.call();
      JSJshopVars.greaterT = (-4);
      stringReader0.reset();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.makeEval(true);
      jSTerm4.makeEval(true);
      Integer integer0 = new Integer(10);
      Integer integer1 = new Integer((-4));
      jSTerm0.add((Object) jSTerm1);
      jSTerm2.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2 >= 2
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(lpQW|(e9");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("2;eGB(R");
      StringReader stringReader2 = new StringReader("h");
      SystemInUtil.addInputLine("(lpQW|(e9");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.print();
      SystemInUtil.addInputLine((String) null);
      jSTerm1.isGround();
      jSTerm0.standarizerPredicateForm();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm0.call();
      stringReader0.reset();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader2);
      jSTerm3.makeEval(true);
      Integer integer0 = new Integer(62);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.remove((Object) stringReader1);
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution0);
      Integer integer1 = new Integer((-945));
      jSTerm3.firstElement();
      jSTerm2.add((Object) null);
      jSTerm1.equals(jSTerm3);
      jSTerm3.call();
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SystemInUtil.addInputLine("756.0");
      SystemInUtil.addInputLine("laqq9");
      StringReader stringReader0 = new StringReader("IL~8!T)$|&\"W");
      StringReader stringReader1 = new StringReader("IL~8!T)$|&\"W");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader2 = new StringReader("failed substitution");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      stringReader2.ready();
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("(. IL8!T nil )", stringBuffer0.toString());
      
      jSTerm1.print();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm1.equals(jSTerm2);
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm2.matches(jSTerm3, jSSubstitution0);
      assertFalse(jSSubstitution0.fail());
      assertFalse(jSTerm3.isEval());
      
      JSTerm jSTerm4 = jSTerm2.cloneT();
      assertTrue(jSTerm4.equals((Object)jSTerm3));
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(ut &e2PEec<l");
      SystemInUtil.addInputLine("Jh!iRzpvE");
      jSTerm0.add((Object) "(ut &e2PEec<l");
      JSTerm jSTerm1 = jSTerm0.call();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.reset();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm1, jSSubstitution0);
      JSJshopVars.slash = (-4);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.print();
      jSSubstitution1.add((Object) jSTerm1);
      SystemInUtil.addInputLine("fe@*r");
      jSTerm2.isGround();
      jSTerm1.standarizerPredicateForm();
      JSTerm jSTerm3 = new JSTerm();
      jSSubstitution0.add((Object) streamTokenizer0);
      jSTerm2.call();
      JSJshopVars.greaterT = (-4);
      stringReader0.reset();
      streamTokenizer0.ttype = (-4);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.makeEval(true);
      Integer integer0 = new Integer((-4));
      jSSubstitution0.remove((Object) integer0);
      jSTerm0.applySubstitutionT(jSSubstitution1);
      Integer integer1 = new Integer(889);
      jSTerm2.firstElement();
      jSTerm0.add((Object) "(ut &e2PEec<l");
      jSTerm1.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SystemInUtil.addInputLine("laqq9");
      StringReader stringReader0 = new StringReader("IL~8!T)$|&\"W");
      StringReader stringReader1 = new StringReader("IL~8!T)$|&\"W");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader2 = new StringReader("failed substitution");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      stringReader2.ready();
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(14, stringBuffer0.length());
      assertEquals("[., [IL8!T], [nil]]", jSTerm1.toString());
      
      jSTerm1.print();
      JSTerm jSTerm2 = jSTerm1.call();
      boolean boolean0 = jSTerm1.equals(jSTerm2);
      assertTrue(boolean0);
      assertEquals("[., [IL8!T], [nil]]", jSTerm2.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertNotSame(jSTerm2, jSTerm1);
      
      jSTerm2.matches(jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(ut &e2PEec<l");
      SystemInUtil.addInputLine("Jh!iRzpvE");
      jSTerm0.add((Object) "(ut &e2PEec<l");
      JSTerm jSTerm1 = jSTerm0.call();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(4774);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.reset();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm1, jSSubstitution0);
      JSJshopVars.slash = (-4);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.print();
      jSSubstitution1.add((Object) jSTerm1);
      SystemInUtil.addInputLine("fe@*r");
      jSTerm2.isGround();
      jSTerm1.standarizerPredicateForm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.call();
      JSJshopVars.greaterT = (-4);
      stringReader0.reset();
      streamTokenizer0.ttype = (-4);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.makeEval(true);
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution1);
      Integer integer0 = new Integer(889);
      jSTerm2.firstElement();
      jSTerm0.add((Object) "(ut &e2PEec<l");
      jSTerm1.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm4.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = 1;
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      stringReader0.read(charArray0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = null;
      stringReader0.reset();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.makeEval(true);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Integer integer0 = new Integer((-3226));
      jSTerm2.firstElement();
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.get(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      StringReader stringReader0 = new StringReader("7)ka'O#GSr;hb");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      jSTerm0.makeFunction();
      boolean boolean0 = jSTerm3.isGround();
      assertTrue(jSTerm0.isFunction());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("88VC^-/O:p@6h;~~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.clone();
      jSTerm0.isGround();
      jSTerm0.isFunction();
      jSTerm0.makeFunction();
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "(-PQ[9\"=*[)%;XC1RL# ";
      StringReader stringReader0 = new StringReader("(-PQ[9\"=*[)%;XC1RL# ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qGBgN@u'mfFN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.spliterator();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertFalse(jSTerm2.isEval());
      
      jSTerm2.makeEval(true);
      jSTerm2.matches(jSTerm0, jSSubstitution1);
      jSTerm2.standardizerTerm();
      assertFalse(jSTerm0.equals((Object)jSTerm2));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(".");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      StringReader stringReader0 = new StringReader("jbEmUvAR'6.");
      Integer integer0 = new Integer(51);
      Object object0 = jSTerm0.clone();
      jSTerm0.addElement(object0);
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.ensureCapacity(51);
      jSTerm0.print();
      jSTerm0.cloneT();
      assertEquals("[[], [[]]]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm0.addElement("(apQC[f%1XeL#s");
      jSTerm0.setSize(2273);
      jSTerm0.addElement(")cueOMz>s=K3&I^](");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SystemInUtil.addInputLine("laqq9");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      StringReader stringReader0 = new StringReader("IL~8!T)$|&\"W");
      StringReader stringReader1 = new StringReader("IL~8!T)$|&\"W");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader2 = new StringReader("failed substitution");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertEquals(14, stringBuffer0.length());
      
      jSTerm2.print();
      boolean boolean0 = jSTerm0.equals(jSTerm2);
      assertFalse(boolean0);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm2.isFunction());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("IL~8!T)$|&\"W");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(apQC[f%1Xe)L#s");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(apQC[f%1Xe)L#s");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("(apQC[f%1Xe)L#s");
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.resetSyntax();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      stringReader1.skip((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm0.isVariable();
      SystemInUtil.addInputLine((String) null);
      JSTerm jSTerm5 = new JSTerm();
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm6 = new JSTerm();
      jSTerm1.setSize(77);
      // Undeclared exception!
      try { 
        jSTerm6.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";l(({6I9/\"m|h[$ _v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm0.makeVariable();
      jSTerm0.makeVariable();
      jSTerm0.makeEval(true);
      boolean boolean0 = jSTerm0.isEval();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6ZZsI8+=Ocih[Ys");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("($&N'BK8bP-;Rh9o");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElement(stringReader0);
      jSSubstitution1.add((Object) stringReader0);
      jSTerm0.isVariable();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Object object0 = jSTerm0.clone();
      jSTerm0.addElement(object0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.print();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.print();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm0.matches(jSTerm2);
      jSTerm1.matches(jSTerm3);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution0);
      JSJshopVars.plus = (-3);
      StringReader stringReader0 = new StringReader("(LaQ[9\"[f%1XeL#s");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qGBgN@u'mfFN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'W';
      charArray0[1] = '\"';
      charArray0[2] = '3';
      charArray0[3] = 'E';
      stringReader0.read(charArray0);
      jSTerm0.spliterator();
      jSTerm0.makeVariable();
      jSTerm0.toStr();
      jSTerm0.isGround();
      assertTrue(jSTerm0.isVariable());
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSTerm) null);
      assertFalse(jSTerm0.isFunction());
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      StringReader stringReader0 = new StringReader("7)ka'O#GSr;hb");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution1);
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(43);
      StringReader stringReader0 = new StringReader("6#QvD`U'i'wguMqK");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement(streamTokenizer1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.commentChar((-1416));
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      jSTerm0.matches(jSTerm2);
      jSTerm0.equals(jSTerm3);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(LaQ[9\"[f%1XeL#s");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(stringReader0);
      int int0 = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement(stringReader0);
      jSTerm1.toStr();
      jSTerm0.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      String string0 = "%K$8\"=yTs\"<-";
      StringReader stringReader1 = new StringReader("%K$8\"=yTs\"<-");
      StringReader stringReader2 = new StringReader("%K$8\"=yTs\"<-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      jSTerm0.print();
      JSTerm jSTerm2 = new JSTerm();
      jSSubstitution0.instance(jSTerm2);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(ut &&ze*aPu.Eec<lT");
      jSTerm0.addElement(stringReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Object object0 = jSTerm0.clone();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.cloneT();
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertFalse(boolean0);
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isFunction());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(LaQ[9\"[f%1XeL#s");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.isVariable();
      jSSubstitution0.add((Object) "(LaQ[9\"[f%1XeL#s");
      jSTerm0.addElement(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qGBgN@u'mfFN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.spliterator();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm0, jSSubstitution1);
      assertFalse(jSSubstitution2.isEmpty());
      
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals("[%%%00]", jSTerm3.toString());
      assertEquals("[%%%0]", jSTerm2.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm2.isEval());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", ");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("GCCR;a1");
      StringReader stringReader1 = new StringReader("GCCR;a1");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.add((Object) stringReader0);
      jSTerm0.addElement("@+GSr+$D|");
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(ut uTze*aPu.Eec<lT");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-1145899273), (-1145899273));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) "(ut uTze*aPu.Eec<lT");
      jSTerm0.isVariable();
      jSSubstitution0.add((Object) jSTerm0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";l(({6I9/\"m|h[$ _v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm0.makeVariable();
      jSTerm0.makeVariable();
      jSTerm0.makeEval(true);
      jSTerm0.add((Object) stringReader0);
      jSTerm0.makeEval(true);
      jSTerm0.cloneT();
      assertTrue(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(LaQ[9\"[f%1XeL#s");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(stringReader0);
      StringReader stringReader1 = new StringReader("(LaQ[9\"[f%1XeL#s");
      JSJshopVars.plus = 0;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution3);
      jSTerm2.equals(jSTerm1);
      jSTerm2.ensureCapacity(0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qGBgN@u'mfFN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[18];
      charArray0[0] = 'W';
      charArray0[1] = '\"';
      charArray0[2] = '@';
      JSJshopVars.whiteSpace = (-1);
      charArray0[8] = '5';
      stringReader0.read(charArray0);
      jSTerm0.spliterator();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.equals(jSTerm0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertEquals("[%%%0]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isVariable());
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSSubstitution2.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qGBgN@u'mfFN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[18];
      charArray0[0] = 'W';
      charArray0[1] = '\"';
      charArray0[2] = '3';
      JSJshopVars.whiteSpace = (-1);
      charArray0[14] = '5';
      stringReader0.read(charArray0);
      jSTerm0.spliterator();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSTerm) null);
      assertEquals(1, jSSubstitution1.size());
      
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isVariable());
      assertEquals("[%%%0]", jSTerm1.toString());
      assertFalse(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qGBgN@u'mfFN");
      StringReader stringReader1 = new StringReader("flaqq9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.addElement(stringReader1);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.makeFunction();
      jSTerm0.equals(jSTerm1);
      jSTerm1.isEmpty();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.spliterator();
      StringReader stringReader2 = new StringReader("qGBgN@u'mfFN");
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("($PN'BK0bP-;/Dh9o");
      StringReader stringReader1 = new StringReader("($PN'BK0bP-;/Dh9o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader("z35i;\bmUxr8:E&");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.backquote = (-1485);
      jSTerm0.addElement("z35i;\bmUxr8:E&");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      jSTerm0.matches(jSTerm1);
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qGBgN@u'mfFN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[18];
      charArray0[0] = 'W';
      charArray0[1] = '\"';
      charArray0[2] = '3';
      JSJshopVars.whiteSpace = (-1);
      charArray0[8] = '5';
      stringReader0.read(charArray0);
      jSTerm0.spliterator();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertEquals(1, jSTerm1.size());
      
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertTrue(boolean0);
      assertFalse(jSTerm0.isFunction());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isEval());
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSSubstitution1.size());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qGBgN@u'mfFN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[18];
      charArray0[0] = 'W';
      charArray0[1] = '\"';
      charArray0[2] = '3';
      charArray0[8] = '5';
      stringReader0.read(charArray0);
      jSTerm0.spliterator();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.setSize(0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-4), 2);
      stringReader0.reset();
      streamTokenizer0.resetSyntax();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      StringReader stringReader0 = new StringReader("7)ka'O#GSr;hb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.cloneT();
      JSTerm jSTerm2 = jSTerm0.parseList(streamTokenizer0);
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals("[., [7.0], [nil]]", jSTerm2.toString());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.exclamation = (-3257);
      JSJshopVars.plus = (-3257);
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
      
      StringReader stringReader0 = new StringReader("2FQvz|67_?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm2.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm3.matches(jSTerm1, jSSubstitution1);
      assertTrue(jSSubstitution2.fail());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.exclamation = (-3265);
      jSTerm0.makeFunction();
      jSTerm0.containsAll(jSTerm0);
      jSTerm0.setSize(50);
      System.setCurrentTimeMillis((-3265));
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm1.isGround();
      jSTerm1.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      StringReader stringReader0 = new StringReader("7)ka'O#GSr;hb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm2.equals(jSTerm1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(LaQ[9\"[f%1XeL#s");
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightPar = (-1873);
      jSTerm0.addElement(stringReader0);
      jSTerm0.print();
      jSTerm0.addElement("(LaQ[9\"[f%1XeL#s");
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = null;
      StringReader stringReader0 = new StringReader("(ut &&ze*aPu.Eec<lT");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(LaQQ5[f%1XeL#s");
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement("(LaQQ5[f%1XeL#s");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.listIterator();
      StringReader stringReader0 = new StringReader("? ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      StringReader stringReader0 = new StringReader("Qg8|y0,>H4K!sjul@.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm1, jSSubstitution0);
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isFunction());
      assertNotSame(jSSubstitution1, jSSubstitution0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(LaQQ5[f%1XeL#s");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.toStr();
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("min");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.percent = (-1);
      jSTerm0.trimToSize();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.equals(jSTerm1);
      jSTerm0.isGround();
      jSTerm1.cloneT();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm1.matches(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm0.removeElementAt((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(LaQQ5[f%1XeL#s");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.print();
      jSTerm0.cloneT();
      StringReader stringReader1 = new StringReader("9@R!]a2LUPF ==");
      stringReader1.read();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0);
      assertTrue(jSSubstitution0.fail());
      
      StringReader stringReader0 = new StringReader("Z<)fV,<");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      StringReader stringReader1 = new StringReader("FbP8K-R[=,'");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm3 = jSTerm2.parseList(streamTokenizer0);
      assertNotSame(jSTerm2, jSTerm1);
      assertTrue(jSTerm2.isConstant());
      assertEquals("[nil]", jSTerm3.toString());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add(object0);
      StringReader stringReader0 = new StringReader("?.\nE]ZJ%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightBrac = 494;
      // Undeclared exception!
      try { 
        jSSubstitution0.add((-2603), (Object) "%%%");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.exclamation = (-3265);
      int int0 = 50;
      jSTerm0.containsAll(jSTerm0);
      jSTerm0.setSize(50);
      System.setCurrentTimeMillis((-3265));
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.call();
      StringReader stringReader0 = new StringReader("_z(&+");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "f[&T@I");
      jSTerm0.isConstant();
      StringReader stringReader0 = new StringReader("f[&T@I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm2.isGround();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.matches(jSTerm1, jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("+");
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.parallelStream();
      jSTerm1.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      jSTerm0.makeVariable();
      jSTerm0.isVariable();
      Reader reader0 = null;
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm1.makeConstant();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.call();
      StringReader stringReader1 = new StringReader("umd.cs.shop.JSJshopVars");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm2, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(29);
      jSTerm0.equals((JSPredicateForm) null);
      jSTerm0.isConstant();
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.slash = 0;
      jSTerm0.matches(jSTerm0);
      JSJshopVars.exclamation = 1742;
      jSTerm0.isEval();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.containsAll(jSSubstitution0);
      jSTerm0.setSize(45);
      System.setCurrentTimeMillis(2300L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.exclamation = (-3265);
      jSTerm0.makeFunction();
      jSTerm0.containsAll(jSTerm0);
      jSTerm0.setSize(50);
      System.setCurrentTimeMillis((-3265));
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.exclamation = (-3257);
      JSJshopVars.plus = (-3257);
      jSTerm0.makeFunction();
      jSTerm0.containsAll(jSTerm0);
      jSTerm0.setSize(50);
      System.setCurrentTimeMillis((-3257));
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("expected '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.slash = 0;
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      JSJshopVars.exclamation = 1742;
      jSTerm0.isEval();
      jSTerm1.makeVariable();
      jSTerm1.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.slash = 0;
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      jSTerm1.add((Object) "f[&T@I");
      jSTerm0.isConstant();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.isConstant();
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.exclamation = (-3257);
      JSJshopVars.plus = (-3257);
      jSTerm0.makeFunction();
      jSTerm0.isFunction();
      jSTerm0.setSize(63);
      System.setCurrentTimeMillis(63);
      jSTerm0.iterator();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      int int0 = 74;
      jSTerm0.containsAll(jSTerm1);
      jSTerm0.setSize(74);
      String string0 = "%%%";
      jSTerm1.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      jSTerm0.parallelStream();
      jSTerm1.makeVariable();
      jSTerm1.equals(jSTerm0);
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(jSTerm1.isVariable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.containsAll(jSTerm1);
      jSTerm0.setSize(74);
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.isConstant();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.slash = 0;
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      jSTerm1.add((Object) "f[&T@I");
      jSTerm0.isConstant();
      jSTerm1.equals(jSTerm0);
      jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      jSTerm0.isFunction();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.equals(jSTerm0);
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("88.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.parseNumbers();
      stringReader0.ready();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.nval = 1919.073;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[5];
      jSTerm0.firstElement();
      objectArray0[0] = (Object) "88.0";
      objectArray0[1] = (Object) jSTerm0;
      jSSubstitution0.add((Object) jSTerm1);
      objectArray0[2] = (Object) "2o\"!zcu2VdAe7#E";
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = '5';
      charArray0[2] = 'K';
      charArray0[3] = 'A';
      charArray0[4] = ')';
      charArray0[5] = '<';
      stringReader0.read(charArray0);
      objectArray0[3] = (Object) stringReader0;
      objectArray0[4] = (Object) "2o\"!zcu2VdAe7#E";
      jSSubstitution0.toArray(objectArray0);
      assertEquals("[[88.0]]", jSSubstitution0.toString());
      
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.addElement("2o\"!zcu2VdAe7#E");
      jSTerm1.isVariable();
      jSTerm1.isFunction();
      System.setCurrentTimeMillis((-2));
      jSTerm1.matches(jSTerm0);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      StringBuffer stringBuffer0 = jSTerm3.toStr();
      assertEquals("88.0 ", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.matches(jSTerm0, (JSSubstitution) null);
      jSTerm0.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.add(39, (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39 > 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("py[xZA:pA5,+#a$2rL+");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting Term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(LaQQ5[f%1XeL#s");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.isConstant();
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isFunction();
      System.setCurrentTimeMillis(1519L);
      StringReader stringReader0 = new StringReader("YB=g{d+Oq59US");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("%%% ", stringBuffer0.toString());
      
      jSTerm1.makeConstant();
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("88.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.toStr();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.setSize(1507);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.matches(jSTerm0);
      jSTerm1.isConstant();
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isVariable());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertNotSame(jSTerm1, jSTerm3);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.slash = 0;
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      jSTerm0.isConstant();
      jSTerm1.makeVariable();
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertTrue(jSTerm1.isVariable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Expecting Term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm0;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      JSJshopVars.rightPar = 46;
      StringReader stringReader0 = new StringReader("[|qA");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) jSTerm0;
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("88.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.read();
      char[] charArray0 = new char[9];
      charArray0[0] = 'C';
      charArray0[1] = '%';
      charArray0[2] = '.';
      charArray0[3] = '?';
      charArray0[4] = '0';
      charArray0[5] = 'r';
      charArray0[6] = 'w';
      charArray0[7] = '8';
      charArray0[8] = 'Z';
      stringReader0.read(charArray0);
      jSTerm0.makeEval(true);
      streamTokenizer0.ttype = 61;
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      jSTerm0.isFunction();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("a9hrx$l8B3j;m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.clone();
      jSTerm2.isGround();
      jSTerm2.isFunction();
      jSTerm2.makeFunction();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.makeEval(false);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-431));
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("88VC^-/O:p@6h;~~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.clone();
      jSTerm0.isGround();
      jSTerm0.isFunction();
      jSTerm0.makeFunction();
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.call();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm2.matches(jSTerm3);
      jSTerm2.call();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("9F|%RlGU");
      StringReader stringReader1 = new StringReader("9F|%RlGU");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.ordinaryChar(37);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.clone();
      jSTerm0.isGround();
      jSTerm1.isFunction();
      jSTerm0.makeFunction();
      jSTerm1.makeEval(true);
      jSTerm1.cloneT();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      jSTerm0.isFunction();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("a9hrx$l8B3j;m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.iterator();
      jSTerm0.listIterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";l(({6I9/\"m|h[$ _v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm0.makeVariable();
      jSTerm0.makeVariable();
      jSTerm0.makeEval(true);
      jSTerm0.makeEval(true);
      assertTrue(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zzo,f0P");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
      
      jSTerm0.print();
      stringReader0.skip(0L);
      jSTerm0.makeEval(false);
      jSTerm0.print();
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0;J\">,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.lowerCaseMode(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addAll((Collection) jSTerm0);
      jSSubstitution0.removeElements(jSSubstitution1);
      jSTerm0.addAll((Collection) jSSubstitution0);
      int int0 = 0;
      JSJshopVars.VarCounter = 0;
      // Undeclared exception!
      try { 
        jSTerm0.remove(46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 46
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("+");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("al");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isVariable();
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";l(({6I9/\"m|h[$ _v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JSPredicateForm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(. o-ksGUe8k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = (-431);
      streamTokenizer0.ordinaryChar((-431));
      streamTokenizer0.nval = (double) (-431);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zzo,f0P");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      jSTerm0.print();
      jSTerm0.makeEval(false);
      jSTerm0.print();
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.leftBrac = 0;
      jSTerm0.clone();
      StringReader stringReader0 = new StringReader("E$>621PZzR3ynS");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(0, 0);
      streamTokenizer0.lowerCaseMode(false);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm1);
      JSJshopVars.slash = (-2207);
      JSJshopVars.rightBrac = 178;
      jSTerm0.isEval();
      jSTerm0.makeEval(false);
      StringReader stringReader1 = new StringReader(" Term expected");
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      stringReader1.read(charBuffer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.ordinaryChars(14, 14);
      streamTokenizer1.ttype = 0;
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("G");
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      stringReader0.skip(1L);
      charArray0[1] = 'A';
      charArray0[2] = '~';
      charArray0[3] = 'a';
      charArray0[4] = '=';
      charArray0[5] = '{';
      charArray0[6] = 'e';
      charArray0[7] = 'U';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.slash = 0;
      jSTerm0.iterator();
      jSTerm0.isConstant();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("88VC^-/O:p@6h;~~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      jSTerm0.isFunction();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("a9hrx$l8B3j;m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.iterator();
      jSTerm0.listIterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.coma = (-1);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      boolean boolean0 = true;
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.standarizerSubs();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.stream();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      StringReader stringReader0 = new StringReader("");
      jSTerm0.listIterator();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "", (-4), 45);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightPar = 46;
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
