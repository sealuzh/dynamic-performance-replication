/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 09:45:10 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.net.Proxy;
import java.net.Socket;
import java.net.SocketException;
import java.net.URI;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.Enumeration;
import java.util.Locale;
import java.util.zip.Deflater;
import okio.Buffer;
import okio.BufferedSource;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.Okio;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Okio_ESTest extends Okio_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Sink sink0 = Okio.blackhole();
      Okio.buffer(sink0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Source source0 = Okio.source((InputStream) dataInputStream0);
      assertNotNull(source0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockInetAddress.getByName((String) null);
      MockFile mockFile0 = new MockFile("");
      Buffer buffer0 = new Buffer();
      try { 
        Okio.appendingSink(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      try { 
        Okio.source((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[1];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.WRITE;
      // Undeclared exception!
      try { 
        Okio.source(path0, openOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Okio.buffer((Source) buffer0);
      MockFile mockFile0 = new MockFile("ly", "j%t?Pc$va1Exxri6eJ");
      try { 
        Okio.source((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "l]m^*yO{");
      Okio.sink((File) mockFile0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 116, (byte)34);
      Okio.source((InputStream) byteArrayInputStream0);
      MockSocket mockSocket0 = new MockSocket();
      try { 
        Okio.source((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~@$'|XC)Gy", "byteCount < 0: ");
      StandardOpenOption standardOpenOption0 = StandardOpenOption.DSYNC;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.WRITE;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.APPEND;
      StandardOpenOption standardOpenOption3 = StandardOpenOption.READ;
      StandardOpenOption standardOpenOption4 = StandardOpenOption.CREATE_NEW;
      StandardOpenOption standardOpenOption5 = StandardOpenOption.APPEND;
      StandardOpenOption standardOpenOption6 = StandardOpenOption.SYNC;
      StandardOpenOption standardOpenOption7 = StandardOpenOption.DELETE_ON_CLOSE;
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[3];
      openOptionArray0[0] = (OpenOption) standardOpenOption4;
      openOptionArray0[1] = (OpenOption) standardOpenOption3;
      openOptionArray0[2] = (OpenOption) standardOpenOption2;
      // Undeclared exception!
      try { 
        Okio.source(path0, openOptionArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // 'APPEND' not allowed
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("path == null");
      MockFile mockFile1 = new MockFile(mockFile0, "Ue%U;t[+dhy\";<g");
      mockFile1.delete();
      mockFile1.setReadable(true, true);
      Path path0 = mockFile1.toPath();
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      String string0 = "Failed to close timed out socket ";
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Failed to close timed out socket ");
      // Undeclared exception!
      try { 
        Okio.sink(path0, (OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("timeout");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        Okio.sink(path0, (OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      AssertionError assertionError0 = new AssertionError(object0);
      AssertionError assertionError1 = new AssertionError("", assertionError0);
      Okio.isAndroidGetsocknameError(assertionError1);
      URI uRI0 = MockURI.URI("");
      MockURI.relativize(uRI0, uRI0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1194, (-56321));
      Okio.source((InputStream) byteArrayInputStream0);
      AssertionError assertionError2 = new AssertionError('r');
      Okio.isAndroidGetsocknameError(assertionError2);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1194);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      try { 
        Okio.sink((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("`{n<jPda>8I9");
      AssertionError assertionError0 = new AssertionError((String) null, mockThrowable0);
      boolean boolean0 = Okio.isAndroidGetsocknameError(assertionError0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("size < 8: ");
      Sink sink0 = Okio.sink((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(outputStream0, true);
      Locale locale0 = new Locale("size < 8: ", "NtEH^G9#@*rRUy'", "NtEH^G9#@*rRUy'");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "NtEH^G9#@*rRUy'";
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) realBufferedSink0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) "size < 8: ";
      objectArray0[8] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "size < 8: ", objectArray0);
      Sink sink1 = Okio.sink((OutputStream) printStream0);
      assertNotSame(sink0, sink1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("size < 8: ");
      Sink sink0 = Okio.sink((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(outputStream0, true);
      Locale locale0 = new Locale("size < 8: ", "size < 8: ", "size < 8: ");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "size < 8: ", objectArray0);
      assertSame(mockPrintStream0, printStream0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("size < 8: ");
      Sink sink0 = Okio.blackhole();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(outputStream0, true);
      Locale locale0 = new Locale("size < 8: ", "NtEH^G9#@*rRUy'", "NtEH^G9#@*rRUy'");
      String string0 = "s.limit == s.pos";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) realBufferedSink0;
      objectArray0[1] = (Object) outputStream0;
      mockPrintStream0.printf(locale0, "s.limit == s.pos", objectArray0);
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream("size < 8: ", "size < 8: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // size < 8: 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("size < 8: ");
      Sink sink0 = Okio.sink((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.toString();
      realBufferedSink0.outputStream();
      Locale locale0 = new Locale("size < 8: ", "NtEH^G9#@*rRUy'", "NtEH^G9#@*rRUy'");
      Object[] objectArray0 = new Object[0];
      GzipSink gzipSink0 = new GzipSink(sink0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("size < 8: ");
      Sink sink0 = Okio.sink((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.outputStream();
      realBufferedSink0.close();
      Locale locale0 = new Locale("size < 8: ", "NtEH^G9#@*rRUy'", "NtEH^G9#@*rRUy'");
      Object[] objectArray0 = new Object[1];
      GzipSink gzipSink0 = new GzipSink(realBufferedSink0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("size < 8: ", "size < 8: ");
      Sink sink0 = Okio.sink((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(outputStream0, false);
      Locale locale0 = new Locale("size < 8: ");
      realBufferedSink0.timeout();
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'm';
      charArray0[2] = 'F';
      charArray0[3] = 'Z';
      mockPrintStream0.println(charArray0);
      Object[] objectArray0 = new Object[2];
      mockPrintStream0.printf(locale0, "size < 8: ", objectArray0);
      GzipSink gzipSink0 = new GzipSink(realBufferedSink0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("size < 8: ", "size < 8: ");
      Sink sink0 = Okio.blackhole();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(outputStream0, false);
      Locale locale0 = new Locale("size < 8: ");
      realBufferedSink0.timeout();
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'm';
      charArray0[2] = 'F';
      charArray0[3] = 'Z';
      mockPrintStream0.println(charArray0);
      Object[] objectArray0 = new Object[2];
      mockPrintStream0.printf(locale0, "size < 8: ", objectArray0);
      GzipSink gzipSink0 = new GzipSink(realBufferedSink0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(5);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Sink sink0 = Okio.blackhole();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(sink0, deflater0);
      deflaterSink0.toString();
      deflaterSink0.close();
      int int0 = 0;
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "DeflaterSink(buffer(okio.Okio$3@1))", 18, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("size < 8: ", "size < 8: ");
      Sink sink0 = Okio.sink((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Source source0 = Okio.source((InputStream) sequenceInputStream0);
      realBufferedSink0.writeAll(source0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(outputStream0, true);
      Locale locale0 = new Locale("size < 8: ", "size < 8: ", "Vw^H4 L$");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Vw^H4 L$";
      objectArray0[1] = (Object) source0;
      objectArray0[2] = (Object) "size < 8: ";
      objectArray0[3] = (Object) realBufferedSink0;
      objectArray0[4] = (Object) sequenceInputStream0;
      objectArray0[5] = (Object) realBufferedSink0;
      mockPrintStream0.printf(locale0, "", objectArray0);
      AssertionError assertionError0 = new AssertionError(source0);
      boolean boolean0 = Okio.isAndroidGetsocknameError(assertionError0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("size < 8: ", "size < 8: ");
      Sink sink0 = Okio.sink((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Source source0 = Okio.source((InputStream) byteArrayInputStream0);
      realBufferedSink0.writeAll(source0);
      Locale locale0 = new Locale("", "size < 8: ");
      BufferedSource bufferedSource0 = Okio.buffer((Source) realBufferedSink0.buffer);
      assertNotNull(bufferedSource0);
  }
}
