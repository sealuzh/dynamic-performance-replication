/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 08:30:04 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import com.google.re2j.Simplify;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Simplify_ESTest extends Simplify_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp0.equals("8?UrM");
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp1;
      regexp1.subs = regexpArray0;
      regexp1.max = 823;
      regexp1.min = 823;
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp1);
      Regexp regexp3 = Simplify.simplify(regexp1);
      Simplify.simplify(regexp3);
      Regexp regexp4 = new Regexp(regexp1);
      Simplify.simplify(regexp0);
      regexp1.reinit();
      Regexp.Op regexp_Op2 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp5 = new Regexp(regexp_Op2);
      Simplify.simplify(regexp0);
      Regexp regexp6 = Simplify.simplify(regexp1);
      assertNotSame(regexp1, regexp6);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[5] = regexp1;
      regexp0.min = (-358);
      regexpArray0[6] = regexp1;
      regexp1.subs = regexpArray0;
      regexp1.max = 823;
      regexp1.min = 2;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp1;
      regexp1.subs = regexpArray0;
      regexp1.max = 823;
      regexp1.min = 2;
      Regexp regexp3 = Simplify.simplify(regexp1);
      Regexp regexp4 = new Regexp(regexp_Op1);
      regexp3.subs = regexp1.subs;
      Regexp regexp5 = Simplify.simplify(regexp4);
      Regexp regexp6 = new Regexp(regexp_Op0);
      Regexp regexp7 = Simplify.simplify(regexp0);
      Regexp regexp8 = Simplify.simplify(regexp3);
      assertNotSame(regexp8, regexp3);
      
      Simplify.simplify(regexp0);
      Simplify.simplify(regexp5);
      Regexp regexp9 = new Regexp(regexp1);
      Simplify.simplify(regexp7);
      regexp1.reinit();
      Regexp.Op regexp_Op2 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp10 = new Regexp(regexp_Op2);
      Simplify.simplify(regexp5);
      Regexp regexp11 = Simplify.simplify(regexp0);
      assertFalse(regexp11.equals((Object)regexp8));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.ALTERNATE;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[5] = regexp2;
      regexpArray0[6] = regexp1;
      regexp1.subs = regexpArray0;
      regexp1.max = 823;
      Simplify.simplify(regexp1);
      Regexp regexp3 = Simplify.simplify(regexp0);
      Simplify.simplify(regexp3);
      Simplify.simplify(regexp0);
      Simplify.simplify(regexp0);
      Regexp regexp4 = Simplify.simplify(regexp3);
      assertSame(regexp3, regexp4);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[1];
      regexp1.subs = regexpArray0;
      Regexp regexp2 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp regexp2 = new Regexp(regexp1);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[1];
      regexp0.max = 1;
      regexp1.subs = regexpArray0;
      Regexp regexp2 = Simplify.simplify(regexp1);
      Regexp regexp3 = Simplify.simplify(regexp1);
      assertSame(regexp3, regexp2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      Simplify.simplify(regexp2);
      Simplify.simplify(regexp2);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexp3.min = 1366;
      regexp3.op = regexp_Op1;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[3];
      regexp0.min = 3075;
      intArray0[0] = 3;
      Simplify.simplify((Regexp) null);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp0.cap = 4578;
      regexp0.reinit();
      Regexp regexp1 = Simplify.simplify(regexp0);
      regexp1.flags = 3348;
      Simplify.simplify(regexp0);
      Simplify.simplify(regexp1);
      Regexp regexp2 = Simplify.simplify(regexp0);
      regexp2.max = 4578;
      Simplify.simplify(regexp2);
      Regexp regexp3 = new Regexp(regexp1);
      Regexp regexp4 = Simplify.simplify(regexp3);
      regexp3.name = "K!yF4}|#:!pT7vlO4";
      Regexp regexp5 = Simplify.simplify(regexp4);
      regexp4.equals(regexp5);
      regexp3.name = "";
      Simplify.simplify(regexp4);
      Simplify.simplify(regexp4);
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      regexp0.op = regexp_Op1;
      Regexp regexp6 = new Regexp(regexp_Op0);
      Regexp regexp7 = new Regexp(regexp6);
      Simplify.simplify(regexp7);
      Simplify.simplify(regexp6);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.cap = 970;
      Regexp regexp2 = Simplify.simplify(regexp1);
      Regexp regexp3 = Simplify.simplify(regexp2);
      regexp2.reinit();
      regexp0.reinit();
      Regexp regexp4 = Simplify.simplify(regexp2);
      regexp1.max = 970;
      Regexp regexp5 = Simplify.simplify(regexp3);
      regexp2.max = 970;
      regexp4.equals(regexp5);
      Simplify.simplify(regexp3);
      Simplify.simplify(regexp4);
      Simplify.simplify(regexp0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[3];
      regexp0.min = 3075;
      intArray0[0] = 3;
      intArray0[1] = 0;
      intArray0[2] = (-2879);
      regexp0.name = "(?-s:.)";
      regexp0.runes = intArray0;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp1;
      regexp1.subs = regexpArray0;
      Regexp regexp2 = Simplify.simplify(regexp1);
      assertSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 256;
      Regexp regexp1 = Simplify.simplify(regexp0);
      regexp0.reinit();
      Regexp regexp2 = Simplify.simplify(regexp1);
      Regexp regexp3 = Simplify.simplify(regexp0);
      regexp3.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      regexp2.op = regexp_Op1;
      regexp2.runes = null;
      regexp2.max = 256;
      regexp3.toString();
      regexp0.cap = 256;
      Regexp regexp4 = Simplify.simplify(regexp0);
      Regexp regexp5 = Simplify.simplify(regexp3);
      Simplify.simplify(regexp4);
      Regexp regexp6 = Simplify.simplify(regexp2);
      Regexp regexp7 = Simplify.simplify(regexp1);
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp0);
      Simplify.simplify(regexp6);
      Simplify.simplify(regexp7);
      Regexp regexp8 = Simplify.simplify(regexp5);
      Regexp regexp9 = Simplify.simplify(regexp8);
      Simplify.simplify(regexp9);
      Simplify.simplify(regexp4);
      Regexp regexp10 = Simplify.simplify(regexp9);
      Simplify.simplify(regexp10);
      Regexp regexp11 = Simplify.simplify(regexp6);
      assertSame(regexp11, regexp5);
  }
}
