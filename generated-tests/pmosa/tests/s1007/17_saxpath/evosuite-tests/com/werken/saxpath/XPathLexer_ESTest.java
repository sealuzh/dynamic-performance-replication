/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 10:40:10 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.setXPath("< :Ds=@1xa7rbDEdE^o");
      xPathLexer0.number();
      xPathLexer0.div();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      xPathLexer0.endPosition();
      xPathLexer0.doubleColon();
      xPathLexer0.pipe();
      xPathLexer0.currentPosition();
      xPathLexer0.doubleColon();
      xPathLexer0.not();
      xPathLexer0.number();
      xPathLexer0.doubleColon();
      xPathLexer0.isIdentifierChar('M');
      xPathLexer0.consume(0);
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("fy)~ngo.(R=");
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("4YxEg9WX*}_)\"SpI");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("Yx", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("g", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals("9", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("W", token4.getTokenText());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals("X", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.consume(94);
      xPathLexer0.mod();
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
      
      xPathLexer0.getXPath();
      boolean boolean1 = xPathLexer0.isIdentifierStartChar('D');
      assertFalse(boolean1 == boolean0);
      
      Token token10 = xPathLexer0.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals((-1), token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar(']');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertNotNull(token1);
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('N');
      xPathLexer0.plus();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      xPathLexer0.equals();
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
      
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      xPathLexer0.getXPath();
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      xPathLexer0.getXPath();
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      
      xPathLexer0.nextToken();
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      xPathLexer0.equals();
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.doubleColon();
      xPathLexer0.pipe();
      xPathLexer0.star();
      xPathLexer0.setXPath("r wRM#8ZbE:-`9?{jP4");
      xPathLexer0.isIdentifierChar('W');
      xPathLexer0.at();
      xPathLexer0.identifier();
      xPathLexer0.operatorName();
      xPathLexer0.minus();
      xPathLexer0.consume(0);
      xPathLexer0.getXPath();
      xPathLexer0.setXPath("r wRM#8ZbE:-`9?{jP4");
      assertEquals("r wRM#8ZbE:-`9?{jP4", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.leftParen();
      xPathLexer0.identifier();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("F", token1.getTokenText());
      
      xPathLexer0.number();
      xPathLexer0.LA((-1));
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("+", token2.getTokenText());
      
      xPathLexer0.slashes();
      xPathLexer0.hasMoreChars();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals("=^", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("w", token5.getTokenText());
      
      xPathLexer0.colon();
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals(')', char0);
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals("&", token7.getTokenText());
      
      xPathLexer0.or();
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      assertEquals("z", token8.getTokenText());
      
      Token token9 = xPathLexer0.pipe();
      assertEquals("\"", token9.getTokenText());
      assertEquals(17, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('E');
      xPathLexer0.mod();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      boolean boolean1 = xPathLexer0.hasMoreChars();
      assertFalse(boolean1 == boolean0);
      
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(10, int0);
      
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.consume(10);
      xPathLexer0.literal();
      xPathLexer0.doubleColon();
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.consume();
      xPathLexer0.div();
      xPathLexer0.and();
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      xPathLexer0.consume((-5758));
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      xPathLexer0.consume();
      xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      xPathLexer0.notEquals();
      xPathLexer0.hasMoreChars();
      xPathLexer0.isIdentifierStartChar('l');
      xPathLexer0.whitespace();
      xPathLexer0.rightParen();
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierChar('X');
      xPathLexer0.colon();
      xPathLexer0.isIdentifierStartChar('l');
      xPathLexer0.getXPath();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.consume(0);
      xPathLexer0.whitespace();
      xPathLexer0.at();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.pipe();
      xPathLexer0.mod();
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.getPreviousToken();
      xPathLexer0.currentPosition();
      xPathLexer0.isIdentifierStartChar('3');
      xPathLexer0.whitespace();
      xPathLexer0.doubleColon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.whitespace();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(")", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume(0);
      xPathLexer0.star();
      xPathLexer0.consume((-1));
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      xPathLexer0.leftParen();
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.isIdentifierStartChar('#');
      xPathLexer0.leftParen();
      Token token10 = xPathLexer0.minus();
      assertEquals(6, token10.getTokenType());
      
      char char0 = xPathLexer0.LA((-1));
      assertEquals('\uFFFF', char0);
      
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
      
      xPathLexer0.consume();
      Token token12 = xPathLexer0.identifierOrOperatorName();
      assertNull(token12);
      
      xPathLexer0.consume((-1));
      Token token13 = xPathLexer0.rightParen();
      assertEquals(2, token13.getTokenType());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?@S_=tloy7xT4kQF6 ");
      xPathLexer0.or();
      Token token0 = xPathLexer0.minus();
      assertEquals("?", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("@", token1.getTokenText());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("S", token2.getTokenText());
      
      xPathLexer0.equals();
      Token token3 = xPathLexer0.comma();
      assertEquals("=", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      xPathLexer0.getXPath();
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      assertEquals("t", token4.getTokenText());
      
      xPathLexer0.currentPosition();
      Token token5 = xPathLexer0.equals();
      assertEquals("l", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      xPathLexer0.literal();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.setXPath("V*");
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("V", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      token2.toString();
      token2.toString();
      xPathLexer0.mod();
      token2.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (20) (*)", string0);
      
      xPathLexer0.setPreviousToken(token2);
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.consume(2461);
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      xPathLexer0.consume(1);
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("z", token0.getTokenText());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("j", token1.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("p", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("V", token4.getTokenText());
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      assertEquals("]", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("iAJLEZ", token7.getTokenText());
      
      xPathLexer0.getXPath();
      xPathLexer0.consume(2767);
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C)Xe,8:+T>9");
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.equals();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.dots();
      xPathLexer0.minus();
      xPathLexer0.operatorName();
      xPathLexer0.isIdentifierStartChar('j');
      xPathLexer0.or();
      xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-371));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.equals();
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.setXPath(")");
      xPathLexer0.consume();
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      assertEquals("", token6.getTokenText());
      
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      xPathLexer0.consume();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.setXPath("< :Ds=@1xa7rbDEdE^o");
      xPathLexer0.number();
      xPathLexer0.div();
      xPathLexer0.notEquals();
      xPathLexer0.not();
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      xPathLexer0.endPosition();
      xPathLexer0.doubleColon();
      xPathLexer0.pipe();
      xPathLexer0.colon();
      xPathLexer0.whitespace();
      xPathLexer0.rightParen();
      xPathLexer0.star();
      xPathLexer0.setXPath(")");
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.currentPosition();
      char char0 = xPathLexer0.LA(19);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.plus();
      token0.toString();
      xPathLexer0.equals();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.literal();
      xPathLexer0.minus();
      xPathLexer0.literal();
      Token token1 = xPathLexer0.dots();
      xPathLexer0.minus();
      xPathLexer0.operatorName();
      xPathLexer0.isIdentifierStartChar('j');
      xPathLexer0.or();
      xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.LA(467);
      XPathLexer xPathLexer1 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C)Xe,8:+T>9");
      xPathLexer0.doubleColon();
      xPathLexer0.leftParen();
      xPathLexer0.identifier();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer(";?%DviQcWVVi");
      xPathLexer1.nextToken();
      xPathLexer0.number();
      // Undeclared exception!
      try { 
        xPathLexer1.LA((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("r", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("wR", token2.getTokenText());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("#8ZbE:-`9?{jP4", token3.getTokenText());
      
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      assertEquals("#", token4.getTokenText());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("8Z", token5.getTokenText());
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals("b", token6.getTokenText());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      xPathLexer0.setXPath("r wRM#8ZbE:-`9?{jP4");
      boolean boolean0 = xPathLexer0.isIdentifierChar('W');
      assertTrue(boolean0);
      
      Token token8 = xPathLexer0.at();
      assertEquals("r", token8.getTokenText());
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifier();
      assertEquals(15, token9.getTokenType());
      assertEquals("", token9.getTokenText());
      
      xPathLexer0.operatorName();
      Token token10 = xPathLexer0.minus();
      assertEquals(" ", token10.getTokenText());
      assertEquals(6, token10.getTokenType());
      
      xPathLexer0.consume(0);
      xPathLexer0.getXPath();
      xPathLexer0.setXPath("r wRM#8ZbE:-`9?{jP4");
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("J$g}qu");
      xPathLexer0.number();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("J", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.star();
      assertEquals("$", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("g", token2.getTokenText());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("}", token3.getTokenText());
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("q", token4.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.setXPath("uO#q6J{?'|t");
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.equals();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("#", token5.getTokenText());
      
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      assertEquals("q", token6.getTokenText());
      
      xPathLexer0.currentPosition();
      int int0 = xPathLexer0.endPosition();
      assertEquals(11, int0);
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      assertEquals("6", token7.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.consume((-2227));
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      xPathLexer0.currentPosition();
      int int1 = xPathLexer0.currentPosition();
      assertEquals((-2221), int1);
      
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-sj@@^@ =HvM");
      Token token0 = xPathLexer0.identifier();
      assertEquals("-sj", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("@", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token2);
      assertEquals(15, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("@", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals("^@", token4.getTokenText());
      
      xPathLexer0.div();
      Token token5 = xPathLexer0.plus();
      assertEquals(" ", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("=", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer0.setXPath("V*");
      xPathLexer0.dots();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.and();
      token0.toString();
      token0.toString();
      xPathLexer0.relationalOperator();
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer("cJxB8z?z");
      xPathLexer1.doubleColon();
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("B22P+W0<_K/}");
      xPathLexer2.colon();
      XPathLexer xPathLexer3 = new XPathLexer("[ (20) (*)");
      xPathLexer3.whitespace();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":4^},@r\"kWpdc(Y8");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(":", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C)Xe,8:+T>9");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("C", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(")", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("X", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.consume();
      xPathLexer0.or();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("8", token3.getTokenText());
      
      xPathLexer0.identifier();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('I');
      assertTrue(boolean0);
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(":", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("KRb10$V");
      Token token5 = xPathLexer1.star();
      assertEquals("K", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      xPathLexer0.equals();
      xPathLexer0.rightParen();
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.plus();
      xPathLexer0.doubleColon();
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.star();
      token1.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.rightBracket();
      xPathLexer0.consume(2461);
      xPathLexer0.rightParen();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      xPathLexer0.consume(2461);
      xPathLexer0.slashes();
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.dollar();
      assertFalse(token3.equals((Object)token2));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-sj@@^@ =HvM");
      xPathLexer0.identifier();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("^", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("@ ", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals("H", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.setXPath("-sj@@^@ =HvM");
      xPathLexer0.isIdentifierChar('l');
      Token token4 = xPathLexer0.at();
      assertEquals("-", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.minus();
      assertEquals("@", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      xPathLexer0.consume(32);
      xPathLexer0.getXPath();
      xPathLexer0.setXPath("v%\"sT-Igw:|%");
      Token token7 = xPathLexer0.dots();
      assertEquals("v", token7.getTokenText());
      assertEquals(13, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      XPathLexer xPathLexer1 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      Token token0 = xPathLexer1.nextToken();
      xPathLexer1.setPreviousToken(token0);
      XPathLexer xPathLexer2 = new XPathLexer("WZ*?O{% Y/+ih8");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.whitespace();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.consume(60);
      xPathLexer4.getXPath();
      xPathLexer3.consume(0);
      xPathLexer3.leftBracket();
      Token token1 = xPathLexer2.mod();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C)Xe,8:+T>9");
      Token token0 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("C)Xe,8:+T>9");
      Token token1 = xPathLexer1.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("C", token1.getTokenText());
      
      xPathLexer1.operatorName();
      xPathLexer1.setPreviousToken(token0);
      assertEquals("C", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      Token token0 = xPathLexer1.nextToken();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer0.notEquals();
      xPathLexer0.not();
      Token token1 = xPathLexer0.leftParen();
      xPathLexer0.mod();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.setXPath("V*");
      xPathLexer0.or();
      Token token1 = xPathLexer0.nextToken();
      String string0 = token1.toString();
      assertEquals("[ (15) (V)", string0);
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("*", token2.getTokenText());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token0);
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h'=M>Z?xe");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("h", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("2FK[620'Fr;");
      Token token1 = xPathLexer1.nextToken();
      assertEquals("2", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("h'=M>Z?xe");
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer2.rightParen();
      xPathLexer0.operatorName();
      xPathLexer0.setPreviousToken(token3);
      assertEquals("h", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{@}4-J'|vQ_=g3>L");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.equals();
      assertEquals("{", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("@", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("}", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token3);
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.consume();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.equals();
      xPathLexer0.comma();
      xPathLexer0.leftBracket();
      xPathLexer0.consume(37);
      xPathLexer0.consume(37);
      xPathLexer0.hasMoreChars();
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      
      char char0 = xPathLexer0.LA(45);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.mod();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(104, int0);
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
      
      xPathLexer0.literal();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('\uFFFF');
      assertFalse(boolean0);
      
      Token token11 = xPathLexer0.comma();
      assertEquals(32, token11.getTokenType());
      
      Token token12 = xPathLexer0.number();
      assertEquals(30, token12.getTokenType());
      
      Token token13 = xPathLexer0.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      Token token14 = xPathLexer0.equals();
      assertEquals(21, token14.getTokenType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      xPathLexer0.identifier();
      xPathLexer0.setXPath("4KxlnHY0+");
      Token token0 = xPathLexer0.dots();
      Token token1 = xPathLexer0.nextToken();
      String string0 = token0.toString();
      assertEquals("[ (13) (4)", string0);
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("+", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(15, token1.getTokenType());
      assertEquals("KxlnHY0", token1.getTokenText());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.setXPath("V*");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("V", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      token1.toString();
      token1.toString();
      xPathLexer0.mod();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (17) (*)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("otnZG\"$oflQt!kBjip'");
      xPathLexer0.consume();
      xPathLexer0.identifier();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      xPathLexer0.consume(101);
      xPathLexer0.rightParen();
      xPathLexer0.getPreviousToken();
      xPathLexer0.literal();
      xPathLexer0.not();
      xPathLexer0.notEquals();
      xPathLexer0.dollar();
      xPathLexer0.doubleColon();
      xPathLexer0.mod();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.rightParen();
      xPathLexer0.LA(3321);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.LA(101);
      xPathLexer0.leftBracket();
      xPathLexer0.isIdentifierStartChar('\uFFFF');
      xPathLexer0.plus();
      xPathLexer0.notEquals();
      xPathLexer0.whitespace();
      xPathLexer0.colon();
      Token token1 = xPathLexer0.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vC$%m");
      Token token0 = xPathLexer0.star();
      assertEquals("v", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("C", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("C)Xe,8:+T>9");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      Token token2 = xPathLexer2.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.getPreviousToken();
      assertEquals("$", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")Dxb");
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.at();
      xPathLexer0.consume(120);
      xPathLexer0.consume((-1316));
      xPathLexer0.setXPath("#&dAG]O,0B};r\"'");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.div();
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.leftBracket();
      xPathLexer0.consume((-1316));
      xPathLexer0.dollar();
      xPathLexer0.equals();
      int int0 = 65535;
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C)Xe,8:+T>9");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("C", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      Token token2 = xPathLexer0.comma();
      assertEquals("X", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.consume();
      xPathLexer0.or();
      Token token3 = xPathLexer0.at();
      assertEquals("8", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(":", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('I');
      assertTrue(boolean0);
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("+", token6.getTokenText());
      assertEquals(5, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("KRb10$V");
      xPathLexer0.operatorName();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(2, token1.getTokenType());
      assertEquals(")", token1.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("V*");
      xPathLexer1.setPreviousToken(token0);
      XPathLexer xPathLexer2 = new XPathLexer("D80u)a<tZ5?LtQ-yoT~");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.identifier();
      xPathLexer3.isIdentifierStartChar('9');
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("");
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer5.operatorName();
      xPathLexer1.setPreviousToken((Token) null);
      assertEquals("V*", xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("1~Y<tWaP/Cm_M");
      xPathLexer1.and();
      Token token0 = xPathLexer1.number();
      assertEquals("1", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/Bb");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("/", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Bb", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      XPathLexer xPathLexer1 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      Token token0 = xPathLexer1.doubleColon();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("r", token1.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("r ", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.getXPath();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")Xe,8:+9");
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath(")Xe,8:+9");
      Token token0 = xPathLexer1.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{@}4-J'|vQ_=g3>L");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.equals();
      assertEquals("{", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals("@", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("}", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token3);
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume();
      xPathLexer1.consume();
      xPathLexer1.or();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer1.identifier();
      assertEquals(15, token8.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('I');
      assertTrue(boolean0);
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.operatorName();
      xPathLexer1.setPreviousToken((Token) null);
      Token token10 = xPathLexer0.nextToken();
      assertEquals((-1), token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("8gh(t;-xb+hB)J4o");
      xPathLexer0.number();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("g", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("h", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("t", token3.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.setXPath("r wRM#8ZbE:-`9?{jP4");
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      assertEquals("w", token5.getTokenText());
      
      xPathLexer1.currentPosition();
      XPathLexer xPathLexer2 = new XPathLexer("8gh(t;-xb+hB)J4o");
      xPathLexer2.endPosition();
      Token token6 = xPathLexer2.number();
      assertEquals("8", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
      
      xPathLexer2.consume(1);
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      assertEquals("R", token7.getTokenText());
      
      xPathLexer2.currentPosition();
      xPathLexer1.currentPosition();
      Token token8 = xPathLexer2.doubleColon();
      assertEquals(19, token8.getTokenType());
      assertEquals("h(", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5%F2h");
      Token token0 = xPathLexer0.plus();
      assertEquals("5", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.setXPath(".MEEPSly<`L'eV 8|V");
      Token token1 = xPathLexer0.number();
      assertEquals(".", token1.getTokenText());
      assertEquals(31, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.notEquals();
      assertEquals("ME", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.leftParen();
      assertEquals(1, token4.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      assertEquals("P", token5.getTokenText());
      
      xPathLexer0.relationalOperator();
      int int0 = xPathLexer0.endPosition();
      assertEquals(18, int0);
      
      xPathLexer1.doubleColon();
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer1.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      assertEquals("y", token9.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("< :Ds=@1xa7rbDEdE^o");
      xPathLexer2.star();
      xPathLexer2.setXPath("5%F2h");
      Token token10 = xPathLexer2.nextToken();
      assertEquals("5", token10.getTokenText());
      assertEquals(30, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.or();
      Token token11 = xPathLexer3.identifierOrOperatorName();
      assertEquals(15, token11.getTokenType());
      
      Token token12 = xPathLexer0.star();
      assertEquals(20, token12.getTokenType());
      assertEquals("<", token12.getTokenText());
      
      Token token13 = xPathLexer0.doubleColon();
      assertEquals("`L", token13.getTokenText());
      assertEquals(19, token13.getTokenType());
      
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("5%F2h");
      xPathLexer4.currentPosition();
      char char0 = xPathLexer1.LA(0);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("r", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals(" w", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("M", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("#", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("8", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      Token token5 = xPathLexer0.rightParen();
      assertEquals("Z", token5.getTokenText());
      assertEquals(2, token5.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("Ukm`<J&F'['1XqvJs");
      Token token6 = xPathLexer0.leftParen();
      xPathLexer2.setPreviousToken(token6);
      assertEquals("b", token6.getTokenText());
      assertEquals(1, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{@}4-J'|vQ_=g3>L");
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.colon();
      xPathLexer0.whitespace();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer("{@}4-J'|vQ_=g3>L");
      xPathLexer1.nextToken();
      xPathLexer0.getXPath();
      xPathLexer0.consume(102);
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.equals();
      int int0 = xPathLexer2.endPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.setXPath("V*");
      Token token0 = xPathLexer0.dots();
      assertEquals("V", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      token1.toString();
      token1.toString();
      xPathLexer0.mod();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (20) (*)", string0);
      
      Token token2 = xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token2);
      assertEquals(21, token2.getTokenType());
      
      xPathLexer0.star();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      xPathLexer0.rightParen();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("Ukm`<J&F'['1XqvJs");
      xPathLexer0.rightBracket();
      xPathLexer2.div();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C)Xe,8:+T>9");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("C)", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("Xe", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals(",", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("8", token3.getTokenText());
      assertNotNull(token3);
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.leftParen();
      assertEquals(":", token4.getTokenText());
      assertEquals(1, token4.getTokenType());
      
      xPathLexer0.consume();
      Token token5 = xPathLexer0.dollar();
      assertEquals("T", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(">", token6.getTokenText());
      assertEquals(9, token6.getTokenType());
      
      Token token7 = xPathLexer0.dots();
      assertEquals("9", token7.getTokenText());
      assertEquals(13, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">OhUueq!'/Np*J$R");
      Token token0 = xPathLexer0.relationalOperator();
      assertEquals(9, token0.getTokenType());
      assertEquals(">", token0.getTokenText());
      assertNotNull(token0);
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('Y');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "5%F2h";
      XPathLexer xPathLexer0 = new XPathLexer("5%F2h");
      xPathLexer0.plus();
      xPathLexer0.setXPath(".MEEPSly<`L'eV 8|V");
      xPathLexer0.number();
      xPathLexer0.div();
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("< :Ds=@1xa7rbDEdE^o");
      xPathLexer1.nextToken();
      xPathLexer1.number();
      // Undeclared exception!
      try { 
        xPathLexer1.LA((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<v75D`b+=6@jA,");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(7, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.number();
      xPathLexer0.LA((-1));
      xPathLexer0.plus();
      xPathLexer0.star();
      xPathLexer0.hasMoreChars();
      xPathLexer0.doubleColon();
      token1.toString();
      token0.toString();
      token1.toString();
      xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.star();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7T/TFvUCPV0q[%K");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("7", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals("T", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("/", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.notEquals();
      assertEquals(22, token3.getTokenType());
      
      xPathLexer1.identifier();
      xPathLexer1.relationalOperator();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals("TFvUCPV0q", token4.getTokenText());
      
      xPathLexer1.and();
      Token token5 = xPathLexer0.leftParen();
      assertEquals("[", token5.getTokenText());
      assertEquals(1, token5.getTokenType());
      
      xPathLexer1.consume();
      Token token6 = xPathLexer0.dollar();
      assertEquals("%", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.number();
      xPathLexer0.LA((-1));
      xPathLexer0.plus();
      xPathLexer0.star();
      xPathLexer0.hasMoreChars();
      xPathLexer0.plus();
      token1.toString();
      token0.toString();
      token1.toString();
      xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C)Xe,8:+T>9");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("C", token0.getTokenText());
      
      xPathLexer0.comma();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("X", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("e", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(",", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals("8", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(13, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">.ueq!'/Np*J$R");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(9, token0.getTokenType());
      assertEquals(">", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(13, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.notEquals();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.dots();
      xPathLexer1.relationalOperator();
      xPathLexer1.endPosition();
      xPathLexer1.doubleColon();
      xPathLexer2.pipe();
      xPathLexer1.colon();
      xPathLexer2.whitespace();
      xPathLexer2.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer("[ (");
      xPathLexer3.star();
      xPathLexer3.setXPath("[ (");
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.or();
      xPathLexer3.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer4.doubleColon();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      xPathLexer6.currentPosition();
      Token token0 = xPathLexer3.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("i", token0.getTokenText());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("JLEZ", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.LA((-1));
      Token token3 = xPathLexer0.plus();
      assertEquals(")", token3.getTokenText());
      assertEquals(5, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token4 = xPathLexer1.slashes();
      assertEquals(11, token4.getTokenType());
      
      xPathLexer1.operatorName();
      Token token5 = xPathLexer0.leftParen();
      assertEquals("U", token5.getTokenText());
      assertEquals(1, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      xPathLexer0.identifier();
      xPathLexer0.setXPath("rS)t3O9s}Q~ #A3");
      Token token0 = xPathLexer0.dots();
      Token token1 = xPathLexer0.nextToken();
      String string0 = token0.toString();
      assertEquals("[ (13) (r)", string0);
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals(")", token2.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(15, token1.getTokenType());
      assertEquals("S", token1.getTokenText());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("t", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{@}4-J'|vQ_=g3>L");
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      Token token0 = xPathLexer0.not();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("3%{x@u*D%X^Qu%C");
      xPathLexer1.nextToken();
      xPathLexer0.plus();
      xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{@}4-J'|vQ_=g3>L");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.equals();
      assertEquals("{", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals("@", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("}", token2.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer("_");
      Token token10 = xPathLexer2.nextToken();
      assertEquals("_", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("r ", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      assertEquals("8", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      Token token4 = xPathLexer0.rightParen();
      assertEquals("Z", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer1.equals();
      assertEquals(21, token5.getTokenType());
      assertEquals("r", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("bE:-`9?{jP4", token6.getTokenText());
      
      xPathLexer1.getXPath();
      xPathLexer1.consume(2120);
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      assertEquals("b", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "V*";
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setXPath("zj7pVn]iAJLEZ)UM");
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{@}4-J'|vQ_=g3>L");
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.colon();
      xPathLexer0.whitespace();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer("{@}4-J'|vQ_=g3>L");
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      String string0 = xPathLexer0.getXPath();
      assertEquals("{@}4-J'|vQ_=g3>L", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7T/TFvUCPV0q[%K");
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(11, token1.getTokenType());
      assertEquals("/", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("T", token2.getTokenText());
      
      Token token3 = xPathLexer1.notEquals();
      assertEquals(22, token3.getTokenType());
      
      xPathLexer1.identifier();
      xPathLexer1.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.and();
      Token token4 = xPathLexer0.leftParen();
      assertEquals("[", token4.getTokenText());
      assertEquals(1, token4.getTokenType());
      
      xPathLexer1.consume();
      Token token5 = xPathLexer0.dollar();
      assertEquals("%", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7T/TFvUCPV0q[%K");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("7", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals("T", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.rightParen();
      assertEquals(2, token2.getTokenType());
      
      xPathLexer1.comma();
      Token token3 = xPathLexer0.comma();
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("TF", token5.getTokenText());
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      assertEquals("", token6.getTokenText());
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer1.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.whitespace();
      assertEquals((-2), token9.getTokenType());
      
      xPathLexer1.identifierOrOperatorName();
      Token token10 = xPathLexer0.identifierOrOperatorName();
      assertEquals("CPV0q", token10.getTokenText());
      
      Token token11 = xPathLexer0.equals();
      assertEquals("[", token11.getTokenText());
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer0.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.consume(2767);
      Token token13 = xPathLexer1.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      xPathLexer0.setPreviousToken(token3);
      assertEquals("/", token3.getTokenText());
      
      Token token14 = xPathLexer1.star();
      assertEquals(20, token14.getTokenType());
      
      Token token15 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token15);
      assertEquals(15, token15.getTokenType());
      
      Token token16 = xPathLexer1.dollar();
      assertEquals(26, token16.getTokenType());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      xPathLexer0.dollar();
      xPathLexer0.comma();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.equals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertFalse(xPathLexer2.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setXPath("zj7pVn]iAJLEZ)UM");
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer0.div();
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.leftParen();
      assertEquals(1, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer1.dots();
      assertEquals(13, token2.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer0.endPosition();
      xPathLexer1.doubleColon();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("1M(*>I7h2qq$");
      xPathLexer0.star();
      xPathLexer1.setXPath("M XUfDB6Hn4:");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer3.at();
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer3.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("1M(*>I7h2qq$");
      Token token11 = xPathLexer4.nextToken();
      assertEquals(30, token11.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      int int0 = xPathLexer1.currentPosition();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!CP(z");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(23, token0.getTokenType());
      assertEquals("!", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.setXPath(".MEEPSly<`L'eV 8|V");
      XPathLexer xPathLexer1 = new XPathLexer("!");
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals(23, token3.getTokenType());
      assertEquals("!", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token4 = xPathLexer2.number();
      assertEquals(30, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{@}4-J'|vQ_=g3>#");
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.star();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^C,zN6;\"z3iqS");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("^C", token0.getTokenText());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(";", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("z'ssXN");
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer1.equals();
      assertEquals("z", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.consume(1900);
      Token token7 = xPathLexer1.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{@}4-J'|vQ_=g3>#");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.equals();
      assertEquals("{", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals("@", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("}", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("4-J", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("", token4.getTokenText());
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token10 = xPathLexer1.star();
      assertEquals(20, token10.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("_");
      xPathLexer0.nextToken();
      int int0 = xPathLexer0.endPosition();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{@}4-J'|vQ_=g3>L");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.equals();
      assertEquals("{", token0.getTokenText());
      
      xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(6, token1.getTokenType());
      assertEquals("-", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("J", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals("'", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("|v", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals("Q", token6.getTokenText());
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      assertEquals("_", token7.getTokenText());
      
      xPathLexer0.whitespace();
      xPathLexer0.identifierOrOperatorName();
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer0.equals();
      assertEquals(">", token9.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("{@}4-J'|vQ_=g3>L");
      Token token10 = xPathLexer1.nextToken();
      assertEquals("{@}4-J'|vQ_=g3>L", token10.getTokenText());
      
      xPathLexer0.getXPath();
      xPathLexer0.consume(102);
      Token token11 = xPathLexer1.leftBracket();
      assertEquals("{", token11.getTokenText());
      assertEquals(3, token11.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token12 = xPathLexer2.not();
      assertEquals(23, token12.getTokenType());
      
      Token token13 = xPathLexer2.equals();
      assertEquals(21, token13.getTokenType());
      
      Token token14 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token14.getTokenType());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{@}4-J'|vQ_=g3>#");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.equals();
      assertEquals("{", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals("@", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.comma();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertNotNull(token2);
      assertEquals("4-J", token2.getTokenText());
      
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("|", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("v", token4.getTokenText());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("Q_", token5.getTokenText());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals("=", token7.getTokenText());
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals("g", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token9 = xPathLexer0.rightParen();
      assertEquals("3", token9.getTokenText());
      assertEquals(2, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token10 = xPathLexer2.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals(">", token11.getTokenText());
      assertEquals(9, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.dollar();
      xPathLexer0.consume();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{@}4-J'|vQ_=g3>#");
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.not();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.rightBracket();
      xPathLexer0.comma();
      xPathLexer0.isIdentifierStartChar('L');
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer(".-d");
      xPathLexer0.operatorName();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer0.nextToken();
      xPathLexer1.setXPath("");
      assertFalse(xPathLexer1.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-sj@@^@ =HvM");
      xPathLexer0.identifier();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("-sj@@^@ =HvM");
      xPathLexer1.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer("3h<s-`(&ZkK2rn$8");
      xPathLexer2.dollar();
      xPathLexer1.consume();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("M");
      Token token0 = xPathLexer3.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7T/TFvUCPV0q[%K");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("7", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      Token token2 = xPathLexer0.number();
      assertEquals("", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.rightParen();
      assertEquals(2, token3.getTokenType());
      
      xPathLexer1.comma();
      Token token4 = xPathLexer1.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer2.consume();
      xPathLexer2.or();
      Token token5 = xPathLexer1.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer1.comma();
      assertEquals(32, token7.getTokenType());
      
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('I');
      assertTrue(boolean0);
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("7T/TFvUCPV0q[%K");
      xPathLexer1.operatorName();
      xPathLexer3.setPreviousToken(token1);
      assertEquals(17, token1.getTokenType());
      
      Token token9 = xPathLexer3.nextToken();
      assertEquals(30, token9.getTokenType());
      
      xPathLexer2.setXPath("aR3(ocW22,'");
      Token token10 = xPathLexer0.minus();
      assertEquals("F", token10.getTokenText());
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer3.slashes();
      assertEquals("T/", token11.getTokenText());
      assertEquals(12, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kFS#mcN");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("#", token1.getTokenText());
      
      Token token2 = xPathLexer0.getPreviousToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals("m", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.isIdentifierStartChar('L');
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifier();
      assertEquals("cN", token6.getTokenText());
      
      xPathLexer0.identifier();
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">.ueq!'Np*JR");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.mod();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("k!\"ysE6W) K?Wuv;w6");
      Token token2 = xPathLexer2.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("k", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("g", token1.getTokenText());
      
      xPathLexer0.leftParen();
      xPathLexer0.and();
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("=", token2.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      Token token3 = xPathLexer0.leftParen();
      assertEquals("*", token3.getTokenText());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("+", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      XPathLexer xPathLexer3 = new XPathLexer("AYT&'kn9w#\"1spf-");
      Token token6 = xPathLexer3.colon();
      assertEquals("A", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer3.nextToken();
      assertEquals("YT", token7.getTokenText());
      
      xPathLexer3.setXPath("");
      Token token8 = xPathLexer1.dollar();
      assertEquals(26, token8.getTokenType());
      assertEquals("g", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-sj@@^@ =HvM");
      Token token0 = xPathLexer0.identifier();
      assertEquals("-sj", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      Token token2 = xPathLexer0.dollar();
      assertEquals("@", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("^@ =HvM", token3.getTokenText());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals(21, token1.getTokenType());
      assertEquals("@", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Q_{G^25am");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.equals();
      assertEquals("{", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("G", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.consume(2120);
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ht=M>Z?Ie");
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer("2FK[620'Fr;");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("ht=M>Z?Ie");
      xPathLexer0.nextToken();
      xPathLexer1.consume();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("ht=M>Z?Ie");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">.ueq!'Np*JR");
      xPathLexer0.whitespace();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.dollar();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer(">.ueq!'Np*JR");
      xPathLexer1.relationalOperator();
      Token token0 = xPathLexer1.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C)Xe,8:+T>9");
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.consume();
      xPathLexer0.or();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.identifier();
      xPathLexer0.isIdentifierStartChar('I');
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("C)Xe,8:+T>9");
      assertEquals("C)Xe,8:+T>9", xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.div();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("cdbgg1v}vG(nri07.");
      xPathLexer1.plus();
      Token token0 = xPathLexer1.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dk\"#X");
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b IvwEOZ");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("b", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("b IvwEOZ");
      Token token1 = xPathLexer0.nextToken();
      assertEquals("IvwEOZ", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tn?%(VRTte6");
      XPathLexer xPathLexer1 = new XPathLexer("tn?%(VRTte6");
      Token token0 = xPathLexer1.minus();
      xPathLexer1.setPreviousToken(token0);
      assertEquals(6, token0.getTokenType());
      assertEquals("t", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("t", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("n", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer1.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tn?%(VRTte6");
      XPathLexer xPathLexer1 = new XPathLexer("tn?%(VRTte6");
      Token token0 = xPathLexer1.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("t", token0.getTokenText());
      
      Token token1 = xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer("\"(;tZEDD^WVPxn{r");
      xPathLexer2.identifier();
      xPathLexer0.isIdentifierStartChar('2');
      Token token2 = xPathLexer0.nextToken();
      assertEquals("tn", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("{3~,.G5lz`");
      xPathLexer2.operatorName();
      xPathLexer2.setPreviousToken(token1);
      assertEquals(4, token1.getTokenType());
      assertEquals("n", token1.getTokenText());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("?%(VRTte6", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".k(6a9dS'iokQR`APEv");
      Token token0 = xPathLexer0.dollar();
      assertEquals(".", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("k", token1.getTokenText());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer(".k(6a9dS'iokQR`APEv");
      Token token3 = xPathLexer0.nextToken();
      assertEquals("6", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")Dxb");
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.at();
      int int0 = (-1316);
      xPathLexer0.consume((-1316));
      xPathLexer0.setXPath(")Dxb");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.div();
      xPathLexer0.rightBracket();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.leftBracket();
      xPathLexer0.consume((-1316));
      xPathLexer0.dollar();
      xPathLexer0.equals();
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".k(6a9dS'iokQR`APEv");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(".", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer(".k(6a9dS'iokQR`APEv");
      Token token1 = xPathLexer0.nextToken();
      assertEquals("k(6a9dS'iokQR`APEv", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      xPathLexer1.setPreviousToken(token0);
      assertEquals(26, token0.getTokenType());
      assertEquals("z", token0.getTokenText());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("zj7pVn", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("j", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C)Xe,8:+T>9");
      Token token0 = xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(")", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("X", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.dollar();
      assertEquals(",", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("C)Xe,8:+T>9");
      xPathLexer1.setPreviousToken(token0);
      Token token4 = xPathLexer1.nextToken();
      assertEquals("C)Xe,8:+T>9", token4.getTokenText());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals("8", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{@}4-J'|vQ_=g3>#");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.equals();
      assertEquals("{", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(16, token1.getTokenType());
      assertEquals("@", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals("}", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.comma();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("-J", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.nextToken();
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C)Xe,8:+T>9");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("C", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(2, token1.getTokenType());
      assertEquals(")", token1.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.consume();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("C)Xe,8:+T>9");
      Token token2 = xPathLexer2.comma();
      assertEquals("C", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("ms-dWI");
      Token token3 = xPathLexer3.nextToken();
      assertEquals("ms-dWI", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer3.rightBracket();
      assertEquals(4, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("buIvwEO{Z");
      XPathLexer xPathLexer1 = new XPathLexer("buIvwEO{Z");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("b", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("uIvwEO", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("{Z", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.relationalOperator();
      xPathLexer0.comma();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.leftParen();
      xPathLexer0.hasMoreChars();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.setXPath("-aI@lbD|W_");
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("-", token4.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(10, int0);
      
      xPathLexer0.and();
      xPathLexer0.setXPath("-aI@lbD|W_");
      xPathLexer0.div();
      xPathLexer0.mod();
      Token token5 = xPathLexer0.comma();
      assertEquals("-", token5.getTokenText());
      
      xPathLexer0.at();
      char char0 = xPathLexer0.LA(10);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.comma();
      boolean boolean0 = xPathLexer0.isIdentifierChar('\uFFFF');
      assertFalse(boolean0);
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals("", token6.getTokenText());
      assertEquals((-2), token6.getTokenType());
      
      xPathLexer0.and();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("l", token7.getTokenText());
      
      xPathLexer0.div();
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer0.minus();
      assertEquals("D", token9.getTokenText());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("aR3(ocW22,'");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer1.number();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer2.LA(381);
      xPathLexer2.plus();
      xPathLexer1.star();
      xPathLexer0.hasMoreChars();
      xPathLexer1.doubleColon();
      xPathLexer2.rightBracket();
      XPathLexer xPathLexer3 = new XPathLexer("<Cn");
      xPathLexer0.notEquals();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer0.or();
      xPathLexer0.slashes();
      xPathLexer0.colon();
      xPathLexer4.number();
      // Undeclared exception!
      try { 
        xPathLexer3.LA((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bf IvwEOZ");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("f", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals(" ", token2.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals("I", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals("v", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("E^iVqINej*f.5%DIhf");
      xPathLexer0.at();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      XPathLexer xPathLexer2 = new XPathLexer("E^iVqINej*f.5%DIhf");
      xPathLexer2.dollar();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("E^iVqINej*f.5%DIhf");
      xPathLexer3.nextToken();
      xPathLexer1.consume();
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".k(6a9dS'iokQR`APEv");
      xPathLexer0.and();
      Token token0 = xPathLexer0.not();
      assertEquals(".", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("k(", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      assertEquals("'", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Og:$ZA[in!D");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Og", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".k(6a9dS'iokQR`APEv");
      xPathLexer0.setXPath("`y$&KI+!Rp");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("`y$&KI+!Rp", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("`", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mk$");
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$m");
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m}.h-");
      XPathLexer xPathLexer1 = new XPathLexer("m}.h-");
      xPathLexer1.equals();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("sC%36b");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("sC", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tn?(RSte");
      XPathLexer xPathLexer1 = new XPathLexer("&r");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("&r", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      XPathLexer xPathLexer1 = new XPathLexer("2Ht@INy*Bn+-y");
      Token token0 = xPathLexer1.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("2", token0.getTokenText());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("Ht", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.relationalOperator();
      xPathLexer0.comma();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.setXPath("-aI@lbD|W_");
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("-", token4.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(10, int0);
      
      xPathLexer0.and();
      xPathLexer0.setXPath("-aI@lbD|W_");
      xPathLexer0.div();
      xPathLexer0.mod();
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      assertEquals("-", token5.getTokenText());
      
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("aI", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("D80u)a<tZ5?LtQ-yoT~");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.dollar();
      xPathLexer2.identifier();
      xPathLexer2.isIdentifierStartChar('9');
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.and();
      xPathLexer3.operatorName();
      xPathLexer3.nextToken();
      Token token0 = xPathLexer2.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<0VD_[s[;s_6p`5 ,");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("0", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("VD_[s[;s_6p`5 ,", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ly;8x!dw2");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("ly", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">.ueq!'/Np*J$R");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.currentPosition();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.equals();
      assertEquals("'", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("/", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("\"]c(ri$XH|#$  sz}");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("Np", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer(">.ueq!'/Np*J$R");
      xPathLexer2.getXPath();
      xPathLexer2.or();
      xPathLexer1.consume(5);
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("*", token4.getTokenText());
      
      Token token5 = xPathLexer2.nextToken();
      assertEquals(9, token5.getTokenType());
      assertEquals(">", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y{N");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("y", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
      
      xPathLexer0.setPreviousToken((Token) null);
      Token token2 = xPathLexer0.nextToken();
      assertEquals("{N", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m}.h-");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("m", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("}.h-", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("}.", token2.getTokenText());
      assertEquals(14, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">.ueq!'/Np*J$R");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.equals();
      assertEquals(".", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("e", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.getPreviousToken();
      assertEquals(9, token3.getTokenType());
      assertEquals(">", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("q", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mo;Q'W");
      xPathLexer0.plus();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("motL(2Qdvv,${UsOSW");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mo;Q'W");
      XPathLexer xPathLexer1 = new XPathLexer("mo;Q'W");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("momQ$");
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-sj@@^@ =HvM");
      xPathLexer0.identifier();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer(" oWGVAh%/vq=`");
      xPathLexer2.dollar();
      xPathLexer1.consume();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("M");
      Token token0 = xPathLexer3.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Wq$");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("Wq", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(26, token1.getTokenType());
      assertEquals("$", token1.getTokenText());
      
      char char0 = xPathLexer0.LA(782);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("l$F");
      xPathLexer0.colon();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.dots();
      xPathLexer0.pipe();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.doubleColon();
      xPathLexer0.whitespace();
      xPathLexer0.at();
      xPathLexer0.and();
      xPathLexer0.isIdentifierStartChar('j');
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.currentPosition();
      xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.equals();
      xPathLexer0.LA(12);
      xPathLexer0.pipe();
      xPathLexer0.leftParen();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G61yvZXo{hya{r\"wle");
      XPathLexer xPathLexer1 = new XPathLexer("<|:[B8fulRh]\"%P3");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(7, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
      
      Token token1 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".3-'Nx/?$o");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("an");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'=_*T'\"1h~=6@}>");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/..!j?,#m9V!}gQi");
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0!.9jMu/@");
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".13x/?$o");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(".13", token0.getTokenText());
      assertEquals(31, token0.getTokenType());
  }
}
