/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:34:09 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.SyncFailedException;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.printArray((Object[]) null, true, true);
      Utility.isSet(175, 175);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = Utility.accessToString(1466);
      assertEquals("private static final synchronized transient native abstract", string0);
      
      byte byte0 = Utility.typeOfSignature("Lf%#q&Z'%z<pw(;V");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-3451), (-3451));
      assertFalse(boolean0);
      
      String string0 = Utility.format(0, 0, false, '?');
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.clearBit((-722), 0);
      try { 
        Utility.typeOfMethodSignature("d8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: d8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.classOrInterface(3258);
      assertEquals("class", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('r');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("VZKB~I", "? extends ", "VZKB~I", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: VZKB~I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("P4:y9K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P4:y9K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-93);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-55);
      try { 
        Utility.methodSignatureReturnType("K@%nBGB.U#f@WFo$[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K@%nBGB.U#f@WFo$['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)63;
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName(" RLJ5My", true);
      try { 
        Utility.typeOfSignature(" RLJ5My");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  RLJ5My
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = Utility.compactClassName(",+,~)4\"\"|~", true);
      assertEquals(",+,~)4\"\"|~", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)71;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$aeG", string1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.isJavaIdentifierPart('4');
      String string0 = "=.ut8$:`Q$W|L2B";
      try { 
        Utility.methodSignatureReturnType("=.ut8$:`Q$W|L2B", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `=.ut8$:`Q$W|L2B'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('@');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iload_1", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Z&p<]cX%|'euk'_^", true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "HBjxa";
      Utility.replace("Qr;UpvR`", "HBjxa", "HBjxa");
      String string1 = "Gj>4]v?5M:_-*kz)[!E";
      try { 
        Utility.typeOfSignature("Gj>4]v?5M:_-*kz)[!E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gj>4]v?5M:_-*kz)[!E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.clearBit((-671), (-365));
      try { 
        Utility.methodSignatureReturnType("zDQv^", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `zDQv^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "&!@H:u";
      try { 
        Utility.typeOfSignature("&!@H:u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &!@H:u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "O";
      try { 
        Utility.typeOfSignature("O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.methodTypeToSignature("'", (String[]) null);
      Utility.setBit((byte) (-89), 159);
      String string1 = Utility.printArray((Object[]) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      try { 
        Utility.methodSignatureReturnType("f:Z:XqDx54B@z#Z<s)U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-79);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-79), 1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-100), (-3820));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)26;
      byteArray0[5] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)26, (int) (byte)26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[4] = "CM0kN";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-103);
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)26, (int) (byte) (-103));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-86);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 18, (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.searchOpcode("O(x-");
      try { 
        Utility.typeOfSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.compactClassName("impdep1");
      Utility.searchOpcode("impdep1");
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte)37;
      byteArray0[2] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)37, (int) (byte)37);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "InitObject");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-20), (int) (byte)54);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    irem
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.fillup("10c?XGPJ/#", 98, true, '1');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 98, (int) (byte) (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2091), (-1));
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("if_icmplt\t\t#17747", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = Utility.compactClassName("ConstantValue");
      assertEquals("ConstantValue", string0);
      
      String string1 = Utility.fillup("ConstantValue", (byte)59, true, '1');
      assertEquals("ConstantValue1111111111111111111111111111111111111111111111", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-47);
      byteArray0[4] = (byte) (-47);
      byteArray0[4] = (byte)59;
      byteArray0[3] = (byte) (-47);
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte) (-47);
      boolean boolean0 = Utility.isSet((byte) (-47), (byte) (-47));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Utility.toHexString(byteArray0);
      String string0 = Utility.accessToString((-584));
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)30;
      byteArray1[3] = (byte)0;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)30;
      byteArray2[1] = (byte)12;
      byteArray2[3] = (byte)0;
      boolean boolean1 = Utility.equals(byteArray1, byteArray2);
      String string1 = Utility.compactClassName("static final synchronized transient native abstract strictfp synthetic annotation enum", false);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean2 = Utility.isJavaIdentifierPart('b');
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_ENDBLOCKDATA;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)120;
      byteArray0[2] = (byte)120;
      byte byte1 = Constants.CONSTANT_String;
      String string0 = Utility.getSignature("%9&vf[bD>-D#0~Xc.]b");
      assertEquals("[L%9&vf;", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" v", false);
      assertArrayEquals(new byte[] {(byte)32, (byte)118}, byteArray0);
      
      String string0 = Utility.getSignature(" v");
      assertEquals("Lv;", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ")jT[CXW2";
      stringArray0[1] = ")jT[CXW2";
      stringArray0[2] = ")jT[CXW2";
      stringArray0[3] = ")jT[CXW2";
      stringArray0[4] = ")jT[CXW2";
      stringArray0[5] = ")jT[CXW2";
      stringArray0[6] = "arraylength";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(")jT[CXW2", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[CXW2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.classOrInterface((byte)127);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)82;
      byteArray0[0] = (byte)82;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      byteArray0[2] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readChar();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool0);
      Utility.signatureToString("S>");
      // Undeclared exception!
      try { 
        Signature.translate("dastore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal signature: dastore read d
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)123, (byte)111);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.typeOfSignature("ddiv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ddiv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantLong constantLong0 = new ConstantLong((byte) (-90));
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-90);
      constantPool0.copy();
      byteArray0[1] = (byte) (-90);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 197, (int) (byte) (-90));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.convertString("");
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)56, 759);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes(55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 55, 3780, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)37, (int) (byte)71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ConstantPool constantPool0 = null;
          byte[] byteArray0 = new byte[8];
          byteArray0[0] = (byte) (-82);
          byteArray0[4] = (byte) (-82);
          ByteSequence byteSequence0 = new ByteSequence(byteArray0);
          Constant[] constantArray0 = new Constant[0];
          ConstantPool constantPool1 = new ConstantPool(constantArray0);
          Utility.codeToString(byteSequence0, constantPool1);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1556)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor73.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[0] = (byte)40;
      byteArray0[2] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1684, (int) (byte)40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.");
      stringArray0[1] = ";`J2_ypG{X*pRJ7kQE6";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)65;
      Utility.codeToString(byteArray0, (ConstantPool) null, 4, 246);
      Utility.classOrInterface((byte)40);
      Utility.clearBit(246, (-613));
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte byte0 = Constants.CONSTANT_Methodref;
      assertEquals((byte)10, byte0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)24, (byte)24, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)24, (byte)24, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals(6, int0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)24, (byte)24, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)24, (byte)24, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      
      boolean boolean0 = true;
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertArrayEquals(new byte[] {(byte)90, (byte)24, (byte)24, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals("dup_x1", string0);
      assertNotNull(string0);
      assertNotSame(byteSequence1, byteSequence2);
      assertNotSame(byteSequence1, byteSequence0);
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string1 = Utility.getSignature(";");
      assertEquals("L;;", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.methodSignatureArgumentTypes("Inalid Sta");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Inalid Sta
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = ";`J2_ypG{X*pRJ7kQE6";
      String string0 = Utility.classOrInterface(95);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-38);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)5, (byte)121, (byte) (-77), (byte) (-38)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertArrayEquals(new byte[] {(byte)1, (byte)5, (byte)121, (byte) (-77), (byte) (-38)}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(261, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)121, (byte)5);
      assertEquals(121, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(5, constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      ConstantFieldref constantFieldref1 = (ConstantFieldref)constantFieldref0.copy();
      assertEquals(121, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(5, constantFieldref0.getNameAndTypeIndex());
      assertEquals(5, constantFieldref1.getNameAndTypeIndex());
      assertEquals(121, constantFieldref1.getClassIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertNotNull(constantFieldref1);
      assertNotSame(constantFieldref0, constantFieldref1);
      assertNotSame(constantFieldref1, constantFieldref0);
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte)1, (byte)5, (byte)121, (byte) (-77), (byte) (-38)}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("lshl", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-90);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-77), (int) (byte) (-77));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" v", false);
      assertArrayEquals(new byte[] {(byte)32, (byte)118}, byteArray0);
      assertNotNull(byteArray0);
      
      String string0 = Utility.getSignature("c} =f=2$8i.%z{Sdj");
      assertEquals("Lc};", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)63, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-95);
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]7i,D)0\"YX60xk0");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      byteArray0[3] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)63, (byte) (-83), (byte) (-95), (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)63, (byte) (-83), (byte) (-95), (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)63, byte0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(77, (-1765));
      assertEquals((-1765), constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(77, constantFieldref0.getClassIndex());
      assertNotNull(constantFieldref0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)63, (byte) (-83), (byte) (-95), (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("lreturn", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString(")Vuwdw]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `)Vuwdw]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "InitObject");
      assertFalse(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("InitObject");
      assertEquals("int", string0);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureArgumentTypes("Couldn't find: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Couldn't find: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-87), (byte)123, (byte)123}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-87), (byte)123, (byte)123}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-87), (byte)123, (byte)123}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(dataInputStream0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)123, (int) (byte) (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "L;fq&Z'%z<Jtw;V";
      // Undeclared exception!
      try { 
        Utility.signatureToString("L;fq&Z'%z<Jtw;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L;fq&Z'%z<Jtw;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = Utility.getSignature("jsr_w");
      assertEquals("Ljsr_w;", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "AD\u0007O";
      stringArray0[1] = "Ljsr_w;";
      String string1 = Utility.methodTypeToSignature("Ljsr_w;", stringArray0);
      assertEquals("(LAD\u0007O;LLjsr_w;;)LLjsr_w;;", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = false;
      boolean boolean1 = true;
      String string2 = Utility.signatureToString("Ljsr_w;", true);
      assertEquals("jsr_w", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      try { 
        Utility.methodSignatureArgumentTypes("Ljsr_w;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ljsr_w;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertEquals("<illegal opcode>", string0);
      assertNotNull(string0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1303), (-2565));
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-1303), constantFieldref0.getClassIndex());
      assertEquals((-2565), constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2565), (-1303));
      assertEquals((-1303), constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-2565), constantMethodref0.getClassIndex());
      assertNotNull(constantMethodref0);
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-75);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 232, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected class `CONSTANT_Fieldref' at index 0 and got CONSTANT_Methodref[10](class_index = -2565, name_and_type_index = -1303)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)123;
      int int0 = 14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)63, (-612));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = Utility.replace("", "java.lang.", "[]");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "[]";
      stringArray0[1] = "";
      stringArray0[2] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      long long0 = byteSequence0.readLong();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteSequence0.getIndex());
      assertEquals(0L, long0);
      
      int int0 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteSequence0.getIndex());
      assertEquals(0, int0);
      
      byteSequence0.close();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteSequence0.getIndex());
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int1 = byteSequence0.readInt();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(0, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      String string0 = Utility.compactClassName("sastore");
      assertEquals("sastore", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("Fz;]HZ3(q4vk4Y,*");
      assertEquals((byte)6, byte0);
      
      try { 
        Utility.typeOfSignature("a$cTe{[2WiHs`?a8(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: a$cTe{[2WiHs`?a8(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.signatureToString("SMDvv?EPx&2$=\"~Sc?x");
      assertEquals("short", string0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      String string0 = Utility.convertString("\"");
      assertEquals("\\\"", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("", true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("@JJDt_Vdw-XA|h");
      assertEquals("@JJDt_Vdw-XA|h", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), (int) (byte) (-92));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    monitorexit
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(Zn%<", "(Zn%<", "(Zn%<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `n%<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)94;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-848), 102);
      assertArrayEquals(new byte[] {(byte)94}, byteArray0);
      assertEquals("0:    dup2_x2\n", string0);
      assertNotNull(string0);
      
      String string1 = "class";
      String string2 = "fconst_1";
      int int0 = Utility.clearBit((byte)94, (byte)94);
      assertEquals(94, int0);
      
      try { 
        Utility.methodSignatureArgumentTypes("(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = Utility.accessToString(1466);
      assertEquals("private static final synchronized transient native abstract", string0);
      assertNotNull(string0);
      
      String string1 = Utility.fillup("B:vm)", 185, true, ']');
      assertEquals("B:vm)]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "private static final synchronized transient native abstract";
      stringArray0[1] = "? extends ";
      stringArray0[2] = "jsr_w";
      String string2 = Utility.methodTypeToSignature("(g'G&:D7\"0EuuC j\"H", stringArray0);
      assertEquals("(Lprivate;L?;Ljsr_w;)L(g'G&:D7\"0EuuC;", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(Lprivate;L?;Ljsr_w;)L(g'G&:D7\"0EuuC;");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = Utility.classOrInterface(6);
      assertEquals("class", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(:>T$~p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `:>T$~p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      String string0 = Utility.classOrInterface((byte) (-87));
      assertEquals("interface", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("java.lang..q(O3X;>");
      assertEquals("java.lang..q(O3X;>", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[1];
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{null}", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = Utility.compactClassName("]Lw\"LO:4hC:?", "]Lw\"LO:4hC:?", true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)109;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-97), (byte) (-82), (byte)74, (byte)109}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = Utility.fillup("nU`3P", 1797, true, ']');
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-116);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)37, 255);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = Utility.classOrInterface((byte)127);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("S>");
      assertEquals("S>", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)127, 189);
      assertEquals(189, constantFieldref0.getNameAndTypeIndex());
      assertEquals(127, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte byte0 = Utility.typeOfSignature("S>");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, (int) (byte)20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ireturn");
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "ireturn";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)63;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)63, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.compactClassName(" RLJ5My", false);
      assertEquals(" RLJ5My", string0);
      assertNotNull(string0);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('\"');
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      try { 
        Utility.typeOfSignature("2PBD2S.GPtP3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2PBD2S.GPtP3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "InitObject");
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("InitObject");
      assertEquals((byte)10, byte0);
      
      try { 
        Utility.methodSignatureReturnType("5IRrN1x4bZ=f.S", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `5IRrN1x4bZ=f.S'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)17;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 166, 158);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      String string1 = constantPool0.toString();
      assertEquals(4, constantPool0.getLength());
      assertEquals("1)null\n2)null\n3)null\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<illegal type>");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = Pattern.MULTILINE;
      assertEquals(8, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[5] = (byte) (-108);
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<illegal type>");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-108), (byte)0, (byte)0, (byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int1 = byteSequence0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-108), (byte)0, (byte)0, (byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteSequence0.getIndex());
      assertEquals(9, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1)null\n2)null\n3)null\n";
      stringArray0[1] = "<illegal type>";
      String string2 = Utility.methodTypeToSignature("<illegal type>", stringArray0);
      assertEquals("(L1)null;L<illegal;)L<illegal;", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = true;
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-20);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-34);
      try { 
        Utility.typeOfSignature("$DT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $DT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "yU`";
      boolean boolean0 = true;
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.typeOfSignature("<init>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <init>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)32, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)32, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(32, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)32, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(0, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertNotNull(constantMethodType1);
      assertFalse(constantMethodType1.equals((Object)constantMethodType0));
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)32, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("TmeC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TmeC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = Pattern.quote("M");
      assertEquals("\\QM\\E", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)90;
      try { 
        Utility.typeOfSignature("M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)23;
      byteArray0[1] = (byte)23;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)23, (int) (byte)23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = Utility.accessToString(1466);
      assertEquals("private static final synchronized transient native abstract", string0);
      assertNotNull(string0);
      
      String string1 = Utility.methodSignatureReturnType("T;KMweS", true);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "private static final synchronized transient native abstract";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      String string2 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(Ljava/lang/;L;L;Lprivate;L;L;L;)L;", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      try { 
        Utility.methodSignatureReturnType("private static final synchronized transient native abstract");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `private static final synchronized transient native abstract'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((-1308));
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1308.0), constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1188), (-1188));
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-1188), constantMethodref0.getClassIndex());
      assertEquals((-1188), constantMethodref0.getNameAndTypeIndex());
      assertNotNull(constantMethodref0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-8);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte)57, (byte)0, (byte) (-102), (byte) (-8)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)57, (byte)57, (byte)0, (byte) (-102), (byte) (-8)}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("dstore\t\t%57", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("NK@%nBEB.U#f@W|ao$[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NK@%nBEB.U#f@W|ao$['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)95;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)96, (int) (byte)96);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Constant[] constantArray0 = new Constant[13];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(13, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(13, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 613, 196);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-34);
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)88;
      byteArray1[1] = (byte)88;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)88, (byte) (-34)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte)88}, byteArray1);
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("$A", string0);
      assertNotNull(string0);
      
      String string1 = Utility.methodSignatureReturnType("V");
      assertEquals("void", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      try { 
        byteSequence0.readFloat();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.compactClassName("1j\"dS");
      assertEquals("1j\"dS", string0);
      assertNotNull(string0);
      
      boolean boolean2 = Utility.isSet(385, 311);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = Utility.getSignature("1j\"dS");
      assertEquals("L1j\"dS;", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.typeOfSignature("1j\"dS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1j\"dS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      short short0 = Utility.searchOpcode("tV\"'y=-h[K2? `)[j|");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.accessToString(471, true);
      assertEquals("public private protected final volatile transient native", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = Utility.compactClassName("SMDvvzEPx&2$Sc?x");
      assertEquals("SMDvvzEPx&2$Sc?x", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-71);
      String string1 = Utility.accessToString((int) (byte) (-71), true);
      assertEquals("public static final transient native abstract strictfp synthetic annotation enum", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-71), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("$b9$A$A$A", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Utility.classOrInterface((-1730));
      assertEquals("class", string0);
      assertNotNull(string0);
      
      boolean boolean0 = true;
      try { 
        Utility.decode("blV$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('2');
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString(235, true);
      assertEquals("public private static volatile transient", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char char0 = 'o';
      boolean boolean0 = Utility.isJavaIdentifierPart('o');
      assertTrue(boolean0);
      
      String string0 = "NUZ:mvk";
      try { 
        Utility.typeOfSignature("NUZ:mvk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NUZ:mvk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)17;
      byteArray0[5] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)17, (int) (byte)17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)16, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 185, 43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Qfycd;0YH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qfycd;0YH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)81;
      String string0 = "W";
      String string1 = Utility.compactClassName("W", true);
      assertEquals("W", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = Utility.isJavaIdentifierPart('\"');
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = Constants.ILLEGAL_OPCODE;
      assertEquals("<illegal opcode>", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      try { 
        Utility.typeOfSignature("!HD{!5qG)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HD{!5qG)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      String string0 = Utility.convertString("VXcic(j7Qn&pM9hyb");
      assertEquals("VXcic(j7Qn&pM9hyb", string0);
      assertNotNull(string0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((-2212.843408844557));
      assertEquals((-2212.843408844557), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(93, (-2200));
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(93, constantMethodref0.getClassIndex());
      assertEquals((-2200), constantMethodref0.getNameAndTypeIndex());
      assertNotNull(constantMethodref0);
      
      String string1 = Utility.signatureToString("VXcic(j7Qn&pM9hyb");
      assertEquals("void", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = Utility.setBit((byte) (-105), 164);
      assertEquals((-105), int0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string2 = Utility.compactClassName("VXcic(j7Qn&pM9hyb", "VXcic(j7Qn&pM9hyb", true);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%9&vf[bD>-D#~Xc.]b");
      assertFalse(boolean0);
      
      String string0 = "Inalid Sta";
      try { 
        Utility.typeOfSignature("X#'Q)<$0ObaGMea5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X#'Q)<$0ObaGMea5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)47;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)47, (byte) (-69), (byte)47}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 149, (int) (byte)47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Inalid Sta");
      assertEquals((byte)10, byte0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[2] = (byte)10;
      byte byte1 = Constants.CONSTANT_String;
      assertEquals((byte)8, byte1);
      assertFalse(byte1 == byte0);
      
      String string0 = Utility.getSignature("\t(wide)");
      assertEquals("L(wide);", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "K|)HNOO\\p:o8Dz8";
      try { 
        Utility.typeOfSignature("K|)HNOOp:o8Dz8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K|)HNOOp:o8Dz8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "S>";
      String string1 = Utility.classOrInterface(486);
      assertEquals("class", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.convertString("0iaL@Z");
      assertEquals("0iaL@Z", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      try { 
        Utility.typeOfSignature("0iaL@Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0iaL@Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = false;
      byte byte0 = Utility.typeOfSignature("Z");
      assertEquals((byte)4, byte0);
      
      String string0 = Utility.compactClassName("Z", true);
      assertEquals("Z", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("*{]b84");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {]b84
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)34;
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-87), (byte)123, (byte)123}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      try { 
        Utility.typeOfSignature("3suer ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3suer 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = Utility.replace("putstatic", "putstatic", "putstatic");
      assertEquals("putstatic", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "Pattern is missing", "putstatic", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = Utility.signatureToString("ConstantValue", false);
      assertEquals("char", string0);
      assertNotNull(string0);
      
      String string1 = Utility.fillup("char", (byte) (-82), false, '1');
      assertEquals("char", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-82);
      byteArray0[4] = (byte) (-82);
      byteArray0[3] = (byte) (-82);
      String string2 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-82), (byte)0, (byte)0, (byte) (-82), (byte) (-82), (byte)0, (byte)0}, byteArray0);
      assertEquals("ae 00 00 ae ae 00 00", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = Utility.convertString("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 98, 98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if_acmpeq");
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('\u001E');
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)109;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), (int) (byte)109);
      assertArrayEquals(new byte[] {(byte)109, (byte)109}, byteArray0);
      assertEquals("0:    ldiv\n1:    ldiv\n", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfMethodSignature("putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte byte0 = (byte) (-87);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-87), (byte) (-66), (byte)123}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-87), (byte) (-66), (byte)123}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(8, constantPool0.getLength());
      assertEquals("fload_0", string0);
      assertNotNull(string0);
      
      String string1 = "3suer ";
      try { 
        Utility.typeOfSignature("fload_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fload_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)112;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)112, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = Utility.fillup(" not found", 88, false, '?');
      assertEquals("?????????????????????????????????????????????????????????????????????????????? not found", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "?????????????????????????????????????????????????????????????????????????????? not found";
      objectArray0[1] = (Object) " not found";
      objectArray0[2] = (Object) " not found";
      objectArray0[3] = (Object) "?????????????????????????????????????????????????????????????????????????????? not found";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"?????????????????????????????????????????????????????????????????????????????? not found\", \" not found\", \" not found\", \"?????????????????????????????????????????????????????????????????????????????? not found\"}", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-20);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte) (-20);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-20), (byte) (-20), (byte)0, (byte)74, (byte) (-20), (byte) (-20), (byte) (-20), (byte) (-84), (byte) (-20)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-20), (byte) (-20), (byte)0, (byte)74, (byte) (-20), (byte) (-20), (byte) (-20), (byte) (-84), (byte) (-20)}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(60652, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte) (-20), (byte) (-20), (byte)0, (byte)74, (byte) (-20), (byte) (-20), (byte) (-20), (byte) (-84), (byte) (-20)}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals((byte)0, byte0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-20), (byte) (-20));
      assertEquals((-20), constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-20), constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      Constant[] constantArray0 = new Constant[5];
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[4] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-20), (byte) (-20), (byte)0, (byte)74, (byte) (-20), (byte) (-20), (byte) (-20), (byte) (-84), (byte) (-20)}, byteArray0);
      assertEquals(5, constantPool0.getLength());
      assertEquals(4, byteSequence0.getIndex());
      assertEquals("dstore_3", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("dstore_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dstore_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2498, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte byte0 = (byte)127;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[j");
      assertFalse(boolean0);
      
      String string0 = "S>";
      try { 
        Utility.methodSignatureReturnType("[j", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `j'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        Utility.typeOfSignature("R3ML;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R3ML;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)119;
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble(426.88400982749);
      assertEquals(426.88400982749, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)119, (int) (byte) (-83));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = Utility.classOrInterface((byte) (-119));
      assertEquals("interface", string0);
      assertNotNull(string0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((-0.9552387047665706));
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-0.9552387047665706), constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)67;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 48, (int) (byte) (-66));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)63, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-95);
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]7i,D)0\"YX60xk0");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      byteArray0[3] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)63, (byte) (-64), (byte) (-95), (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)63, (byte) (-64), (byte) (-95), (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)63, byte0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(77, (-1765));
      assertEquals((-1765), constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(77, constantFieldref0.getClassIndex());
      assertNotNull(constantFieldref0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 18;
      String string0 = Utility.fillup("char", 18, false, ')');
      assertEquals("))))))))))))))char", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-25);
      byteArray0[0] = (byte) (-25);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byte byte1 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte) (-25), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte) (-25), byte1);
      assertTrue(byte1 == byte0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)57, 18);
      assertEquals(18, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(57, constantFieldref0.getClassIndex());
      assertNotNull(constantFieldref0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string1 = Utility.codeToString(byteSequence1, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertEquals("<illegal opcode>", string1);
      assertNotNull(string1);
      assertNotSame(byteSequence1, byteSequence0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.signatureToString("L0:;V");
      assertEquals("0:", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      try { 
        Utility.typeOfSignature("))))))))))))))char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ))))))))))))))char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)105;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-85);
      byteArray1[3] = (byte)105;
      byteArray1[4] = (byte) (-85);
      byteArray1[6] = (byte)105;
      byteArray1[8] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-85), (int) (byte)105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)105;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)105;
      byteArray1[1] = (byte)42;
      byteArray1[2] = (byte) (-85);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)105, (byte)42, (byte) (-85), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string0 = Utility.codeToString(byteSequence1, constantPool1);
      assertArrayEquals(new byte[] {(byte)105, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, constantPool1.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertEquals("lmul", string0);
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(byteSequence1, byteSequence0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("lmul");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lmul'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)105;
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)48;
      byte byte1 = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte) (-85), (byte)48, (byte)1, (byte)1, (byte) (-101), (byte)1}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertArrayEquals(new byte[] {(byte)105, (byte) (-85), (byte)48, (byte)1, (byte)1, (byte) (-101), (byte)1}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(27051, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(181, 340);
      assertEquals(340, constantFieldref0.getNameAndTypeIndex());
      assertEquals(181, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFieldref0;
      int int0 = byteSequence0.readInt();
      assertArrayEquals(new byte[] {(byte)105, (byte) (-85), (byte)48, (byte)1, (byte)1, (byte) (-101), (byte)1}, byteArray0);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals(805372315, int0);
      
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte) (-85), (byte)48, (byte)1, (byte)1, (byte) (-101), (byte)1}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      int int1 = byteSequence1.readUnsignedShort();
      assertArrayEquals(new byte[] {(byte)105, (byte) (-85), (byte)48, (byte)1, (byte)1, (byte) (-101), (byte)1}, byteArray0);
      assertEquals(2, byteSequence1.getIndex());
      assertEquals(27051, int1);
      assertNotSame(byteSequence1, byteSequence0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(int1 == int0);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertArrayEquals(new byte[] {(byte)105, (byte) (-85), (byte)48, (byte)1, (byte)1, (byte) (-101), (byte)1}, byteArray0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(3, byteSequence1.getIndex());
      assertEquals("faload", string0);
      assertNotNull(string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("faload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `faload'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[4];
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[0] = object2;
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature("boolean");
      assertEquals("Z", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = Utility.convertString("S>");
          assertEquals("S>", string0);
          assertNotNull(string0);
          
          Constant[] constantArray0 = new Constant[0];
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          assertNotNull(fileSystemHandling0);
          
          byte[] byteArray0 = new byte[6];
          byteArray0[1] = (byte) (-125);
          byteArray0[2] = (byte) (-1);
          byteArray0[4] = (byte) (-1);
          byteArray0[5] = (byte) (-16);
          ByteSequence byteSequence0 = new ByteSequence(byteArray0);
          assertArrayEquals(new byte[] {(byte)0, (byte) (-125), (byte) (-1), (byte)0, (byte) (-1), (byte) (-16)}, byteArray0);
          assertEquals(0, byteSequence0.getIndex());
          assertNotNull(byteSequence0);
          
          int int0 = byteSequence0.read();
          assertArrayEquals(new byte[] {(byte)0, (byte) (-125), (byte) (-1), (byte)0, (byte) (-1), (byte) (-16)}, byteArray0);
          assertEquals(1, byteSequence0.getIndex());
          assertEquals(0, int0);
          
          ConstantPool constantPool0 = new ConstantPool(constantArray0);
          assertEquals(0, constantPool0.getLength());
          assertNotNull(constantPool0);
          
          String string1 = Utility.codeToString(byteSequence0, constantPool0);
          assertArrayEquals(new byte[] {(byte)0, (byte) (-125), (byte) (-1), (byte)0, (byte) (-1), (byte) (-16)}, byteArray0);
          assertEquals(2, byteSequence0.getIndex());
          assertEquals(0, constantPool0.getLength());
          assertEquals("lxor", string1);
          assertNotNull(string1);
          assertFalse(string1.equals((Object)string0));
          
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          assertFalse(fileDescriptor0.valid());
          assertNotNull(fileDescriptor0);
          
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1556)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor73.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Y(br0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y(br0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(dataInputStream0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(4096, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      String string0 = ":Zzh2RH^kgUw?Br8";
      try { 
        Utility.typeOfSignature(":Zzh2RH^kgUw?Br8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :Zzh2RH^kgUw?Br8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-87);
      String string0 = "CKqJz\"*\\kW!YoUHHa";
      try { 
        Utility.methodSignatureReturnType("P!s))LeGg}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LeGg}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('\'');
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertEquals(5, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      byte byte0 = Utility.typeOfSignature("Tk,/)6fxPV");
      assertEquals((byte)14, byte0);
      
      boolean boolean3 = Utility.isSet(229, 229);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = Utility.convertString("Inalid StackMap frme_type");
      assertEquals("Inalid StackMap frme_type", string0);
      assertNotNull(string0);
      
      boolean boolean0 = true;
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      short short0 = Constants.MAJOR_1_4;
      assertEquals((short)48, short0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      byte[] byteArray0 = new byte[7];
      try { 
        Utility.typeOfSignature("#^[B U0!P$`=`mR|)@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #^[B U0!P$`=`mR|)@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)63;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)63, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.compactClassName(" RLJ5My", false);
      assertEquals(" RLJ5My", string0);
      assertNotNull(string0);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('\"');
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      try { 
        Utility.typeOfSignature("%U'p{=VsFQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %U'p{=VsFQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = null;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)20);
      assertEquals(20, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertNotNull(constantInteger0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)43;
      byteArray1[1] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)20, (int) (byte)43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)63, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-104);
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]7i,D)0\"YX60xk0");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      byteArray0[3] = (byte) (-104);
      byte byte0 = (byte)81;
      byteArray0[4] = (byte)81;
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      byteArray0[6] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)63, (byte) (-83), (byte) (-104), (byte) (-104), (byte)81, (byte)0, (byte) (-86), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertArrayEquals(new byte[] {(byte)63, (byte) (-83), (byte) (-104), (byte) (-104), (byte)81, (byte)0, (byte) (-86), (byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(16301, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2100), (-1));
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-2100), constantFieldref0.getClassIndex());
      assertEquals((-1), constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantFieldref constantFieldref1 = (ConstantFieldref)constantFieldref0.copy();
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-2100), constantFieldref0.getClassIndex());
      assertEquals((-1), constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertEquals((-1), constantFieldref1.getNameAndTypeIndex());
      assertEquals((-2100), constantFieldref1.getClassIndex());
      assertNotNull(constantFieldref1);
      assertNotSame(constantFieldref0, constantFieldref1);
      assertNotSame(constantFieldref1, constantFieldref0);
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)63, (byte) (-83), (byte) (-104), (byte) (-104), (byte)81, (byte)0, (byte) (-86), (byte)0, (byte)0}, byteArray0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("dcmpg", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("dcmpg");
      assertEquals("dcmpg", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      try { 
        Constant.readConstant(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -104
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 36, (int) (byte) (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 235;
      try { 
        Utility.typeOfSignature("=.ut8$:`Q$W|L2B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =.ut8$:`Q$W|L2B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = Utility.convertString("S>");
      assertEquals("S>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 7, 1024);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = Utility.getSignature("0");
      assertEquals("L0;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)64, (byte)49, (byte) (-18), (byte) (-66), (byte)19, (byte) (-18), (byte)19}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)64, (byte)49, (byte) (-18), (byte) (-66), (byte)19, (byte) (-18), (byte)19}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("if_acmpeq\t\t#16433", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 18;
      String string0 = Utility.fillup("char", 18, false, ')');
      assertEquals("))))))))))))))char", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)79;
      byteArray0[0] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)79, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byte byte1 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)79, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)79, byte1);
      assertTrue(byte1 == byte0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)57, 18);
      assertEquals(57, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(18, constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)79, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string1 = Utility.codeToString(byteSequence1, constantPool0);
      assertArrayEquals(new byte[] {(byte)79, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertEquals("iastore", string1);
      assertNotNull(string1);
      assertNotSame(byteSequence1, byteSequence0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.signatureToString("L0:;V");
      assertEquals("0:", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      try { 
        Utility.typeOfSignature("))))))))))))))char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ))))))))))))))char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_ENDBLOCKDATA;
      assertEquals((byte)120, byte0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)120;
      Constant[] constantArray0 = new Constant[10];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 161, (int) (byte)120, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte byte0 = Constants.CONSTANT_Methodref;
      assertEquals((byte)10, byte0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 810, (int) (byte)97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = Utility.convertString("S>");
      assertEquals("S>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 7, 1024);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      String string0 = "ie*>|1h]?7";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-67), 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte)68;
      byteArray0[7] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)68, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string0 = "Exception while looking for class ";
      try { 
        Utility.typeOfSignature("Exception while looking for class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Exception while looking for class 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)20;
      byteArray0[5] = (byte) (-49);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)20, (byte)45, (byte)45, (byte)20, (byte)0, (byte) (-49)}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)20, (byte)45, (byte)45, (byte)20, (byte)0, (byte) (-49)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      int int1 = byteSequence0.readInt();
      assertArrayEquals(new byte[] {(byte)20, (byte)45, (byte)45, (byte)20, (byte)0, (byte) (-49)}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(338504980, int1);
      assertFalse(int1 == int0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)45);
      assertEquals(45, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("+L4y|O4u$nt cdlNt");
      assertEquals((byte)14, byte0);
      
      short short0 = Utility.searchOpcode(" arg");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = ";`J2_ypG{X*pRJ7kQE6";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("", true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature(";`J2_ypG{X*pRJ7kQE6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;`J2_ypG{X*pRJ7kQE6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)48, (byte) (-111), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)48, (byte) (-111), (byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(12032, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)48, (byte) (-111), (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals((byte)48, byte0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)47, (byte)47);
      assertEquals(47, constantFieldref0.getNameAndTypeIndex());
      assertEquals(47, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)48, (byte) (-111), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("i2b", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 187, (-3571));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)44;
      byteArray0[0] = (byte)44;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)44, (int) (byte)44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "^JoH]S}";
      String string1 = Utility.classOrInterface((byte)127);
      assertEquals("class", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.convertString("^JoH]S}");
      assertEquals("^JoH]S}", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, 175);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ie>|1%tk?7", false);
      assertArrayEquals(new byte[] {(byte)105, (byte)101, (byte)62, (byte)124, (byte)49, (byte)37, (byte)116, (byte)107, (byte)63, (byte)55}, byteArray0);
      assertNotNull(byteArray0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((byte)85);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(85.0, constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      String string0 = Utility.convertString("N|IY))");
      assertEquals("N|IY))", string0);
      assertNotNull(string0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2992, (byte)85);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(2992, constantFieldref0.getClassIndex());
      assertEquals(85, constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)101, (byte)62, (byte)124, (byte)49, (byte)37, (byte)116, (byte)107, (byte)63, (byte)55}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantString constantString0 = new ConstantString(byteSequence0);
      assertArrayEquals(new byte[] {(byte)105, (byte)101, (byte)62, (byte)124, (byte)49, (byte)37, (byte)116, (byte)107, (byte)63, (byte)55}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(26981, constantString0.getStringIndex());
      assertNotNull(constantString0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      int int0 = byteSequence0.available();
      assertArrayEquals(new byte[] {(byte)105, (byte)101, (byte)62, (byte)124, (byte)49, (byte)37, (byte)116, (byte)107, (byte)63, (byte)55}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(8, int0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)101, (byte)62, (byte)124, (byte)49, (byte)37, (byte)116, (byte)107, (byte)63, (byte)55}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)105, (byte)101, (byte)62, (byte)124, (byte)49, (byte)37, (byte)116, (byte)107, (byte)63, (byte)55}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("istore_3", string1);
      assertNotNull(string1);
      assertNotSame(byteSequence0, byteSequence1);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string1.equals((Object)string0));
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)101, (byte)62, (byte)124, (byte)49, (byte)37, (byte)116, (byte)107, (byte)63, (byte)55}, byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      
      byte byte0 = byteSequence2.readByte();
      assertArrayEquals(new byte[] {(byte)105, (byte)101, (byte)62, (byte)124, (byte)49, (byte)37, (byte)116, (byte)107, (byte)63, (byte)55}, byteArray0);
      assertEquals(1, byteSequence2.getIndex());
      assertEquals((byte)105, byte0);
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(byteSequence2, byteSequence0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      
      short short0 = Utility.searchOpcode("_YuNL_vd$aRF");
      assertEquals((short) (-1), short0);
      
      String string2 = Utility.getSignature("-");
      assertEquals("L-;", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      try { 
        Utility.typeOfSignature("_YuNL_vd$aRF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _YuNL_vd$aRF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte) (-65);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1844), (int) (byte)92);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-1), (byte)0, (byte)2, (byte)11, (byte)92, (byte) (-65)}, byteArray0);
      assertEquals("0:    lsub\n1:    impdep2\n2:    nop\n3:    iconst_m1\n4:    fconst_0\n5:    dup2\n6:    athrow\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("short", false);
      assertArrayEquals(new byte[] {(byte)115, (byte)104, (byte)111, (byte)114, (byte)116}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "short");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)115, (byte)104, (byte)111, (byte)114, (byte)116}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 75, (-1030));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = Utility.compactClassName("ie*>|1,hk?7");
      assertEquals("ie*>|1,hk?7", string0);
      assertNotNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ie*>|1,hk?7");
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)107;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)107, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)124;
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\r");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte)7, (byte)7, (byte)0, (byte)7, (byte)7, (byte)124}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.readInt();
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte)7, (byte)7, (byte)0, (byte)7, (byte)7, (byte)124}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(117901063, int0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte)7, (byte)7, (byte)0, (byte)7, (byte)7, (byte)124}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      int int1 = byteSequence1.read();
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte)7, (byte)7, (byte)0, (byte)7, (byte)7, (byte)124}, byteArray0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(7, int1);
      assertNotSame(byteSequence1, byteSequence0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(int1 == int0);
      
      short short0 = byteSequence0.readShort();
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte)7, (byte)7, (byte)0, (byte)7, (byte)7, (byte)124}, byteArray0);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals((short)7, short0);
      assertNotSame(byteSequence0, byteSequence1);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      
      byte byte0 = Constants.ATTR_RUNTIMEINVISIBLE_PARAMETER_ANNOTATIONS;
      assertEquals((byte)15, byte0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)7, 7);
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte)7, (byte)7, (byte)0, (byte)7, (byte)7, (byte)124}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("7:    iushr\n", string0);
      assertNotNull(string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte)7, (byte)7, (byte)0, (byte)7, (byte)7, (byte)124}, byteArray0);
      assertEquals("07 07 07 07 00 07 07 7c", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.format(117901063, (byte)7, true, '{');
      assertEquals("117901063", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      try { 
        Utility.typeOfSignature("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(0, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals((byte)0, byte0);
      
      String string0 = "-ZWGHFyf-:vCcf_{8g";
      try { 
        Utility.typeOfSignature("-ZWGHFyf-:vCcf_{8g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -ZWGHFyf-:vCcf_{8g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = Pattern.quote("Jj;#&W^L]");
      assertEquals("\\QJj;#&W^L]\\E", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Jj;#&W^L]");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)90;
      byte byte0 = Utility.typeOfSignature("Jj;#&W^L]");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("W>Lk3/76P*vcyUz-4y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W>Lk3/76P*vcyUz-4y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (-172), (int) (byte)4);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("/oHq1\"oC-6Zy,1H^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /oHq1\"oC-6Zy,1H^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = Utility.convertString("S>");
      assertEquals("S>", string0);
      assertNotNull(string0);
      
      Constant[] constantArray0 = new Constant[0];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-16);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-125), (byte) (-1), (byte)0, (byte) (-1), (byte) (-16)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-125), (byte) (-1), (byte)0, (byte) (-1), (byte) (-16)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("athrow", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = Utility.convertString("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2754, 589);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "UZ?*>$1U\\K";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("UZ?*>$1UK");
      assertEquals((short) (-1), short0);
      
      String string1 = "Bs&BB)#VRab@F&Tl>j";
      String string2 = Utility.signatureToString("Bs&BB)#VRab@F&Tl>j");
      assertEquals("byte", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "'";
      try { 
        Utility.methodSignatureArgumentTypes("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte)68;
      byteArray0[7] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)68, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Exception while looking for class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exception while looking for class '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature(":@~OCb\">QbtWc", stringArray0);
      assertEquals("()L:@~OCb\">QbtWc;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature(":@~OCb\">QbtWc");
      assertEquals("L:@~OCb\">QbtWc;", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.signatureToString("From\tTo\tHandler\tType\n", false);
      assertEquals("float", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = Utility.setBit((byte) (-108), 6);
      assertEquals((-44), int0);
      
      String string3 = Utility.printArray((Object[]) stringArray0);
      assertEquals("{}", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = Utility.convertString("KzGh");
      assertEquals("KzGh", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      short short0 = Utility.searchOpcode("L:@~OCb\">QbtWc;");
      assertEquals((short) (-1), short0);
      
      short short1 = Utility.searchOpcode("DJI");
      assertEquals((short) (-1), short1);
      assertTrue(short1 == short0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("VRa.`");
      assertEquals((byte)12, byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      int int0 = Utility.clearBit((byte)12, (byte)12);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)6;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 39, 1762);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = Utility.convertString("S>");
      assertEquals("S>", string0);
      assertNotNull(string0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-3636), (byte) (-1));
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-1), constantMethodref0.getNameAndTypeIndex());
      assertEquals((-3636), constantMethodref0.getClassIndex());
      assertNotNull(constantMethodref0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-102), (byte) (-102), (byte) (-102), (byte)32, (byte) (-74), (byte) (-1), (byte)84}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-102), (byte) (-102), (byte) (-102), (byte)32, (byte) (-74), (byte) (-1), (byte)84}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("ifne\t\t#-25958", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("ifne\t\t#-25958");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifne\t\t#-25958'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(0, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      String string0 = Utility.compactClassName("Dont call getValueLong() on a non LONG ElementValue");
      assertEquals("Dont call getValueLong() on a non LONG ElementValue", string0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "o-'97uL[G_v~}Nc4v");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short short0 = Utility.searchOpcode("invokevirtual");
      assertEquals((short)182, short0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      byte byte0 = Utility.typeOfSignature("Dont call getValueLong() on a non LONG ElementValue");
      assertEquals((byte)7, byte0);
      
      short short1 = Constants.MAJOR_1_2;
      assertEquals((short)46, short1);
      assertFalse(short1 == short0);
      
      String string1 = Utility.signatureToString("D#,Z9-QfI\"AK{^%");
      assertEquals("double", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-85);
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte) (-100);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-19), (byte) (-55), (byte) (-107), (byte) (-85), (byte)0, (byte) (-74), (byte) (-100)}, byteArray0);
      assertFalse(boolean0);
      
      Constant[] constantArray0 = new Constant[10];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(10, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(10, constantPool0.getLength());
      assertEquals(10, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        Utility.typeOfSignature("AUs5#;%UhpY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AUs5#;%UhpY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = Utility.convertString("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-97), (byte)53, (byte)55, (byte)108, (byte)111, (byte) (-97), (byte)53}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-97), (byte)53, (byte)55, (byte)108, (byte)111, (byte) (-97), (byte)53}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(40757, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)55, 2105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" v", false);
      assertArrayEquals(new byte[] {(byte)32, (byte)118}, byteArray0);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(0, constantPool0.getLength());
      
      int int0 = 200;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-111), 200);
      assertArrayEquals(new byte[] {(byte)32, (byte)118}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    lload_2\n1:    fneg\n", string0);
      assertNotNull(string0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)118}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (-2483));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"-UBoLG+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"-UBoLG+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)92;
      try { 
        Utility.methodSignatureReturnType("H-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byteArray0[1] = (byte)20;
      Constant[] constantArray0 = new Constant[2];
      int int0 = 571;
      ConstantInteger constantInteger0 = new ConstantInteger(571);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(571, constantInteger0.getBytes());
      assertNotNull(constantInteger0);
      
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)20, 2204);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5F^Q[tY$QoS,u0.=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5F^Q[tY$QoS,u0.=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1066), (-1066));
      assertArrayEquals(new byte[] {(byte)114}, byteArray0);
      assertEquals("0:    frem\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("0:    frem\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    frem
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = Utility.decode("<init>", false);
      assertArrayEquals(new byte[] {(byte)60, (byte)105, (byte)110, (byte)105, (byte)116, (byte)62}, byteArray0);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      Constant[] constantArray0 = new Constant[4];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 16, 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = "vt%[g7DAfAC=c";
      byte[] byteArray0 = Utility.decode("vt%[g7DAfAC=c", false);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)81, (int) (byte)81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Inalid Sta");
      assertEquals((byte)10, byte0);
      
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("Inalid Sta", false);
      assertArrayEquals(new byte[] {(byte)73, (byte)110, (byte)97, (byte)108, (byte)105, (byte)100, (byte)32, (byte)83, (byte)116, (byte)97}, byteArray0);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 763, 350);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte byte0 = Constants.ATTR_STACK_MAP;
      assertEquals((byte)11, byte0);
      
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("long", false);
      assertArrayEquals(new byte[] {(byte)108, (byte)111, (byte)110, (byte)103}, byteArray0);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 93, 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'nnY1d:$(V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'nnY1d:$(V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CZyWQ7{,>");
      assertEquals((byte)5, byte0);
      
      byte byte1 = (byte)49;
      try { 
        Utility.typeOfSignature("7bf@1e'-~LDaVYMPVn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7bf@1e'-~LDaVYMPVn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "6=m4^S";
      try { 
        Utility.typeOfSignature("6=m4^S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6=m4^S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)116;
      byteArray0[0] = (byte)116;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1066), (-1066));
      assertArrayEquals(new byte[] {(byte)116}, byteArray0);
      assertEquals("0:    ineg\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("0:    ineg\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    ineg
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = Utility.classOrInterface((byte)127);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
      
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)73;
      byteArray0[6] = (byte)106;
      byteArray0[3] = (byte)12;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)12, (int) (byte) (-66));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = true;
      ConstantDouble constantDouble0 = new ConstantDouble((-0.9552387047665706));
      assertEquals((-0.9552387047665706), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-69), 2);
      assertArrayEquals(new byte[] {(byte) (-81)}, byteArray0);
      assertEquals("0:    dreturn\n", string0);
      assertNotNull(string0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.classOrInterface(83);
      assertEquals("class", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("~]0Y[9Y8]@2gQp| 6", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `~]0Y[9Y8]@2gQp| 6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(1543503872, constantInteger0.getBytes());
      assertNotNull(constantInteger0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = Pattern.CANON_EQ;
      assertEquals(128, int0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      byteSequence1.mark(9);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotSame(byteSequence1, byteSequence0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      int int1 = byteSequence1.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteSequence1.getIndex());
      assertEquals(5, int1);
      assertNotSame(byteSequence1, byteSequence0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(int1 == int0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence2.getIndex());
      assertEquals("dup2", string0);
      assertNotNull(string0);
      assertNotSame(byteSequence2, byteSequence0);
      assertNotSame(byteSequence2, byteSequence1);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)122, (byte) (-94)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte)122, (byte) (-94)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("ishr", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)122, (byte) (-94)}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte) (-94), byte0);
      
      String string2 = Utility.convertString("ifnonnull");
      assertEquals("ifnonnull", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte) (-94), 198);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%9&vf[bD>-D#~Xc.]b");
      assertFalse(boolean0);
      
      byte byte0 = (byte)68;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)110;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 86, (int) (byte)110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = Utility.signatureToString("CRAu.");
      assertEquals("char", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SMDvvzEPx&2$Sc?x");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-81);
      byteArray0[3] = (byte) (-100);
      byteArray0[5] = (byte) (-81);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 83, (-1083));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("9yDvIgN|/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9yDvIgN|/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "HBjxa";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Qr;UpvR`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qr;UpvR`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("Z]_'0x`8WD0Hzn'N");
      assertEquals("Z]_\\'0x`8WD0Hzn\\'N", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      ConstantDouble constantDouble0 = new ConstantDouble(144);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(144.0, constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i2s");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((-1308));
      assertEquals((-1308.0), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)86;
      byteArray0[3] = (byte)86;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i2s");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)86, (byte)86, (byte)0, (byte)86, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertArrayEquals(new byte[] {(byte)86, (byte)86, (byte)0, (byte)86, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("sastore", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = Utility.signatureToString("SMDvv?EPx&2$=\"~Sc?x");
      assertEquals("short", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = null;
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("short", stringArray0);
      assertEquals("()S", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      MockFile mockFile0 = new MockFile("()S", "short");
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("short", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/()S", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/()S/short", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertNotNull(mockFile0);
      
      String string2 = Utility.methodSignatureToString("()S", "P`p#_y*+tSE_G&r=RA", "()S");
      assertEquals("()S short P`p#_y*+tSE_G&r=RA()", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      byte byte0 = (byte)65;
      String string3 = "java.lang.";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("java.lang.", "fcont_1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"fcont_1\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = Utility.classOrInterface((-1308));
      assertEquals("interface", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\t(wde)";
      String string1 = Utility.methodTypeToSignature("interface", stringArray0);
      assertEquals("(L(wde);)Linterface;", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.methodSignatureToString("(L(wde);)Linterface;", "new", "interface");
      assertEquals("interface interface new((wde) arg1)", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(mockFileInputStream0);
      
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i2s");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((-1308));
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1308.0), constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1188), (-1188));
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-1188), constantMethodref0.getNameAndTypeIndex());
      assertEquals((-1188), constantMethodref0.getClassIndex());
      assertNotNull(constantMethodref0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)86;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-8);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      String string1 = Utility.compactClassName("i2s");
      assertEquals("i2s", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray1 = Utility.decode("i2s", false);
      assertArrayEquals(new byte[] {(byte)105, (byte)50, (byte)115}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string2 = Utility.classOrInterface((-1188));
      assertEquals("interface", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Utility.getSignature("float");
      assertEquals("F", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = Utility.classOrInterface((-1308));
      assertEquals("interface", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      try { 
        Utility.typeOfSignature("@z;D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @z;D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte byte0 = (byte)47;
      String string0 = "BO";
      byte byte1 = Utility.typeOfSignature("BO");
      assertEquals((byte)8, byte1);
      assertFalse(byte1 == byte0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)47, (byte)47}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      short short0 = byteSequence0.readShort();
      assertArrayEquals(new byte[] {(byte)47, (byte)47}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((short)12079, short0);
      
      int int0 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte)47, (byte)47}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((-1), int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean2 = true;
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      // Undeclared exception!
      try { 
        constantPool0.getConstant(200, (byte)18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) (-61);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)75, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = Utility.classOrInterface((-1308));
      assertEquals("interface", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("\t(wide)");
      assertEquals("\t(wide)", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-66);
      byteArray0[6] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)74, (-280));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("c;(3Nf7sm&/++", false);
      assertNotNull(byteArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[2] = (Object) byteArray0;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), (-779));
      assertEquals("0:    dadd\n1:    istore_0\n2:    dload_2\n3:    baload\n4:    astore_3\n5:    fsub\n6:    lstore\t\t%115\n8:    ldiv\n9:    dload_0\n10:   laload\n11:   aload_1\n12:   aload_1\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "FF`j6|/d^f9M \"h";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("FF`j6|/d^f9M \"h", "short");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // short
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-105);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-105)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-105)}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2565), (-2565));
      assertEquals((-2565), constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-2565), constantFieldref0.getClassIndex());
      assertNotNull(constantFieldref0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2565), 192);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-105)}, byteArray0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    dcmpl\n", string0);
      assertNotNull(string0);
      
      byte[] byteArray1 = Utility.decode("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    dcmpl\n", false);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short short0 = Utility.searchOpcode("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    dcmpl\n");
      assertEquals((short) (-1), short0);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-105)}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-105)}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 366, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("HzN:&.8G", false);
      assertArrayEquals(new byte[] {(byte)72, (byte)122, (byte)78, (byte)58, (byte)38, (byte)46, (byte)56, (byte)71}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1U|.tFT@#^/");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte)122, (byte)78, (byte)58, (byte)38, (byte)46, (byte)56, (byte)71}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      constantPool1.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string0 = "L;fq&Z'%z<Jtw;V";
      String string1 = Utility.compactClassName("L;fq&Z'%z<Jtw;V");
      assertEquals("L;fq&Z'%z<Jtw;V", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.getSignature("HzN:&.8G");
      assertEquals("LHzN:&/8G;", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 77, (int) (byte)36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte)68;
      byteArray0[7] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)68, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byte[] byteArray1 = Utility.decode("m5vw$%", false);
      assertArrayEquals(new byte[] {(byte)109, (byte)53, (byte)118, (byte)119, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)109, (byte)53, (byte)118, (byte)119, (byte)0}, byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string0 = Utility.compactClassName("DM#k");
      assertEquals("DM#k", string0);
      assertNotNull(string0);
      
      String string1 = Utility.methodSignatureReturnType("DM#k");
      assertEquals("double", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      byte byte1 = Utility.typeOfSignature(string0);
      assertEquals((byte)7, byte1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(byte1 == byte0);
      
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble(byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-119));
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((-119), constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-119);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 255, (int) (byte) (-119));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-848), 79);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 18, (int) (byte) (-58));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-81)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      boolean boolean0 = byteSequence0.markSupported();
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-81)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertTrue(boolean0);
      
      int int0 = byteSequence0.skipBytes((byte) (-81));
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-81)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(0, int0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-81)}, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2597), 186, false);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-81)}, byteArray0);
      assertEquals("0:    dreturn\n1:    dreturn\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.compactClassName("<init>", false);
      assertEquals("<init>", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-81)}, byteArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = Utility.convertString("0:    dreturn\n1:    dreturn\n");
      assertEquals("0:    dreturn\\n1:    dreturn\\n", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("byte", "public pri", "0:    dreturn\n1:    dreturn\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[4] = (byte)125;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)125, (byte)0, (byte)0, (byte)0, (byte)125}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byteSequence0.close();
      assertArrayEquals(new byte[] {(byte)125, (byte)0, (byte)0, (byte)0, (byte)125}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertArrayEquals(new byte[] {(byte)125, (byte)0, (byte)0, (byte)0, (byte)125}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(32000, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, 192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("`)", false);
      assertArrayEquals(new byte[] {(byte)96, (byte)41}, byteArray0);
      assertNotNull(byteArray0);
      
      String string0 = Utility.compactClassName("qL7F;[(7>,9mxnc");
      assertEquals("qL7F;[(7>,9mxnc", string0);
      assertNotNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte byte0 = (byte) (-78);
      int int0 = 161;
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-78), 161);
      assertArrayEquals(new byte[] {(byte)96, (byte)41}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    iadd\n1:    dload_3\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)96, (byte)41}, byteArray0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)77;
      byteArray0[0] = (byte)77;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)77);
      assertEquals(77.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 159, (int) (byte)77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AE4cRnY`$SqTM<");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-126), (byte)5}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      short short0 = byteSequence0.readShort();
      assertArrayEquals(new byte[] {(byte)5, (byte) (-126), (byte)5}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((short)1410, short0);
      
      int int0 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte)5, (byte) (-126), (byte)5}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(5, int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)5, (int) (byte)5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("<init>", false);
      assertArrayEquals(new byte[] {(byte)60, (byte)105, (byte)110, (byte)105, (byte)116, (byte)62}, byteArray0);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      Constant[] constantArray0 = new Constant[4];
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ConstantInteger constantInteger0 = new ConstantInteger(128);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(128, constantInteger0.getBytes());
      assertNotNull(constantInteger0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-126);
      byteArray1[1] = (byte) (-80);
      byteArray1[2] = (byte) (-1);
      byte byte0 = (byte) (-89);
      byteArray1[3] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (-210), (-465));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ixor
         // 1:    areturn
         // 2:    impdep2
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1846, (-1303));
      assertEquals(1846, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-1303), constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      Constant[] constantArray0 = new Constant[24];
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(24, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(24, constantPool0.getLength());
      assertEquals(24, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(24, constantPool0.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)70;
      ConstantPool constantPool2 = constantPool0.copy();
      assertEquals(24, constantPool0.getLength());
      assertEquals(24, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)70, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)70, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 17920. Constant pool size is: 24
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = Utility.convertString("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 98, 98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)24;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)24, (int) (byte)24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("JnY%", false);
      assertEquals("long", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")L_'2%");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      byte byte0 = (byte) (-78);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1829, (byte) (-78));
      assertEquals(1829, constantMethodHandle0.getReferenceKind());
      assertEquals((-78), constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertNotNull(constantMethodHandle0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1829, (-1172310199));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)30;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)30, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = Pattern.UNIX_LINES;
      assertEquals(1, int0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)30, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      boolean boolean1 = byteSequence1.markSupported();
      assertArrayEquals(new byte[] {(byte)30, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertTrue(boolean1);
      assertNotSame(byteSequence1, byteSequence0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertArrayEquals(new byte[] {(byte)30, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertEquals("lload_0", string0);
      assertNotNull(string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      try { 
        Utility.decode("araTlength", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-113);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-113), (int) (byte) (-113));
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray0);
      assertEquals("0:    d2l\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Object[] objectArray0 = new Object[14];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[13] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-56), (byte)85, (byte)49}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)126;
      byteArray0[0] = (byte)126;
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)126, (-3820));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Constant[] constantArray0 = new Constant[18];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(18, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-70), (int) (byte) (-70));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      String string1 = constantPool0.toString();
      assertEquals(4, constantPool0.getLength());
      assertEquals("1)null\n2)null\n3)null\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<illegal type>");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = Pattern.MULTILINE;
      assertEquals(8, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-3);
      byteArray0[5] = (byte) (-108);
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<illegal type>");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-108), (byte) (-3), (byte)0, (byte)0, (byte) (-108), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-108), (byte) (-3), (byte)0, (byte)0, (byte) (-108), (byte)0}, byteArray0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("lcmp", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i2s");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((-1308));
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1308.0), constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = "Unreachable default case reached!";
      byte[] byteArray0 = Utility.decode("Unreachable default case reached!", false);
      assertNotNull(byteArray0);
      
      String string2 = Utility.compactClassName("newarray");
      assertEquals("newarray", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Utility.encode(byteArray0, false);
      assertEquals("Unreachable$mdefault$mcase$mreached$n", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      ConstantFloat constantFloat0 = new ConstantFloat((-1308));
      assertEquals((-1308.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertNotNull(constantFloat0);
      
      byte byte0 = Constants.CONSTANT_String;
      assertEquals((byte)8, byte0);
      
      String string4 = Utility.codeToString(byteArray0, constantPool0, (-1308), (int) (byte)86);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    castore\n1:    fdiv\n2:    frem\n3:    lsub\n4:    ladd\n5:    dadd\n6:    imul\n7:    ladd\n8:    fadd\n9:    idiv\n10:   lsub\n11:   lload_2\n12:   isub\n13:   lsub\n14:   fsub\n15:   ladd\n16:   lneg\n17:   idiv\n18:   ineg\n19:   lload_2\n20:   dadd\n21:   ladd\n22:   drem\n23:   lsub\n24:   lload_2\n25:   frem\n26:   lsub\n27:   ladd\n28:   dadd\n29:   imul\n30:   lsub\n31:   isub\n32:   lload_3\n", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = Utility.compactClassName("newarray");
      assertEquals("newarray", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = Utility.compactClassName("SMDvvzEPx&2$Sc?x");
      assertEquals("SMDvvzEPx&2$Sc?x", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-32);
      byteArray0[0] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-23), 450);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte)0, (byte)0, (byte)0, (byte) (-73), (byte) (-73), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte) (-73));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = "Inalid Sta";
      byte byte0 = Constants.CONSTANT_Methodref;
      assertEquals((byte)10, byte0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      int int0 = 810;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, (int) (byte)2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)45;
      byteArray0[7] = (byte) (-70);
      byteArray0[5] = (byte)45;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)45, (int) (byte)45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47661. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        Utility.typeOfSignature("8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals("jsr_w\t\t#0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmpge");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("XB]}D+", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XB]}D+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)27, (byte)27, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte byte0 = Constants.ITEM_Bogus;
      assertEquals((byte)0, byte0);
      
      byte byte1 = (byte)78;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)27, (byte)27, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      
      try { 
        Utility.typeOfSignature("UYJJeJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UYJJeJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)36, (byte)20, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.skipBytes(55);
      assertArrayEquals(new byte[] {(byte)36, (byte)20, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteSequence0.getIndex());
      assertEquals(9, int0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 55, 3780, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = "S>";
      String string1 = Utility.convertString("S>");
      assertEquals("S>", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-93);
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-117), (int) (byte) (-93));
      assertArrayEquals(new byte[] {(byte) (-117), (byte) (-93), (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    f2i\n1:    if_icmpgt\t\t#1\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    f2i\n1:    if_icmpgt\t\t#1\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    f2i
         // 1:    if_icmpgt\t\t#1
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = "S>";
      String string1 = Utility.convertString("S>");
      assertEquals("S>", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-62);
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-117), (int) (byte) (-62));
      assertArrayEquals(new byte[] {(byte) (-117), (byte) (-62), (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    f2i\n1:    monitorenter\n2:    nop\n3:    nop\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    f2i\n1:    monitorenter\n2:    nop\n3:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    f2i
         // 1:    monitorenter
         // 2:    nop
         // 3:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid method signature: ");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "Invalid method signature: ";
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      
      String string1 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)63;
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-83), (int) (byte)35, true);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)35, (byte)63}, byteArray0);
      assertEquals("0:    lreturn\n1:    fload_1\n2:    lstore_0\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)69, (int) (byte)69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("YMDvvzEPx&2$Sc?x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YMDvvzEPx&2$Sc?x'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = "[\\EoF";
      byte[] byteArray0 = Utility.decode("[EoF", false);
      assertArrayEquals(new byte[] {(byte)91, (byte)69, (byte)111, (byte)70}, byteArray0);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 246, 160);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-72), (byte)7, (byte) (-72), (byte) (-72), (byte) (-72)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.readInt();
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-72), (byte)7, (byte) (-72), (byte) (-72), (byte) (-72)}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((-1195898952), int0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-72), (byte)7, (byte) (-72), (byte) (-72), (byte) (-72)}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      short short0 = byteSequence1.readShort();
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-72), (byte)7, (byte) (-72), (byte) (-72), (byte) (-72)}, byteArray0);
      assertEquals(2, byteSequence1.getIndex());
      assertEquals((short) (-18248), short0);
      assertNotSame(byteSequence1, byteSequence0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 200, (int) (byte)7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47111. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)75;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) (-98);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      assertNotNull(fileSystemHandling2);
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling0));
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling1));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)75, (-9));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('3');
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("a'`", "a'`");
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/a'`", mockFile0.getParent());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/a'`/a'`", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("a'`", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/a'`", mockFile0.getParent());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/a'`/a'`", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("a'`", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "a'`";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "a'`";
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      mockPrintWriter0.println(45.88711);
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/a'`", mockFile0.getParent());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/a'`/a'`", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("a'`", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      
      objectArray0[7] = (Object) "a'`";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/a'`", mockFile0.getParent());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/a'`/a'`", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("a'`", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      
      try { 
        Utility.methodSignatureReturnType("Wownvnu\"bR'y'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wownvnu\"bR'y''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Byte code error: ", false);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)81, 197);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)39;
      byteArray0[8] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)39, (byte)4, (byte)39, (byte)39, (byte)39, (byte)39, (byte)39, (byte) (-81)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.skipBytes(1729);
      assertArrayEquals(new byte[] {(byte)4, (byte)39, (byte)4, (byte)39, (byte)39, (byte)39, (byte)39, (byte)39, (byte) (-81)}, byteArray0);
      assertEquals(9, byteSequence0.getIndex());
      assertEquals(9, int0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)39, (byte)4, (byte)39, (byte)39, (byte)39, (byte)39, (byte)39, (byte) (-81)}, byteArray0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)39, 147, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)97;
      byteArray0[0] = (byte) (-66);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 50, 5235);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = "=6II*\"anY$yXjxX#`";
      byte[] byteArray0 = Utility.decode("=6II*\"anY$yXjxX#`", false);
      assertNotNull(byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokedynamic");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = Utility.printArray((Object[]) null, true);
      assertNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "goto_w");
      assertFalse(boolean0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-109), (int) (byte) (-109));
      assertEquals(4, constantPool0.getLength());
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[8];
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      stringArray0[0] = "0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n";
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      stringArray0[4] = "\"gq4]uXA+W:picNEQ)";
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-109);
      byteArray1[1] = (byte) (-109);
      byteArray1[3] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-109), (byte) (-109), (byte)0, (byte) (-109), (byte)0}, byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertArrayEquals(new byte[] {(byte) (-109), (byte) (-109), (byte)0, (byte) (-109), (byte)0}, byteArray1);
      assertEquals(4, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("i2s", string1);
      assertNotNull(string1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string2 = Utility.compactClassName("\"gq4]uXA+W:picNEQ)", "\"gq4]uXA+W:picNEQ)", false);
      assertEquals("\"gq4]uXA+W:picNEQ)", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      byte[] byteArray2 = new byte[3];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-109);
      String string3 = Pattern.quote("qr,)<t!9: 7");
      assertEquals("\\Qqr,)<t!9: 7\\E", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = Utility.getSignature("J]p{=,9nBsr/dr36C)");
      assertEquals("LJ]p{=,9nBsr/dr36C);", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string5 = Utility.replace("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n", "6={o3]&S3T:mm?w3", (String) null);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = Utility.signatureToString("CRAu.");
      assertEquals("char", string0);
      assertNotNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-98);
      byteArray0[3] = (byte)90;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)80;
      byteArray1[1] = (byte)53;
      byteArray1[2] = (byte) (-36);
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-7), (int) (byte) (-98));
      assertArrayEquals(new byte[] {(byte)80, (byte)53, (byte) (-36)}, byteArray1);
      assertEquals("0:    lastore\n1:    saload\n2:    <illegal opcode>\n", string1);
      assertNotNull(string1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      
      ClassPath classPath0 = new ClassPath("char");
      assertNotNull(classPath0);
      
      ClassPath classPath1 = new ClassPath("da2ND{");
      assertNotNull(classPath1);
      assertFalse(classPath1.equals((Object)classPath0));
      
      try { 
        classPath1.getPath("j,4zt3%ry$+Ra8xB");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Couldn't find: j,4zt3%ry$+Ra8xB
         //
         verifyException("org.apache.bcel.util.ClassPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte byte0 = (byte)22;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)22, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("16 00 00 00 00 00 00", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)22, 199);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)76, (byte)75, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)76, (byte)75, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 66, 39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        Utility.typeOfSignature("P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = Utility.decode("SMDvvzEPx&", false);
      assertArrayEquals(new byte[] {(byte)83, (byte)77, (byte)68, (byte)118, (byte)118, (byte)122, (byte)69, (byte)80, (byte)120, (byte)38}, byteArray0);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2346, 74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"~R4^W");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)5;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-11), (int) (byte) (-124));
      assertArrayEquals(new byte[] {(byte) (-124), (byte)5, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    iinc\t\t%5\t0\n3:    nop\n", string0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature("\"~R4^W");
      assertEquals("L\"~R4^W;", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        constantPool0.constantToString((int) (byte)5, (byte)5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object3));
      
      objectArray0[6] = object6;
      boolean boolean0 = false;
      String string0 = Utility.printArray(objectArray0, true, false);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("dreturn");
      assertEquals("dreturn", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "!.sV6H}";
      try { 
        Utility.typeOfSignature("!.sV6H}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .sV6H}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = "%9&vf[bD>-D#~Xc.]b";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "%9&vf[bD>-D#~Xc.]b";
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      objectArray0[1] = (Object) "\t\t%";
      objectArray0[2] = objectArray0[1];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)98;
      byteArray0[8] = (byte) (-95);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)67, (int) (byte)67);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)46);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(46, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(46, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(46, constantMethodType1.getDescriptorIndex());
      assertNotNull(constantMethodType1);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string1 = constantMethodType1.toString();
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(46, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(46, constantMethodType1.getDescriptorIndex());
      assertEquals("CONSTANT_MethodType[16](descriptor_index = 46)", string1);
      assertNotNull(string1);
      assertNotSame(constantMethodType0, constantMethodType1);
      assertNotSame(constantMethodType1, constantMethodType0);
      assertTrue(constantMethodType0.equals((Object)constantMethodType1));
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertFalse(string1.equals((Object)string0));
      
      byteArray1[0] = (byte)46;
      byteArray1[1] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)46, (int) (byte)46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "";
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-122), (byte) (-71), (byte)10, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      short short0 = byteSequence0.readShort();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-122), (byte) (-71), (byte)10, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((short)134, short0);
      
      int int0 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-122), (byte) (-71), (byte)10, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(185, int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 10, (int) (byte) (-71));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.compactClassName("L0DOl;V");
      assertEquals("L0DOl;V", string0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature(">%U(-lGMwC4'8g");
      assertEquals("L>%U(-lGMwC4'8g;", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 94, (int) (byte) (-60));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-106);
      byteArray0[0] = (byte) (-106);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 262, 187);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("=6II*\"anY$yXjxX#`", false);
      assertNotNull(byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(bytes = ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = false;
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      try { 
        Utility.typeOfMethodSignature("(bytes = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (bytes = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2597), (-2597));
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-2597), constantFieldref0.getNameAndTypeIndex());
      assertEquals((-2597), constantFieldref0.getClassIndex());
      assertNotNull(constantFieldref0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<init>");
      assertFalse(boolean0);
      
      ConstantFieldref constantFieldref1 = (ConstantFieldref)constantFieldref0.clone();
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-2597), constantFieldref0.getNameAndTypeIndex());
      assertEquals((-2597), constantFieldref0.getClassIndex());
      assertEquals((-2597), constantFieldref1.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertEquals((-2597), constantFieldref1.getClassIndex());
      assertNotNull(constantFieldref1);
      assertNotSame(constantFieldref0, constantFieldref1);
      assertNotSame(constantFieldref1, constantFieldref0);
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<init>");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[5];
      ConstantFieldref constantFieldref2 = (ConstantFieldref)constantFieldref0.copy();
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-2597), constantFieldref0.getNameAndTypeIndex());
      assertEquals((-2597), constantFieldref0.getClassIndex());
      assertEquals((-2597), constantFieldref2.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref2.getTag());
      assertEquals((-2597), constantFieldref2.getClassIndex());
      assertNotNull(constantFieldref2);
      assertNotSame(constantFieldref0, constantFieldref1);
      assertNotSame(constantFieldref0, constantFieldref2);
      assertNotSame(constantFieldref2, constantFieldref0);
      assertNotSame(constantFieldref2, constantFieldref1);
      assertTrue(constantFieldref0.equals((Object)constantFieldref1));
      assertTrue(constantFieldref2.equals((Object)constantFieldref1));
      assertTrue(constantFieldref2.equals((Object)constantFieldref0));
      
      constantFieldref0.setClassIndex(19);
      assertEquals(19, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-2597), constantFieldref0.getNameAndTypeIndex());
      assertNotSame(constantFieldref0, constantFieldref1);
      assertNotSame(constantFieldref0, constantFieldref2);
      assertFalse(constantFieldref0.equals((Object)constantFieldref1));
      assertFalse(constantFieldref0.equals((Object)constantFieldref2));
      
      constantFieldref0.setClassIndex((-2597));
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-2597), constantFieldref0.getNameAndTypeIndex());
      assertEquals((-2597), constantFieldref0.getClassIndex());
      assertNotSame(constantFieldref0, constantFieldref1);
      assertNotSame(constantFieldref0, constantFieldref2);
      assertTrue(constantFieldref0.equals((Object)constantFieldref1));
      assertTrue(constantFieldref0.equals((Object)constantFieldref2));
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      byte[] byteArray1 = Utility.decode("<init>", false);
      assertArrayEquals(new byte[] {(byte)60, (byte)105, (byte)110, (byte)105, (byte)116, (byte)62}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string1 = Utility.compactClassName("<init>");
      assertEquals("<init>", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.encode(byteArray1, false);
      assertArrayEquals(new byte[] {(byte)60, (byte)105, (byte)110, (byte)105, (byte)116, (byte)62}, byteArray1);
      assertEquals("$3cinit$3e", string2);
      assertNotNull(string2);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = Utility.setBit((-1066), (-1066));
      assertEquals((-1066), int0);
      
      byte[] byteArray2 = Utility.decode("<init>", false);
      assertArrayEquals(new byte[] {(byte)60, (byte)105, (byte)110, (byte)105, (byte)116, (byte)62}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      String string3 = Utility.format((-2597), (-4446), false, 'i');
      assertEquals("-2597", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      byte[] byteArray3 = Utility.decode("$3cinit$3e", false);
      assertArrayEquals(new byte[] {(byte)60, (byte)105, (byte)110, (byte)105, (byte)116, (byte)62}, byteArray3);
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      try { 
        Utility.methodSignatureReturnType("<init>", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<init>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)18, (int) (byte)18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = "%9&vf[bD>-D#~Xc.]b";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "%9&vf[bD>-D#~Xc.]b";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      objectArray0[1] = (Object) "\t\t%";
      objectArray0[2] = objectArray0[1];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)76;
      byteArray0[0] = (byte) (-94);
      byteArray0[6] = (byte)104;
      byteArray0[8] = (byte)0;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)81, (int) (byte)81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-79);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      stringArray0[6] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byte byte0 = (byte) (-86);
      ConstantPool constantPool0 = null;
      int int0 = 0;
      int int1 = 41;
      try { 
        Utility.methodSignatureReturnType("G?c", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G?c'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[19];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byteArray1[3] = (byte) (-69);
      byteArray1[5] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short short0 = byteSequence0.readShort();
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((short)0, short0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string0 = Utility.encode(byteArray1, false);
      assertEquals("$A$A$A$bb$A$bb$A$A$A$A$A$A$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = Utility.setBit((byte) (-69), (byte) (-69));
      assertEquals((-69), int0);
      
      boolean boolean3 = true;
      try { 
        Utility.decode("$A$A$A$bb$A$bb$A$A$A$A$A$A$A$A$A$A$A$A$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-118), (byte) (-118), (byte) (-118), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-118), (byte) (-118), (byte) (-118), (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("l2d", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-118), (byte) (-118), (byte) (-118), (byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte) (-118), byte0);
      
      try { 
        MockURI.URI("l2d", "l2d", "l2d", "<illegal type>", "<illegal type>");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: l2d://l2dl2d?%3Cillegal%20type%3E#%3Cillegal%20type%3E
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte byte0 = (byte) (-75);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-107);
      byteArray0[6] = (byte) (-107);
      byteArray0[5] = (byte) (-75);
      byteArray0[3] = (byte) (-75);
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte) (-107);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-75), (int) (byte) (-107));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 149. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Constant[] constantArray0 = new Constant[18];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte)27, (byte)27, (byte)27, (byte)27, (byte)27}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(18, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 6939. Constant pool size is: 18
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byte byte0 = (byte) (-86);
      byteArray0[0] = (byte) (-86);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = null;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-86));
      assertEquals("0:    tableswitch\tdefault = 0, low = 0, high = 0(0)\n20:   nop\n21:   nop\n22:   nop\n23:   nop\n", string0);
      assertNotNull(string0);
      
      String string1 = "org.apache.bcel.classfile.Field";
      boolean boolean1 = true;
      int int0 = 1617;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (byte) (-86));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byte byte0 = (byte) (-86);
      byteArray0[0] = (byte) (-86);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-115);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-115);
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byteArray0[3] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-115), (byte) (-115), (byte) (-115), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-115), (byte) (-115), (byte) (-115), (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(141, int0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-115), (byte) (-115), (byte) (-115), (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("f2d", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      short short0 = byteSequence0.readShort();
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-115), (byte) (-115), (byte) (-115), (byte)0}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((short) (-29299), short0);
      
      int int1 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-115), (byte) (-115), (byte) (-115), (byte)0}, byteArray0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string2 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, 0, (int) (byte) (-115));
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-115), (byte) (-115), (byte) (-115), (byte)0}, byteArray0);
      assertEquals("0:    f2d\n1:    f2d\n2:    f2d\n3:    f2d\n4:    nop\n", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      
      String string4 = Utility.compactClassName("0:", true);
      assertEquals("0:", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-115), (int) (short) (-29299));
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-115), (byte) (-115), (byte) (-115), (byte)0}, byteArray0);
      assertEquals("0:    f2d\n1:    f2d\n2:    f2d\n3:    f2d\n4:    nop\n", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2772), 20);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-115), (byte) (-115), (byte) (-115), (byte)0}, byteArray0);
      assertEquals("0:    f2d\n1:    f2d\n2:    f2d\n3:    f2d\n4:    nop\n", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "0:";
      String string7 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"0:\"", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2597), (-2597));
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-2597), constantFieldref0.getNameAndTypeIndex());
      assertEquals((-2597), constantFieldref0.getClassIndex());
      assertNotNull(constantFieldref0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = Utility.decode("e<oa[o\tooW}H_6UL", false);
      assertNotNull(byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      
      int int0 = 103;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 103, 5, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2597), (-2597));
      assertEquals((-2597), constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-2597), constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/)&(Q\"|*ik*AiCG7y");
      assertFalse(boolean0);
      
      ConstantFieldref constantFieldref1 = (ConstantFieldref)constantFieldref0.clone();
      assertEquals((-2597), constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-2597), constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertEquals((-2597), constantFieldref1.getClassIndex());
      assertEquals((-2597), constantFieldref1.getNameAndTypeIndex());
      assertNotNull(constantFieldref1);
      assertNotSame(constantFieldref0, constantFieldref1);
      assertNotSame(constantFieldref1, constantFieldref0);
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-57);
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-57)}, byteArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantFieldref1;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref1;
      constantArray0[3] = (Constant) constantFieldref0;
      constantArray0[4] = (Constant) constantFieldref0;
      constantArray0[5] = (Constant) constantFieldref1;
      constantArray0[6] = (Constant) constantFieldref1;
      constantArray0[7] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-70), 199);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-68), (byte) (-68), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      boolean boolean0 = byteSequence0.markSupported();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-68), (byte) (-68), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = byteSequence0.skipBytes((byte) (-68));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-68), (byte) (-68), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(0, int0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-68), (byte) (-68), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 8, 20, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -68
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)28;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      boolean boolean1 = byteSequence1.markSupported();
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertTrue(boolean1);
      assertNotSame(byteSequence1, byteSequence0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertEquals("iload_2", string0);
      assertNotNull(string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      try { 
        Utility.decode("araTlength", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }
}
