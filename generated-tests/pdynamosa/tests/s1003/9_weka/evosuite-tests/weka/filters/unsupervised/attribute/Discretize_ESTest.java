/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 01:28:12 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 2);
      Discretize discretize0 = new Discretize();
      discretize0.m_DesiredWeightOfInstancesPerInterval = (double) 4;
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("vS}Vp&d");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, 1);
      Discretize discretize1 = new Discretize();
      instances0.sort(attribute0);
      Discretize discretize2 = new Discretize();
      discretize2.setFindNumBins(true);
      discretize2.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize1.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Discretize discretize0 = new Discretize("hKM0C_0jo");
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3.4, intArray0, 52);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 3;
      doubleArray0[0] = doubleArray1;
      doubleArray1[3] = (double) 2;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 2;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) 3;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray3[4] = (double) 0;
      doubleArray3[6] = (double) 3;
      doubleArray0[3] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray1);
      sparseInstance0.getRevision();
      discretize0.input(sparseInstance0);
      discretize0.convertInstance(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SparseInstance sparseInstance0 = new SparseInstance(3159);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 3);
      instances0.meanOrMode(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[8];
      attribute0.equals(discretize0);
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 3;
      doubleArray1[4] = (double) 1;
      discretize0.m_UseBinNumbers = true;
      double[] doubleArray2 = new double[2];
      doubleArray1[4] = (double) 4;
      doubleArray0[3] = doubleArray2;
      doubleArray1[7] = (double) 0;
      discretize0.m_CutPoints = doubleArray0;
      SparseInstance sparseInstance0 = new SparseInstance(4.0, doubleArray1);
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 3;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 3;
      doubleArray2[4] = (double) 1;
      doubleArray1[3] = (double) 2;
      doubleArray2[6] = (double) 2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) 3;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 0;
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (double) 3;
      doubleArray4[7] = (double) 4;
      doubleArray0[3] = doubleArray4;
      discretize0.m_CutPoints = doubleArray0;
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray2);
      discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(6, stringArray0.length);
      
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertEquals(10, discretize0.getBins());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setOptions((String[]) null);
      discretize0.getBinRangesString(60);
      String[] stringArray0 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals(6, stringArray0.length);
      assertFalse(discretize0.getUseBinNumbers());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval(4.6);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals(4.6, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.makeBinaryTipText();
      int int0 = 0;
      // Undeclared exception!
      try { 
        discretize0.findNumBins(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_IgnoreClass = true;
      discretize0.setMakeBinary(true);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\"));\n";
      stringArray0[1] = "KRwg1d>g`pp$ot;/6sQ";
      stringArray0[2] = "KRwg1d>g`pp$ot;/6sQ";
      Discretize.main(stringArray0);
      discretize0.getOptions();
      assertTrue(discretize0.getMakeBinary());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Discretize discretize0 = new Discretize("YJ)fhC2~");
      discretize0.setMakeBinary(true);
      discretize0.m_UseEqualFrequency = true;
      discretize0.setUseBinNumbers(false);
      discretize0.m_MakeBinary = true;
      discretize0.m_FindNumBins = false;
      discretize0.setAttributeIndices("YJ)fhC2~");
      discretize0.getAttributeIndices();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Discretize discretize0 = new Discretize("U]OBE");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "R";
      stringArray0[1] = "R";
      stringArray0[2] = "U]OBE";
      Discretize.main(stringArray0);
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      
      String string1 = discretize0.findNumBinsTipText();
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string1);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[2] = (double) 0;
      doubleArray1[5] = (double) 4;
      discretize0.m_CutPoints = doubleArray0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0[1]);
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A nominal attribute () cannot have duplicate labels ('(0-0]').
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setDesiredWeightOfInstancesPerInterval((-1061.8));
      discretize0.m_ClassIndex = 0;
      discretize0.getCapabilities();
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.isFirstBatchDone();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("5.7 < 5.70001 ?");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("Wr4Ta;*IOi", arrayList0, 3574);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(3574);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(true);
      discretize0.getOptions();
      assertTrue(discretize0.getUseBinNumbers());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Attribute attribute0 = new Attribute("3qEjB%");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("MGV!B+C[CpLe%=(?v", arrayList0, 1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      SparseInstance sparseInstance0 = new SparseInstance(277);
      SparseInstance sparseInstance1 = new SparseInstance(1);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance1);
      discretize0.input(denseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      attribute0.equalsMsg("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.m_NumBins = (-438);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[][] doubleArray0 = new double[4][7];
      discretize0.m_MakeBinary = true;
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = (double) 0;
      doubleArray1[5] = (double) 4;
      discretize0.m_CutPoints = doubleArray0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0[1]);
      discretize0.setOutputFormat();
      assertTrue(discretize0.getMakeBinary());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, (int[]) null, 2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.listOptions();
      discretize0.getFindNumBins();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Attribute attribute0 = new Attribute("~");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@attribute", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      SparseInstance sparseInstance0 = new SparseInstance(532);
      discretize0.input(sparseInstance0);
      discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 3;
      double[] doubleArray2 = new double[8];
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 3;
      discretize0.m_MakeBinary = true;
      AllFilter allFilter0 = new AllFilter();
      Instances instances1 = new Instances(instances0, 2);
      Filter.wekaStaticWrapper(allFilter0, "@J,I'HWKyX", instances1, instances0);
      doubleArray2[4] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 1;
      double[] doubleArray4 = new double[8];
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 0;
      doubleArray4[5] = 1.0;
      SparseInstance sparseInstance0 = new SparseInstance(172);
      discretize0.input(sparseInstance0);
      discretize0.setOutputFormat();
      assertFalse(discretize0.isNewBatch());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.binsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", string0);
      assertEquals(10, discretize0.getBins());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[23][6];
      doubleArray0[4] = doubleArray0[2];
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString(16);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals("(-inf-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-inf)", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      double[][] doubleArray0 = new double[4][7];
      discretize0.m_MakeBinary = true;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.setOutputFormat();
      assertTrue(discretize0.getMakeBinary());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Discretize discretize0 = new Discretize("    m_NewBatch = true;\n");
      discretize0.getCutPoints(774);
      discretize0.setFindNumBins(false);
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertEquals(6, stringArray0.length);
      
      int int0 = discretize0.getBins();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, int0);
      
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), double0, 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Discretize.main(stringArray0);
      Discretize discretize0 = new Discretize("");
      discretize0.m_DefaultCols = "";
      discretize0.getInvertSelection();
      discretize0.getOptions();
      discretize0.setFindNumBins(true);
      Discretize.main(stringArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1644.8152);
      doubleArray0[1] = (-1644.8152);
      doubleArray0[2] = (-414.96130564247);
      doubleArray0[3] = 3.0;
      doubleArray0[4] = (-1644.8152);
      doubleArray0[5] = (-1644.8152);
      doubleArray0[6] = (-1644.8152);
      doubleArray0[7] = (-1644.8152);
      doubleArray0[8] = (-1644.8152);
      SparseInstance sparseInstance0 = new SparseInstance((-1644.8152), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.toString();
      discretize0.getBinRangesString(0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Attribute attribute0 = new Attribute("~");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@attribute", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      Instances instances1 = new Instances(instances0);
      boolean boolean0 = discretize0.setInputFormat(instances1);
      assertFalse(boolean0);
      
      boolean boolean1 = discretize0.batchFinished();
      assertFalse(boolean1);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "real";
      stringArray0[1] = "numeric";
      stringArray0[2] = "@relation";
      stringArray0[3] = "real";
      stringArray0[4] = "@relation";
      stringArray0[5] = "string";
      stringArray0[6] = "@attribute";
      stringArray0[7] = "numeric";
      discretize0.setOptions(stringArray0);
      discretize0.batchFinished();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Discretize discretize0 = new Discretize("    m_NewBatch = true;\n");
      Discretize discretize1 = new Discretize("    m_NewBatch = true;\n");
      discretize0.setOptions((String[]) null);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Attribute attribute0 = new Attribute("-R <col1,col2-col4,...>");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute1 = new Attribute("\"'DfrZ(zG", list0, (-2020));
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("?Y0z;b~*)CX8", arrayList0, 2);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      SparseInstance sparseInstance0 = new SparseInstance(86);
      discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "import weka.core.Instance;\n";
      stringArray0[1] = ".arff";
      stringArray0[2] = "date";
      stringArray0[3] = ".arff";
      stringArray0[4] = "string";
      stringArray0[5] = "numeric";
      stringArray0[6] = "?Y0z;b~*)CX8";
      stringArray0[7] = "real";
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Discretize discretize0 = new Discretize("R");
      discretize0.setUseEqualFrequency(false);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.iterator();
      discretize0.setMakeBinary(true);
      Object object0 = new Object();
      discretize0.getBinRangesString((-792));
      Instances instances0 = new Instances("}t::FZQVi2Z0#-x", arrayList0, 4);
      discretize0.getMakeBinary();
      discretize0.getRevision();
      assertTrue(discretize0.getMakeBinary());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4051.780117;
      doubleArray0[1] = 4051.780117;
      doubleArray0[2] = 4051.780117;
      doubleArray0[3] = 4051.780117;
      int[] intArray0 = new int[8];
      intArray0[0] = (-1749);
      intArray0[1] = 2147483645;
      intArray0[2] = 2;
      intArray0[3] = 608;
      intArray0[4] = 44;
      intArray0[5] = 1069;
      intArray0[6] = 2176;
      intArray0[7] = 18;
      SparseInstance sparseInstance0 = new SparseInstance(4051.780117, doubleArray0, intArray0, (-1073741822));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize.main((String[]) null);
      Discretize.main((String[]) null);
      discretize0.getMakeBinary();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Attribute attribute0 = new Attribute("!Jb(HQd");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(2);
      attribute0.equals(integer0);
      Instances instances0 = new Instances("(M", arrayList0, 4);
      Discretize discretize0 = new Discretize();
      Instances instances1 = new Instances(instances0);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Discretize discretize0 = new Discretize("U]OBE");
      int[] intArray0 = new int[0];
      discretize0.setAttributeIndicesArray(intArray0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_DefaultCols = "";
      discretize0.getCapabilities();
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Filter.runFilter(discretize1, stringArray0);
      SparseInstance sparseInstance0 = new SparseInstance(1534);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1605.54), (int[]) null, 16);
      // Undeclared exception!
      try { 
        discretize1.convertInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Discretize discretize0 = new Discretize("MGV!B+C[CpLe%=(?v");
      discretize0.getRevision();
      discretize0.getRevision();
      discretize0.setInvertSelection(true);
      discretize0.getBinRangesString(2126);
      discretize0.m_UseBinNumbers = true;
      discretize0.setDesiredWeightOfInstancesPerInterval(2126);
      discretize0.getUseBinNumbers();
      discretize0.toString();
      discretize0.attributeIndicesTipText();
      discretize0.getAttributeIndices();
      discretize0.getBinRangesString((-126));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2126;
      doubleArray0[1] = (double) (-126);
      doubleArray0[2] = (double) (-126);
      doubleArray0[3] = (double) 2126;
      doubleArray0[4] = (double) (-126);
      doubleArray0[5] = (double) (-126);
      doubleArray0[6] = (double) (-126);
      doubleArray0[7] = (double) 2126;
      int[] intArray0 = new int[4];
      intArray0[0] = 2126;
      intArray0[1] = 77;
      intArray0[2] = (-126);
      intArray0[3] = (-126);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-126), doubleArray0, intArray0, 2126);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Discretize discretize0 = new Discretize("U]OBE");
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(true);
      discretize0.setOutputFormat();
      assertTrue(discretize0.getUseBinNumbers());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Discretize discretize0 = new Discretize("    m_NewBatch = true;\n");
      discretize0.getCutPoints(774);
      discretize0.setFindNumBins(false);
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertEquals(6, stringArray0.length);
      
      int int0 = discretize0.getBins();
      assertEquals(10, int0);
      
      discretize0.globalInfo();
      discretize0.getCutPoints(17);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.makeCopies(discretize0, 2234);
      discretize0.setUseBinNumbers(true);
      discretize0.invertSelectionTipText();
      discretize0.setFindNumBins(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.setOutputFormat();
      discretize0.m_UseBinNumbers = true;
      discretize0.setInvertSelection(true);
      discretize0.getBinRangesString((-1222));
      discretize0.m_UseBinNumbers = true;
      discretize0.m_NumBins = 2234;
      discretize0.setUseBinNumbers(true);
      discretize0.getBins();
      discretize0.getOptions();
      discretize0.setOutputFormat();
      discretize0.attributeIndicesTipText();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.getRevision();
      discretize0.getInvertSelection();
      discretize0.getBinRangesString(2234);
      discretize0.getCutPoints(100000);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 3;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 3;
      doubleArray2[4] = (double) 1;
      doubleArray1[3] = (double) 2;
      doubleArray2[6] = (double) 2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) 3;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 0;
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (double) 3;
      doubleArray4[7] = (double) 4;
      doubleArray0[3] = doubleArray4;
      discretize0.m_CutPoints = doubleArray0;
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray2);
      boolean boolean0 = discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins(4);
      assertEquals(4, discretize0.getBins());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_IgnoreClass = true;
      // Undeclared exception!
      try { 
        discretize0.findNumBins(564);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-3256.336076);
      doubleArray1[1] = (double) 82;
      doubleArray1[2] = (double) 82;
      doubleArray1[3] = (double) 82;
      doubleArray1[4] = (double) 82;
      doubleArray1[5] = (double) 82;
      doubleArray1[6] = (double) 82;
      doubleArray0[0] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(82);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 82
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Discretize.main((String[]) null);
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(true);
      discretize0.m_NumBins = 0;
      discretize0.globalInfo();
      discretize0.setInvertSelection(true);
      discretize0.getRevision();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-70));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      SparseInstance sparseInstance0 = new SparseInstance(1);
      String string0 = discretize0.getBinRangesString(0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("All", string0);
      assertEquals(10, discretize0.getBins());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Discretize.main(stringArray0);
      Discretize discretize0 = new Discretize("");
      discretize0.m_DefaultCols = "";
      discretize0.getInvertSelection();
      String[] stringArray1 = discretize0.getOptions();
      discretize0.setFindNumBins(true);
      Discretize.main(stringArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1644.8152);
      doubleArray0[1] = (-1644.8152);
      doubleArray0[2] = (-414.96130564247);
      doubleArray0[3] = 3.0;
      doubleArray0[4] = (-1644.8152);
      doubleArray0[5] = (-1644.8152);
      doubleArray0[6] = (-1644.8152);
      doubleArray0[7] = (-1644.8152);
      discretize0.setFindNumBins(true);
      discretize0.getOptions();
      assertTrue(discretize0.getFindNumBins());
      
      discretize0.setOptions(stringArray1);
      int int0 = discretize0.getBins();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_DefaultCols = "";
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Attribute attribute0 = new Attribute("!=)");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      SystemInUtil.addInputLine("string");
      Instances instances0 = new Instances("date", arrayList0, 2);
      Discretize discretize0 = new Discretize();
      discretize0.m_UseEqualFrequency = true;
      discretize0.setFindNumBins(true);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bin number optimization in conjunction with equal-frequency binning not implemented.
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(false);
      discretize0.globalInfo();
      discretize0.setInvertSelection(false);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-70));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 2830.948863;
      doubleArray1[1] = 2830.948863;
      doubleArray1[2] = (-6.78214234);
      doubleArray1[5] = 2836.0;
      doubleArray0[2] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray0[3] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[1] = (-3487.879172);
      doubleArray3[2] = (-2928.974915567695);
      doubleArray3[4] = (-2928.974915567695);
      doubleArray0[4] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 2836.0;
      doubleArray4[2] = (-2199.48369);
      doubleArray4[3] = (-2928.974915567695);
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (-3487.879172);
      doubleArray4[7] = 0.0;
      doubleArray0[5] = doubleArray4;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((-2022));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2022
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.isFirstBatchDone();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("5.7 < 5.70001 ?");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("Wr4Ta;*IOi", arrayList0, 3574);
      discretize0.setInputFormat(instances0);
      boolean boolean0 = discretize0.input((Instance) null);
      assertFalse(discretize0.isNewBatch());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(3960);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Attribute attribute0 = new Attribute("!Jb(HQd");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 2);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Attribute attribute0 = new Attribute("~");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@attribute", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      Instances instances1 = new Instances(instances0);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      SparseInstance sparseInstance0 = new SparseInstance(532);
      discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 1115);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Filter.wekaStaticWrapper(allFilter0, "", instances1, instances0);
      discretize0.setMakeBinary(false);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-245));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[4];
      discretize0.getInvertSelection();
      stringArray0[0] = "xG3a";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "N");
      stringArray0[1] = "rc6SN\"f'";
      discretize0.m_ClassIndex = (-275);
      stringArray0[2] = "-O";
      stringArray0[3] = "";
      discretize0.setMakeBinary(false);
      discretize0.setOptions(stringArray0);
      discretize0.getFindNumBins();
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_UseEqualFrequency = true;
      String[] stringArray0 = discretize0.getOptions();
      discretize0.getUseEqualFrequency();
      discretize0.setOptions(stringArray0);
      assertTrue(discretize0.getUseEqualFrequency());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      Object object0 = new Object();
      int int0 = 44;
      discretize0.m_MakeBinary = true;
      discretize0.getBinRangesString(44);
      boolean boolean0 = discretize0.m_IgnoreClass;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("-R <col1,col2-col4,...>", arrayList0, 69);
      SparseInstance sparseInstance0 = new SparseInstance(69);
      instances0.add((Instance) sparseInstance0);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Attribute attribute0 = new Attribute("!Jb(HQd");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 2);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.m_UseEqualFrequency = true;
      Instances instances1 = new Instances(instances0);
      discretize0.setInputFormat(instances1);
      discretize0.calculateCutPoints();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.convertInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.setInvertSelection(true);
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(7, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Attribute attribute0 = new Attribute("~");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@attribute", arrayList0, 3);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '~' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.iterator();
      discretize0.setMakeBinary(true);
      discretize0.getCapabilities();
      assertTrue(discretize0.getMakeBinary());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Discretize discretize0 = new Discretize("9-$IrjNyh|xBVZlh");
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1026;
      intArray0[2] = 44;
      intArray0[3] = 70;
      discretize0.setAttributeIndicesArray(intArray0);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("}t::FZQVi2Z0#-x", arrayList0, 4);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Discretize discretize0 = new Discretize("$o+ kTCFQ|N1fc?xT$5");
      boolean boolean0 = true;
      discretize0.m_IgnoreClass = true;
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1.0;
      discretize0.getOptions();
      Filter.makeCopy(discretize0);
      discretize0.getOptions();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.attributeIndicesTipText();
      discretize0.setAttributeIndices("kZ*R+z");
      discretize0.getRevision();
      discretize0.getUseBinNumbers();
      discretize0.invertSelectionTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-219));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_ClassIndex = (-264);
      discretize0.getCapabilities();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Attribute attribute0 = new Attribute("!Jb(HQd");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 2);
      Discretize discretize0 = new Discretize();
      discretize0.m_UseEqualFrequency = true;
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.useBinNumbersTipText();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.iterator();
      discretize0.setMakeBinary(true);
      Object object0 = new Object();
      discretize0.getBinRangesString((-792));
      arrayList0.remove(object0);
      Instances instances0 = new Instances("}t::FZQVi2Z0#-x", arrayList0, 4);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "    attValues.addElement(\"";
      Discretize discretize0 = new Discretize("    attValues.addElement(\"");
      boolean boolean0 = true;
      discretize0.m_DefaultCols = "    attValues.addElement(\"";
      try { 
        Filter.useFilter((Instances) null, discretize0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(774);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setBins((-2040109463));
      int int0 = discretize0.getBins();
      assertEquals((-2040109463), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "All";
      stringArray0[2] = "($ x:";
      stringArray0[3] = "";
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Discretize discretize0 = new Discretize("\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      discretize0.setFindNumBins(false);
      discretize0.setBins((-2328));
      assertEquals((-2328), discretize0.getBins());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      boolean boolean0 = true;
      discretize0.m_UseEqualFrequency = true;
      discretize0.makeBinaryTipText();
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1;
      doubleArray1[2] = (double) 3;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 2;
      attribute0.equals(discretize0);
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 3;
      doubleArray2[4] = (double) 1;
      double[] doubleArray3 = new double[2];
      doubleArray3[1] = (double) 4;
      doubleArray0[2] = doubleArray3;
      discretize0.m_IgnoreClass = false;
      double[] doubleArray4 = new double[8];
      doubleArray4[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray4[5] = 0.0;
      discretize0.m_CutPoints = doubleArray0;
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray2);
      discretize0.input(sparseInstance0);
      discretize0.calculateCutPoints();
      Instance instance0 = discretize0.outputPeek();
      discretize0.input(instance0);
      discretize0.convertInstance(instance0);
      assertFalse(discretize0.isNewBatch());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("1fs=$Zb", (List<String>) null, protectedProperties0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 2);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      discretize0.calculateCutPoints();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 3;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 3;
      discretize0.m_MakeBinary = true;
      doubleArray2[4] = (double) 1;
      doubleArray2[6] = (double) 2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (double) 3;
      doubleArray0[3] = doubleArray4;
      discretize0.m_CutPoints = doubleArray0;
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray2);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "($ x:";
      stringArray0[1] = "$o+ kTCFQ|N1fc?xT$5";
      stringArray0[2] = "Index of attribute \"weight\" (should be -1): ";
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.makeCopy(discretize0);
      discretize0.m_NumBins = 0;
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.getCapabilities();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(785);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 3;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 3;
      discretize0.m_MakeBinary = true;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      doubleArray2[4] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (double) 3;
      doubleArray0[3] = doubleArray4;
      discretize0.m_CutPoints = doubleArray0;
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray2);
      discretize0.setFindNumBins(true);
      SparseInstance sparseInstance1 = new SparseInstance(2, doubleArray4);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Attribute attribute0 = new Attribute("wp/#m");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("wp/#m", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[][] doubleArray0 = new double[3][7];
      discretize0.m_MakeBinary = true;
      discretize0.m_CutPoints = doubleArray0;
      SparseInstance sparseInstance0 = new SparseInstance(2);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.getUseEqualFrequency();
      discretize0.getMakeBinary();
      System.setCurrentTimeMillis(2L);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 3);
      Discretize discretize0 = new Discretize("");
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances1 = new Instances("_3fuM!RSzYzAy^M", arrayList1, 2793);
      Discretize discretize1 = new Discretize();
      arrayList1.remove((Object) "_3fuM!RSzYzAy^M");
      discretize0.setFindNumBins(true);
      try { 
        discretize0.setInputFormat(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.m_UseEqualFrequency = true;
      discretize0.getOptions();
      boolean boolean0 = discretize0.getMakeBinary();
      assertTrue(discretize0.getUseEqualFrequency());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[0];
      discretize0.setOptions(stringArray0);
      discretize0.getCutPoints((-3814));
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[23][6];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      doubleArray0[4] = doubleArray0[2];
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString(16);
      assertEquals("(-inf-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-inf)", string0);
      
      discretize0.getCutPoints(1);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Discretize discretize0 = new Discretize("    m_NewBatch = true;\n");
      discretize0.setFindNumBins(false);
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertEquals(6, stringArray0.length);
      
      discretize0.getBins();
      discretize0.useEqualFrequencyTipText();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_ClassIndex = 2528;
      // Undeclared exception!
      try { 
        discretize0.convertInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getAttributeIndices();
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-915));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "3loI@z4b!IGD%UjP";
      stringArray0[1] = "Cannot handle unknown attribute type '";
      stringArray0[2] = ">d&GC'Y'@ZH-X3";
      stringArray0[3] = "(m.Ud7DqO";
      stringArray0[4] = "fmF:k[`4LX<b=F\"ly";
      stringArray0[5] = "-R <col1,col2-col4,...>";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.setUseBinNumbers(false);
      Range range0 = new Range("Jar does not exist: ");
      discretize0.m_DiscretizeCols = range0;
      discretize0.getUseBinNumbers();
      discretize0.getRevision();
      discretize0.listOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Discretize discretize0 = new Discretize("9-$IrjNyh|xBVZlh");
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1026;
      intArray0[2] = 44;
      intArray0[3] = 70;
      discretize0.setAttributeIndicesArray(intArray0);
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setUseEqualFrequency(true);
      discretize0.setInvertSelection(true);
      discretize0.globalInfo();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Attribute attribute0 = new Attribute("");
      attribute0.getRevision();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      discretize0.input(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
      
      discretize0.batchFinished();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      int[] intArray0 = new int[7];
      intArray0[0] = (-13);
      intArray0[1] = 5;
      intArray0[2] = 44;
      intArray0[3] = 3153;
      intArray0[4] = 107;
      intArray0[5] = (-1879048189);
      intArray0[6] = 456;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3684.490532, intArray0, (-13));
      String[] stringArray0 = new String[6];
      stringArray0[0] = " [y/n]?";
      stringArray0[1] = "Bin number optimization in conjunction with equal-frequency binning not implemented.";
      stringArray0[2] = "iX%WqQDr&";
      stringArray0[3] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      stringArray0[4] = "B";
      stringArray0[5] = "Nom";
      BinarySparseInstance.main(stringArray0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DefaultCols = "7(\"`ROkywP)#.9gc2!";
      String string0 = discretize0.getAttributeIndices();
      assertEquals("first-last", string0);
      
      discretize0.getCutPoints(0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Attribute attribute0 = new Attribute("]~");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 2);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      boolean boolean0 = discretize0.input(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@attribute", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      discretize0.setInputFormat(instances0);
      discretize0.getOptions();
      discretize0.calculateCutPoints();
      assertTrue(discretize0.getFindNumBins());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "All";
      stringArray0[1] = "Index of attribute \"weight\" (should be -1): ";
      stringArray0[2] = "($ x:";
      stringArray0[3] = "";
      stringArray0[4] = "D";
      Discretize.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "!_8R)m;";
      stringArray0[1] = "D";
      Filter.runFilter((Filter) null, stringArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(853.7534, doubleArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      discretize0.setBins(0);
      assertTrue(discretize0.getMakeBinary());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setAttributeIndices("");
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      discretize0.getCutPoints((-2503));
      assertEquals(10, discretize0.getBins());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertTrue(discretize0.getFindNumBins());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 2;
      attribute0.equals(discretize0);
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 3;
      doubleArray2[4] = (double) 1;
      double[] doubleArray3 = new double[2];
      doubleArray3[1] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray4[5] = 2.0;
      doubleArray4[6] = (double) 3;
      discretize0.m_CutPoints = doubleArray0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@end");
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray2);
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A nominal attribute () cannot have duplicate labels ('(0-0]').
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Discretize discretize0 = new Discretize("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      discretize0.setBins(2);
      assertEquals(2, discretize0.getBins());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 3;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 2;
      doubleArray2[6] = (double) 2;
      doubleArray2[7] = (double) 3;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) 3;
      doubleArray4[1] = (double) 3;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 1;
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (double) 3;
      doubleArray4[7] = (double) 4;
      doubleArray0[3] = doubleArray4;
      discretize0.m_CutPoints = doubleArray0;
      SparseInstance sparseInstance0 = new SparseInstance(1);
      discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-2010.1874667345);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2836.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2830.948863;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-2928.974915567695);
      doubleArray1[8] = (-6.78214234);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1235.28);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 2830.948863;
      doubleArray3[1] = 2830.948863;
      doubleArray3[2] = (-6.78214234);
      doubleArray3[3] = (-2010.1874667345);
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 2836.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 2836.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-3487.879172);
      doubleArray5[2] = (-2928.974915567695);
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (-2928.974915567695);
      doubleArray5[5] = (-6.78214234);
      doubleArray5[6] = (-2010.1874667345);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (-2199.48369);
      doubleArray6[3] = (-2928.974915567695);
      doubleArray6[4] = 2836.0;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = (-3487.879172);
      doubleArray6[7] = 0.0;
      doubleArray0[5] = doubleArray6;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 3);
      instances0.setClass(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[][] doubleArray0 = new double[4][7];
      discretize0.m_MakeBinary = true;
      Attribute.typeToString(4);
      double[] doubleArray1 = new double[8];
      Attribute.typeToString(0);
      doubleArray1[2] = (double) 0;
      doubleArray1[5] = (double) 4;
      doubleArray1[6] = (double) 3;
      discretize0.m_CutPoints = doubleArray0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0[1]);
      discretize0.input(sparseInstance0);
      assertTrue(discretize0.getMakeBinary());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(false);
      String[] stringArray0 = new String[0];
      String[] stringArray1 = discretize0.getOptions();
      assertEquals(6, stringArray1.length);
      
      discretize0.getCutPoints((-3814));
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Attribute attribute0 = new Attribute("na |D;cb8}&M");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("na |D;cb8}&M", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.setInvertSelection(true);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.getBinRangesString((-1610612734));
      discretize0.getAttributeIndices();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }
}
