/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 04:43:15 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.Controller;
import freemind.controller.actions.generated.instance.JiBX_bindingFactory;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeListener;
import java.io.PrintStream;
import java.sql.ClientInfoStatus;
import java.sql.Date;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.Month;
import java.util.Hashtable;
import java.util.Locale;
import javax.help.HelpSet;
import javax.swing.DebugGraphics;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SortOrder;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.synth.SynthListUI;
import javax.swing.text.AbstractDocument;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleContext;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.util.ParsedURL;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.persist.HsqlProperties;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "v+!L/OpQ ";
      stringArray0[1] = "]]]><![CDATA[";
      stringArray0[2] = ">hoZy{>z.pW";
      stringArray0[3] = "C&52y#d+;QN";
      stringArray0[4] = "";
      stringArray0[5] = "b{~L?)p";
      stringArray0[6] = "W;D\"";
      stringArray0[7] = "Center";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(164);
      SystemColor systemColor0 = SystemColor.controlText;
      Color.getColor("ohQ[<ej:FOy~OcT2");
      jDayChooser0.setWeekdayForeground(systemColor0);
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.maxSelectableDate = null;
      // Undeclared exception!
      try { 
        jDayChooser0.setMaxDayCharacters(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setName("N8zF}?j{gJASWLI<");
      jDayChooser0.isPaintingForPrint();
      SystemColor systemColor0 = SystemColor.textText;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.715F;
      floatArray0[1] = 1.5F;
      floatArray0[2] = 0.7F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 501.3F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 2659.7168F;
      systemColor0.getRGBComponents(floatArray0);
      jDayChooser0.setSundayForeground(systemColor0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      Locale locale0 = jDayChooser0.getLocale();
      jDayChooser0.setLocale(locale0);
      String string0 = "";
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = null;
      try {
        defaultStyledDocument0 = new DefaultStyledDocument((AbstractDocument.Content) null, styleContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getFocusTraversalPolicy();
      jDayChooser0.init();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.isDayBordersVisible();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 761, true, jDayChooser0);
      focusEvent0.setSource((Object) null);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getAlignmentY();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 761, 0L, 761, (-1940), 'S');
      jDayChooser0.keyReleased(keyEvent0);
      ActionEvent actionEvent0 = new ActionEvent(focusEvent0, 761, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.event.FocusEvent cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Date date0 = new Date(0L);
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.day = 228;
      jDayChooser0.decorationBordersVisible = false;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      SynthListUI synthListUI0 = new SynthListUI();
      jDayChooser_DecoratorButton0.addPropertyChangeListener((PropertyChangeListener) synthListUI0);
      java.util.Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser_DecoratorButton0.isFocusable();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(228);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isWeekOfYearVisible();
      java.util.Date date0 = jDayChooser0.minSelectableDate;
      java.util.Date date1 = jDayChooser0.setMinSelectableDate(date0);
      assertSame(date1, date0);
      
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertTrue(boolean0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.maxSelectableDate = null;
      // Undeclared exception!
      try { 
        jDayChooser0.setMinSelectableDate((java.util.Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.revalidate();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      HelpSet helpSet0 = new HelpSet(classLoader0);
      Hashtable<SortOrder, ClientInfoStatus> hashtable0 = new Hashtable<SortOrder, ClientInfoStatus>();
      jDayChooser0.drawWeeks();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      MockDate mockDate0 = new MockDate(0, 0, 0);
      mockDate0.clone();
      jDayChooser0.setMaxSelectableDate(mockDate0);
      jDayChooser0.getDaysInMonth();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.drawWeeks();
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(0, color0.getBlue());
      
      boolean boolean1 = jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean1 == boolean0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxSelectableDate((java.util.Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-1248));
      SystemColor systemColor0 = SystemColor.controlText;
      Color.getColor("");
      jDayChooser0.setWeekdayForeground((Color) null);
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1100), 0L, 33, 33, 'B');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setDecorationBackgroundVisible(false);
      ParsedURL parsedURL0 = new ParsedURL("day");
      jDayChooser0.setEnabled(false);
      jDayChooser0.addListeners(6);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setEnabled(true);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 6, 2465L, 30, 160, ':', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.isDecorationBackgroundVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 16, 16, 16, 1177, '(');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-598));
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getComponentListeners();
      jDayChooser0.setDay(7);
      jDayChooser0.addNotify();
      jDayChooser0.setMonth(7);
      jDayChooser0.setMaxDayCharacters(7);
      HsqlProperties hsqlProperties0 = new HsqlProperties();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, (-2393), 7, (-2393), 160);
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setDay(524);
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.getMaxDayCharacters();
      assertEquals(31, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setYear((-2256));
      jDayChooser0.setDecorationBordersVisible(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, (-1634L), (-1203), (-1918), '\'');
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      ParsedURL parsedURL0 = new ParsedURL("day");
      jDayChooser0.setEnabled(false);
      jDayChooser0.addListeners(6);
      jDayChooser0.getDecorationBackgroundColor();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMaxDayCharacters(3306);
      SystemColor systemColor0 = SystemColor.controlText;
      Color.getColor("y!Y");
      jDayChooser1.setWeekdayForeground(systemColor0);
      jDayChooser0.getDecorationBackgroundColor();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-4620), false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.focusLost(focusEvent0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "y!Y";
      IBindingFactory iBindingFactory0 = JiBX_bindingFactory.getInstance();
      UnmarshallingContext unmarshallingContext0 = null;
      try {
        unmarshallingContext0 = new UnmarshallingContext((-4620), stringArray0, stringArray0, stringArray0, stringArray0, iBindingFactory0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockPrintStream mockPrintStream0 = new MockPrintStream("WW 3uI202`");
      char[] charArray0 = new char[7];
      charArray0[0] = 'n';
      charArray0[1] = '2';
      charArray0[3] = '#';
      charArray0[5] = '`';
      charArray0[6] = 'h';
      mockPrintStream0.println(charArray0);
      jDayChooser0.maxSelectableDate = null;
      jDayChooser0.list((PrintStream) mockPrintStream0);
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke((-86), 30);
      KeyStroke.getKeyStroke((-86), (-971), true);
      jDayChooser0.getConditionForKeyStroke(keyStroke0);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.setMaxDayCharacters(164);
      SystemColor systemColor0 = SystemColor.controlText;
      Color.getColor("Bb3`4?dQ^Tt");
      Color color0 = new Color(164, 164, 164);
      assertEquals(164, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setEnabled(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setMaxDayCharacters(2);
      SystemColor systemColor0 = SystemColor.controlText;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Color.getColor("day");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qqlXXXGe");
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      sVGGeneratorContext_GraphicContextDefaults0.getBackground();
      jDayChooser1.setWeekdayForeground((Color) null);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser1.setDecorationBackgroundVisible(false);
      assertEquals(2, jDayChooser1.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      jDayChooser0.getWidth();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      java.util.Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMonth((-1378));
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMaxSelectableDate(date0);
      java.util.Date date1 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.getWeekdayForeground();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1378), false);
      jDayChooser0.focusLost(focusEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.setMinSelectableDate(date1);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.keyTyped((KeyEvent) null);
      jDayChooser0.drawWeeks();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.addListeners(23);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertNull(color0);
      
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      jDayChooser0.setEnabled(false);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(773, 9999, true);
      jDayChooser0.getConditionForKeyStroke(keyStroke0);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setSundayForeground((Color) null);
      jDayChooser0.getSelectedDay();
      jDayChooser0.getDaysInMonth();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser1.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser1, 1814, "day", 0L, 1814);
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getAncestorListeners();
      jDayChooser0.setMaxDayCharacters(4);
      SystemColor systemColor0 = SystemColor.controlText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.drawDays();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1100), (-1100), (-1100), 33, 'L');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 160, 160, (-2010), 160, ']');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 160, (-2010), (-725), 35, 'T');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent1);
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1011, (-2333L), 924, 36, '\\');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, 38, (-1499), (-1694), 'v');
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 48, 48, (-1499), 38, '[', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getDayPanel();
      assertEquals(7, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 48, 48, (-1499), 38, '[', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 38, (-262L), 48, 39, 'Z', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.getDayPanel();
      assertEquals(16, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, 34, 34, 34, 'm');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 38, 38, 402, 37, 'c', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(12, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 35, 35, 5, 40, '1');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
  }
}
