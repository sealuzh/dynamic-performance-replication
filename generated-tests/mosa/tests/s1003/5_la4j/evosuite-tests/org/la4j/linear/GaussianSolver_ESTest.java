/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:59:10 GMT 2018
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.GaussianSolver;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GaussianSolver_ESTest extends GaussianSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int int0 = 3;
      DenseVector denseVector0 = DenseVector.constant(3, 3);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      DenseVector denseVector1 = DenseVector.zero(3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, (double)3, (double)3).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Vector vector0 = denseVector1.transform(vectorFunction0);
      Vector vector1 = denseVector0.hadamardProduct(vector0);
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix0);
      matrix0.mkString("org.la4j.linear.GaussianSolver", "ykp/ex~DQFY4_Xp");
      gaussianSolver0.ensureRHSIsCorrect(vector0);
      gaussianSolver0.solve(vector1);
      matrix0.toBinary();
      denseVector1.manhattanNorm();
      // Undeclared exception!
      try { 
        gaussianSolver0.fail("org.la4j.linear.GaussianSolver");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.la4j.linear.GaussianSolver
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1, 1, (-3095.064884));
      GaussianSolver gaussianSolver0 = new GaussianSolver(denseMatrix0);
      DenseMatrix denseMatrix1 = DenseMatrix.zero(6, 534);
      boolean boolean0 = gaussianSolver0.applicableTo(denseMatrix1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = 3;
      DenseVector.constant(3, 3);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 3;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(3, 3, doubleArray0);
      GaussianSolver gaussianSolver0 = new GaussianSolver(sparseMatrix0);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      int int1 = 3826;
      SparseVector.zero(2167, 885);
      int int2 = 3;
      SparseVector sparseVector0 = SparseVector.zero(3, 2167);
      // Undeclared exception!
      try { 
        gaussianSolver0.solve(sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system is singular.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = 3;
      DenseVector.constant(3, 3);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      doubleArray0[8] = (double) 3;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(3, 3, doubleArray0);
      GaussianSolver gaussianSolver0 = new GaussianSolver(sparseMatrix0);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      int int1 = 3826;
      SparseVector.zero(2167, 885);
      int int2 = 3;
      SparseVector sparseVector0 = SparseVector.zero(3, 2167);
      // Undeclared exception!
      try { 
        gaussianSolver0.solve(sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system can't be solved.
         //
         verifyException("org.la4j.linear.GaussianSolver", e);
      }
  }
}
