/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:56:23 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.Label;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        classReader0.readUTF8(5, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ClassReader classReader0 = new ClassReader("java/lang/String");
          char[] charArray0 = new char[5];
          charArray0[0] = '9';
          ClassWriter classWriter0 = new ClassWriter(classReader0, 3975);
          Attribute[] attributeArray0 = null;
          ClassReader classReader1 = null;
          try {
            classReader1 = new ClassReader((InputStream) null);
            fail("Expecting exception: IOException");
          
          } catch(Throwable e) {
             //
             // Class not found
             //
             verifyException("wheel.asm.ClassReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, (-1735));
      ClassWriter classWriter1 = new ClassWriter((-734));
      classReader0.copyPool(classWriter1);
      MethodWriter methodWriter0 = classWriter1.lastMethod;
      Edge edge0 = new Edge();
      Label label0 = edge0.successor;
      classReader0.accept((ClassVisitor) classWriter1, 1);
      classReader0.getSuperName();
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[3] = '9';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65210
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Label[] labelArray0 = new Label[3];
          ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
          // Undeclared exception!
          try { 
            classReader0.readConst(217, (char[]) null);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("wheel.asm.ClassReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, (-1735));
      ClassWriter classWriter1 = new ClassWriter((-734));
      classReader0.copyPool(classWriter1);
      ClassWriter classWriter2 = new ClassWriter((-734));
      MethodWriter methodWriter0 = classWriter1.lastMethod;
      Edge edge0 = new Edge();
      Label label0 = edge0.successor;
      ClassWriter classWriter3 = new ClassWriter(classReader0, 11);
      classReader0.accept((ClassVisitor) classWriter3, (-224));
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      classReader1.getSuperName();
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '5';
      charArray0[5] = '~';
      charArray0[6] = '5';
      charArray0[7] = '5';
      charArray0[8] = '5';
      // Undeclared exception!
      try { 
        classReader1.readUTF8(883, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      classReader0.getInterfaces();
      Edge edge0 = new Edge();
      Edge edge1 = new Edge();
      Label label0 = new Label();
      label0.getFirst();
      // Undeclared exception!
      try { 
        classReader0.readShort((-668));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -668
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      classReader0.readUnsignedShort(1);
      classReader0.readUnsignedShort(4);
      classReader0.readByte(0);
      Label[] labelArray0 = new Label[3];
      Label label0 = classReader0.readLabel(2, labelArray0);
      ClassWriter classWriter0 = new ClassWriter((-797));
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      classWriter0.toByteArray();
      label0.resolve((MethodWriter) null, 0, classReader0.b);
      labelArray0[0] = label0;
      Edge edge0 = new Edge();
      Label label1 = edge0.successor;
      labelArray0[1] = null;
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classAdapter0.visitSource("java/lang/String", "(p$DYics");
      classReader0.accept((ClassVisitor) classWriter0, 830);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, (-1735));
      Edge edge0 = new Edge();
      Label label0 = edge0.successor;
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      ClassWriter classWriter1 = new ClassWriter(classReader0, 883);
      classWriter0.visitSource("+:LH5|g", "org.apache.commons.io.filefilter.CanReadFileFilter");
      MethodWriter methodWriter0 = classWriter1.lastMethod;
      Edge edge1 = new Edge();
      Label label1 = edge1.successor;
      ClassWriter classWriter2 = new ClassWriter(4);
      classWriter1.newMethodItem("Yu\rq", "+:LH5|g", "org.apache.commons.io.filefilter.CanReadFileFilter", true);
      classReader1.accept((ClassVisitor) classWriter0, (-341));
      classReader1.getSuperName();
      // Undeclared exception!
      try { 
        classReader1.readUTF8(642, (char[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 26988
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      classReader0.readUnsignedShort(2497);
      classReader0.readUnsignedShort(7);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      classReader0.readUnsignedShort(2497);
      int int0 = Type.LONG;
      ClassReader classReader1 = new ClassReader("java/lang/String");
      classReader1.readByte(7);
      ClassWriter classWriter0 = new ClassWriter(1924);
      ClassWriter classWriter1 = new ClassWriter(4130);
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      Edge edge0 = new Edge();
      edge0.info = 2497;
      Label label0 = edge0.successor;
      classReader1.accept((ClassVisitor) classWriter1, 8);
      classReader0.readInt(832);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      classReader0.readUnsignedShort(2519);
      classReader0.readUnsignedShort(7);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      classReader0.readUnsignedShort(2519);
      int int0 = Type.INT;
      ClassReader classReader1 = new ClassReader("java/lang/String");
      classReader1.readByte(7);
      ClassWriter classWriter0 = new ClassWriter(1924);
      ClassWriter classWriter1 = new ClassWriter(classReader1, 7);
      Edge edge0 = new Edge();
      classReader1.getClassName();
      classReader0.accept((ClassVisitor) classWriter0, 0);
      int int1 = 21;
      classReader1.accept((ClassVisitor) classWriter1, int1);
      int int2 = (-1152);
      char[] charArray0 = new char[3];
      char char0 = '&';
      charArray0[0] = char0;
      char char1 = '\"';
      charArray0[1] = char1;
      char char2 = 'K';
      charArray0[2] = char2;
      classReader1.readUTF8(int2, charArray0);
      classReader0.getSuperName();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      classReader0.readUnsignedShort(1);
      classReader0.readUnsignedShort(4);
      classReader0.readByte(0);
      ClassWriter classWriter0 = new ClassWriter(5);
      Edge edge0 = new Edge();
      Label label0 = edge0.successor;
      classReader0.getSuperName();
      classReader0.getItem(24);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
          ClassReader classReader0 = new ClassReader("java/lang/String");
          ClassWriter classWriter0 = new ClassWriter(1622);
          classWriter0.newUTF8("java/lang/String");
          classWriter0.newLong(1L);
          classReader0.accept((ClassVisitor) classWriter0, 1);
          FileSystemHandling.appendDataToFile((EvoSuiteFile) null, classReader0.b);
          classReader0.getClassName();
          FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java/lang/String");
          String string0 = classWriter0.thisName;
          classReader0.getInterfaces();
          classReader0.readByte(2);
          classReader0.getInterfaces();
          FileSystemHandling.shouldAllThrowIOExceptions();
          classReader0.readLong(12);
          classReader0.getAccess();
          classReader0.getInterfaces();
          ClassReader classReader1 = null;
          try {
            classReader1 = new ClassReader(classReader0.b, 4, (-693));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // 46791
             //
             verifyException("wheel.asm.ClassReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      char[] charArray0 = new char[5];
      ClassWriter classWriter0 = new ClassWriter(classReader0, 3975);
      ClassWriter classWriter1 = new ClassWriter(8);
      classReader0.copyPool(classWriter1);
      ClassWriter classWriter2 = new ClassWriter(2);
      MethodWriter methodWriter0 = classWriter2.lastMethod;
      Edge edge0 = new Edge();
      Label label0 = edge0.successor;
      classReader0.accept((ClassVisitor) classWriter1, 1);
      classReader0.getSuperName();
      // Undeclared exception!
      try { 
        classReader0.readUTF8(539, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }
}
