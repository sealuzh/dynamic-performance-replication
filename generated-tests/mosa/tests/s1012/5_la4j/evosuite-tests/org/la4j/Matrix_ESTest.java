/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:47:51 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0, 0);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(sparseMatrix0, sparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.copyOfShape(0, (-1672));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-1672
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, (-2609.9923463681));
      sparseMatrix0.norm();
      sparseMatrix0.toBinary();
      MatrixMatrixOperation<Integer> matrixMatrixOperation0 = (MatrixMatrixOperation<Integer>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      int int0 = (-1);
      // Undeclared exception!
      try { 
        Matrix.zero(0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, (-2593.3090126173975));
      sparseMatrix0.norm();
      sparseMatrix0.toBinary();
      MatrixMatrixOperation<Integer> matrixMatrixOperation0 = (MatrixMatrixOperation<Integer>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      SparseVector sparseVector0 = SparseVector.zero(0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert(matrix0, (-2516), 5, (-2516), 0, (-2516), 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -2516x5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(9);
      DenseVector denseVector0 = DenseVector.random(9, mockRandom0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.add((double) 9);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      denseVector0.is(vectorPredicate0);
      // Undeclared exception!
      try { 
        mockRandom0.ints((long) 9, 9, (-2741));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
          DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1283, 33);
          // Undeclared exception!
          denseMatrix0.multiply((double) 1283);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 3317;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3317, 3317);
      VectorOperation<Object> vectorOperation0 = (VectorOperation<Object>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      MatrixVectorOperation<Object> matrixVectorOperation0 = (MatrixVectorOperation<Object>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.unit(3317, 3317);
      Matrix matrix1 = matrix0.copy();
      Matrix matrix2 = sparseMatrix0.sliceBottomRight(5, 3317);
      sparseMatrix0.toMatrixMarket();
      SparseVector sparseVector0 = SparseVector.zero(5);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 5;
      Locale locale0 = Locale.KOREAN;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      sparseVector0.mkString(numberFormat0);
      doubleArray0[1] = (double) 5;
      int int1 = 3987;
      int int2 = 3293;
      matrix1.get(3293, 3293);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      Matrix matrix3 = matrix2.sliceTopLeft(3293, 3987);
      Matrix.block(matrix3, matrix0, matrix3, matrix2);
      DenseVector denseVector0 = DenseVector.unit(int0);
      denseVector0.toDenseVector();
      matrix3.toMatrixMarket();
      MatrixProcedure matrixProcedure0 = null;
      denseVector0.innerProduct(sparseVector0);
      matrix1.each(matrixProcedure0);
      int int3 = 10;
      matrix1.power(int3);
      matrix1.sliceTopLeft(int1, int2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(33, 33, 33);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.is(matrixPredicate0);
      columnMajorSparseMatrix0.determinant();
      columnMajorSparseMatrix0.toCSV();
      int int0 = 16;
      columnMajorSparseMatrix0.getColumn(int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      denseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      doubleArray0[5] = 0.0;
      denseMatrix0.sum();
      doubleArray0[6] = (double) 1492;
      doubleArray0[7] = (double) 1492;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 1492, doubleArray0);
      columnMajorSparseMatrix0.equals((Matrix) denseMatrix0, (-1.0));
      Vector.constant(0, 0.0);
      denseMatrix0.maxInRow(1492);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(21, 21, 21);
      columnMajorSparseMatrix0.mkString("][", "][");
      columnMajorSparseMatrix0.iteratorOfColumn(21);
      Matrix matrix0 = columnMajorSparseMatrix0.slice(21, 21, 21, 21);
      matrix0.minInRow(21);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(4, 4);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 4;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      matrix0.sliceBottomRight(4, 4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3317, 3317);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      sparseMatrix0.is(matrixPredicate0);
      sparseMatrix0.iteratorOfColumn(3317);
      // Undeclared exception!
      try { 
        sparseMatrix0.slice(3317, 3317, 3317, 3311);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [3317..3317][3317..3311].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(21, 21, 21);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.is(matrixPredicate0);
      columnMajorSparseMatrix0.mkString("][", "][");
      columnMajorSparseMatrix0.iteratorOfColumn(21);
      columnMajorSparseMatrix0.slice(21, 21, 21, 21);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0, 0);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(sparseMatrix0, sparseMatrix0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        matrix0.sliceTopLeft(3301, 3301);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Matrix.random((-2068), (-2068), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("qGws?F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 21;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(21, 21, 21);
      Matrix matrix0 = columnMajorSparseMatrix0.removeLastColumn();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      columnMajorSparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.eachInRow((-2147481680), vectorProcedure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2147481680' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1186;
      Matrix matrix0 = Matrix.identity(1186);
      int int1 = (-143);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix1 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      matrix1.hashCode();
      matrix1.trace();
      Matrix matrix2 = matrix0.subtract(matrix1);
      matrix2.rowMajorIterator();
      Vector vector0 = sparseVector0.multiply((double) int1);
      sparseVector0.add(vector0);
      sparseVector0.manhattanNorm();
      int int2 = (-1231);
      Matrix matrix3 = matrix0.sliceBottomRight(int1, int2);
      matrix2.toRowVector();
      int int3 = 2;
      Matrix matrix4 = matrix0.removeColumn(int3);
      int int4 = 1194;
      matrix0.maxInRow(int4);
      int int5 = 1474;
      Matrix matrix5 = matrix0.blankOfShape(int5, int0);
      matrix5.euclideanNorm();
      matrix2.power(int2);
      matrix4.removeRow(int2);
      int int6 = (-320);
      matrix3.getColumn(int6);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 3;
      MockRandom mockRandom0 = new MockRandom(3);
      mockRandom0.longs();
      Matrix matrix0 = Matrix.randomSymmetric(3, mockRandom0);
      matrix0.trace();
      mockRandom0.ints();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) 3, (long) 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 100.0;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 1526.593367071;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-1.0);
      doubleArray1[8] = (-129.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 100.0;
      doubleArray2[1] = 100.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 2.0;
      doubleArray3[1] = (-129.0);
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = 100.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 1.0;
      doubleArray3[6] = 2.0;
      doubleArray3[7] = 100.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 1526.593367071;
      doubleArray4[2] = (-129.0);
      doubleArray4[3] = 1.0;
      doubleArray4[4] = 1526.593367071;
      doubleArray4[5] = (-129.0);
      doubleArray4[6] = 0.0;
      doubleArray4[7] = 2.0;
      doubleArray0[3] = doubleArray4;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.toColumnVector();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(21, 21, 21);
      columnMajorSparseMatrix0.removeLastColumn();
      columnMajorSparseMatrix0.toSparseMatrix();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.randomSymmetric(21, 542.3954639491, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 441.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      matrix0.toString();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      columnMajorSparseMatrix0.rowMajorIterator();
      DenseMatrix denseMatrix0 = DenseMatrix.block(columnMajorSparseMatrix0, matrix0, matrix0, columnMajorSparseMatrix0);
      ooPlaceMatrixByVectorMultiplication0.partiallyApply(denseMatrix0);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 2582;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = (double) 2582;
      DenseVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.eachInColumn(0, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(33, 33, 33);
      CCSMatrix.fromCSV("   ");
      cCSMatrix0.iteratorOfColumn(33);
      CCSMatrix cCSMatrix1 = null;
      try {
        cCSMatrix1 = new CCSMatrix((-1287), 38, 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1287x38
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, (-2609.9923463681));
      sparseMatrix0.setColumn(0, (-2609.9923463681));
      sparseMatrix0.norm();
      sparseMatrix0.toBinary();
      MatrixMatrixOperation<Integer> matrixMatrixOperation0 = (MatrixMatrixOperation<Integer>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      SparseVector sparseVector0 = SparseVector.zero(0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.eachInColumn(5, vectorProcedure0);
      sparseVector0.toRowMatrix();
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix.randomSymmetric(0, (double) 5, (Random) mockRandom0);
      NumberFormat.getPercentInstance();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 1045;
      DenseVector denseVector0 = DenseVector.zero(1045);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      Matrix matrix1 = matrix0.blankOfColumns(1045);
      double double0 = matrix1.minInColumn(1045);
      Matrix matrix2 = matrix1.removeFirstRow();
      double double1 = 779.8152;
      denseVector0.setAll(double0);
      matrix2.setRow(int0, double1);
      int int1 = 3987;
      matrix0.get(int1, int1);
      Matrix matrix3 = Matrix.block(matrix1, matrix1, matrix1, matrix1);
      DenseVector denseVector1 = denseVector0.toDenseVector();
      matrix1.toMatrixMarket();
      MatrixProcedure matrixProcedure0 = null;
      denseVector0.innerProduct(denseVector1);
      matrix3.each(matrixProcedure0);
      matrix0.power(int0);
      matrix1.sliceTopLeft(int1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(33, 33, 33);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.is(matrixPredicate0);
      columnMajorSparseMatrix0.setAll(673.4492799063);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      columnMajorSparseMatrix0.foldColumns(vectorAccumulator0);
      // Undeclared exception!
      try { 
        Vector.fromMatrixMarket("][");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0, 0);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(sparseMatrix0, sparseMatrix0);
      matrix0.multiply((Matrix) sparseMatrix0);
      int int1 = (-1672);
      // Undeclared exception!
      try { 
        Matrix.zero(0, (-1672));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.constant((-1), (-1), 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.fromCSV("");
      Double double0 = new Double(2845.5000939134);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.determinant();
      basic2DMatrix0.toCSV();
      MockRandom mockRandom0 = new MockRandom();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      denseVector0.toMatrixMarket(numberFormat0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      // Undeclared exception!
      try { 
        Matrix.block(basic2DMatrix0, basic2DMatrix0, cCSMatrix0, basic2DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(33, 33, 33);
      Matrix matrix0 = Matrix.zero(33, 33);
      Vector vector0 = matrix0.getColumn(5);
      matrix0.iteratorOfColumn(3);
      CCSMatrix cCSMatrix0 = new CCSMatrix(15, 1992, 4037);
      int int0 = NumberFormat.INTEGER_FIELD;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setColumn(4037, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4037' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3317, 3317);
      VectorOperation<Object> vectorOperation0 = (VectorOperation<Object>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      MatrixVectorOperation<Object> matrixVectorOperation0 = (MatrixVectorOperation<Object>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      int int0 = 5;
      Matrix matrix0 = Matrix.unit(3317, 3317);
      Matrix matrix1 = matrix0.copy();
      Matrix matrix2 = sparseMatrix0.sliceBottomRight(5, 3317);
      sparseMatrix0.toMatrixMarket();
      SparseVector sparseVector0 = SparseVector.zero(5);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 5;
      Locale locale0 = Locale.KOREAN;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      sparseVector0.mkString(numberFormat0);
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) 5;
      matrix2.maxInRow(3317);
      SparseVector.fromArray(doubleArray0);
      Vector.fromCSV("");
      sparseMatrix0.apply(matrixVectorOperation0, (Vector) sparseVector0);
      int int1 = 2577;
      sparseMatrix0.set(7, 2577, 2577);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general column-major\n3317 3317 0\n");
      Matrix.block(matrix0, rowMajorSparseMatrix0, matrix1, sparseMatrix0);
      MatrixMatrixOperation<Integer> matrixMatrixOperation0 = (MatrixMatrixOperation<Integer>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      int int2 = 946;
      rowMajorSparseMatrix0.nonZeroIteratorOfRow(int2);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int1);
      matrix2.apply(matrixMatrixOperation0, (Matrix) columnMajorSparseMatrix0);
      rowMajorSparseMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(33, 33, 33);
      Matrix matrix0 = Matrix.zero(33, 33);
      matrix0.getColumn(5);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.updateRow(37, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '37' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(33, 33, 33);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.is(matrixPredicate0);
      CCSMatrix cCSMatrix0 = new CCSMatrix(33, 11);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.subtract((Matrix) cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 33x33 does not equal to 33x11.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(21, 21, 21);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false, false, false, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.is(matrixPredicate0);
      columnMajorSparseMatrix0.mkString("][", "][");
      columnMajorSparseMatrix0.iteratorOfColumn(21);
      Matrix matrix0 = columnMajorSparseMatrix0.slice(21, 21, 21, 21);
      matrix0.rank();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SparseMatrix.diagonal(0, (-2609.9923463681));
      DenseMatrix denseMatrix0 = DenseMatrix.unit(21, 21);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      denseMatrix0.power(1000);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, (-2609.9923463681));
      Double double0 = new Double(0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toCSV();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      basic2DMatrix0.is(advancedMatrixPredicate0);
      basic2DMatrix0.iterator();
      // Undeclared exception!
      try { 
        sparseMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 1045;
      DenseVector denseVector0 = DenseVector.zero(1045);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      Matrix matrix1 = matrix0.blankOfColumns(1045);
      Integer integer0 = new Integer(1045);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      matrix1.non(matrixPredicate0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix1.is(advancedMatrixPredicate0);
      matrix1.iterator();
      Matrix matrix2 = matrix1.removeFirstRow();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix2.updateRow(int0, vectorFunction0);
      denseVector0.setAll((double) integer0);
      int int1 = 5;
      matrix0.getColumn(int1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0, 0);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(sparseMatrix0, sparseMatrix0);
      matrix0.multiply((Matrix) sparseMatrix0);
      StringBuffer stringBuffer0 = new StringBuffer(")kxDJfig7hM-4_");
      FieldPosition fieldPosition0 = new FieldPosition(16);
      fieldPosition0.getFieldAttribute();
      FieldPosition fieldPosition1 = new FieldPosition((Format.Field) null, 16);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      StringBuffer stringBuffer1 = numberFormat0.format((double) 0, stringBuffer0, fieldPosition0);
      numberFormat0.format((-1L), stringBuffer1, fieldPosition0);
      sparseMatrix0.mkString(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, (-2609.9923463681));
      sparseMatrix0.setColumn(0, (-2609.9923463681));
      sparseMatrix0.norm();
      sparseMatrix0.toBinary();
      MatrixMatrixOperation<Integer> matrixMatrixOperation0 = (MatrixMatrixOperation<Integer>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      SparseVector sparseVector0 = SparseVector.zero(0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      int int1 = 5;
      // Undeclared exception!
      try { 
        sparseMatrix0.insert(matrix0, (-1724), 5, 0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative source position: 0, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, (-2609.9923463681));
      sparseMatrix0.norm();
      sparseMatrix0.toBinary();
      MatrixMatrixOperation<Integer> matrixMatrixOperation0 = (MatrixMatrixOperation<Integer>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      SparseVector sparseVector0 = SparseVector.zero(0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert(matrix0, 337, 5, 337, 0, 337, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 337, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(9, 9, 9);
      Matrix matrix0 = columnMajorSparseMatrix0.copyOfColumns(7);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.is(matrixPredicate0);
      matrix0.mkString("K>*S% oe", "K>*S% oe");
      matrix0.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 33;
      int int1 = 11;
      int int2 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(11, Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(21, 21, 21);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.is(matrixPredicate0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(21, 21);
      Matrix matrix0 = basic2DMatrix0.multiply(1.0);
      Matrix matrix1 = matrix0.multiplyByItsTranspose();
      matrix1.iterator();
      matrix0.transpose();
      // Undeclared exception!
      try { 
        basic2DMatrix0.setRow(21, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 21;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(21, 21, 21);
      DenseMatrix denseMatrix0 = DenseMatrix.unit(21, 1);
      denseMatrix0.sum();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 21;
      doubleArray0[1] = (double) 1;
      DenseMatrix denseMatrix1 = DenseMatrix.identity(21);
      Matrix matrix0 = columnMajorSparseMatrix0.removeLastRow();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(columnMajorSparseMatrix0, matrix0, denseMatrix1, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(3198);
      int int0 = 0;
      denseVector0.get(0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        matrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      Matrix matrix0 = denseMatrix0.multiply((-1.0));
      matrix0.transpose();
      denseMatrix0.setRow((-1672), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 0;
      DenseMatrix.identity(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(7, 25);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      denseMatrix0.blank();
      denseMatrix0.updateRow(1, vectorFunction0);
      denseMatrix0.each(matrixProcedure0);
      // Undeclared exception!
      try { 
        denseMatrix0.power(23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 7 does not equal to 25.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(21, 21, 21);
      int int0 = 1222;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1222, 1000);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.each(matrixProcedure0);
      // Undeclared exception!
      denseMatrix0.power(9);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, (-2609.9923463681));
      DenseVector denseVector0 = DenseVector.fromCSV("3");
      denseVector0.get(0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      matrix0.determinant();
      matrix0.toCSV();
      matrix0.setAll((-3608.9136185));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.foldColumns(vectorAccumulator0);
      matrix0.swapColumns(0, 0);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator1).accumulate();
      sparseMatrix0.foldColumn(1, vectorAccumulator1);
      matrix0.product();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(33, 33, 33);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.is(matrixPredicate0);
      columnMajorSparseMatrix0.toCSV();
      columnMajorSparseMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(21, 21, 21);
          Integer integer0 = new Integer((-2764));
          Matrix matrix0 = columnMajorSparseMatrix0.copyOfRows(21);
          matrix0.removeFirstRow();
          DenseVector denseVector0 = DenseVector.unit(4133);
          denseVector0.setAll(1.0);
          // Undeclared exception!
          try { 
            columnMajorSparseMatrix0.setRow(21, 0.0);
            fail("Expecting exception: IndexOutOfBoundsException");
          
          } catch(IndexOutOfBoundsException e) {
             //
             // Row '21' is invalid.
             //
             verifyException("org.la4j.Matrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(21, 21, 21);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.is(matrixPredicate0);
      columnMajorSparseMatrix0.mkString("array", "][");
      int int0 = 1000;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1000, 32);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.each(matrixProcedure0);
      // Undeclared exception!
      try { 
        denseMatrix0.power((-1845));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1845.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(545, 0.0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      MockRandom mockRandom0 = new MockRandom(4187L);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(16, 9, 0.0, (Random) mockRandom0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateAt(32, 32, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double double0 = 0.0;
      doubleArray0[4] = 0.0;
      NumberFormat.getIntegerInstance();
      int int0 = 17;
      // Undeclared exception!
      try { 
        denseMatrix0.removeColumn(17);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 21;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(21, 21, 21);
      Matrix matrix0 = columnMajorSparseMatrix0.removeLastColumn();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      columnMajorSparseMatrix0.toSparseMatrix();
      MockRandom mockRandom0 = new MockRandom();
      columnMajorSparseMatrix0.hashCode();
      // Undeclared exception!
      try { 
        mockRandom0.doubles(0.0, (-86.7159983));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ColumnMajorSparseMatrix.zero(580, 2199, 547);
      // Undeclared exception!
      try { 
        CCSMatrix.zero(Integer.MAX_VALUE, 2199, 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, (-2609.9923463681));
      sparseMatrix0.norm();
      sparseMatrix0.toBinary();
      MatrixMatrixOperation<Integer> matrixMatrixOperation0 = (MatrixMatrixOperation<Integer>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      SparseVector sparseVector0 = SparseVector.zero(0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert(matrix0, 0, 5, 0, 0, 0, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 0, 5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      denseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      doubleArray0[5] = 0.0;
      denseMatrix0.sum();
      doubleArray0[6] = (double) 1492;
      doubleArray0[7] = (double) 1492;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 1492, doubleArray0);
      columnMajorSparseMatrix0.toColumnMajorSparseMatrix();
      columnMajorSparseMatrix0.equals((Matrix) denseMatrix0, (-1.0));
      Vector.constant(0, 0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 33;
      CCSMatrix cCSMatrix0 = new CCSMatrix(33, 33, 33);
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV("   ");
      int int1 = 2876;
      int int2 = 1000;
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) cCSMatrix1, (-1724), 37, 33, 2876, 5, 1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 33, 2876
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(3, 1768);
      matrix0.getColumn((-1672));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, (-2609.9923463681));
      DenseVector denseVector0 = DenseVector.fromCSV("3");
      denseVector0.get(0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.is(matrixPredicate0);
      sparseMatrix0.determinant();
      cCSMatrix0.toCSV();
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(1662);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1663
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(21, 21, 21);
      Matrix matrix0 = Matrix.zero(21, 2222);
      matrix0.diagonalProduct();
      columnMajorSparseMatrix0.getColumn(5);
      Matrix.fromMatrixMarket("]Aes");
      int int0 = 374;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.updateRow(int0, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, (-2609.9923463681));
      Double double0 = new Double(0);
      sparseMatrix0.max();
      NumberFormat.getIntegerInstance();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.update(matrixFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.eachInRow(900, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 900
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SparseMatrix.diagonal(0, 0);
      DenseVector denseVector0 = DenseVector.fromCSV("3");
      Matrix matrix0 = denseVector0.toColumnMatrix();
      matrix0.determinant();
      matrix0.toCSV();
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("   ");
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateRow(584, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, (-2609.9923463681));
      sparseMatrix0.norm();
      sparseMatrix0.toBinary();
      MatrixMatrixOperation<Integer> matrixMatrixOperation0 = (MatrixMatrixOperation<Integer>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      SparseVector.zero(0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int1 = (-1724);
      int int2 = 3;
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) sparseMatrix0, 0, (-1724), 3089, (-1724), 0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 3089, -1724
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      Matrix.diagonal(Integer.MAX_VALUE, (-229.375684346));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, (-2609.9923463681));
      DenseVector.fromCSV("3");
      Double double0 = new Double(0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.determinant();
      basic2DMatrix0.toCSV();
      sparseMatrix0.max();
      NumberFormat.getIntegerInstance();
      basic2DMatrix0.toCSV();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      basic2DMatrix0.getColumn(0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.slice(3, 3, 0, 1222);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [3..0][3..1222].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0, 0);
      Matrix matrix0 = sparseMatrix0.power(7);
      // Undeclared exception!
      try { 
        matrix0.sliceTopLeft(554, (-2198));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..554][0..-2198].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(21, 21, 21);
      columnMajorSparseMatrix0.removeLastColumn();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      columnMajorSparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 21;
      doubleArray1[1] = (double) 21;
      doubleArray1[2] = (double) 21;
      doubleArray1[3] = (double) 21;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 21;
      doubleArray2[1] = (double) 21;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = (double) 21;
      doubleArray2[4] = (double) 21;
      doubleArray2[5] = (-275.49);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (-275.49);
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 1.0;
      doubleArray3[5] = 1.0;
      doubleArray3[6] = (-275.49);
      doubleArray3[7] = (double) 21;
      doubleArray3[8] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (-275.49);
      doubleArray4[1] = 1.0;
      doubleArray4[2] = 1.0;
      doubleArray4[3] = (double) 21;
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      Matrix.from2DArray(doubleArray0);
      SparseMatrix sparseMatrix0 = columnMajorSparseMatrix0.toSparseMatrix();
      MockRandom mockRandom0 = new MockRandom();
      columnMajorSparseMatrix0.getColumn(1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      sparseMatrix0.update(matrixFunction0);
      columnMajorSparseMatrix0.toString();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.eachInRow(21, vectorProcedure0);
      columnMajorSparseMatrix0.sum();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ColumnMajorSparseMatrix.zero(33, 33, 33);
      Matrix matrix0 = Matrix.zero(33, 33);
      matrix0.getColumn(5);
      matrix0.iteratorOfColumn(3);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(156, 156, 32);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      int int0 = 2057;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(int0, vectorProcedure0);
      int int1 = (-1702);
      Matrix.unit(int0, int1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.zero(1045);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      Matrix matrix1 = matrix0.blankOfColumns(1045);
      Integer integer0 = new Integer(1045);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      matrix1.non(matrixPredicate0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix1.is(advancedMatrixPredicate0);
      Matrix matrix2 = matrix1.insertRow(244, denseVector0);
      matrix1.removeFirstRow();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = (-3401);
      matrix2.getColumn(int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = 21;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(21, 21, 21);
      Matrix matrix0 = columnMajorSparseMatrix0.removeLastColumn();
      columnMajorSparseMatrix0.sum();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      columnMajorSparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      columnMajorSparseMatrix0.toSparseMatrix();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      // Undeclared exception!
      try { 
        matrix0.hadamardProduct(columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 21x20 does not equal to 21x21.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, (-2609.9923463681));
      sparseMatrix0.insert((Matrix) sparseMatrix0, 0, 0);
      DenseVector denseVector0 = DenseVector.fromCSV("3");
      Double double0 = new Double(0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.determinant();
      basic2DMatrix0.toCSV();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      basic2DMatrix0.is(advancedMatrixPredicate0);
      basic2DMatrix0.iterator();
      int int1 = 244;
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow(0, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.zero(1045);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      Matrix matrix1 = matrix0.blankOfColumns(1045);
      Integer integer0 = new Integer(1045);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false, false, false, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      matrix0.non(matrixPredicate0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix1.is(advancedMatrixPredicate0);
      matrix0.removeFirstRow();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateRow((-127), vectorFunction0);
      int int0 = (-441);
      DenseVector denseVector1 = DenseVector.zero(int0);
      double double0 = 1.0;
      denseVector1.setAll(double0);
      int int1 = 2079;
      matrix1.getColumn(int1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(33, 33, 33);
      Matrix matrix0 = Matrix.zero(33, 33);
      Vector vector0 = matrix0.getColumn(5);
      matrix0.iteratorOfColumn(3);
      CCSMatrix cCSMatrix0 = new CCSMatrix(15, 1992, 4037);
      columnMajorSparseMatrix0.rank();
      cCSMatrix0.multiply(vector0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SparseMatrix.diagonal(1045, 1045);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1045);
      int int0 = 4;
      // Undeclared exception!
      cRSMatrix0.setColumn(4, 33.643);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.fromCSV("3");
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.determinant();
      int int0 = 23;
      // Undeclared exception!
      try { 
        basic2DMatrix0.setRow(23, (Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SparseMatrix.diagonal(0, 0);
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0);
      DenseVector.fromCSV("3");
      Double double0 = new Double(0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("3");
      columnMajorSparseMatrix0.blankOfRows(1000);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(33, 33, 33);
      Matrix matrix0 = Matrix.zero(33, 33);
      matrix0.getColumn(5);
      matrix0.iteratorOfColumn(3);
      columnMajorSparseMatrix0.max();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      Matrix matrix1 = matrix0.removeColumn(5);
      String string0 = matrix0.toCSV(numberFormat0);
      RowMajorSparseMatrix.block(matrix1, columnMajorSparseMatrix0, matrix0, matrix1);
      CCSMatrix.fromMatrixMarket(string0);
      columnMajorSparseMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(21, 21, 21);
      columnMajorSparseMatrix0.removeLastColumn();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      columnMajorSparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      CCSMatrix.zero(21, 21, 6);
      NumberFormat.getPercentInstance();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.transform(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(21, 21, 21);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, true, true, true, true).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.is(matrixPredicate0);
      columnMajorSparseMatrix0.mkString("][", "][");
      columnMajorSparseMatrix0.iteratorOfColumn(21);
      Matrix matrix0 = columnMajorSparseMatrix0.divide(21);
      Matrix matrix1 = matrix0.copyOfShape(21, 21);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix1.transformRow((-1), vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
