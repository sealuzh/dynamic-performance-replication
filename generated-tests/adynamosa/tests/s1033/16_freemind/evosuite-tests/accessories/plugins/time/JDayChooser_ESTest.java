/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 05:20:41 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMindMain;
import freemind.modes.Mode;
import freemind.modes.ModeController;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.browsemode.EncryptedBrowseNode;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.DefaultFocusTraversalPolicy;
import java.awt.Dimension;
import java.awt.FocusTraversalPolicy;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.ImageCapabilities;
import java.awt.RenderingHints;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.ColorModel;
import java.awt.image.ImageObserver;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.AttributedCharacterIterator;
import java.time.LocalDate;
import java.time.chrono.HijrahEra;
import java.time.format.TextStyle;
import java.time.temporal.ChronoUnit;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import javax.help.BackAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.DebugGraphics;
import javax.swing.Icon;
import javax.swing.JApplet;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JLayeredPane;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.TransferHandler;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.PanelUI;
import javax.swing.plaf.basic.BasicPanelUI;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.GapContent;
import javax.swing.text.LabelView;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.dom.GenericDocument;
import org.apache.batik.dom.GenericDocumentType;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.gvt.RootGraphicsNode;
import org.apache.batik.gvt.TextNode;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFDocument;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.apache.xerces.dom.DOMImplementationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.hsqldb.rowio.RowInputBinary;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Windows");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setMaxDayCharacters(4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PanelUI panelUI0 = jDayChooser0.getUI();
      ((BasicPanelUI) panelUI0).getBaseline(jDayChooser0, 4, 32);
      panelUI0.getPreferredSize(jDayChooser0);
      panelUI0.getPreferredSize(jDayChooser0);
      jDayChooser0.setUI(panelUI0);
      jDayChooser0.getSundayForeground();
      String[] stringArray0 = new String[3];
      stringArray0[1] = stringArray0[0];
      Color.getColor("day");
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getMaxSelectableDate();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.updateUI();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jDayChooser0.getMaxSelectableDate();
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2151), false, jPanel0);
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.getDayPanel();
      jDayChooser0.getBaseline(1390, 29);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2151), (-2903L), (-3970), (-2151), '}');
      jDayChooser0.keyTyped(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      jDayChooser0.setFocusable(false);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.weeks = null;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-285), (-285), (-285), (-6038), ',');
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Set<AWTKeyStroke> set0 = new HashSet<AWTKeyStroke>();
      jDayChooser0.setLocation((-233), 3346);
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.setWeekdayForeground(color0);
      Locale locale0 = Locale.ITALY;
      locale0.getDisplayName();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.drawDays();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setForeground((Color) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 3346, true);
      RowInputBinary rowInputBinary0 = new RowInputBinary();
      focusEvent0.setSource(rowInputBinary0);
      jDayChooser0.focusGained(focusEvent0);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = ImageObserver.SOMEBITS;
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(8);
      System.setCurrentTimeMillis(8);
      Timestamp timestamp0 = new Timestamp(1);
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      Locale locale0 = Locale.JAPAN;
      locale0.getDisplayLanguage();
      locale0.getDisplayScript();
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-4895), 24, 2426, 1, '8');
      KeyEvent.getKeyModifiersText(28);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.getMinSelectableDate();
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Windows");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setEnabled(false);
      System.setCurrentTimeMillis(14);
      jDayChooser0.getBaselineResizeBehavior();
      System.setCurrentTimeMillis(14);
      Timestamp timestamp0 = new Timestamp(0L);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getAutoscrolls();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      jDayChooser1.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      jDayChooser1.setSelectableDateRange(timestamp0, timestamp0);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      Locale locale0 = Locale.JAPAN;
      locale0.getDisplayScript();
      jDayChooser1.setLocale(locale0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 687, 687, 4, (-612), 'U');
      KeyEvent.getKeyModifiersText(4);
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = ImageObserver.SOMEBITS;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.setEnabled(true);
      System.setCurrentTimeMillis(8);
      jDayChooser0.getBaselineResizeBehavior();
      System.setCurrentTimeMillis(8);
      Timestamp timestamp0 = new Timestamp(1);
      jDayChooser0.getAutoscrolls();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      jDayChooser0.setFocusTraversalPolicy(defaultFocusTraversalPolicy0);
      jDayChooser0.setSelectableDateRange(timestamp0, timestamp0);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      Locale locale0 = Locale.JAPAN;
      locale0.getDisplayScript();
      jDayChooser0.setLocale(locale0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 8, 8, (-1), 24, 'U');
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-295), 1028L, 37, (-295), '\'');
      keyEvent0.paramString();
      keyEvent0.consume();
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.getWeekdayForeground();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.setDay(14);
      jDayChooser0.setMaxDayCharacters(14);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JYearChooser jYearChooser0 = new JYearChooser();
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      basicPanelUI0.installUI(jDayChooser0);
      jDayChooser0.getColorModel();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.initDecorations();
      Color color0 = Color.PINK;
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.resetKeyboardActions();
      jDayChooser_DecoratorButton0.repaint((long) 14);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser1.setMonth(15);
      assertEquals(14, jDayChooser1.getDay());
      
      Color color1 = Color.pink;
      jDayChooser2.setDecorationBackgroundColor(color1);
      Locale locale0 = Locale.GERMANY;
      jDayChooser2.setLocale(locale0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-942), 15, 15, 15, 't');
      jDayChooser2.keyReleased(keyEvent0);
      jDayChooser0.getSundayForeground();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Windows");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setDay(3243);
      jDayChooser0.setMaxDayCharacters(4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      KeyEvent.getKeyText(3243);
      jDayChooser0.setDebugGraphicsOptions(0);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonth(14);
      Color color0 = jDayChooser1.getDecorationBackgroundColor();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.repaint(0L);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser_DecoratorButton0.isFocusPainted();
      jDayChooser1.initDecorations();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setDecorationBackgroundColor(color0);
      Locale locale0 = Locale.forLanguageTag(")in!;+lw.d=^9x1*^D");
      jDayChooser0.setLocale(locale0);
      assertEquals(31, jDayChooser0.getDay());
      
      jDayChooser1.focusGained((FocusEvent) null);
      System.setCurrentTimeMillis(0L);
      Date date0 = new Date(262L);
      jDayChooser1.setMinSelectableDate(date0);
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = ImageObserver.SOMEBITS;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setDay(3242);
      jDayChooser1.setMaxDayCharacters(100);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser1.setMonth((-284));
      jDayChooser1.getDecorationBackgroundColor();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.repaint((long) 8);
      FocusListener focusListener0 = AWTEventMulticaster.remove((FocusListener) jDayChooser0, (FocusListener) jDayChooser1);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.transferFocusDownCycle();
      JYearChooser jYearChooser0 = new JYearChooser();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "year");
      jDayChooser1.firePropertyChange("day", 0.0F, (-1188.0F));
      jDayChooser2.addFocusListener(focusListener0);
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser3.setFont((Font) null);
      jDayChooser1.setEnabled(true);
      JDayChooser jDayChooser4 = new JDayChooser(false);
      jDayChooser4.getWeekdayForeground();
      jDayChooser3.getX();
      jDayChooser2.keyReleased((KeyEvent) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.setDay(3243);
      jDayChooser0.setMaxDayCharacters(3243);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3243, 14, 3243, 3, 'i');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      ColorModel.getRGBdefault();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonth(714);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser_DecoratorButton0.isFocusPainted();
      jDayChooser0.initDecorations();
      jDayChooser0.setDecorationBackgroundColor(color0);
      Locale locale0 = Locale.forLanguageTag("day");
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(31, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setSize((-966), 2852);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1326, 1326, 3883, 31, '+', 4);
      keyEvent0.setKeyChar('+');
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", vetoableChangeListener0);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      KeyEvent.getKeyText(33);
      KeyEvent.getExtendedKeyCodeForChar(2852);
      jDayChooser0.isRequestFocusEnabled();
      jDayChooser0.keyTyped(keyEvent0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.isDecorationBackgroundVisible();
      System.setCurrentTimeMillis(0L);
      jDayChooser0.drawDays();
      jDayChooser0.getSundayForeground();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1326);
      jDayChooser0.focusLost(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(1326);
      jDayChooser0.getSelectedDay();
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = SwingConstants.HORIZONTAL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.setEnabled(true);
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(0);
      Timestamp timestamp0 = new Timestamp(1219L);
      LocalDate localDate0 = MockLocalDate.now();
      Date date0 = Date.valueOf(localDate0);
      jDayChooser0.setSelectableDateRange(timestamp0, date0);
      System.setCurrentTimeMillis(1);
      jDayChooser0.setDay(0);
      jDayChooser0.setMaxDayCharacters(1);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Windows");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setDay(3243);
      jDayChooser0.setMaxDayCharacters(4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setMonth(3243);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.repaint((long) (-284));
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.isBorderPainted();
      jDayChooser0.initDecorations();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.isDecorationBackgroundVisible();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      System.setCurrentTimeMillis((-1723L));
      jDayChooser0.setDay(4);
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(4, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.darkGray;
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      canvasGraphicsNode0.getPositionTransform();
      color0.createContext((ColorModel) null, defaultCaret0, defaultCaret0, (AffineTransform) null, (RenderingHints) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setWeekdayForeground(color0);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel();
      JSpinner jSpinner0 = new JSpinner(spinnerNumberModel0);
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      menuSelectionManager0.removeChangeListener(jSpinner_NumberEditor0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 100, 0L, 228, 36, 'h', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.updateUI();
      jDayChooser0.setFocus();
      jDayChooser0.getDecorationBackgroundColor();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDebugGraphicsOptions();
      jDayChooser0.getMouseWheelListeners();
      jDayChooser0.setDay(0);
      jDayChooser0.setMaxDayCharacters(1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 0, 0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.transferFocusDownCycle();
      jDayChooser0.drawWeeks();
      jDayChooser0.getMaxSelectableDate();
      Color color0 = new Color(0.0F, 0.0F, 0.0F, 0.0F);
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.firePropertyChange("27", (byte)1, (byte) (-65));
      jDayChooser0.setMaxDayCharacters(90);
      jDayChooser0.setForeground(color0);
      Locale locale0 = Locale.US;
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getPreferredSize();
      jDayChooser0.addFocusListener(jDayChooser1);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      ActionEvent actionEvent0 = new ActionEvent(integer0, 14, (String) null, (-1102L), 374);
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke((-1454), 140, false);
      actionEvent0.setSource(aWTKeyStroke0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.KeyStroke cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Dimension dimension0 = jDayChooser0.getPreferredSize();
      assertEquals(203, dimension0.width);
      
      jDayChooser0.addFocusListener(jDayChooser0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      ActionEvent actionEvent0 = new ActionEvent(integer0, 140, "day", 203, 203);
      actionEvent0.setSource(jDayChooser0);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 140, 0L, 140, 465, 'B', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getMinSelectableDate();
      jDayChooser0.keyTyped(menuKeyEvent0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals((-6029312), color0.getRGB());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2703, 2703, 2274, 7, '3');
      jDayChooser0.getSelectedDay();
      keyEvent0.setSource((Object) null);
      keyEvent0.paramString();
      keyEvent0.consume();
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, (-1865), 2703, 6, 7, ']');
      keyEvent1.getExtendedKeyCode();
      jDayChooser0.keyPressed(keyEvent1);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.keyTyped(keyEvent0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDoubleBuffered(true);
      jDayChooser0.isDoubleBuffered();
      jDayChooser0.dayBordersVisible = false;
      jDayChooser0.setAlignmentX(0.0F);
      Color color0 = Color.YELLOW;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "R";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[7] = "day";
      stringArray0[8] = "day";
      jDayChooser0.dayNames = stringArray0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      color0.getColorComponents(floatArray0);
      Color.getColor("day", (-1));
      jDayChooser0.setForeground(color0);
      jDayChooser0.getLocale();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setFocus();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      assertEquals(14, jDayChooser0.getDay());
      
      JColorChooser jColorChooser0 = new JColorChooser();
      KeyEvent keyEvent0 = new KeyEvent(jColorChooser0, 160, 2869, 1393, 35, '9');
      jDayChooser0.keyPressed(keyEvent0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(407);
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 407, '%', 79, 37, '%');
      keyEvent0.consume();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser1.getColorModel();
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-36);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay((byte) (-36));
      jDayChooser0.setMaxDayCharacters((byte) (-36));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 17, 365L, 3243, 40, 'a');
      jDayChooser0.keyPressed(keyEvent0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      java.util.Date date0 = jDayChooser0.defaultMinSelectableDate;
      // Undeclared exception!
      try { 
        Date.valueOf("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.getInheritsPopupMenu();
      jDayChooser0.getDay();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(745);
      Locale locale0 = Locale.forLanguageTag("7");
      jDayChooser0.setLocale(locale0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 28, 745, 745, 14, 'f');
      jDayChooser0.keyTyped(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.getInheritsPopupMenu();
      jDayChooser0.getDay();
      jDayChooser0.setDay(745);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Center";
      stringArray0[1] = "day";
      stringArray0[2] = "Center";
      stringArray0[3] = "4";
      stringArray0[4] = "day";
      Locale locale0 = Locale.forLanguageTag("user.name");
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMonth(1178);
      assertEquals(31, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getGraphics();
      jDayChooser0.focusLost((FocusEvent) null);
      jDayChooser0.getSundayForeground();
      System.setCurrentTimeMillis(5378L);
      jDayChooser0.isDecorationBackgroundVisible();
      // Undeclared exception!
      try { 
        Timestamp.valueOf("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.JAPANESE;
      jDayChooser0.setLocale(locale0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 13, 85L, 13, 13, '&');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.focusGained((FocusEvent) null);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "17");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.decorationBordersVisible = true;
      jDayChooser0.getInputContext();
      jDayChooser0.getPropertyChangeListeners((String) null);
      jDayChooser0.getDay();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setWeekdayForeground(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.getDay();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1415, (-1345L), 14, 38, '8');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getHeight();
      jDayChooser0.maxDayCharacters = (-981);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getBaselineResizeBehavior();
      System.setCurrentTimeMillis(1711L);
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      Locale locale0 = Locale.PRC;
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("_map_", (String) null, "month");
      DOMImplementationImpl dOMImplementationImpl0 = new DOMImplementationImpl();
      CoreDocumentImpl coreDocumentImpl0 = null;
      try {
        coreDocumentImpl0 = new CoreDocumentImpl(genericDocumentType0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // WRONG_DOCUMENT_ERR: A node is used in a different document than the one that created it.
         //
         verifyException("org.apache.xerces.dom.CoreDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 33, (-885L), 33, (-293), 'g');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getHeight();
      jDayChooser0.getBaselineResizeBehavior();
      System.setCurrentTimeMillis(992L);
      Timestamp timestamp0 = new Timestamp(300000L);
      jDayChooser0.setSelectableDateRange(timestamp0, timestamp0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      Locale locale0 = Locale.PRC;
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("=@[_g", ",%P", "TF:XQDi7z+ OvlAt[R$");
      DOMImplementationImpl dOMImplementationImpl0 = new DOMImplementationImpl();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, dOMImplementationImpl0);
      genericDocument0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.setYearChooser((JYearChooser) null);
      int int1 = SwingConstants.EAST;
      jDayChooser0.getBaselineResizeBehavior();
      System.setCurrentTimeMillis(29116800000L);
      Timestamp timestamp0 = new Timestamp(33);
      jDayChooser0.setSelectableDateRange(timestamp0, timestamp0);
      Locale.forLanguageTag("4.w0<#}>C");
      Locale locale0 = Locale.KOREAN;
      jDayChooser0.setLocale(locale0);
      Color color0 = Color.ORANGE;
      jDayChooser0.setSundayForeground(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.getDay();
      jDayChooser0.setDay(3243);
      MenuElement[] menuElementArray0 = new MenuElement[2];
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getOpenIcon();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("-07-", icon0, false);
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      JMenuItem jMenuItem0 = new JMenuItem(icon0);
      menuElementArray0[1] = (MenuElement) jMenuItem0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 14, 14, 14, (-1), 'L', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setEnabled(false);
      System.setCurrentTimeMillis((-1487L));
      Timestamp timestamp0 = new Timestamp((-2051L));
      jDayChooser1.setSelectableDateRange(timestamp0, timestamp0);
      Locale.forLanguageTag("");
      Locale locale0 = JComponent.getDefaultLocale();
      jDayChooser1.setLocale(locale0);
      JButton jButton0 = new JButton(icon0);
      ActionEvent actionEvent0 = new ActionEvent(jButton0, (-1), "15", 3243, 3243);
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-87));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(14, jDayChooser0.getDay());
      
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)TextNode.PAINT_INFO;
      JDayChooser jDayChooser1 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      systemColor0.getColorSpace();
      jDayChooser1.setForeground(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 23, (long) gVTAttributedCharacterIterator_TextAttribute0.UNDERLINE_ON, (-3678), (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_NONE, 't', (int) gVTAttributedCharacterIterator_TextAttribute0.ADJUST_ALL);
      jDayChooser1.keyPressed(keyEvent0);
      MockDate mockDate0 = new MockDate((-4548), (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_MEDIAL, 2);
      java.util.Date date0 = jDayChooser1.defaultMinSelectableDate;
      jDayChooser1.setDecorationBackgroundColor(systemColor0);
      Locale locale0 = Locale.JAPAN;
      jDayChooser1.setLocale(locale0);
      jDayChooser1.setYearChooser((JYearChooser) null);
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = ImageObserver.SOMEBITS;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.setEnabled(true);
      System.setCurrentTimeMillis(8);
      jDayChooser0.getBaselineResizeBehavior();
      System.setCurrentTimeMillis(8);
      Timestamp timestamp0 = new Timestamp(1);
      jDayChooser0.setSelectableDateRange(timestamp0, timestamp0);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      Locale locale0 = Locale.JAPAN;
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2720, 2720, 38, 38, 'g');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      java.util.Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      int int0 = 33;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1415, 1L, 14, 33, 'g');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setDayBordersVisible(false);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 339, "day", 339);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = ImageObserver.SOMEBITS;
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(8);
      Timestamp timestamp0 = new Timestamp((-977L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = ImageObserver.SOMEBITS;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.setEnabled(true);
      System.setCurrentTimeMillis(8);
      jDayChooser0.getBaselineResizeBehavior();
      System.setCurrentTimeMillis(8);
      Timestamp timestamp0 = new Timestamp(1);
      jDayChooser0.setSelectableDateRange(timestamp0, timestamp0);
      Locale locale0 = Locale.forLanguageTag(")5rt\"R$+zrK");
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      int int0 = ImageObserver.SOMEBITS;
      jDayChooser0.setDay(407);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Color color0 = jDayChooser0.sundayForeground;
      jDayChooser0.setForeground(color0);
      JEditorPane jEditorPane0 = new JEditorPane("day", "PVW4:eQTtC\"[P8)w");
      jEditorPane0.getDisabledTextColor();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDecorationBackgroundColor(color0);
      jDayChooser1.setEnabled(true);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.getMaxDayCharacters();
      System.setCurrentTimeMillis((-3221L));
      Timestamp timestamp0 = new Timestamp(8);
      jDayChooser0.decorationBordersVisible = true;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 43, 1050L, 39, 45, 'G', 4);
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser1.drawDays();
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getLocale();
      Color color0 = new Color(38, 38, (int) '#', 38);
      jDayChooser0.setDecorationBackgroundColor(color0);
      HsqlProperties hsqlProperties0 = new HsqlProperties("day");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      jDayChooser0.getDayPanel();
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte) (-114);
      byteArray0[8] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2720, 2720, 39, 39, 'g');
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getMinimumSize();
      jDayChooser1.keyPressed(keyEvent0);
      MockDate mockDate0 = new MockDate(14, 203, 39);
      java.util.Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(mockDate0, date0);
      jDayChooser1.setSelectableDateRange(date0, mockDate0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertEquals(15, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = ImageObserver.SOMEBITS;
      jDayChooser0.setDay(407);
      jDayChooser0.getVetoableChangeListeners();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      Color.getColor("day");
      jDayChooser0.setForeground((Color) null);
      JEditorPane jEditorPane0 = new JEditorPane("28", "day");
      jDayChooser0.getMaxSelectableDate();
      JEditorPane jEditorPane1 = null;
      try {
        jEditorPane1 = new JEditorPane((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.JEditorPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      GapContent gapContent0 = new GapContent();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      styleContext0.removeStyle("13");
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      StyleContext styleContext1 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext1.new NamedStyle();
      gapContent0.length();
      AttributeSet attributeSet0 = styleContext_NamedStyle0.copyAttributes();
      styleContext_NamedStyle0.copyAttributes();
      Font font0 = defaultStyledDocument0.getFont(attributeSet0);
      jDayChooser0.setFont(font0);
      jDayChooser0.updateUI();
      jDayChooser0.keyTyped((KeyEvent) null);
      boolean boolean0 = true;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1460, true, jDayChooser0);
      MapDialog mapDialog0 = null;
      MapDialog mapDialog1 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog1.getFreeMindMapController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.MapDialog", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = ImageObserver.SOMEBITS;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getMaxDayCharacters();
      System.setCurrentTimeMillis(0L);
      Timestamp timestamp0 = new Timestamp(0L);
      jDayChooser0.setSelectableDateRange(timestamp0, timestamp0);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.drawDays();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2064));
      jDayChooser0.focusGained(focusEvent0);
      ActionEvent actionEvent0 = new ActionEvent(focusEvent0, (-2064), "Windows", (-2064));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.event.FocusEvent cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = ImageObserver.SOMEBITS;
      jDayChooser0.setDay(407);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MockDate mockDate0 = new MockDate(8, (-1310), 9679);
      java.util.Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, mockDate0);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(11);
      jDayChooser0.getDaysInMonth();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 11, 2713L, 28, 41, '0');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 1557, 11, 10072, 11, '~');
      jDayChooser0.keyPressed(keyEvent1);
      jDayChooser0.getLocale();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.keyTyped(keyEvent1);
      jDayChooser0.keyPressed(keyEvent1);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.setDay(535);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setIgnoreRepaint(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2535), 0L, 79, 535, 'a');
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.keyPressed(keyEvent0);
      StringContent stringContent0 = new StringContent((-456));
      DefaultStyledDocument defaultStyledDocument0 = null;
      try {
        defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, (StyleContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = ImageObserver.SOMEBITS;
      jDayChooser0.setDay(407);
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 407, 1700L, 79, 37, '%');
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(27, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      RootGraphicsNode rootGraphicsNode0 = new RootGraphicsNode();
      Locale.filter((List<Locale.LanguageRange>) rootGraphicsNode0, (Collection<Locale>) rootGraphicsNode0);
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("jm8JKDzStn-|", "day", "Paste");
      org.apache.crimson.tree.DOMImplementationImpl dOMImplementationImpl0 = new org.apache.crimson.tree.DOMImplementationImpl();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, dOMImplementationImpl0);
      genericDocument0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2720, 2720, 38, 38, 'g');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getLocale();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertEquals(7, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(11);
      jDayChooser0.getDaysInMonth();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 28, 28, 11, 28, 'v');
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Dimension dimension0 = new Dimension('v', 11);
      jDayChooser0.keyPressed(keyEvent0);
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Date date0 = new Date(0L);
      jDayChooser0.getInputContext();
      jDayChooser0.drawDays();
      int int0 = 0;
      int int1 = 0;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 8993, 8993, 0, 'T');
      jDayChooser0.keyPressed(keyEvent0);
      JTable jTable0 = null;
      try {
        jTable0 = new JTable((-1437625606), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1437625606
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = ImageObserver.SOMEBITS;
      jDayChooser0.setDay(8);
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1459, (-1312L), 21, (-542), '%');
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(8, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(164, color0.getBlue());
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getInputContext();
      SystemColor systemColor0 = SystemColor.textInactiveText;
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.setMaxSelectableDate((java.util.Date) null);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Date date0 = new Date(0L);
      jDayChooser0.setMaxDayCharacters(1076);
      int int0 = 891;
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, 891, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMaxDayCharacters(196);
      Font.getFont("J:z");
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setMinSelectableDate((java.util.Date) null);
      jDayChooser2.setFont((Font) null);
      Color color1 = Color.blue;
      jDayChooser1.setDecorationBackgroundColor(color1);
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(11);
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 28, 28, 11, 28, 'v');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.updateUI();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.keyReleased(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setSelectableDateRange((java.util.Date) null, (java.util.Date) null);
      jDayChooser0.setYear(7);
      jDayChooser0.getSelectedDay();
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(164, color0.getRed());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.ITALY;
      jDayChooser0.setDayBordersVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(7);
      jDayChooser0.setMaxDayCharacters(1402);
      jDayChooser0.init();
      assertEquals(7, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2704), true);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2720, 2720, 39, 39, 'g');
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(15, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.controlShadow;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4078, 564, (-131), 564, 'v');
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      Locale locale0 = Locale.US;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.firePropertyChange("", (-448.9935869739), 2364.350991178019);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      defaultStyledDocument0.getCharacterElement(2565);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 14, 0L, 14, 2565, 't', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 10, 0L, 2720, 2720, 'v');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-94);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      AWTEventMulticaster.remove((FocusListener) jDayChooser0, (FocusListener) jDayChooser0);
      jDayChooser0.addFocusListener((FocusListener) null);
      jDayChooser0.setFont((Font) null);
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.requestFocus(true);
      jDayChooser0.getUIClassID();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getMaximumSize();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser_DecoratorButton0.isFocusable();
      java.util.Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.setDay(745);
      jDayChooser0.setMaxDayCharacters(4);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(28);
      jDayChooser0.setMaxDayCharacters(61448);
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getRootPane();
      jDayChooser0.enableInputMethods(false);
      Font.getFont("bR <cjvHl^o");
      jDayChooser0.setFont((Font) null);
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.setFloatingLocation(1, 1);
      jDayChooser0.isOptimizedDrawingEnabled();
      metalToolBarUI0.getDockingColor();
      float[] floatArray0 = new float[6];
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[5] = (float) 1;
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-418.83F);
      floatArray1[1] = (float) 1;
      floatArray1[3] = (float) 1;
      jDayChooser0.setWeekdayForeground((Color) null);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setFocus();
      boolean boolean1 = jDayChooser0.isWeekOfYearVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.GREEN;
      jDayChooser0.setDecorationBackgroundColor(color0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      java.util.Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDecorationBordersVisible(true);
      System.setCurrentTimeMillis(1048576L);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JComponent.isLightweightComponent(jDayChooser_DecoratorButton0);
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setMonth(422);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.setDay(14);
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.setMaxDayCharacters(27);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(46);
      jDayChooser0.getDaysInMonth();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-954), 0L, (-954), (-954), 'v');
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.setDay(14);
      jDayChooser0.setMaxDayCharacters(1);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getWeekdayForeground();
      boolean boolean0 = false;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      int int0 = 196;
      jDayChooser1.setMaxDayCharacters(196);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser1, 196, "H'pQ5O5T!zs,VB1:}s");
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      JComponent.getDefaultLocale();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.createVolatileImage(939, 939, (ImageCapabilities) null);
      jDayChooser0.getDaysInMonth();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 0;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true);
      HijrahEra hijrahEra0 = HijrahEra.AH;
      TextStyle textStyle0 = TextStyle.NARROW_STANDALONE;
      Locale locale0 = Locale.CHINA;
      hijrahEra0.getDisplayName(textStyle0, locale0);
      focusEvent0.setSource(hijrahEra0);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "QWpE8f!~.: ;gl=:";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      jDayChooser0.addNotify();
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      stringArray0[7] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(90, color0.getGreen());
      
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      Date date0 = new Date(0L);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.setMaxSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getDay();
      jDayChooser0.setDay(12);
      jDayChooser1.setMaxDayCharacters(14);
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getRootPane();
      JComponent.setDefaultLocale((Locale) null);
      jDayChooser0.setMaxDayCharacters(1519);
      Color color0 = Color.blue;
      jDayChooser0.setSundayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("day");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      jDayChooser0.setMonth((-87));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)TextNode.PAINT_INFO;
      JDayChooser jDayChooser1 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      jDayChooser1.setForeground(systemColor0);
      JEditorPane jEditorPane0 = new JEditorPane("day", "VwprL3r}(ow");
      Color color0 = jEditorPane0.getDisabledTextColor();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setDecorationBackgroundColor(color0);
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser3.setEnabled((boolean) gVTAttributedCharacterIterator_TextAttribute0.OVERLINE_ON);
      jDayChooser1.getMaxDayCharacters();
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      
      System.setCurrentTimeMillis((long) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED);
      Timestamp timestamp0 = new Timestamp((long) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_TTB);
      jDayChooser0.setSelectableDateRange(timestamp0, timestamp0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.setDay((-547));
      jDayChooser0.setMaxDayCharacters(32);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getLocale();
      jDayChooser0.initDecorations();
      Color color0 = Color.LIGHT_GRAY;
      Color.getColor("day");
      jDayChooser0.setWeekdayForeground((Color) null);
      String string0 = "0";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        HsqlProperties.argArrayToProps((String[]) null, "L1)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.persist.HsqlProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getContainerListeners();
      jDayChooser0.setMaxDayCharacters(1519);
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getX();
      Dimension dimension0 = jDayChooser0.getPreferredSize();
      assertEquals(203, dimension0.width);
      
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.addFocusListener(jDayChooser1);
      jDayChooser0.firePropertyChange("day", '(', '_');
      jDayChooser0.getMaxDayCharacters();
      boolean boolean0 = jDayChooser1.isDecorationBackgroundVisible();
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "dW-&3M4E+Ti,;";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      stringArray0[7] = "day";
      stringArray0[8] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 481, true, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getLocale();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-3112), false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JEditorPane jEditorPane0 = new JEditorPane("day", "day");
      Color color0 = jEditorPane0.getDisabledTextColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      java.util.Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDecorationBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 107, false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      MockDate mockDate0 = new MockDate(47, 47, 48, 251, 48);
      jDayChooser0.setMinSelectableDate(mockDate0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FontInfo fontInfo0 = new FontInfo();
      PDFDocument pDFDocument0 = new PDFDocument("day");
      Font font0 = new Font("ISO-8859-1", 1402, 1692);
      Font.getFont("ISO-8859-1");
      jDayChooser0.setFont(font0);
      jDayChooser0.setFont((Font) null);
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      
      jDayChooser0.isDayBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      Font font0 = new Font("x", 2300, (-1398));
      Font font1 = new Font("day", (-1398), 2300);
      jDayChooser0.setFont(font1);
      jDayChooser0.getDayPanel();
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getHierarchyBoundsListeners();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 2054;
      jDayChooser0.setMaxDayCharacters(2054);
      jDayChooser0.getMouseWheelListeners();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.drawDays();
      jDayChooser0.getAccessibleContext();
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 28;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 28, false, jDayChooser0);
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      focusEvent0.setSource(attributedCharacterIterator_Attribute0);
      jDayChooser0.focusGained(focusEvent0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser_DecoratorButton0, (-80), false);
      jDayChooser0.focusGained(focusEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-87));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)TextNode.PAINT_INFO;
      BackAction backAction0 = new BackAction(gVTAttributedCharacterIterator_TextAttribute0);
      jDayChooser_DecoratorButton0.addMouseListener(backAction0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals((-6029312), color0.getRGB());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JEditorPane jEditorPane0 = new JEditorPane("day", "day");
      Color color0 = jEditorPane0.getDisabledTextColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      java.util.Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setYear((-76));
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(true);
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Font font0 = new Font("x", 2300, (-1398));
      Font.getFont("x");
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JEditorPane jEditorPane0 = new JEditorPane("day", "day");
      Color color0 = jEditorPane0.getDisabledTextColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Font font0 = new Font("xdTOkVtgg(a", 778, (-1398));
      Font.getFont("org.openstreetmap.gui.jmapviewer.tilesources.ScanexTileSource$ScanexLayer");
      jDayChooser0.setFont(font0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(true);
      MockCalendar.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController((Mode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("}E~Z*2Q2{IIMsMm", vetoableChangeListener0);
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.addListeners(1);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.getMaxSelectableDate();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JTextPane jTextPane0 = new JTextPane();
      Color color0 = jTextPane0.getDisabledTextColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser1.getMaxSelectableDate();
      jDayChooser1.getSelectedDay();
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "cursor_longitude");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JEditorPane jEditorPane0 = new JEditorPane("day", "day");
      Color color0 = jEditorPane0.getDisabledTextColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("}E~Z*2Q2{IIMsMm", vetoableChangeListener0);
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-7));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MockDate mockDate0 = new MockDate(960, 1, 0);
      ChronoUnit chronoUnit0 = ChronoUnit.DAYS;
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.drawDays();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 4, 4, 0, 8993, 'Q');
      jDayChooser0.keyPressed(keyEvent0);
      JTable jTable0 = new JTable(8993, 0);
      jTable0.convertColumnIndexToView(960);
      Class<HijrahEra> class0 = HijrahEra.class;
      jTable0.getDefaultEditor(class0);
      Color color0 = jTable0.getGridColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setMaxDayCharacters((-1289));
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JEditorPane jEditorPane0 = new JEditorPane("day", "day");
      Color color0 = jEditorPane0.getDisabledTextColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      java.util.Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setYear(2126);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.requestFocusInWindow();
      jYearChooser0.getDebugGraphicsOptions();
      jDayChooser0.getWidth();
      Color color0 = jYearChooser0.darkGreen;
      jDayChooser0.setDecorationBackgroundColor(color0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setMonthChooser(jMonthChooser0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      OutputStream outputStream0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false, "month");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.isWeekOfYearVisible();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.isDecorationBordersVisible();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getFocusTraversalPolicy();
      jDayChooser0.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      jDayChooser0.getLocale();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setWeekOfYearVisible(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.getFont();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setFont((Font) null);
      SystemColor systemColor0 = SystemColor.windowText;
      jDayChooser0.setWeekdayForeground(systemColor0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setYear(351);
      JDayChooser jDayChooser2 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser2.new DecoratorButton();
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Font font0 = new Font("x", 2300, (-1398));
      Font.getFont("x");
      jDayChooser0.setFont((Font) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getPropertyChangeListeners();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertTrue(boolean0);
      
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getDebugGraphicsOptions();
      jDayChooser0.getWidth();
      Color color0 = jYearChooser0.darkGreen;
      jDayChooser0.setDecorationBackgroundColor(color0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Font font0 = new Font("year", 0, 0);
      jDayChooser0.setFont(font0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.firePropertyChange("", (-448.9935869739), 2364.350991178019);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Element element0 = defaultStyledDocument0.getCharacterElement(2565);
      LabelView labelView0 = new LabelView(element0);
      Color color0 = labelView0.getForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      int int0 = jDayChooser0.getDay();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionMap actionMap0 = new ActionMap();
      actionMap0.size();
      Action action0 = TransferHandler.getCopyAction();
      actionMap0.put(jDayChooser0, action0);
      jDayChooser0.setActionMap(actionMap0);
      jDayChooser0.getComponentListeners();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.drawWeeks();
      jDayChooser0.setMonth(0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, 0, 'P');
      int int0 = ImageObserver.ERROR;
      jDayChooser0.keyReleased(keyEvent0);
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      JEditorPane jEditorPane0 = null;
      try {
        jEditorPane0 = new JEditorPane((String) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // invalid url
         //
         verifyException("javax.swing.JEditorPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int int0 = 960;
      MockDate mockDate0 = new MockDate(960, 1, 0);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement((jdbcConnection) null, "freemind.modes.mindmapmode.MindMapMapModel", 960);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.PINK;
      jDayChooser0.setSundayForeground(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getWeekdayForeground();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      int int0 = 3249;
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "day", 3249);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("}E~Z*2Q2{IIMsMm", vetoableChangeListener0);
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.hasFocus();
      jDayChooser0.initDecorations();
      HashSet<KeyStroke> hashSet0 = new HashSet<KeyStroke>();
      // Undeclared exception!
      try { 
        jDayChooser0.setFocusTraversalKeys((-3016), hashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid focus traversal key identifier
         //
         verifyException("java.awt.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.textHighlightText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getFocusTraversalPolicy();
      jDayChooser0.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      jDayChooser0.getLocale();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setYear(0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.isWeekOfYearVisible();
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getDebugGraphicsOptions();
      jDayChooser0.getWidth();
      Color color0 = jYearChooser0.darkGreen;
      jDayChooser0.setDecorationBackgroundColor(color0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true, "year");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionMap actionMap0 = new ActionMap();
      actionMap0.size();
      Action action0 = TransferHandler.getCopyAction();
      actionMap0.put(jDayChooser0, action0);
      jDayChooser0.setActionMap(actionMap0);
      jDayChooser0.getComponentListeners();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.drawWeeks();
      jDayChooser0.setMonth(0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, 0, 'P');
      // Undeclared exception!
      try { 
        InputEvent.getMaskForButton(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // button doesn't exist 0
         //
         verifyException("java.awt.event.InputEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setSundayForeground((Color) null);
      jDayChooser0.decorationBackgroundVisible = false;
      jDayChooser0.remove(0);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setDecorationBackgroundVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getFreeMindMapController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.MapDialog", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.decorationBordersVisible = true;
      jDayChooser0.getInputContext();
      jDayChooser0.getPropertyChangeListeners((String) null);
      jDayChooser0.getLocale();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      int int0 = 1;
      metalToolBarUI0.setFloatingLocation(1, 1);
      metalToolBarUI0.getAccessibleChildrenCount(jDayChooser0);
      jDayChooser0.isOptimizedDrawingEnabled();
      metalToolBarUI0.getDockingColor();
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(false);
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      Font font0 = new Font("", 3744, 14);
      jDayChooser0.setFont(font0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.isDecorationBordersVisible();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(167);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      EncryptedBrowseNode encryptedBrowseNode0 = null;
      try {
        encryptedBrowseNode0 = new EncryptedBrowseNode((FreeMindMain) null, (ModeController) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.browsemode.EncryptedBrowseNode", e);
      }
  }
}
