/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 20:21:10 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      classWriter0.visitSource("-t", "HV41YemGM#");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "RuntimeInisibleAnnotaions", "RuntimeInisibleAnnotaions", "-t", "-t");
      fieldWriter0.visitEnd();
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "HV41emGM#", "HV41emGM#", "HV41emGM#", "HV41emGM#");
      fieldWriter0.getSize();
      fieldWriter0.visitAnnotation("HV41emGM#", false);
      Object object0 = new Object();
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 1, "<)_MPmlV+5U^G", "ContantValue", "HV41emGM#", "");
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131077);
      classWriter0.newLong(131077);
      classWriter0.newFieldItem("-t", "/12FX@2", "-t");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 8, "RuntimeInisibleAnnotaions", "-t", "", (Object) null);
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter1.getSize();
      int int0 = Type.INT;
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "-t", "HV41emGM#", "The array of suffixes must not be null", "-t");
      fieldWriter0.visitAnnotation("-t", true);
      fieldWriter0.visitEnd();
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1523);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 21, "", "XSh'serb", "%Va", (Object) null);
      ByteVector byteVector0 = new ByteVector(2);
      byteVector0.putInt(1300);
      fieldWriter0.put(byteVector0);
      classWriter0.newClassItem("zV#}nL(");
      fieldWriter0.visitAnnotation("XSh'serb", true);
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter1.visitEnd();
      fieldWriter0.visitAnnotation("%Va", true);
      fieldWriter1.visitEnd();
      fieldWriter1.getSize();
      int int0 = fieldWriter0.getSize();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      classWriter0.visitSource("-t", "HV41YemGM#");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131072, "RuntimeInisibleAnnotaions", "RuntimeInisibleAnnotaions", "-t", "-t");
      fieldWriter0.visitAnnotation("long", false);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      classWriter0.visitSource("HV41YemGM#", "HV41YemGM#");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "RuntimeInisibleAnnotaions", "RuntimeInisibleAnnotaions", "HV41YemGM#", "HV41YemGM#");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitEnd();
      Attribute attribute0 = new Attribute((String) null);
      Attribute attribute1 = attribute0.next;
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3823);
      classWriter0.visitSource("-t", "HV41YemGM#");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1593), "RuntimeInisibleAnnotaions", "RuntimeInisibleAnnotaions", "-t", "-t");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1593), "RuntimeInisibleAnnotaions", "RuntimeInisibleAnnotaions", "-t", "-t");
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter1.visitEnd();
      Attribute attribute0 = new Attribute("-t");
      fieldWriter1.visitAttribute(attribute0);
      fieldWriter0.visitEnd();
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1593), "RuntimeInisibleAnnotaions", "RuntimeInisibleAnnotaions", "-t", "-t");
      fieldWriter0.visitAnnotation("RuntimeInisibleAnnotaions", true);
      fieldWriter0.visitEnd();
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put12(1927, 131072);
      fieldWriter0.put(byteVector1);
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter0.visitEnd();
      int int0 = fieldWriter1.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131077);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1593), "RuntimeInisibleAnnotaions", "RuntimeInisibleAnnotaions", "-t", "-t");
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter1.getSize();
      int int0 = Type.INT;
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HV41emGM#");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "HV41emGM#", "HV41emGM#", (String) null, "HV41emGM#");
      fieldWriter0.getSize();
      Object object0 = new Object();
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 1, "<)_MPmlV+5U^G", "UOVIOUH1\"(qWyOvffd'", "HV41emGM#", "");
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      classWriter0.visitSource("-t", "HV41emGM#");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1593), "RuntimeInisibleAnnotaions", "RuntimeInisibleAnnotaions", "-t", "-t");
      fieldWriter0.visitAnnotation("long", false);
      fieldWriter0.visitAnnotation("-t", false);
      fieldWriter0.visitEnd();
      ByteVector byteVector0 = classWriter0.pool;
      System.setCurrentTimeMillis(131072);
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("HV41emGM#");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.index = 0;
      classWriter0.visitSource("HV41emGM#", "-t");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "HV41emGM#", "", "HV41emGM#", "HV41emGM#");
      fieldWriter0.visitEnd();
      ByteVector byteVector0 = new ByteVector();
      byteVector0.put12((-719), 0);
      fieldWriter0.put(byteVector0);
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter1.put(byteVector0);
      fieldWriter1.visitEnd();
      fieldWriter0.getSize();
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1593), "RuntimeInisibleAnnotaions", "RuntimeInisibleAnnotaions", "-t", "-t");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "RuntimeInisibleAnnotaions";
      stringArray0[1] = "-t";
      stringArray0[2] = "";
      stringArray0[3] = "-t";
      stringArray0[4] = "A+SRD";
      classWriter0.visit((-1593), (-1593), "-t", "RuntimeInisibleAnnotaions", "", stringArray0);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-1593), "A+SRD", "boolean", "The wildcard must not be null", "RuntimeInisibleAnnotaions");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter1.put(byteVector0);
      fieldWriter1.put(byteVector0);
      assertNotSame(fieldWriter1, fieldWriter0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131077);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$");
      classWriter0.newLong(2);
      classWriter0.newFieldItem("-t", "/12FX@2", "-t");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      classWriter0.version = (-1593);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1593), "RuntimeInisibleAnnotaions", "RuntimeInisibleAnnotaions", "-t", "-t");
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter0.getSize();
      System.setCurrentTimeMillis(131077);
      ByteVector byteVector0 = null;
      try {
        byteVector0 = new ByteVector((-1593));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ByteVector", e);
      }
  }
}
