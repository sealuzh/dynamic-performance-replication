/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:50:53 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.EigenDecompositor;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositor_ESTest extends EigenDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(2);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      EigenDecompositor eigenDecompositor0 = null;
      try {
        eigenDecompositor0 = new EigenDecompositor(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(5, 5, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix.random(5, 5, mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(5, 5, mockRandom1);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(3, 3);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, (double)3, (double)3, (-902.532779513), (double)3).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = rowMajorSparseMatrix0.transform(matrixFunction0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      eigenDecompositor0.decompose();
      assertEquals((-902.532779513), matrix0.min(), 0.01);
      assertEquals(3.0, matrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(5, 5, mockRandom0);
      assertNotNull(denseMatrix0);
      assertEquals(5, denseMatrix0.columns());
      assertEquals(5, denseMatrix0.rows());
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertNotNull(eigenDecompositor0);
      assertEquals(5, denseMatrix0.columns());
      assertEquals(5, denseMatrix0.rows());
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(5, denseMatrix0.columns());
      assertEquals(5, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(3, 3);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, (double)3, (double)3, (double)3, (double)3).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.transform(matrixFunction0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(cRSMatrix0);
      assertNotNull(eigenDecompositor0);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(matrixArray0);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(3, 18.19);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(18.19, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, 18.19, 18.19, Double.NEGATIVE_INFINITY, (double)3).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.transform(matrixFunction0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(18.19, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(Double.NEGATIVE_INFINITY, cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(18.19, cRSMatrix0.max(), 0.01);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(cRSMatrix0);
      assertNotNull(eigenDecompositor0);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(18.19, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(Double.NEGATIVE_INFINITY, cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(18.19, cRSMatrix0.max(), 0.01);
      
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(3, 0.9999999999999986);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.9999999999999986, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.1102230246251565E-14, (double)3, 0.9999999999999986, 1.1102230246251565E-14, 0.9999999999999986).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.transform(matrixFunction0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.9999999999999986, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(3.0, cRSMatrix0.max(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(cRSMatrix0);
      assertNotNull(eigenDecompositor0);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.9999999999999986, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(3.0, cRSMatrix0.max(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(matrixArray0);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.9999999999999986, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(3.0, cRSMatrix0.max(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Integer integer0 = new Integer(17);
      assertNotNull(integer0);
      assertEquals(17, (int)integer0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(17, 17, mockRandom0);
      assertNotNull(denseMatrix0);
      assertEquals(17, denseMatrix0.columns());
      assertEquals(17, denseMatrix0.rows());
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertNotNull(eigenDecompositor0);
      assertEquals(17, denseMatrix0.columns());
      assertEquals(17, denseMatrix0.rows());
      
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }
}
