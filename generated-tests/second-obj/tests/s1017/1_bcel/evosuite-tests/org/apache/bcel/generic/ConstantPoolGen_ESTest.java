/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:54:22 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.ObjectStreamConstants;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.ReferenceType;
import org.apache.bcel.generic.Type;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(0.0F);
      constantPoolGen0.addDouble((-2542.771));
      int int0 = constantPoolGen0.addInteger(2);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Double.BYTES;
      int int1 = constantPoolGen0.getSize();
      assertEquals(1, int1);
      
      int int2 = constantPoolGen0.lookupMethodref("[srpsQj+sbWa", "[srpsQj+sbWa", "InnerClasses(");
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1055), (-1055));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantMethodHandle0.setReferenceKind((-800));
      String string0 = "HxfM6Nl~inBfH5NfSvX";
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupInterfaceMethodref("HxfM6Nl~inBfH5NfSvX", (String) null, (String) null);
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref((String) null, "HxfM6Nl~inBfH5NfSvX", "x$0;z~k%i2c%' must be non-negative/ [Constraint by JustIce as an analogon to the single-slot xLOAD/xSTORE instructions; may not happen anyway/]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupString("`i6");
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(3632, 1272);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3632
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(2.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(254, 254);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantClass constantClass0 = new ConstantClass(773);
      constantArray0[2] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupUtf8("");
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(141, 141);
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupDouble(0.0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((-614L));
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-273), (-273));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[1] = (Constant) constantNameAndType1;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[2] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -273
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(3, 3);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ObjectType objectType0 = Type.STRING;
      constantPoolGen0.addClass(objectType0);
      int int0 = constantPoolGen0.addClass(objectType0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstant(0);
      constantPoolGen0.lookupFieldref("{~ZqysS", "{~ZqysS", "{~ZqysS");
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref("{~ZqysS", "{T", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addMethodref("", "", "");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      constantPoolGen0.addInteger(1454);
      constantPoolGen0.addString("Y>7sL#Vnu,w6");
      constantPoolGen0.lookupClass("javSa.lang.Objecd");
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(24, 24);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger((-6838));
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addLong((-1716L));
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong(24);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addLong(24);
      assertEquals(1, int0);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(5390.9014F);
      int int0 = constantPoolGen0.lookupLong((-4185L));
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(24, 24);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantLong constantLong0 = new ConstantLong(24);
      constantArray0[1] = (Constant) constantLong0;
      ConstantInteger constantInteger0 = new ConstantInteger((-6838));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addLong((-1L));
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = 227;
      constantPoolGen0.lookupMethodref("&", "&", "&");
      ConstantLong constantLong0 = new ConstantLong((-2826L));
      constantLong0.copy();
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant(256, constantLong0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 256
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "4QD3cUi3*y";
      constantPoolGen0.lookupInterfaceMethodref("-:L^:-:L^:dup_x1", "zC;&E", "zC;&E");
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("l1-Qy/mw(&");
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      constantArray0[8] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(9, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger((-816));
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantFloat0, constantPoolGen1);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("8|w,+Twtvdc7~9", "0'7_spVx");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 0'7_spVx
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1044));
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1044), (-1044));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = ObjectStreamConstants.baseWireHandle;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, ";FUtwe");
      constantMethodType0.clone();
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(8257536, 8257536);
      constantMethodHandle0.setReferenceIndex((-1044));
      PUSH pUSH1 = new PUSH(constantPoolGen0, ";FUtwe");
      try { 
        constantPool0.constantToString(130, (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 130. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2021161078), 3);
      ConstantClass constantClass0 = new ConstantClass((-3683));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(138, 163);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupInteger(138);
      assertEquals((-1), int0);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1055), (-1055));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantMethodHandle0.setReferenceKind((-1046));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantString constantString0 = new ConstantString(0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1523, (-1055));
      ObjectType objectType0 = Type.OBJECT;
      ConstantFieldref constantFieldref1 = new ConstantFieldref((-1055), (-1055));
      constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantMethodHandle0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = -1046, reference_index = -1055)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(797, (-1630));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantInteger constantInteger0 = new ConstantInteger((-1630));
      ConstantDouble constantDouble0 = new ConstantDouble(797);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(246, 797);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addDouble(1.0);
      constantPoolGen0.addLong(4);
      constantPoolGen0.lookupInteger((-67));
      constantPoolGen0.addInteger(6);
      int int0 = constantPoolGen0.addInteger(2234);
      assertEquals(10, constantPoolGen0.getSize());
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("r&", "r&", "r&");
      assertEquals(5, constantPoolGen0.getSize());
      
      Method method0 = new Method();
      method0.isInterface(false);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen1, false);
      constantPoolGen1.addInteger(4);
      int int0 = constantPoolGen1.lookupInteger(4);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRING;
      byte[] byteArray0 = new byte[2];
      PUSH pUSH0 = new PUSH(constantPoolGen0, ";tw");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPool0.copy();
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      OperandStack operandStack0 = new OperandStack((byte)0);
      ConstantInteger constantInteger0 = new ConstantInteger(3995);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantInteger constantInteger2 = new ConstantInteger(constantInteger0);
      MethodGen.getComparator();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      constantPoolGen1.addConstant(constantInteger0, constantPoolGen0);
      constantPool1.copy();
      int int0 = Pattern.LITERAL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(3995, 5);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantFieldref1.copy();
      constantPoolGen1.lookupMethodref(";tw", ";tw", "|<ooqZSm%|-)&<X");
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addConstant(constantInteger0, constantPoolGen0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(", ", "!F[");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // !F[
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1044));
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1044), 1027);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.lookupInterfaceMethodref("Unknown constant type ", "Unknown constant type ", "Unknown constant type ");
      ConstantLong constantLong0 = new ConstantLong((-1044));
      constantMethodType0.clone();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantPool1);
      constantPoolGen1.addLong((-1716L));
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1), 234);
      Constant constant0 = constantNameAndType0.copy();
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constant0, constantPoolGen2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(0, 0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("h/lFLa'ly%)r7p}2P)v");
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      ConstantClass constantClass0 = new ConstantClass(94);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addLong(2);
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen2.addConstant(constantMethodref1, constantPoolGen3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ARETURN aRETURN0 = new ARETURN();
      aRETURN0.setLength((-2084322362));
      aRETURN0.getType();
      Constant[] constantArray0 = new Constant[3];
      constantPoolGen0.addInteger((-2115903004));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPoolGen0.addFloat(1);
      constantPool0.copy();
      String string0 = "' is not of type '";
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantClass constantClass0 = new ConstantClass((-871));
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantClass0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -871
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addInteger((-3125));
      int int0 = Byte.BYTES;
      constantPoolGen0.toString();
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Constant[] constantArray0 = new Constant[3];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2356), (-2356));
      ObjectType objectType0 = Type.OBJECT;
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2356
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = Type.STRINGBUFFER;
      constantPoolGen0.addClass(objectType0);
      ConstantLong constantLong0 = new ConstantLong((-1L));
      int int0 = constantPoolGen0.addConstant(constantLong0, constantPoolGen0);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Constant[] constantArray0 = new Constant[16];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("^!n?;_Il[83:^!n?;_Il[83:^!n?;_Il[83%M&8*-k{_u4:/");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-246), (-246));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantInteger constantInteger0 = new ConstantInteger(238);
      MethodGen.getComparator();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantArray0[0], constantPoolGen1);
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantFloat constantFloat2 = new ConstantFloat(constantFloat0);
      ConstantFloat constantFloat3 = new ConstantFloat(constantFloat2);
      constantFloat2.getConstantValue(constantPool1);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(16, (-1036));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(238, 16);
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic(constantInvokeDynamic1);
      ConstantFloat constantFloat4 = new ConstantFloat(1128);
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant(1024, constantUtf8_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1024
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1044));
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addFloat((-1044));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = constantPoolGen0.addFloat((-963.1802F));
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1044));
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1044), (-1044));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.size = (-1044);
      // Undeclared exception!
      try { 
        constantPoolGen0.addFloat(0.0F);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(15, 15);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1272, 1272);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("", "", "");
      int int0 = Character.MAX_RADIX;
      constantPoolGen0.getConstantPool();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      constantPoolGen0.addFieldref("", "", "");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(797, (-1630));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantInteger constantInteger0 = new ConstantInteger((-1630));
      ConstantDouble constantDouble0 = new ConstantDouble(797);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(246, 233);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addDouble(797);
      constantPoolGen0.getSize();
      int int0 = constantPoolGen0.addClass("a_Wq,d:u9JvTrkxp");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(4);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1044));
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addFloat(0.0F);
      PUSH pUSH0 = new PUSH(constantPoolGen0, 2440.9559);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      instructionList0.setPositions(false);
      pUSH0.getInstructionList();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addFloat(0.0F);
      constantMethodType0.toString();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      InstructionList instructionList1 = null;
      try {
        instructionList1 = new InstructionList((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance("\t<");
      byte[] byteArray0 = new byte[2];
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q9gFE~)");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constantPoolGen0.lookupNameAndType(".<`_(MyQ9rH]~", "\t<");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantInteger constantInteger0 = new ConstantInteger((-2082408346));
      ConstantInteger constantInteger1 = new ConstantInteger(47);
      MethodGen.getComparator();
      constantInteger1.clone();
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2082408346), (-2082408346));
      constantPoolGen0.addString("");
      LocalVariables localVariables0 = new LocalVariables(9);
      // Undeclared exception!
      try { 
        localVariables0.get((-1579));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1579
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFieldref("", "", "' must be non-negative. [Constraint by JustIce as an analogon to the single-slot xLOAD/xSTORE instructions; may not happen anyway.]");
      int int0 = new Integer((-1));
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "' must be non-negative. [Constraint by JustIce as an analogon to the single-slot xLOAD/xSTORE instructions; may not happen anyway.]";
      stringArray0[6] = "";
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString((-1));
      constantArray0[0] = (Constant) constantString0;
      ConstantString constantString1 = new ConstantString((-1));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantString1, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.size;
      String string0 = "J\"C\\;h[|'59s";
      int int1 = Pattern.UNICODE_CHARACTER_CLASS;
      constantPoolGen0.lookupUtf8("J\"C;h[|'59s");
      constantPoolGen0.addFieldref("J\"C;h[|'59s", "W3Sr{^!:)mnu}^", "W3Sr{^!:)mnu}^");
      constantPoolGen0.addFloat((-1));
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantDouble1, constantPoolGen1);
      constantPoolGen1.getConstantPool();
      // Undeclared exception!
      try { 
        constantPoolGen1.getConstant((-1893));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1893
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRING;
      constantPoolGen0.addInterfaceMethodref(":<t\"78", ":<t\"78", ".<`_(MyQ9rH]~");
      ConstantFloat constantFloat0 = new ConstantFloat(5);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      byte[] byteArray0 = new byte[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(5, (byte)0);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant constant0 = constantPool0.getConstant(5);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(5, 65535);
      constantPoolGen0.lookupNameAndType(".<`_(MyQ9rH]~", ":<t\"78");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantInteger constantInteger0 = new ConstantInteger((-2082408346));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      MethodGen.getComparator();
      constantPoolGen1.addConstant(constant0, constantPoolGen0);
      constantPoolGen0.lookupInteger(5);
      constantInteger0.clone();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(5, 5);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      // Undeclared exception!
      try { 
        constantFieldref0.getClass(constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected class `CONSTANT_Class' at index 5 and got CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = " Fr&&4>YyAa7+_Q KX*:e&@lDv'wl'Tg@2l/\\f)@?";
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRING;
      PUSH pUSH0 = new PUSH(constantPoolGen0, "avSa.lang.Object");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      Boolean boolean0 = new Boolean("avSa.lang.Object");
      constantPool0.copy();
      constantPoolGen1.toString();
      MethodGen.getComparator();
      int int0 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      ConstantFloat constantFloat0 = new ConstantFloat((-327.76538F));
      assertEquals((-327.76538F), constantFloat0.getBytes(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.UNICODE_CASE;
      ObjectType objectType0 = Type.OBJECT;
      constantPoolGen0.addInterfaceMethodref("avSa.lang.bject", "avSa.lang.bject", "avSa.lang.bject");
      byte[] byteArray0 = new byte[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1636, (byte)0);
      constantMethodHandle0.setReferenceIndex((byte)46);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantMethodHandle0.copy();
      constantMethodHandle0.toString();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantInteger constantInteger0 = new ConstantInteger((-1162));
      constantPoolGen0.adjustSize();
      assertEquals(6, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "";
      constantPoolGen0.addMethodref("", "", "");
      int int0 = ObjectStreamConstants.baseWireHandle;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(239, (-2082408384));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      PUSH pUSH0 = new PUSH(constantPoolGen1, "");
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(8257536, 8257536);
      constantMethodHandle0.setReferenceIndex(239);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      constantPoolGen0.getFinalConstantPool();
      OperandStack operandStack0 = new OperandStack((-2082408384));
      ConstantInteger constantInteger0 = new ConstantInteger(8257536);
      constantInteger0.clone();
      MethodGen.getComparator();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(745);
      constantMethodType0.clone();
      constantPoolGen1.addMethodref("", "", "");
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref((String) null, (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1044));
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1044), (-1044));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantMethodHandle0.toString();
      constantPoolGen0.addFloat(0.0F);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPoolGen0.addMethodref("BS5", "BS5", "BS5");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(3, 9);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      int int0 = Pattern.LITERAL;
      constantFieldref0.copy();
      constantPoolGen0.lookupMethodref("BS5", "BS5", "BS5");
      constantPoolGen0.lookupString("B7opSz{`");
      int int1 = Short.BYTES;
      constantPoolGen0.setConstant(7, constantFieldref1);
      assertEquals(8, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addFieldref("", "", "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Constant constant0 = constantPool0.getConstant(4);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = Double.MIN_EXPONENT;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPoolGen0.toString();
      constantPool0.toString();
      Constant.getComparator();
      int int1 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      constantPoolGen0.addConstant(constant0, constantPoolGen0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      LocalVariables localVariables0 = new LocalVariables(4);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      localVariables0.merge(localVariables1);
      LocalVariables localVariables2 = null;
      try {
        localVariables2 = new LocalVariables((-516));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }
}
