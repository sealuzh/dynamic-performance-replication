/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 22:18:41 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.Html;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.PlainText;
import us.codecraft.webmagic.selector.RegexSelector;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.selector.Selector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Page_ESTest extends Page_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Page page0 = Page.fail();
      Page page1 = page0.setRawText(", headers=");
      page1.setCharset(", headers=");
      Request request0 = new Request("W?4A}0..;L");
      Request request1 = request0.addHeader("(?is)<!DOCTYPE.*?>", "TdS-7iEXoy%y|U8N;3");
      Request request2 = request1.setCharset("<489us[3'^%r");
      Request request3 = request2.setMethod("");
      Request request4 = request3.setBinaryContent(false);
      page0.addTargetRequest(request4);
      page1.setHtml((Html) null);
      // Undeclared exception!
      try { 
        page1.addTargetRequest(", headers=");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Page page0 = Page.fail();
      page0.setCharset("Smart content can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
      page0.setSkip(true);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      page0.setHeaders(hashMap0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)0;
      page0.setBytes(byteArray0);
      page0.setDownloadSuccess(false);
      page0.setCharset("N[t&<vZc@iWF=fPJwK");
      page0.isDownloadSuccess();
      page0.getHeaders();
      assertFalse(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Page page0 = new Page();
      page0.putField("illegal encoding ", "illegal encoding ");
      Page page1 = page0.setSkip(false);
      page1.getHeaders();
      page1.setHeaders((Map<String, List<String>>) null);
      Request request0 = new Request("");
      Request request1 = request0.setCharset("");
      Request request2 = request1.setBinaryContent(false);
      Request request3 = request2.addCookie("", "");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request4 = request3.setExtras(hashMap0);
      page0.setRequest(request4);
      // Undeclared exception!
      try { 
        page1.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(true);
      Request request0 = new Request("zC%dZ?654{0LB7");
      Request request1 = request0.setBinaryContent(true);
      String string0 = page0.toString();
      assertEquals("Page{request=null, resultItems=ResultItems{fields={}, request=null, skip=true}, html=null, json=null, rawText='null', url=null, headers=null, statusCode=200, downloadSuccess=false, targetRequests=[], charset='null', bytes=null}", string0);
      
      Request request2 = request1.setPriority((-1L));
      Request request3 = request2.addCookie("_cycle_tried_times", "HU_8^#YuA");
      Request request4 = request3.setUrl("_cycle_tried_times");
      request4.setMethod("_cycle_tried_times");
      page1.addTargetRequest(request4);
      Page page2 = Page.fail();
      page2.getTargetRequests();
      int int0 = page2.getStatusCode();
      assertEquals(200, int0);
      
      page2.setSkip(true);
      assertEquals(200, page2.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Page page0 = Page.fail();
      Json json0 = page0.getJson();
      assertFalse(page0.isDownloadSuccess());
      assertNotNull(json0);
      assertEquals(200, page0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Page page0 = Page.fail();
      page0.getRawText();
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Page page0 = Page.fail();
      assertEquals(200, page0.getStatusCode());
      
      page0.setStatusCode(0);
      boolean boolean0 = page0.isDownloadSuccess();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Page page0 = new Page();
      Page page1 = page0.setSkip(true);
      Request request0 = new Request("IUS$TAz!Q(eoGcw");
      Object object0 = new Object();
      Request request1 = request0.putExtra("Request{url='", object0);
      request1.addHeader("_cycle_tried_times", "cDIxyUur`6Lje6");
      page0.setHtml((Html) null);
      page0.getJson();
      Request request2 = request1.setCharset("NVJAr9I6l69");
      Request request3 = request2.setBinaryContent(true);
      page1.addTargetRequest(request1);
      Request request4 = request3.setPriority(2919L);
      request4.toString();
      page0.setRequest(request4);
      Json json0 = page0.getJson();
      assertNotNull(json0);
      
      page1.getBytes();
      page0.setSkip(true);
      boolean boolean0 = page0.isDownloadSuccess();
      assertTrue(boolean0);
      
      page0.putField("IUS$TAz!Q(eoGcw", request0);
      int int0 = page0.getStatusCode();
      assertEquals(200, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Page page0 = new Page();
      Page page1 = page0.setRawText("");
      page1.getCharset();
      // Undeclared exception!
      try { 
        page1.addTargetRequest("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Page page0 = Page.fail();
      Page page1 = page0.setRawText("");
      page0.getHeaders();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)34;
      page1.setBytes(byteArray0);
      page1.setRawText("");
      page0.setSkip(false);
      page0.setStatusCode(0);
      page0.isDownloadSuccess();
      page0.getUrl();
      Page.fail();
      // Undeclared exception!
      try { 
        page1.addTargetRequest((String) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Page page0 = Page.fail();
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      AndSelector andSelector0 = new AndSelector(linkedList0);
      List<String> list0 = andSelector0.selectList("");
      page0.addTargetRequests(list0);
      int int0 = page0.getStatusCode();
      assertEquals(200, int0);
      assertFalse(page0.isDownloadSuccess());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Page page0 = Page.fail();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      page0.addTargetRequests((List<String>) linkedList0);
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Page page0 = Page.fail();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      page0.addTargetRequests((List<String>) linkedList0, 424L);
      page0.getResultItems();
      assertEquals(200, page0.getStatusCode());
      assertFalse(page0.isDownloadSuccess());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Page page0 = Page.fail();
      PlainText plainText0 = new PlainText("");
      List<String> list0 = new LinkedList<String>();
      page0.setUrl(plainText0);
      page0.setRawText("");
      Page page1 = new Page();
      page1.addTargetRequests(list0, 0L);
      assertTrue(page1.isDownloadSuccess());
      
      page0.setBytes((byte[]) null);
      assertFalse(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
  }
}
