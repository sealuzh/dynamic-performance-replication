/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 16:25:28 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.CharArrayReader;
import java.io.File;
import java.io.Reader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONReaderScanner_ESTest extends JSONReaderScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 183);
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = 'u';
      charArray0[2] = '1';
      charArray0[3] = 'r';
      charArray0[4] = 'V';
      charArray0[5] = '&';
      charArray0[6] = 'N';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo((-872), (-872), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      boolean boolean0 = jSONReaderScanner0.charArrayCompare(charArray0);
      assertFalse(boolean0);
      
      jSONReaderScanner0.close();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 128;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 128, 2);
      jSONReaderScanner0.subString(2, 2);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.next();
      jSONReaderScanner0.sp = 128;
      SymbolTable symbolTable0 = new SymbolTable(2);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("\u0000\u0000", 0, (-68), 0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse false");
      int int0 = 66;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("d5Gr<Ic}x", 13);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(13, (-2629));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2629
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]9", 1639);
      char char0 = jSONReaderScanner0.charAt(122);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(']', jSONReaderScanner0.getCurrent());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.bytesValue();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      int int0 = 919;
      int int1 = (-4318);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 919, (-4318));
      jSONReaderScanner0.bytesValue();
      int int2 = 0;
      int int3 = (-2948);
      int int4 = 70;
      SymbolTable symbolTable0 = new SymbolTable(70);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol((String) null, 16384, 0, 1616, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("m}B$|{/jCH`kSQf!N$%", 1331);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      Locale.lookup(linkedList0, list2);
      jSONReaderScanner0.setLocale((Locale) null);
      jSONReaderScanner0.sub_chars(1331, 1331);
      assertEquals('m', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '?';
      charArray0[1] = 's';
      charArray0[2] = 'C';
      charArray0[3] = ')';
      charArray0[4] = '2';
      charArray0[5] = '\"';
      charArray0[6] = 'j';
      charArray0[7] = 'I';
      charArray0[8] = '@';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1111, 1111);
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse false");
      int int0 = 66;
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.nextToken(66);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.bytesValue();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("exD?|R2jY{p95qDU\"d");
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals("", string0);
      
      jSONReaderScanner0.isBlankInput();
      assertEquals('e', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&hskrqnQzbn");
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = '';
      jSONReaderScanner0.scanInt('');
      jSONReaderScanner0.scanFieldInt(charArray0);
      charArray0[2] = 'y';
      charArray0[3] = 'm';
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.stringVal();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-699));
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = 'g';
      charArray0[2] = 'k';
      charArray0[3] = '.';
      charArray0[4] = 'R';
      charArray0[5] = 'Y';
      charArray0[6] = '<';
      charArray0[7] = 'm';
      charArray0[8] = '<';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      char[] charArray1 = new char[5];
      charArray1[0] = '6';
      charArray1[1] = 'K';
      charArray1[2] = '8';
      charArray1[3] = '-';
      charArray1[4] = '/';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(97, charArray1, (-699), 97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.sp = 2492;
      jSONReaderScanner0.subString(0, 0);
      jSONReaderScanner0.copyTo(2985, 0, charArray0);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.indexOf('/', 1976);
      jSONReaderScanner0.next();
      jSONReaderScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(0, (-158));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -158
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]9");
      jSONReaderScanner0.np = 1639;
      char char0 = File.separatorChar;
      String string0 = jSONReaderScanner0.numberString();
      assertEquals("", string0);
      
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertFalse(boolean0);
      
      jSONReaderScanner0.close();
      assertEquals(']', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      int int0 = jSONReaderScanner0.indexOf(';', 2559);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = 'M';
      charArray0[4] = ';';
      charArray0[5] = '@';
      charArray0[6] = '@';
      charArray0[7] = '@';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 71, 34);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      StringReader stringReader0 = new StringReader("");
      boolean boolean0 = jSONReaderScanner0.hasSpecial;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse false");
      int int0 = Calendar.SHORT_STANDALONE;
      jSONReaderScanner0.nextToken(65536);
      boolean boolean0 = jSONReaderScanner0.hasSpecial;
      jSONReaderScanner0.charAt(65536);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse false");
      jSONReaderScanner0.bp = 73;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt(3891);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[a8a!(n8?kNt<", (-1254));
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = '%';
      charArray0[2] = 'k';
      charArray0[3] = '!';
      charArray0[4] = ' ';
      charArray0[5] = '*';
      charArray0[6] = 'X';
      charArray0[7] = '&';
      Locale locale0 = Locale.CHINESE;
      jSONReaderScanner0.setLocale(locale0);
      charArray0[8] = 'Q';
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.next();
      char char0 = jSONReaderScanner0.charAt(941);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 76);
      jSONReaderScanner0.ch = '}';
      jSONReaderScanner0.np = 65;
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.isBlankInput();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(65, 20, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[a8a!(n8?kNt<", (-1254));
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = '%';
      char char0 = 'k';
      SymbolTable symbolTable0 = new SymbolTable(15);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol((-1254), (-1254), 65536, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 76);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.ch = '}';
      jSONReaderScanner0.np = 65;
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isBlankInput();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(65, 20, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse false");
      int int0 = Calendar.SHORT_STANDALONE;
      jSONReaderScanner0.bp = 66;
      jSONReaderScanner0.nextToken(66);
      jSONReaderScanner0.close();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken(13);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse false");
      int int0 = Calendar.SHORT_STANDALONE;
      jSONReaderScanner0.bp = 13;
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken(66);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.isBlankInput();
      char char0 = jSONReaderScanner0.next();
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[a8a!(n8?kNt<", (-1254));
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = '%';
      jSONReaderScanner0.matchStat = (int) 'k';
      jSONReaderScanner0.nextToken((-1254));
      jSONReaderScanner0.isEOF();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 107);
      jSONReaderScanner1.matchField(charArray0);
      byte[] byteArray0 = jSONReaderScanner1.bytesValue();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(83);
      assertEquals((byte)83, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" T=r;290o");
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[a8a!(n8?kNt<");
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" 1*+-7Ca4Pw<}");
      int int0 = Calendar.SHORT_STANDALONE;
      jSONReaderScanner0.nextToken(4283);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.numberString();
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertEquals(2, jSONReaderScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":9+L");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.indexOf('O', 65279);
      jSONReaderScanner0.numberString();
      int int0 = 3911;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("B");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.indexOf('n', 65536);
      jSONReaderScanner0.numberString();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^0JX<{!");
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      jSONReaderScanner0.indexOf('-', 86);
      assertTrue(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.close();
      assertEquals('^', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      jSONReaderScanner0.charAt(770);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanIdent();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("T.D\"P");
      jSONReaderScanner0.longValue();
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = 'F';
      charArray0[2] = '\"';
      charArray0[3] = '%';
      charArray0[4] = 'Z';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 14, (-3048));
      jSONReaderScanner1.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("S\u0006a/FOQVuzM");
      jSONReaderScanner0.hasSpecial = true;
      jSONReaderScanner0.nextToken((-85));
      assertEquals(18, jSONReaderScanner0.token());
      
      jSONReaderScanner0.numberString();
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals("S", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":A+L");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":A+L");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.hasSpecial = true;
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.numberString();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EOF");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.nextToken(2498);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(2498, (-65));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -65
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)28;
      byteArray0[8] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONReaderScanner0.scanIdent();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8!0i8?kNtJ");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken(9);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.charAt(1452);
      char[] charArray0 = new char[9];
      charArray0[0] = '\u001A';
      charArray0[1] = '\u001A';
      charArray0[2] = '\u001A';
      charArray0[3] = '\u001A';
      charArray0[4] = '\u001A';
      charArray0[5] = '=';
      charArray0[6] = '\u001A';
      charArray0[7] = '\u001A';
      charArray0[8] = '\u001A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0, 2072);
      jSONReaderScanner1.nextToken(0);
      int int0 = jSONReaderScanner0.indexOf('>', 87);
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals((-1), int0);
  }
}
