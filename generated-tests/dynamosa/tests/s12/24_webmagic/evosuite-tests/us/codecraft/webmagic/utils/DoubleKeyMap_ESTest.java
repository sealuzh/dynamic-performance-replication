/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 22:06:24 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<String, String, Map<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<String, Integer>>();
      doubleKeyMap0.put("UO=^*o>:ib\"", "wrong proto type map ", (Map<String, Integer>) null);
      Map<String, Integer> map0 = doubleKeyMap0.remove("UO=^*o>:ib\"", "wrong proto type map ");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Object, String>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Object, Object>(class0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = doubleKeyMap0.remove(hashMap0, (Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<HashMap<Object, Map<Object, String>>, Map<String, Object>> hashMap0 = new HashMap<HashMap<Object, Map<Object, String>>, Map<String, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Map<Object, String>>, String, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<Object, String>>, String, Object>(hashMap0, class0);
      Object object0 = doubleKeyMap0.remove((HashMap<Object, Map<Object, String>>) null, "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<String, Map<Object, Map<HashMap<Integer, Object>, Object>>, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Map<HashMap<Integer, Object>, Object>>, Map<Object, String>>();
      Map<Object, Map<HashMap<Integer, Object>, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, HashMap<Integer, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Integer, Object>, Object>(map0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<HashMap<String, Map<Object, String>>, Map<Integer, Object>> hashMap0 = new HashMap<HashMap<String, Map<Object, String>>, Map<Integer, Object>>();
      DoubleKeyMap<HashMap<String, Map<Object, String>>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Map<Object, String>>, Integer, Object>(hashMap0);
      Map<Integer, Object> map0 = doubleKeyMap0.remove((HashMap<String, Map<Object, String>>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<HashMap<Object, String>, Map<Object, Object>> hashMap0 = new HashMap<HashMap<Object, String>, Map<Object, Object>>();
      DoubleKeyMap<HashMap<Object, String>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Object, Object>(hashMap0);
      Map<Object, Map<String, Integer>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>(map0, class0);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Object>();
      Map<Object, Object> map1 = doubleKeyMap2.remove((Object) doubleKeyMap1);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<String, String, Map<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<String, Integer>>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      doubleKeyMap0.put((String) null, (String) null, (Map<String, Integer>) hashMap0);
      Map<String, Integer> map0 = doubleKeyMap0.get((String) null, (String) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<String, String, Map<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<String, Integer>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>();
      String string0 = doubleKeyMap1.put((Object) doubleKeyMap0, (Object) doubleKeyMap0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<String, String, Map<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<String, Integer>>();
      Map<String, Integer> map0 = doubleKeyMap0.get((String) null, (String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Object, Map<HashMap<Object, Object>, String>> hashMap0 = new HashMap<Object, Map<HashMap<Object, Object>, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, Object>, String>(hashMap0, class0);
      Map<HashMap<Object, Object>, String> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<String, String, Map<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<String, Integer>>();
      DoubleKeyMap<Object, HashMap<String, String>, Map<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, String>, Map<Object, String>>();
      Map<HashMap<String, String>, Map<Object, String>> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Map<String, String>> hashMap0 = new HashMap<String, Map<String, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put("FU4enY+8", "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<String, Map<Object, String>>, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Map<Object, String>>, String>((Map<String, Map<HashMap<String, Map<Object, String>>, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<String, Object, Map<Object, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, Map<Object, String>>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Integer, String>();
      DoubleKeyMap<HashMap<String, Object>, Object, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Object>, Object, String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = new Integer((-2564));
      doubleKeyMap1.put(hashMap0, (Object) integer0, "");
      String string0 = doubleKeyMap1.remove(hashMap0, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<String, String, Map<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<String, Integer>>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      doubleKeyMap0.put("UO=^*o>:ib\"", "UO=^*o>:ib\"", (Map<String, Integer>) hashMap0);
      Map<String, Integer> map0 = doubleKeyMap0.put("UO=^*o>:ib\"", "UO=^*o>:ib\"", (Map<String, Integer>) hashMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<String, String, Map<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<String, Integer>>();
      doubleKeyMap0.put("UO=^*o>:ib\"", "wrong proto type map ", (Map<String, Integer>) null);
      Map<String, Integer> map0 = doubleKeyMap0.get("UO=^*o>:ib\"", (String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<Object, Object>, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, Object>, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Object, Map<Map<String, Integer>, Integer>> hashMap0 = new HashMap<Object, Map<Map<String, Integer>, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<String, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, Integer>, Integer>(hashMap0, class0);
      DoubleKeyMap<Object, HashMap<String, Object>, HashMap<Integer, Map<Object, String>>> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, Object>, HashMap<Integer, Map<Object, String>>>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<Integer, Map<Object, String>> hashMap2 = doubleKeyMap1.get((Object) doubleKeyMap0, hashMap1);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<String, String, Map<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<String, Integer>>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      doubleKeyMap0.put("UO=^*o>:ib\"", "UO=^*o>:ib\"", (Map<String, Integer>) hashMap0);
      Map<String, Integer> map0 = doubleKeyMap0.remove("UO=^*o>:ib\"", "UO=^*o>:ib\"");
      assertEquals(0, map0.size());
  }
}
