/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 16:57:35 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noTransform();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      cacheControl_Builder0.noCache();
      cacheControl0.FORCE_CACHE.toString();
      Headers headers0 = null;
      // Undeclared exception!
      try { 
        CacheControl.parse((Headers) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.CacheControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl1.FORCE_CACHE.headerValue = "";
      cacheControl0.toString();
      cacheControl0.FORCE_CACHE.toString();
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      cacheControl2.headerValue = "";
      String string0 = cacheControl1.FORCE_NETWORK.toString();
      assertEquals("no-cache", string0);
      
      cacheControl1.FORCE_CACHE.toString();
      cacheControl0.minFreshSeconds();
      cacheControl2.headerValue = "";
      cacheControl2.headerValue = "!54Eo}$";
      String string1 = cacheControl1.toString();
      assertEquals("", string1);
      
      cacheControl1.noStore();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(Integer.MAX_VALUE, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noStore();
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder2.minFresh(59, timeUnit1);
      CacheControl cacheControl3 = cacheControl_Builder3.build();
      String string2 = cacheControl3.FORCE_CACHE.toString();
      assertEquals(Integer.MAX_VALUE, cacheControl3.maxStaleSeconds());
      assertFalse(cacheControl3.isPrivate());
      assertEquals(0, cacheControl3.minFreshSeconds());
      assertTrue(cacheControl3.onlyIfCached());
      assertEquals("", string2);
      
      cacheControl2.noStore();
      cacheControl_Builder1.onlyIfCached();
      cacheControl_Builder4.noStore();
      cacheControl_Builder0.onlyIfCached();
      boolean boolean0 = cacheControl1.noCache();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      int int0 = (-704);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxAge((-704), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -704
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("HvPHkmM6?4P.");
      Headers.Builder headers_Builder2 = headers_Builder1.removeAll("HvPHkmM6?4P.");
      Headers headers0 = headers_Builder2.build();
      headers0.values("");
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.FORCE_CACHE.headerValue = "HvPHkmM6?4P.";
      cacheControl0.toString();
      cacheControl0.FORCE_CACHE.toString();
      cacheControl0.isPrivate();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.onlyIfCached();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noCache();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.minFresh(0, timeUnit0);
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.noStore();
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.maxStale(0, timeUnit0);
      cacheControl_Builder5.minFresh(1062, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder6 = cacheControl_Builder5.minFresh(0, timeUnit1);
      CacheControl.Builder cacheControl_Builder7 = cacheControl_Builder6.noCache();
      assertSame(cacheControl_Builder1, cacheControl_Builder7);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(Integer.MAX_VALUE, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noCache();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noTransform();
      cacheControl_Builder0.noCache();
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      cacheControl_Builder1.minFresh(Integer.MAX_VALUE, timeUnit1);
      cacheControl_Builder1.onlyIfCached();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.minFresh(2, timeUnit0);
      cacheControl_Builder4.onlyIfCached();
      cacheControl_Builder3.noCache();
      CacheControl cacheControl0 = cacheControl_Builder3.build();
      cacheControl_Builder4.noCache();
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.noStore();
      cacheControl_Builder5.noCache();
      cacheControl_Builder5.onlyIfCached();
      cacheControl0.minFreshSeconds();
      int int0 = cacheControl0.sMaxAgeSeconds();
      cacheControl_Builder0.noTransform();
      CacheControl cacheControl1 = cacheControl_Builder3.build();
      assertTrue(cacheControl1.noStore());
      
      int int1 = cacheControl0.minFreshSeconds();
      assertEquals(172800, int1);
      
      int int2 = cacheControl0.maxAgeSeconds();
      assertTrue(int2 == int0);
      
      cacheControl0.noStore();
      int int3 = cacheControl0.maxStaleSeconds();
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
      assertFalse(cacheControl0.isPublic());
      assertEquals(Integer.MAX_VALUE, int3);
      assertFalse(cacheControl0.mustRevalidate());
      assertTrue(cacheControl0.onlyIfCached());
      assertTrue(cacheControl0.noTransform());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.FORCE_CACHE.headerValue = "Unexpected char %#04x at %d in %s value: %s";
      cacheControl0.FORCE_CACHE.headerValue = null;
      cacheControl0.FORCE_CACHE.headerValue = "Unexpected char %#04x at %d in %s value: %s";
      cacheControl0.noTransform();
      cacheControl0.toString();
      cacheControl0.isPrivate();
      cacheControl0.maxAgeSeconds();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      // Undeclared exception!
      try { 
        headers_Builder0.add((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.onlyIfCached();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(32, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noCache();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noStore();
      cacheControl_Builder0.onlyIfCached();
      cacheControl0.FORCE_CACHE.toString();
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.minFresh(44, timeUnit1);
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.onlyIfCached();
      TimeUnit timeUnit2 = TimeUnit.MILLISECONDS;
      cacheControl_Builder4.maxAge(32, timeUnit2);
      TimeUnit timeUnit3 = TimeUnit.NANOSECONDS;
      cacheControl_Builder5.minFresh(32, timeUnit3);
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      headers0.toMultimap();
      cacheControl0.noTransform();
      cacheControl_Builder3.noStore();
      CacheControl.parse(headers0);
      cacheControl0.maxAgeSeconds();
      cacheControl1.minFreshSeconds();
      TimeUnit timeUnit4 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        cacheControl_Builder2.maxStale((-1), timeUnit4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(Integer.MAX_VALUE, timeUnit0);
      CacheControl cacheControl0 = cacheControl_Builder1.build();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers headers0 = new Headers(headers_Builder0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.mustRevalidate());
      assertFalse(cacheControl1.isPublic());
      assertFalse(cacheControl1.noTransform());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.onlyIfCached());
      assertFalse(cacheControl1.isPrivate());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      
      cacheControl0.isPublic();
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noStore();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noTransform();
      cacheControl_Builder0.noCache();
      cacheControl_Builder1.noTransform();
      cacheControl_Builder0.noCache();
      cacheControl_Builder3.noTransform();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.onlyIfCached();
      cacheControl_Builder4.noTransform();
      cacheControl_Builder0.noCache();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("", biFunction0);
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      BiConsumer<Object, String> biConsumer0 = (BiConsumer<Object, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl1.toString();
      cacheControl0.FORCE_CACHE.toString();
      cacheControl0.FORCE_NETWORK.toString();
      cacheControl0.isPublic();
      cacheControl1.FORCE_CACHE.toString();
      cacheControl0.noCache();
      cacheControl1.noCache();
      cacheControl0.FORCE_CACHE.toString();
      cacheControl0.onlyIfCached();
      cacheControl0.mustRevalidate();
      cacheControl0.noCache();
      cacheControl0.noStore();
      cacheControl0.maxAgeSeconds();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        cacheControl_Builder1.maxAge((-140), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -140
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.set("cache-control", "UTF-32BE");
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      headers0.get("\r");
      cacheControl0.toString();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      cacheControl_Builder1.noTransform();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        cacheControl_Builder1.maxStale((-420), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -420
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.set("cache-control", "S.o*ArlGnS6E6^e;Y");
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("cache-control", "a~wTzZ6.4E:");
      Headers.Builder headers_Builder2 = headers_Builder0.set("cache-control", "max-age=");
      headers_Builder1.build();
      Headers headers0 = headers_Builder2.build();
      CacheControl.parse(headers0);
      int int0 = MockThread.MIN_PRIORITY;
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("a~wTzZ6.4E:", "+qVfzR");
      headers_Builder1.set("cache-control", "?o6K={+sRS|'7]4i7'Y");
      headers_Builder1.set("S.o*ArlGnS6E6^e;Y", "?o6K={+sRS|'7]4i7'Y");
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("a~wTzZ6.4E:", "+qVfzR");
      headers_Builder1.set("cache-control", "?o6K={+sRS|'7]4i7'Y");
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.isPrivate());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("cache-control", "no-store, ");
      Headers.Builder headers_Builder2 = headers_Builder1.set("&0<e=06r[fX{?HzzcE9", "&0<e=06r[fX{?HzzcE9");
      Headers headers0 = headers_Builder0.build();
      headers_Builder2.build();
      CacheControl.parse(headers0);
      int int0 = MockThread.MIN_PRIORITY;
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(459, timeUnit0);
      cacheControl_Builder1.noTransform();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.minFresh(321, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        cacheControl_Builder2.maxStale((-1630070702), timeUnit1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -1630070702
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }
}
