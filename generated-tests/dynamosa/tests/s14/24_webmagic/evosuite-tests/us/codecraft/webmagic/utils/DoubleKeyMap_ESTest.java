/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 00:36:31 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<String, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>(64);
      doubleKeyMap0.put("1nZ$.^", "1nZ$.^", hashMap0);
      HashMap<Object, String> hashMap1 = doubleKeyMap0.remove("1nZ$.^", "");
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, Map<Map<Object, String>, Object>> hashMap0 = new HashMap<Integer, Map<Map<Object, String>, Object>>(1062);
      Integer integer0 = new Integer(1062);
      HashMap<Map<Object, String>, Object> hashMap1 = new HashMap<Map<Object, String>, Object>();
      hashMap0.put(integer0, hashMap1);
      DoubleKeyMap<Integer, Map<Object, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, String>, Object>(hashMap0);
      Map<Map<Object, String>, Object> map0 = doubleKeyMap0.get(integer0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(class0);
      Integer integer0 = doubleKeyMap0.remove("", (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, String>>();
      HashMap<Object, String> hashMap0 = doubleKeyMap0.remove((String) null, "S");
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<String, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, String>>();
      DoubleKeyMap<Object, Object, HashMap<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, HashMap<Object, Integer>>();
      HashMap<Object, Integer> hashMap0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) doubleKeyMap0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Map<Object, String>>();
      Map<Integer, Map<Object, String>> map0 = doubleKeyMap0.remove((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<String, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, String>>();
      HashMap<Object, String> hashMap0 = doubleKeyMap0.put("", "", (HashMap<Object, String>) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      Map<Integer, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>(map0);
      Integer integer0 = new Integer(1);
      Object object0 = doubleKeyMap1.put(integer0, (Object) integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Map<Object, String>> hashMap0 = new HashMap<String, Map<Object, String>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(hashMap0, class0);
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>(class0);
      Integer integer0 = new Integer(986);
      Integer integer1 = doubleKeyMap1.put("us.codecraft.webmagic.utils.DoubleKeyMap", (Object) doubleKeyMap0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>();
      Integer integer0 = new Integer((-1464));
      String string0 = doubleKeyMap1.put((Object) doubleKeyMap0, integer0, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(class0);
      Map<Integer, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Object, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, String>(map0, class0);
      Integer integer0 = new Integer(0);
      String string0 = doubleKeyMap1.get(integer0, (Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>(class0);
      Map<Object, Map<Object, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>(map0, class0);
      Object object0 = new Object();
      Integer integer0 = doubleKeyMap1.get(object0, object0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Map<HashMap<String, Map<Object, String>>, String>> hashMap0 = new HashMap<String, Map<HashMap<String, Map<Object, String>>, String>>();
      DoubleKeyMap<String, HashMap<String, Map<Object, String>>, String> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Map<Object, String>>, String>(hashMap0);
      Map<HashMap<String, Map<Object, String>>, String> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Map<String, Integer>> hashMap0 = new HashMap<String, Map<String, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>(hashMap0, class0);
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((String) null, "", integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Map<Object, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, Map<Object, String>>((Map<String, Map<Object, Map<Object, String>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>();
      Map<Object, Integer> map0 = doubleKeyMap0.remove((Object) doubleKeyMap1);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>(hashMap0);
      Object object0 = new Object();
      Map<Object, Integer> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<String, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      doubleKeyMap0.put("us.codecraft.webmagic.utils.oubleKeyMap", (String) null, hashMap0);
      HashMap<Object, String> hashMap1 = doubleKeyMap0.remove("us.codecraft.webmagic.utils.oubleKeyMap", "us.codecraft.webmagic.utils.oubleKeyMap");
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<String, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>(64);
      doubleKeyMap0.put("1nZ$.^", "1nZ$.^", hashMap0);
      HashMap<Object, String> hashMap1 = doubleKeyMap0.put("1nZ$.^", "1nZ$.^", hashMap0);
      assertSame(hashMap0, hashMap1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer((-2020));
      DoubleKeyMap<Map<Object, String>, Integer, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, Integer, Map<Object, String>>();
      Map<Object, String> map0 = doubleKeyMap0.get((Map<Object, String>) null, integer0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Map<Object, String>> hashMap0 = new HashMap<String, Map<Object, String>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(hashMap0, class0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap0.put("", hashMap1);
      String string0 = doubleKeyMap0.get("", (Object) hashMap1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<String, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      doubleKeyMap0.put("us.codecr[ft.webmagic.utils.oubleKeyMap", "us.codecr[ft.webmagic.utils.oubleKeyMap", hashMap0);
      HashMap<Object, String> hashMap1 = doubleKeyMap0.remove("us.codecr[ft.webmagic.utils.oubleKeyMap", "us.codecr[ft.webmagic.utils.oubleKeyMap");
      assertSame(hashMap1, hashMap0);
  }
}
