/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 17:52:20 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("MERGE");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "MERGE");
      String[] stringArray0 = new String[5];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " as ", false, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("MERGECONSTRAINT \" as \" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (double) (-4);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 4", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(0, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("5T:0ea2$^[g)3");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5T:0ea2$^[g)3", defaultDBTable0, 2056, "5T:0ea2$^[g)3");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("5T:0ea2$^[g)3", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-39), "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      String string0 = SQLUtil.ownerDotComponent(tableContainer0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "NOl", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "rename", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT rename UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).getName();
      doReturn((String) null).when(compositeDBObject0).getObjectType();
      String string0 = SQLUtil.typeAndName(compositeDBObject0);
      assertEquals("null null", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.substituteMarkers("}/~8Wjm]6Wo/", "callcreate materialized view", object0);
      assertEquals("}/~8Wjm]6Wo/", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Character character0 = Character.valueOf('M');
      String string0 = SQLUtil.substituteMarkers("", "", character0);
      assertEquals("'M'", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "update0ljg/`yld%", (Object) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray1, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.renderValue(nameSpec0);
      assertEquals("NEVER", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, (NameSpec) null, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBSchema dBSchema0 = new DBSchema("zqI/Lh4Ek%");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("xT;lym,<X0VjR", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("zqI/Lh4Ek%", defaultDBTable0, (-1), "zqI/Lh4Ek%");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("ZQI/LH4EK%", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("eU{/U", defaultDBTable0, (-709), "eU{/U");
      defaultDBColumn0.setVersionColumn(true);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("EU{/U", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , )", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("lqa5W0qpYxV", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".null, .null, .null, .null, .null", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8XxVRo", defaultDBTable0, 1697, "FOREIGN KEY ");
      defaultDBColumn0.setVersionColumn(true);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("8XxVRo FOREIGN KEY  NULL", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("6rUU&5`:\"/S@>", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("(DNarjUW,Q_jw1y", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!`I");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertFalse(dBForeignKeyConstraint0.isNameDeterministic());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "ISs9jm4&_Y{4C!TzF`F", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ISs9jm4&_Y{4C!TzF`F PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter session");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , )", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).getName();
      doReturn((CompositeDBObject) null).when(compositeDBObject0).getOwner();
      String string0 = SQLUtil.ownerDotComponent(compositeDBObject0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.leftJoin("k9, *I;X.eFX{L", stringArray0, "W|`", (String) null, stringArray0);
      assertEquals("left join W|` as null on k9, *I;X.eFX{L.null = null.null and k9, *I;X.eFX{L.null = null.null and k9, *I;X.eFX{L.null = null.null and k9, *I;X.eFX{L.null = null.null and k9, *I;X.eFX{L.null = null.null and k9, *I;X.eFX{L.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.leftJoin("ZtP*jd&{P{?m5L{s", stringArray0, "eQ*'SbAXG(u{&aMK/", "", stringArray0);
      assertEquals("left join eQ*'SbAXG(u{&aMK/ as  on ZtP*jd&{P{?m5L{s.null = .null and ZtP*jd&{P{?m5L{s.null = .null and ZtP*jd&{P{?m5L{s.null = .null and ZtP*jd&{P{?m5L{s.null = .null and ZtP*jd&{P{?m5L{s.null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.leftJoin("update", stringArray0, (String) null, "3m0/!l<~i`?*k>%", stringArray0);
      assertEquals("left join null as 3m0/!l<~i`?*k>% on update.null = 3m0/!l<~i`?*k>%.null and update.null = 3m0/!l<~i`?*k>%.null and update.null = 3m0/!l<~i`?*k>%.null and update.null = 3m0/!l<~i`?*k>%.null and update.null = 3m0/!l<~i`?*k>%.null and update.null = 3m0/!l<~i`?*k>%.null", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("gE:'V{Cw1:,I{sK", stringArray0, "select * from", "<5]z^IuFa2/Gsfsrv ?", stringArray0);
      assertEquals("left join select * from as <5]z^IuFa2/Gsfsrv ? on ", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.leftJoin((String) null, stringArray0, "getCurrentIs1lationLevelStr", "_;1M7", stringArray0);
      assertEquals("left join getCurrentIs1lationLevelStr as _;1M7 on null.null = _;1M7.null", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.leftJoin("", stringArray0, "", "mF,{>", stringArray0);
      assertEquals("left join  as mF,{> on .null = mF,{>.null and .null = mF,{>.null and .null = mF,{>.null and .null = mF,{>.null and .null = mF,{>.null and .null = mF,{>.null and .null = mF,{>.null and .null = mF,{>.null and .null = mF,{>.null", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.join("left", "wO|8", stringArray0, "3", stringArray0[0], stringArray0);
      assertEquals("left join 3 as null on wO|8.null = null.null and wO|8.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.join("", "", stringArray0, "", "", stringArray0);
      assertEquals(" as  on .null = .null and .null = .null and .null = .null and .null = .null and .null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.join("gE:'V{Cw1:,I{sK", "QyJ", stringArray0, (String) null, "gE:'V{Cw1:,I{sK", stringArray0);
      assertEquals("gE:'V{Cw1:,I{sK join null as gE:'V{Cw1:,I{sK on QyJ.null = gE:'V{Cw1:,I{sK.null and QyJ.null = gE:'V{Cw1:,I{sK.null and QyJ.null = gE:'V{Cw1:,I{sK.null and QyJ.null = gE:'V{Cw1:,I{sK.null and QyJ.null = gE:'V{Cw1:,I{sK.null and QyJ.null = gE:'V{Cw1:,I{sK.null and QyJ.null = gE:'V{Cw1:,I{sK.null and QyJ.null = gE:'V{Cw1:,I{sK.null", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("rPP3X,u>t2>7", "left join select * from as <5]z^IuFa2/Gsfsrv ? on ", stringArray0, "left join select * from as <5]z^IuFa2/Gsfsrv ? on ", "updating ", stringArray0);
      assertEquals("rPP3X,u>t2>7 join left join select * from as <5]z^IuFa2/Gsfsrv ? on  as updating  on ", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.join((String) null, "select into0ljg/`yld%", stringArray0, "null. = , null.null, null.0lJg/`YlD%", "Ib:G", stringArray0);
      assertEquals("null. = , null.null, null.0lJg/`YlD% as Ib:G on select into0ljg/`yld%.null = Ib:G.null and select into0ljg/`yld%.null = Ib:G.null and select into0ljg/`yld%.null = Ib:G.null", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.innerJoin("alter index", stringArray0, (String) null, "", stringArray0);
      assertEquals("null as  on alter index.null = .null and alter index.null = .null and alter index.null = .null and alter index.null = .null and alter index.null = .null and alter index.null = .null and alter index.null = .null and alter index.null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.innerJoin("", stringArray0, "", "", stringArray0);
      assertEquals(" as  on .null = .null and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, "1IP*J\"Iw__f=,&MPC", "renamem%dv-h(jw^bv>(-]s", stringArray0);
      assertEquals("1IP*J\"Iw__f=,&MPC as renamem%dv-h(jw^bv>(-]s on ", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.innerJoin("", stringArray0, "alter index", (String) null, stringArray0);
      assertEquals("alter index as null on .null = null.null and .null = null.null and .null = null.null and .null = null.null and .null = null.null and .null = null.null and .null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(stringArray0[0]);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("<AdhK<B_", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT <AdhK<B_ FOREIGN KEY (, , ) REFERENCES null(, , )", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[8];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , , , ) REFERENCES null(, , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String[] stringArray0 = new String[5];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter session");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop index", false, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"drop index\" ", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(" S6<");
      SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals(" S6< and ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "N}0h^:K{oG$G>2L-gD");
      SQLUtil.addOptionalCondition("", stringBuilder0);
      assertEquals("N}0h^:K{oG$G>2L-gD or ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) "YM");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("TQ}E@", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("innJr", (String[]) null, "innJr", "innJr", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[56];
      String[] stringArray1 = new String[3];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null", stringArray0, "=(", "null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join("oxnVx", (String) null, stringArray0, "oxnVx", "oxnVx", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isDML("/*.null");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin(" DEFAULT ", stringArray0, "@S-*c@7;ta4kIt{", " DEFAULT ", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("select into8&/tnkd[[mkm", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "gE:'V{Cw1:,I{sK", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "gE:'V{Cw1:,I{sK");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      assertEquals("gE:'V{Cw1:,I{sKCONSTRAINT gE:'V{Cw1:,I{sK ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter session");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "gE:'V{Cw1:,I{sK", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "gE:'V{Cw1:,I{sK");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      assertEquals("gE:'V{Cw1:,I{sK", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "gE:'V{Cw1:,I{sK", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "gE:'V{Cw1:,I{sK");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      assertEquals("gE:'V{Cw1:,I{sKCONSTRAINT gE:'V{Cw1:,I{sK ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("- ", "- ", (String[]) null, "- ", "- ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("inner", "getArray", (String[]) null, "-R&", "4m", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select intSo");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("execj]s)sk9-*elav>");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("select into");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("alter indexgetarray");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("drop indexselecu`uc$vo");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Character character0 = Character.valueOf('>');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'>'", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = SQLUtil.renderValue("");
      assertEquals("''", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("&*e;a!VP!n$c:;");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1452), "XSLA8.D");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("rM=,0", defaultDBTable0, dBDataType0, integer0);
      String string0 = defaultDBColumn0.toString();
      assertEquals("rM=,0 : XSLA8.D(0)", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance((-28856946), "xecute");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("sOGMRk'N", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = defaultDBColumn0.toString();
      assertEquals("sOGMRk'N : XECUTE(1,1)", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter index", defaultDBTable0, 184, "table null");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("alter index TABLE NULL NULL", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[56];
      String string0 = SQLUtil.renderColumnListWithTableName(stringArray0[7], stringArray0);
      assertEquals("null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-573.08715920848);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 573.08715920848", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = SQLUtil.normalize("'", true);
      assertEquals("''", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = SQLUtil.normalize("\"!]r=6p?", true);
      assertEquals("\"!]r=6p?\"", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = SQLUtil.normalize("zqI/Lh4Ek%", false);
      assertEquals("zqI / Lh4Ek %", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = SQLUtil.normalize("java.sql.", true);
      assertEquals("java.sql.", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = SQLUtil.normalize("aller i*dexm%d-h(jw^bv>(-]s", false);
      assertEquals("aller i * dexm % d - h (jw ^ bv > (- ] s", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = SQLUtil.normalize("YF,zfHF<N&~-eQMwxhk", true);
      assertEquals("YF, zfHF < N & ~ - eQMwxhk", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = SQLUtil.normalize("Tk*zh_)4C1moDhGH~", false);
      assertEquals("Tk * zh_) 4C1moDhGH ~", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = SQLUtil.normalize(" */", true);
      assertEquals("*/", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = SQLUtil.removeComments("+");
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertNotNull(string0);
      assertEquals("unique constraint constraint", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("JSgy", true, "JSgy", "JSgy");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT JSgy ", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, (String) null, "95");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "8XxVRo", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "8XxVRo");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("8XxVRoCONSTRAINT 8XxVRo ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materiaizedVview");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "alter materiaizedVview");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("alter materiaizedVview", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("select * from", false, "{~~mr '", "select * from");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK select * from", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[0], false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , )", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("TVt");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("TVt", dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("TVt.TVt", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "T^6c?'i &`.*<'|(");
      SQLUtil.addRequiredCondition("T^6c?'i &`.*<'|(", stringBuilder0);
      assertEquals("T^6c?'i &`.*<'|( and T^6c?'i &`.*<'|(", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("java.sl.Time", stringBuilder0);
      assertEquals("java.sl.Time", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("oVxBQ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT oVxBQ FOREIGN KEY () REFERENCES null()", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "8XxVRo", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 8XxVRo UNIQUE (, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String[] stringArray0 = new String[24];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "jV_({l", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , , , , , , , , , , , , , , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("calldrop materialized viewsetblob(int, inputstream)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("updatesetblob(int, inputstream)");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select intoselet inte");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionoz'\"zagmf>;~");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = defaultDBColumn0.toString();
      assertEquals("BLOB : BLOB", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Hk}I3CGc5ef$;~t#:<T", defaultDBTable0, 2051, "getArra");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Hk}I3CGc5ef$;~t#:<T");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(414, "oZ'\"zagMF>;~");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("oZ'\"zagMF>;~", (DBTable) null, dBDataType0, integer0, integer0);
      defaultDBColumn0.setDefaultValue("SORT");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("oZ'\"zagMF>;~ OZ'\"ZAGMF>;~(0,0) DEFAULT SORT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(`7_9<*YVr-aWi5M", (DBTable) null, (DBDataType) null);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("(`7_9<*YVr-aWi5M, (`7_9<*YVr-aWi5M", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[13];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5T:0ea2$^[g)3", defaultDBTable0, 2051, "5T:0ea2$^[g)3");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-1063), "");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "gE:'V{Cw1:,I{sK", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      MockPrintStream mockPrintStream0 = new MockPrintStream(rowOutputBinary0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-591361331), "+");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("+");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+", defaultDBTable0, dBDataType0, integer0, integer0);
      PipedWriter pipedWriter0 = new PipedWriter();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("select into", defaultDBTable0, dBDataType0, integer0, integer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("~(IcT<)VF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"IcT<\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(R75x9<*\r-5Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (R75x9<*\r-5Q
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("update*s{kcri%(5,kf]y)un");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"kf]y\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "inserty[v;h8?_z^", true, (String[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Hk}I3CGc5ef$;~t#:<T");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("drop indexselectintoselt inte", (String[]) null, "drop indexselectintoselt inte", "drop indexselectintoselt inte", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("select into", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(634, "yFDV:(zldrvOb");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*40L", defaultDBTable0, dBDataType0, integer0);
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "yFDV:(zldrvOb", false, "*40L");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("*40L NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("BLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("BLOB");
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select intoselet inte");
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }
}
