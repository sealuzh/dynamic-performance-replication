/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:37:09 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.nio.BufferUnderflowException;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.Currency;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-858), (-858), (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -858x-858
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 0);
      int int0 = (-533);
      // Undeclared exception!
      try { 
        denseMatrix0.sliceTopLeft(0, (-533));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..0][0..-533].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(6, 6);
      // Undeclared exception!
      matrix0.slice((-1239191162), (-1239191162), 6, (-1239191162));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 134;
      Matrix matrix0 = Matrix.from1DArray(134, 290, doubleArray0);
      assertEquals(134, matrix0.rows());
      assertEquals(290, matrix0.columns());
      assertNotNull(matrix0);
      assertArrayEquals(new double[] {134.0}, doubleArray0, 0.01);
      
      boolean boolean0 = matrix0.equals((Object) matrixPredicate0);
      assertEquals(134, matrix0.rows());
      assertEquals(290, matrix0.columns());
      assertFalse(boolean0);
      assertArrayEquals(new double[] {134.0}, doubleArray0, 0.01);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance();
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertNotNull(decimalFormat0);
      
      MatrixPredicate matrixPredicate1 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.non((AdvancedMatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertNotNull(decimalFormat0);
      
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.blank();
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotNull(cCSMatrix1);
      
      DecimalFormat decimalFormat1 = new DecimalFormat();
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertNotNull(decimalFormat1);
      
      String string0 = cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals("%%MatrixMarket matrix coordinate real general column-major\n0 0 0\n", string0);
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertNotSame(decimalFormat0, decimalFormat1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotNull(string0);
      
      int int0 = cCSMatrix0.rank();
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, int0);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertNotSame(cCSMatrix0, cCSMatrix1);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.power((-29));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -29.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertNotNull(decimalFormat0);
      
      String string0 = decimalFormat0.getNegativeSuffix();
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[6];
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      assertNotNull(ooPlaceKroneckerProduct0);
      
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct1 = new OoPlaceKroneckerProduct();
      assertFalse(ooPlaceKroneckerProduct1.equals((Object)ooPlaceKroneckerProduct0));
      assertNotNull(ooPlaceKroneckerProduct1);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 16);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(16, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      double double0 = denseMatrix0.maxInRow(0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      DenseMatrix denseMatrix1 = denseMatrix0.toDenseMatrix();
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix1.rows());
      assertEquals(0, denseMatrix1.columns());
      assertSame(denseMatrix0, denseMatrix1);
      assertSame(denseMatrix1, denseMatrix0);
      assertNotNull(denseMatrix1);
      
      double double1 = denseMatrix0.infinityNorm();
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertSame(denseMatrix0, denseMatrix1);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-2340));
      assertEquals((-2340), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean0 = denseMatrix1.is(advancedMatrixPredicate0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix1.rows());
      assertEquals(0, denseMatrix1.columns());
      assertTrue(boolean0);
      assertSame(denseMatrix0, denseMatrix1);
      assertSame(denseMatrix1, denseMatrix0);
      
      double double2 = denseMatrix1.determinant();
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix1.rows());
      assertEquals(0, denseMatrix1.columns());
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertSame(denseMatrix0, denseMatrix1);
      assertSame(denseMatrix1, denseMatrix0);
      
      double double3 = denseMatrix0.max();
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertSame(denseMatrix0, denseMatrix1);
      
      int int0 = denseMatrix1.columns();
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix1.rows());
      assertEquals(0, denseMatrix1.columns());
      assertEquals(0, int0);
      assertSame(denseMatrix0, denseMatrix1);
      assertSame(denseMatrix1, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(4131, 4131, 4131);
      assertEquals(4131, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(4131, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.minInRow(4131);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '4131' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      double double0 = denseMatrix0.maxInRow(0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      DenseMatrix denseMatrix1 = denseMatrix0.toDenseMatrix();
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix1.columns());
      assertEquals(0, denseMatrix1.rows());
      assertSame(denseMatrix0, denseMatrix1);
      assertSame(denseMatrix1, denseMatrix0);
      assertNotNull(denseMatrix1);
      
      int int0 = (-16);
      // Undeclared exception!
      try { 
        denseMatrix1.removeRow((-16));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MatrixOperation<RowMajorSparseMatrix> matrixOperation0 = (MatrixOperation<RowMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.randomSymmetric(0, mockRandom0);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateRow(9, vectorFunction0);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1297.8182;
      doubleArray2[2] = (-365.6026126494);
      doubleArray2[3] = (-2532.0);
      doubleArray2[4] = (-1734.20820632214);
      doubleArray2[5] = 3121.3077940089;
      doubleArray2[6] = 579.0;
      doubleArray2[7] = 3619.2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3121.3077940089;
      doubleArray3[1] = (-365.6026126494);
      doubleArray3[2] = 3121.3077940089;
      doubleArray3[3] = 1297.8182;
      doubleArray3[4] = (-1879.346842);
      doubleArray3[5] = (-1734.20820632214);
      doubleArray3[6] = Double.NEGATIVE_INFINITY;
      doubleArray3[7] = 3121.3077940089;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 579.0;
      doubleArray4[1] = (-1734.20820632214);
      doubleArray4[2] = (-2532.0);
      doubleArray4[3] = Double.NEGATIVE_INFINITY;
      doubleArray4[4] = 579.0;
      doubleArray4[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(4, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean0 = columnMajorSparseMatrix0.non(advancedMatrixPredicate0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(4, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(0);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertNotNull(sparseVector0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseVector0.toRowMatrix();
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfColumns((-1332));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1x-1332
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MatrixMatrixOperation<String> matrixMatrixOperation0 = (MatrixMatrixOperation<String>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1000, 96.7268);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1000, rowMajorSparseMatrix0.rows());
      assertEquals(1000, rowMajorSparseMatrix0.columns());
      assertEquals(1000, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.001, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(96.7268, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.updateColumn(1000, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1000' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      SparseMatrix sparseMatrix0 = basic2DMatrix0.toSparseMatrix();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertNotNull(sparseMatrix0);
      
      int int0 = (-352);
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1297.8182;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(4, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(4, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.divide((-655.33));
      assertEquals(4, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(4, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(4, cCSMatrix0.columns());
      assertEquals(4, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertNotNull(cCSMatrix0);
      
      VectorIterator vectorIterator0 = columnMajorSparseMatrix0.iteratorOfRow(Integer.MAX_VALUE);
      assertEquals(4, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(4, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotNull(vectorIterator0);
      
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.copyOfShape((-1499), 476);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1499x476
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      double double0 = basic2DMatrix0.maxInColumn((-414));
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      String string0 = basic2DMatrix0.toString();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = basic2DMatrix0.toString();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertNotNull(decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(1679, 1679, 1.0);
      assertEquals(1679, matrix0.rows());
      assertEquals(1679, matrix0.columns());
      assertNotNull(matrix0);
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1679, 267, 1679);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(267, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1679, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(1251, 3, (double) 267, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1297.8182;
      doubleArray2[2] = (-365.6026126494);
      doubleArray2[3] = (-2532.0);
      doubleArray2[4] = (-1734.20820632214);
      doubleArray2[5] = 3121.3077940089;
      doubleArray2[6] = 579.0;
      doubleArray2[7] = 3619.2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3121.3077940089;
      doubleArray3[1] = (-365.6026126494);
      doubleArray3[2] = 3121.3077940089;
      doubleArray3[3] = 1297.8182;
      doubleArray3[4] = (-1879.346842);
      doubleArray3[5] = (-1734.20820632214);
      doubleArray3[6] = Double.NEGATIVE_INFINITY;
      doubleArray3[7] = 3121.3077940089;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 579.0;
      doubleArray4[1] = (-1734.20820632214);
      doubleArray4[2] = (-2532.0);
      doubleArray4[3] = Double.NEGATIVE_INFINITY;
      doubleArray4[4] = 579.0;
      doubleArray4[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(4, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean0 = columnMajorSparseMatrix0.non(advancedMatrixPredicate0);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(4, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(32, 19);
      assertEquals(32, basic2DMatrix0.rows());
      assertEquals(19, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(19);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(19, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.05263157894736842, cCSMatrix0.density(), 0.01);
      assertEquals(19, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(19, cCSMatrix0.columns());
      assertNotNull(cCSMatrix0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertNotNull(decimalFormat0);
      
      int int1 = 598;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompressedVector compressedVector0 = (CompressedVector)SparseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.setRow(19, (Vector) compressedVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 19.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 1010;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1010, 1010);
      assertEquals(1010, basic2DMatrix0.columns());
      assertEquals(1010, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      Matrix matrix0 = basic2DMatrix0.copyOfColumns(1010);
      assertEquals(1010, basic2DMatrix0.columns());
      assertEquals(1010, basic2DMatrix0.rows());
      assertEquals(1010, matrix0.columns());
      assertEquals(1010, matrix0.rows());
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      
      basic2DMatrix0.setAll(1010);
      // Undeclared exception!
      try { 
        basic2DMatrix0.toMatrixMarket((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 3;
      double double0 = (-3449.0);
      double[][] doubleArray0 = new double[0][6];
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.multiply((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      basic2DMatrix0.toMatrixMarket();
      Matrix matrix0 = Matrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n0 0\n");
      mockRandom0.nextInt();
      CRSMatrix.zero(0, 0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        matrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(322, Double.NEGATIVE_INFINITY);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      SparseVector sparseVector0 = SparseVector.zero(322);
      ooPlaceVectorHadamardProduct0.partiallyApply((SparseVector) null);
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(sparseVector0, sparseVector0);
      vector0.toString();
      // Undeclared exception!
      try { 
        cCSMatrix0.setRow(322, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '322' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(3, 3);
      basic2DMatrix0.removeLastRow();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      basic2DMatrix0.toCSV(numberFormat0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.minInColumn(473);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 473
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 5);
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(0, mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = matrix0.toRowMajorSparseMatrix();
      MatrixOperation<RowMajorSparseMatrix> matrixOperation0 = (MatrixOperation<RowMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(rowMajorSparseMatrix0).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      CRSMatrix cRSMatrix0 = (CRSMatrix)matrix0.apply(matrixOperation0);
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) 9;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 679.0803014733822;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 679.0803014733822;
      doubleArray2[7] = (double) 0;
      doubleArray0[1] = doubleArray2;
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) cCSMatrix0, (SparseMatrix) cRSMatrix0);
      cCSMatrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 37;
      // Undeclared exception!
      try { 
        CRSMatrix.zero(37, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(17, 17, mockRandom0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.foldColumn(17, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ColumnMajorSparseMatrix.identity(1000);
      Integer integer0 = new Integer((-2202));
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(3, 3);
      NumberFormat.getInstance();
      Matrix matrix0 = Matrix.unit(13, 13);
      matrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      basic2DMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      int int0 = (-1733);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertColumn((-1733), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(0, mockRandom0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(7);
      columnMajorSparseMatrix0.equals(matrix0, (-204.4666));
      int int0 = 398;
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix((-1766), 398, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1766x398
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1, 1);
      cCSMatrix0.rank();
      // Undeclared exception!
      try { 
        cCSMatrix0.power((-11));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -11.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix.identity(1);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      cCSMatrix0.rank();
      // Undeclared exception!
      try { 
        cCSMatrix0.power((-11));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -11.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1, 1);
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
      int[] intArray0 = new int[1];
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)basic2DMatrix0.select(intArray0, intArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      basic2DMatrix1.non(matrixPredicate0);
      decimalFormat0.getNegativeSuffix();
      decimalFormat0.toLocalizedPattern();
      // Undeclared exception!
      try { 
        basic2DMatrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NumberFormat.getIntegerInstance();
      Matrix matrix0 = Matrix.zero(3, 3);
      Matrix matrix1 = matrix0.blankOfColumns(3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix1.updateColumn(1, vectorFunction0);
      double[][] doubleArray0 = new double[0][7];
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      basic2DMatrix0.columns();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Basic2DMatrix.unit(1, 1);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(1, 1);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 1, 1);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix0.rank();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints((long) 0);
      CRSMatrix cRSMatrix0 = new CRSMatrix(37, 2675);
      cRSMatrix0.sliceTopLeft(0, 2);
      basic2DMatrix0.transpose();
      Basic2DMatrix.randomSymmetric(4, mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      basic2DMatrix0.equals(object0);
      Basic2DMatrix basic2DMatrix1 = null;
      try {
        basic2DMatrix1 = new Basic2DMatrix(60, (-534));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(5, 5);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 1000;
      ColumnMajorSparseMatrix.identity(1000);
      cCSMatrix0.insert((Matrix) cRSMatrix0);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      Integer integer0 = new Integer((-576));
      cCSMatrix0.rotate();
      cCSMatrix0.maxInRow(2);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      int int1 = 37;
      CRSMatrix cRSMatrix2 = null;
      try {
        cRSMatrix2 = new CRSMatrix((-576), 906, 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -576x906
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 1216;
      int int1 = 10;
      double[] doubleArray0 = new double[0];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1216, 10, doubleArray0);
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      // Undeclared exception!
      try { 
        denseMatrix0.manhattanNorm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-2368.0);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (-2368.0);
      Matrix matrix0 = Matrix.from1DArray(1, 1, doubleArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      Basic1DMatrix basic1DMatrix0 = (Basic1DMatrix)matrix0.rotate();
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapColumns(1, 3261);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(10, 10, 0);
      sparseMatrix0.toRowMajorSparseMatrix();
      // Undeclared exception!
      try { 
        sparseMatrix0.removeRow(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..9
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(1, mockRandom0);
      String string0 = "xi=-D`qXwRpyzY";
      matrix0.sum();
      SparseVector sparseVector0 = SparseVector.zero(974);
      Vector vector0 = sparseVector0.blankOfLength(1073741824);
      Vector vector1 = vector0.multiply((double) 1);
      // Undeclared exception!
      try { 
        matrix0.setColumn(974, vector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1073741824. Should be: 1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      denseMatrix0.maxInRow(1147);
      DenseMatrix denseMatrix1 = denseMatrix0.toDenseMatrix();
      denseMatrix0.infinityNorm();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1147);
      // Undeclared exception!
      try { 
        denseMatrix1.setColumn(5, (Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1147. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      denseMatrix0.maxInRow(0);
      DenseMatrix denseMatrix1 = denseMatrix0.toDenseMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      denseMatrix1.copy();
      denseMatrix0.updateColumn(10, vectorFunction0);
      Matrix matrix0 = denseMatrix1.transpose();
      MatrixOperation<ColumnMajorSparseMatrix> matrixOperation0 = (MatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      denseMatrix1.apply(matrixOperation0);
      matrix0.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.nonZeroRowMajorIterator();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceBottomRight(161, 161);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [161..0][161..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 10;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(10);
      int int1 = 390;
      // Undeclared exception!
      try { 
        cCSMatrix0.slice(10, 10, 390, 390);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      columnMajorSparseMatrix0.mkString(" from a ", " from a ");
      columnMajorSparseMatrix0.setRow(52, (-272.3731143148));
      int[] intArray0 = new int[7];
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 3;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(3, 3);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      basic2DMatrix0.toCSV(numberFormat0);
      basic2DMatrix0.spliterator();
      // Undeclared exception!
      try { 
        Basic2DMatrix.zero(3, (-2599));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      denseMatrix0.multiply((double) 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication1 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix((-5), Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -5x2147483647
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector.fromMap(hashMap0, 397);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.min();
      cCSMatrix0.copy();
      Integer integer0 = new Integer(0);
      cCSMatrix0.determinant();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(Integer.MAX_VALUE, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(5, 5);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(5, 5);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(5);
      cCSMatrix0.insert((Matrix) cRSMatrix0);
      Locale locale0 = Locale.TAIWAN;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      columnMajorSparseMatrix0.toMatrixMarket(numberFormat0);
      basic2DMatrix0.toCSV(numberFormat0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Object object0 = new Object();
      Basic2DMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general column-major\n5 5 5\n1 1 1\n2 2 1\n3 3 1\n4 4 1\n5 5 1\n");
      Object object1 = new Object();
      CRSMatrix cRSMatrix1 = new CRSMatrix(320, 1172, 1172);
      cRSMatrix0.mkString(numberFormat0);
      cCSMatrix1.foldRows((VectorAccumulator) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      cCSMatrix0.rank();
      Matrix matrix0 = cCSMatrix0.power(1);
      // Undeclared exception!
      try { 
        matrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1470.0);
      doubleArray0[0] = doubleArray1;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      Matrix matrix0 = basic2DMatrix0.removeFirstColumn();
      // Undeclared exception!
      try { 
        matrix0.toColumnVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 10;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(10, 10);
      basic2DMatrix0.blank();
      basic2DMatrix0.removeLastColumn();
      String string0 = "org.la4j.LinearAlgebra$InverterFactory";
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("org.la4j.LinearAlgebra$InverterFactory");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[][] doubleArray0 = new double[0][0];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.product();
      matrix0.toCSV();
      matrix0.swapColumns((-74), 4);
      // Undeclared exception!
      try { 
        matrix0.copyOfShape(0, (-74));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-74
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 7;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(7, mockRandom0);
      matrix0.trace();
      double double0 = (-204.4666);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("org.la4j.decomposition.SingularValueDecompositor");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Basic2DMatrix.unit(1, 1);
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      cCSMatrix0.toMatrixMarket(numberFormat0);
      DenseVector denseVector0 = DenseVector.zero(10);
      denseVector0.toDiagonalMatrix();
      cCSMatrix0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      Locale locale0 = Locale.FRENCH;
      Locale locale1 = locale0.stripExtensions();
      NumberFormat.getCurrencyInstance(locale1);
      decimalFormat0.toLocalizedPattern();
      double[] doubleArray0 = new double[5];
      int[] intArray0 = new int[5];
      intArray0[0] = (-301);
      int int0 = 927;
      double double0 = 2811.66858504697;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)basic2DMatrix0.add((double) 927);
      // Undeclared exception!
      try { 
        basic2DMatrix1.sliceBottomRight(411, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [411..0][9..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Integer integer0 = new Integer(1038);
      Integer integer1 = new Integer(12);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(10);
      // Undeclared exception!
      try { 
        cRSMatrix0.swapColumns((-2680), 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-2680' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      Integer integer0 = new Integer(2);
      CCSMatrix cCSMatrix1 = new CCSMatrix(981, 2, 32);
      cCSMatrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      cCSMatrix0.setAll((-180.9423355));
      Object object0 = new Object();
      int int1 = 279;
      cCSMatrix0.toColumnMajorSparseMatrix();
      int int2 = (-2045222520);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.getCurrency();
      String string0 = "@Tlc_q][K P<(";
      DecimalFormat decimalFormat0 = new DecimalFormat("@Tlc_q][K P<(");
      DecimalFormatSymbols decimalFormatSymbols1 = decimalFormat0.getDecimalFormatSymbols();
      DecimalFormat decimalFormat1 = null;
      try {
        decimalFormat1 = new DecimalFormat((String) null, decimalFormatSymbols1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1, 1);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      basic2DMatrix0.toCSV(numberFormat0);
      MockRandom mockRandom0 = new MockRandom();
      NumberFormat.getPercentInstance();
      Object object0 = new Object();
      int int1 = 89;
      Matrix matrix0 = Matrix.unit(1, 89);
      int int2 = (-1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateRow((-1), vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = 0.964;
      doubleArray1[2] = 0.2;
      doubleArray1[3] = 1.0009778187640763;
      doubleArray1[4] = 9.0;
      doubleArray1[5] = (-1944.0);
      doubleArray1[6] = 745.2429792118876;
      doubleArray1[7] = 1246.6405347587;
      doubleArray1[8] = (-1.0);
      doubleArray0[0] = doubleArray1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      DenseMatrix denseMatrix0 = basic2DMatrix0.toDenseMatrix();
      denseMatrix0.setRow(0, 1817.83645704);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      NumberFormat.getIntegerInstance();
      NumberFormat.getCurrencyInstance();
      basic2DMatrix0.rowMajorIterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-2202));
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      inPlaceCopyMatrixToMatrix0.apply((DenseMatrix) basic2DMatrix0, (DenseMatrix) basic2DMatrix0);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      basic2DMatrix0.rows();
      NumberFormat.getInstance();
      basic2DMatrix1.maxInRow((-2202));
      basic2DMatrix0.transformColumn((-1792188097), (VectorFunction) null);
      basic2DMatrix0.swapColumns(0, 24);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(48, 0.75);
      DenseVector denseVector0 = DenseVector.unit(3228);
      // Undeclared exception!
      try { 
        matrix0.setColumn(3233, (Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 3228. Should be: 48.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      RowMajorSparseMatrix.fromCSV("      ");
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1581;
      doubleArray0[1] = (double) 1581;
      doubleArray0[2] = (double) 1581;
      doubleArray0[3] = (double) 1581;
      doubleArray0[4] = (double) 1581;
      doubleArray0[5] = (double) 1581;
      doubleArray0[6] = (double) 1581;
      doubleArray0[7] = (double) 1581;
      // Undeclared exception!
      try { 
        Basic2DMatrix.from1DArray(1581, 1581, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(1);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      Matrix matrix0 = basic2DMatrix0.removeLastRow();
      matrix0.min();
      cCSMatrix0.add((Matrix) basic2DMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.setRow(10, (double) 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NumberFormat.getIntegerInstance();
      Matrix matrix0 = Matrix.zero(3, 3);
      Matrix matrix1 = matrix0.blankOfColumns(3);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        matrix1.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.min();
      Matrix matrix0 = cCSMatrix0.copy();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.insert(matrix0, 10, 3253, (-166), 3265);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -166x3265
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 2022;
      int int1 = 1723;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(2022, 1723);
      int int2 = 10;
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) null, 4, 51, 2098, 2098, (-746), 1723);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -746x1723
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix.diagonal(4, 4);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(37, 37);
      Matrix matrix0 = basic2DMatrix0.blankOfShape(4, 4);
      double[][] doubleArray0 = new double[0][7];
      Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.add(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 37x37 does not equal to 4x4.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(5);
      columnMajorSparseMatrix0.multiplyByItsTranspose();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(5, 5);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)5, (-2499.01014), (-2499.01014), (double)5, (-2437.2)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.update(matrixFunction0);
      ColumnMajorSparseMatrix.identity(5);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      columnMajorSparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      basic2DMatrix0.removeLastRow();
      Basic2DMatrix.identity(3161);
      int int0 = (-2202);
      Integer integer0 = new Integer((-2202));
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.updateAt(1, Integer.MAX_VALUE, matrixFunction1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 5;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(5);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(5, 5, 5);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(5, 5);
      double double0 = (-2435.3958120430566);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)5, (double)5, (double)5, (double)5, (-2435.3958120430566)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.nonZeroIterator();
      columnMajorSparseMatrix0.update(matrixFunction0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.identity(5);
      Matrix matrix0 = cRSMatrix0.add((Matrix) basic2DMatrix0);
      ((CCSMatrix) columnMajorSparseMatrix1).nonZeroColumnMajorIterator();
      int int1 = 6;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.transformColumn(6, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-117.1663221);
      doubleArray1[1] = (-117.1663221);
      doubleArray0[0] = doubleArray1;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.copyOfRows((-3416));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3416x3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.manhattanNorm();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromCSV("Out of bounds: Cannot get ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1, 1);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 1, 1);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(1);
      NumberFormat.getPercentInstance();
      int int1 = (-2709);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("*O_?", decimalFormatSymbols0);
      decimalFormat0.setMinimumIntegerDigits((-2709));
      cCSMatrix0.equals((Matrix) cCSMatrix1, 2.0);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      cCSMatrix1.toCSV(numberFormat0);
      basic2DMatrix0.add((double) 1);
      // Undeclared exception!
      try { 
        CCSMatrix.zero(9, 1, (-2709));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -2709.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      NumberFormat.getIntegerInstance();
      NumberFormat.getCurrencyInstance();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int int0 = Double.MAX_EXPONENT;
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.mkString(numberFormat0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) cRSMatrix0, 319, 2336);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 319 rows and 2336 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 1000;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2185, 1538);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      CCSMatrix cCSMatrix0 = new CCSMatrix(2185, 2185, 17);
      Matrix matrix0 = cCSMatrix0.rotate();
      // Undeclared exception!
      try { 
        cRSMatrix0.insert(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 2185 rows and 2185 cols at 0, 0 in a 2185x1538 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1724, 1719);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformRow(1722, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(3, 3);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      basic2DMatrix0.toCSV(numberFormat0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(3);
      columnMajorSparseMatrix0.equals((Matrix) basic2DMatrix0, 0.0);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      columnMajorSparseMatrix0.copy();
      Integer integer0 = new Integer(32);
      basic2DMatrix0.determinant();
      Basic2DMatrix basic2DMatrix1 = null;
      try {
        basic2DMatrix1 = new Basic2DMatrix(4, (-73));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      mockRandom0.ints(9965L);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.multiplyByItsTranspose();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(5, 5);
      cCSMatrix0.maxInRow(0);
      basic2DMatrix0.determinant();
      int int0 = 8;
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) cCSMatrix0, 24, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 24 rows and 8 cols at 0, 0 in a 5x5 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1, 1);
      Matrix matrix0 = basic2DMatrix0.multiplyByItsTranspose();
      NumberFormat.getIntegerInstance();
      matrix0.diagonalProduct();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        matrix0.fold((MatrixAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrices$33", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 11;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(11, mockRandom0);
      int int1 = 5;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(5);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 11 rows and 11 cols at 0, 0 in a 5x5 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      ColumnMajorSparseMatrix.identity(0);
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0);
      Basic2DMatrix.zero(0, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix(3228, 3233, 3233);
      cRSMatrix0.insert((Matrix) basic2DMatrix0);
      cRSMatrix0.setRow(0, (double) 0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1, 1);
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1, 1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      Integer integer0 = new Integer(1);
      Matrix matrix0 = cCSMatrix0.insert((Matrix) basic2DMatrix0);
      cCSMatrix0.multiplyByItsTranspose();
      Basic2DMatrix.zero(1, 1);
      basic2DMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      // Undeclared exception!
      try { 
        matrix0.withInverter((LinearAlgebra.InverterFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = (-1982513624);
      // Undeclared exception!
      try { 
        Matrix.zero((-1982513624), (-1982513624));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1982513624x-1982513624
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Matrix matrix0 = basic2DMatrix0.blankOfColumns(971);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.update(matrixFunction0);
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<String> matrixMatrixOperation0 = (MatrixMatrixOperation<String>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 3390;
      int int1 = 2756;
      ColumnMajorSparseMatrix.identity(2756);
      int int2 = 8;
      CRSMatrix cRSMatrix0 = new CRSMatrix(8, 3390, 8);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(0, mockRandom0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(7);
      columnMajorSparseMatrix0.equals(matrix0, (double) 7);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)76;
      byteArray0[0] = (byte)76;
      byte byte1 = (byte)3;
      byteArray0[1] = (byte)3;
      byte byte2 = (byte) (-42);
      byteArray0[2] = (byte) (-42);
      byte byte3 = (byte) (-43);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, 7, 2, 2324, (int) (byte)76, 3213, 48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 2324, 76
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(0, mockRandom0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      double double0 = (-204.4666);
      columnMajorSparseMatrix0.equals(matrix0, (-204.4666));
      columnMajorSparseMatrix0.rank();
      String string0 = "xi=-D`qXwRpyzY";
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("xi=-D`qXwRpyzY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      int int0 = 1147;
      DenseMatrix denseMatrix1 = denseMatrix0.toDenseMatrix();
      denseMatrix0.infinityNorm();
      denseMatrix1.copy();
      denseMatrix0.slice(0, 224, 224, 224);
      // Undeclared exception!
      try { 
        denseMatrix1.insert((Matrix) denseMatrix0, 0, 1147);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 0 rows and 1147 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      denseMatrix0.maxInRow(0);
      DenseMatrix denseMatrix1 = denseMatrix0.toDenseMatrix();
      denseMatrix0.copy();
      denseMatrix1.transpose();
      denseMatrix0.setColumn(0, (double) 4);
      // Undeclared exception!
      try { 
        Matrix.identity((-4045));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 5;
      CRSMatrix cRSMatrix0 = new CRSMatrix(5, 5);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(5, 5);
      // Undeclared exception!
      try { 
        basic2DMatrix0.setColumn(10, (double) 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      basic2DMatrix0.toMatrixMarket();
      Matrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n0 0\n");
      basic2DMatrix0.power(0);
      NumberFormat.getIntegerInstance();
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("%%MatrixMarket matrix array real general\n0 0\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too many percent/per mille characters in pattern \"%%MatrixMarket matrix array real general
         // 0 0
         // \"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 9;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1, 9);
      basic2DMatrix0.toMatrixMarket();
      basic2DMatrix0.toDenseMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.power(16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 1 does not equal to 9.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Basic2DMatrix.unit(1, 1);
      Basic2DMatrix.zero(1, 1);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 1);
      cCSMatrix0.blank();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      cCSMatrix0.toMatrixMarket(numberFormat0);
      int int0 = new Integer(1);
      cCSMatrix0.power(1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 7, 0);
      cCSMatrix0.rank();
      Matrix matrix0 = cCSMatrix0.multiplyByItsTranspose();
      Integer integer0 = new Integer(0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(7, 8);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(7);
      Integer integer2 = new Integer(0);
      hashMap0.put(integer1, integer2);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.is(advancedMatrixPredicate0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) basic2DMatrix0, 0, (-1632), 5, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 0, -1632
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(0, 0);
      DenseMatrix denseMatrix0 = DenseMatrix.block(basic2DMatrix0, basic2DMatrix0, basic2DMatrix0, basic2DMatrix0);
      int int0 = 453;
      RowMajorSparseMatrix.zero(0, 453);
      denseMatrix0.multiply((double) 0);
      double[] doubleArray0 = null;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 881, (double[]) null);
      columnMajorSparseMatrix0.equals((Matrix) denseMatrix0, (double) 0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(966);
      // Undeclared exception!
      cCSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.transform(matrixFunction0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldColumns(vectorAccumulator0);
      matrix0.copyOfRows(9);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 3;
      NumberFormat.getIntegerInstance();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      cCSMatrix0.toCSV(numberFormat0);
      Object object0 = new Object();
      int int1 = (-1);
      // Undeclared exception!
      try { 
        cCSMatrix0.transform((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(5, 5);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(5, 5);
      int int0 = 1000;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1000);
      CCSMatrix cCSMatrix1 = new CCSMatrix(1000, 5, 1000);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      ((CCSMatrix) columnMajorSparseMatrix0).blankOfShape(5, 8);
      Integer integer0 = new Integer((-2202));
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.partiallyApply((DenseMatrix) basic2DMatrix0);
      int int1 = 5;
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) basic2DMatrix0, 1000, 1000, 5, 8, 5, 38);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 5, 8
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.block((Matrix) null, (Matrix) null, (Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 1000;
      MatrixMatrixOperation<String> matrixMatrixOperation0 = (MatrixMatrixOperation<String>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = new CRSMatrix(1000, 1000);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2595.36375;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1000;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 2595.36375;
      doubleArray0[5] = 2595.36375;
      doubleArray0[6] = (-473.3263768343);
      Integer integer0 = new Integer(1000);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, integer0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(2185, (-1201.584767));
      // Undeclared exception!
      try { 
        basic2DMatrix0.hadamardProduct(cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 2185x2185 does not equal to 1000x1000.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(0, mockRandom0);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0);
      cCSMatrix0.nonZeroIteratorOfColumn(0);
      mockRandom0.doubles((-204.4666), (double) 0);
      cCSMatrix0.iterator();
      Matrix matrix1 = matrix0.rotate();
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      matrix0.sliceTopLeft(0, 0);
      Integer integer0 = new Integer(3227);
      cCSMatrix0.determinant();
      matrix1.trace();
      Basic2DMatrix basic2DMatrix0 = null;
      try {
        basic2DMatrix0 = new Basic2DMatrix((-458), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      basic2DMatrix0.toMatrixMarket();
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)24).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow(24, vectorAccumulator0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      int int0 = Double.MAX_EXPONENT;
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.mkString(numberFormat0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) basic2DMatrix1, 2336, (-1347));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 2336x-1347
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(0, mockRandom0);
      int int1 = 5;
      // Undeclared exception!
      try { 
        matrix0.toRowVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 32;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(32);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setRow((-1852), (-272.3731143148));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1852' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      cRSMatrix0.copy();
      columnMajorSparseMatrix0.swapRows(0, 0);
      cRSMatrix0.setColumn(67, (double) 1000);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(0, mockRandom0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      ((CCSMatrix) columnMajorSparseMatrix0).nonZeroIteratorOfColumn(0);
      mockRandom0.ints();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        matrix0.multiply((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        SparseMatrix.randomSymmetric(Integer.MAX_VALUE, (double) Integer.MAX_VALUE, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1, 1);
      NumberFormat.getIntegerInstance();
      int[] intArray0 = new int[1];
      Matrix matrix0 = basic2DMatrix0.select(intArray0, intArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 453);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = rowMajorSparseMatrix0.copy();
      double double0 = 1.0;
      matrix0.multiply((-49.1582));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      rowMajorSparseMatrix0.norm();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      rowMajorSparseMatrix0.toSparseMatrix();
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0);
      cCSMatrix0.sliceTopLeft(0, 0);
      // Undeclared exception!
      try { 
        cCSMatrix0.subtract(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 0x453.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(3, mockRandom1);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(3);
      columnMajorSparseMatrix0.equals(matrix0, (-204.4666));
      String string0 = "iCA%IdAtn";
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("iCA%IdAtn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 3;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(3, 3);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      ParsePosition parsePosition0 = new ParsePosition(2304);
      numberFormat0.parseObject("real", parsePosition0);
      basic2DMatrix0.toCSV(numberFormat0);
      Matrix.zero(3, 3);
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 3);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      Integer integer0 = new Integer(2);
      basic2DMatrix0.determinant();
      cCSMatrix0.determinant();
      int int1 = 1983;
      CCSMatrix cCSMatrix1 = null;
      try {
        cCSMatrix1 = new CCSMatrix(1983, 78, (-2353));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -2353.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Matrix matrix0 = Matrix.diagonal(48, 0.75);
          int int0 = 3233;
          SparseVector sparseVector0 = SparseVector.zero(3233, 1597);
          Vector vector0 = sparseVector0.add((double) 48);
          Vector vector1 = vector0.subtract((Vector) sparseVector0);
          // Undeclared exception!
          try { 
            matrix0.insertColumn(48, vector1);
            fail("Expecting exception: IndexOutOfBoundsException");
          
          } catch(IndexOutOfBoundsException e) {
             //
             // Illegal row number, must be 0..47
             //
             verifyException("org.la4j.Matrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(3, 3);
      basic2DMatrix0.removeLastRow();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      basic2DMatrix0.toCSV(numberFormat0);
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 3);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      Integer integer0 = new Integer(1);
      int int0 = (-459);
      cCSMatrix0.determinant();
      CCSMatrix cCSMatrix1 = null;
      try {
        cCSMatrix1 = new CCSMatrix(1889, 5, (-631032676));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -631032676.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Matrix matrix0 = Matrix.fromCSV("5");
          InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
          Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV("5");
          int int0 = 5;
          LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
          matrix0.withSolver(linearAlgebra_SolverFactory0);
          Matrix.diagonal(5, (-354.5214));
          // Undeclared exception!
          try { 
            basic2DMatrix0.minInRow(821);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // 821
             //
             verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      Matrix matrix0 = Matrix.randomSymmetric(0, mockRandom0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.getNegativeSuffix();
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("{EKT1v]qs8EY`<B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      Matrix matrix0 = Matrix.randomSymmetric(1, mockRandom0);
      matrix0.divide((-180.94233546045402));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1, 1);
      NumberFormat.getIntegerInstance();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      basic2DMatrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(3, 3);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      numberFormat0.setMinimumIntegerDigits((-2709));
      cCSMatrix0.equals((Matrix) basic2DMatrix0, (double) 3);
      cCSMatrix0.toCSV(numberFormat0);
      cCSMatrix0.swapColumns(3, 3);
      // Undeclared exception!
      try { 
        Basic2DMatrix.unit(3, (-2709));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 5;
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(5, 5);
      basic2DMatrix0.toMatrixMarket();
      Matrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n5 5\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n");
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("%%MatrixMarket matrix array real general\n5 5\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too many percent/per mille characters in pattern \"%%MatrixMarket matrix array real general
         // 5 5
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // 1.000
         // \"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(290, 290, 9);
      Matrix matrix0 = columnMajorSparseMatrix0.transpose();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      matrix0.non(matrixPredicate0);
      // Undeclared exception!
      matrix0.norm();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = 2732;
          int int1 = 1375;
          Matrix matrix0 = Matrix.unit(2732, 1375);
          matrix0.rowMajorIterator();
          // Undeclared exception!
          matrix0.hashCode();
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(1652, 1375);
      matrix0.rowMajorIterator();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      matrix1.hashCode();
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 1652;
      doubleArray1[1] = (-2251.130821);
      doubleArray1[2] = (double) 1375;
      doubleArray1[4] = (-2251.130821);
      doubleArray1[5] = (-2251.130821);
      doubleArray1[6] = (double) 1652;
      doubleArray0[1] = doubleArray1;
      // Undeclared exception!
      try { 
        DenseVector.fromMap((Map<Integer, ? extends Number>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector.fromMap(hashMap0, 1147);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixOperation<ColumnMajorSparseMatrix> matrixOperation0 = (MatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix(3236, 3236);
      // Undeclared exception!
      try { 
        cCSMatrix0.insertRow(3236, (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..3235
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(290, 290);
      basic2DMatrix0.spliterator();
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 2099);
      // Undeclared exception!
      try { 
        cCSMatrix0.insertRow((-1285), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1, 1);
      NumberFormat.getIntegerInstance();
      basic2DMatrix0.spliterator();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1);
      CCSMatrix cCSMatrix0 = new CCSMatrix(1592, 1);
      cCSMatrix0.insertRow(1433, denseVector0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-87);
      CCSMatrix cCSMatrix1 = CCSMatrix.fromBinary(byteArray0);
      cCSMatrix1.trace();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(3, 3);
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
      basic2DMatrix0.toCSV((NumberFormat) decimalFormat0);
      decimalFormat0.getNegativePrefix();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      NumberFormat.getPercentInstance();
      cCSMatrix0.equals((Matrix) basic2DMatrix0, (-867.078953383));
      cCSMatrix0.toCSV((NumberFormat) decimalFormat0);
      Object object0 = new Object();
      basic2DMatrix0.equals((Object) cCSMatrix0);
      NumberFormat.getInstance();
      basic2DMatrix0.equals((Object) cCSMatrix0);
      NumberFormat.getInstance();
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Basic2DMatrix.unit(1, 1);
      Basic2DMatrix.zero(1, 1);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(1, 1);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 3;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(3, 3);
      Matrix matrix0 = basic2DMatrix0.multiplyByItsTranspose();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Locale locale0 = Locale.JAPAN;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      Currency currency0 = decimalFormatSymbols0.getCurrency();
      DecimalFormatSymbols.getInstance();
      currency0.getSymbol();
      Currency.getAvailableCurrencies();
      decimalFormat0.setCurrency(currency0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      DecimalFormat decimalFormat1 = (DecimalFormat)NumberFormat.getPercentInstance();
      int int1 = 0;
      decimalFormat1.setPositivePrefix("XXX");
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)matrix0.blankOfRows(0);
      cCSMatrix0.equals(matrix0, (double) 3);
      decimalFormat1.getNegativePrefix();
      int int2 = (-560);
      // Undeclared exception!
      try { 
        basic2DMatrix1.toRowVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Basic2DMatrix.unit(1, 1);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 1, 1);
      cCSMatrix0.blank();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      decimalFormat0.setDecimalSeparatorAlwaysShown(true);
      MockRandom mockRandom0 = new MockRandom();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      NumberFormat.getPercentInstance();
      Object object0 = new Object();
      Basic2DMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general column-major\n1 1 0\n");
      NumberFormat.getInstance();
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(3, 3);
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
      basic2DMatrix0.toCSV((NumberFormat) decimalFormat0);
      basic2DMatrix0.toCSV((NumberFormat) decimalFormat0);
      decimalFormat0.getNegativePrefix();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      NumberFormat.getPercentInstance();
      cCSMatrix0.equals((Matrix) basic2DMatrix0, 2811.66858504697);
      decimalFormat0.getPositivePrefix();
      Object object0 = new Object();
      CRSMatrix cRSMatrix0 = (CRSMatrix)basic2DMatrix0.toRowMajorSparseMatrix();
      basic2DMatrix0.equals((Object) cRSMatrix0);
      NumberFormat.getInstance();
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix(3, 3);
      basic2DMatrix1.equals(object0);
      NumberFormat.getInstance();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 0);
      basic2DMatrix0.toMatrixMarket();
      NumberFormat.getIntegerInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance();
      decimalFormat0.getPositivePrefix();
      DecimalFormat decimalFormat1 = new DecimalFormat();
      decimalFormat1.getNegativePrefix();
      Integer integer0 = new Integer((-1936341491));
      int int0 = 2;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.rotate();
      int int1 = (-1431655764);
      cCSMatrix0.maxInRow((-1431655764));
      basic2DMatrix0.determinant();
      basic2DMatrix0.equals((Object) null);
      int int2 = 3;
      Basic2DMatrix basic2DMatrix1 = null;
      try {
        basic2DMatrix1 = new Basic2DMatrix((-2202), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 36;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(36, 36);
      CCSMatrix cCSMatrix0 = new CCSMatrix(36, 36, 36);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      Integer integer0 = new Integer(36);
      String string0 = basic2DMatrix0.toCSV((NumberFormat) decimalFormat0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity((int) integer0);
      CCSMatrix.fromCSV(string0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      double[] doubleArray0 = null;
      DenseVector.fromArray(doubleArray0);
      String string1 = "This matrix can't grow up.";
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV(string1);
      int int1 = (-2915);
      MockRandom mockRandom0 = new MockRandom();
      SparseVector sparseVector0 = SparseVector.random(int1, (double) int1, (Random) mockRandom0);
      int int2 = (-2606);
      double double0 = 4.9E-324;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(int2, double0, (Random) mockRandom0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, rowMajorSparseMatrix0);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, denseMatrix0);
      vector0.toBinary();
      Vector vector1 = columnMajorSparseMatrix0.getColumn(int0);
      cCSMatrix1.multiply(vector1);
      denseMatrix0.hadamardProduct(basic2DMatrix0);
      rowMajorSparseMatrix0.rotate();
      columnMajorSparseMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      basic2DMatrix0.toMatrixMarket();
      Matrix matrix0 = Matrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n0 0\n");
      NumberFormat.getIntegerInstance();
      NumberFormat.getCurrencyInstance();
      CCSMatrix cCSMatrix0 = CCSMatrix.block(basic2DMatrix0, matrix0, matrix0, matrix0);
      cCSMatrix0.rowMajorIterator();
      Matrix matrix1 = cCSMatrix0.insert((Matrix) basic2DMatrix0);
      Matrix matrix2 = cCSMatrix0.multiplyByItsTranspose();
      basic2DMatrix0.rowMajorIterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      matrix1.rotate();
      cCSMatrix0.insert(matrix1);
      cCSMatrix0.multiplyByItsTranspose();
      CCSMatrix.identity(877);
      NumberFormat.getPercentInstance();
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2364, 9);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert(matrix2, (-1983627305), (-1983627305), 1184, 3354);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1983627305, -1983627305
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 15;
      int int1 = 19;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(15, 19);
      Integer integer0 = new Integer(0);
      CCSMatrix.identity(19);
      NumberFormat.getPercentInstance();
      CRSMatrix.diagonal(598, 0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertColumn(0, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 5;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(5);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)5, (double)5, (double)5, (double)5, (-2435.3958120430566)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.update(matrixFunction0);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Locale locale0 = Locale.KOREA;
      NumberFormat.getIntegerInstance(locale0);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      columnMajorSparseMatrix0.toMatrixMarket(numberFormat0);
      CCSMatrix.identity(5);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      numberFormat0.format(2923L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general column-major\n5 5 25\n1 1 5\n2 1 5\n3 1 5\n4 1 5\n5 1 -2,435\n1 2 -2,435\n2 2 -2,435\n3 2 -2,435\n4 2 -2,435\n5 2 -2,435\n1 3 -2,435\n2 3 -2,435\n3 3 -2,435\n4 3 -2,435\n5 3 -2,435\n1 4 -2,435\n2 4 -2,435\n3 4 -2,435\n4 4 -2,435\n5 4 -2,435\n1 5 -2,435\n2 5 -2,435\n3 5 -2,435\n4 5 -2,435\n5 5 -2,435\n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 2;
      int int1 = 15;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int2 = 7;
      cCSMatrix0.multiplyByItsTranspose();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(15, 7);
      Integer integer0 = new Integer(2);
      cCSMatrix0.maxInRow(2);
      ColumnMajorSparseMatrix.zero(7, 2);
      CCSMatrix.identity(7);
      int int3 = 598;
      CRSMatrix.diagonal(598, 2);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      basic2DMatrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertColumn(2, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(5);
      columnMajorSparseMatrix0.multiplyByItsTranspose();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(5, 5);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)5, (-2499.01014), (-2499.01014), (double)5, (-2437.2)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.update(matrixFunction0);
      ColumnMajorSparseMatrix.identity(5);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      columnMajorSparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      basic2DMatrix0.removeLastRow();
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.identity(3161);
      // Undeclared exception!
      columnMajorSparseMatrix0.kroneckerProduct(basic2DMatrix1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(5);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(5, 5);
      ColumnMajorSparseMatrix.identity(1000);
      CRSMatrix.zero(5, 1000);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      columnMajorSparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      basic2DMatrix0.removeLastRow();
      columnMajorSparseMatrix0.rotate();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Matrix matrix0 = Matrix.unit(5, 1000);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>(6);
      Matrix.diagonal(207, 6);
      CRSMatrix.diagonal(2, (-204.4666));
      CRSMatrix cRSMatrix0 = new CRSMatrix(139, 2);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 207;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 1000;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(sparseVector0, sparseVector0);
      matrix0.insertColumn(2, vector0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      Matrix matrix0 = cCSMatrix0.multiplyByItsTranspose();
      Basic2DMatrix.zero(5, 5);
      int int0 = 1000;
      ColumnMajorSparseMatrix.identity(1000);
      Matrix matrix1 = cCSMatrix0.insert(matrix0);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      int int1 = (-2202);
      Integer integer0 = new Integer((-2202));
      cCSMatrix0.rotate();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory1 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory1);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Matrix matrix2 = matrix1.rotate();
      matrix2.determinant();
      // Undeclared exception!
      try { 
        CCSMatrix.diagonal((-1114), (-2202));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(5);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(5, 5, 5);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(5, 5);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)5, (double)5, (double)5, (double)5, (-2435.3958120430566)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.nonZeroIterator();
      columnMajorSparseMatrix0.update(matrixFunction0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.identity(5);
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)cRSMatrix0.add((Matrix) basic2DMatrix0);
      ((CCSMatrix) columnMajorSparseMatrix1).nonZeroColumnMajorIterator();
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.copyOfRows(2147483645);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix0.nonZeroIterator();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setNegativePrefix("#Y/OuO^`(1y37");
      columnMajorSparseMatrix0.toCSV((NumberFormat) decimalFormat0);
      CCSMatrix cCSMatrix2 = new CCSMatrix();
      DecimalFormat decimalFormat1 = new DecimalFormat();
      cRSMatrix0.determinant();
      MockRandom mockRandom0 = new MockRandom();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = (CompressedVector)SparseVector.fromCollection(linkedList0);
      BasicVector basicVector0 = (BasicVector)ooPlaceMatrixByVectorMultiplication0.apply((DenseMatrix) basic2DMatrix1, (SparseVector) compressedVector0);
      basicVector0.multiply((-2435.3958120430566));
      basic2DMatrix1.setRow(2147483645, (Vector) basicVector0);
  }
}
