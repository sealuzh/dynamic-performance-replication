/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:20:21 GMT 2018
 */

package weka.classifiers.bayes.net.search.ci;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Properties;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.Classifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm;
import weka.classifiers.functions.SGD;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.core.Attribute;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SelectedTag;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ICSSearchAlgorithm_ESTest extends ICSSearchAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String string0 = iCSSearchAlgorithm0.maxCardinalityTipText();
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", string0);
      
      String string1 = iCSSearchAlgorithm0.globalInfo();
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", string1);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ICSSearchAlgorithm.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String string0 = iCSSearchAlgorithm0.maxCardinalityTipText();
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.";
      stringArray0[1] = "When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.";
      stringArray0[2] = "When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.";
      stringArray0[3] = "When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.";
      stringArray0[4] = "When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.";
      iCSSearchAlgorithm0.setOptions(stringArray0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      boolean boolean0 = iCSSearchAlgorithm_SeparationSet0.contains(0);
      assertTrue(boolean0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.maxCardinalityTipText();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      SelectedTag selectedTag0 = costSensitiveClassifier0.getCostMatrixSource();
      iCSSearchAlgorithm0.setScoreType(selectedTag0);
      boolean[][] booleanArray0 = new boolean[1][0];
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.existsSepSet(135, 0, 0, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.CISearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      boolean boolean0 = iCSSearchAlgorithm_SeparationSet0.contains(103);
      assertFalse(boolean0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      String string0 = iCSSearchAlgorithm_SeparationSet0.getRevision();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("8034", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("PackrgeRepository.props", arrayList0, 1);
      iCSSearchAlgorithm0.m_instances = instances0;
      multiClassClassifierUpdateable0.setClassifier((Classifier) null);
      iCSSearchAlgorithm0.setMaxCardinality(3058);
      String[] stringArray0 = iCSSearchAlgorithm0.getOptions();
      iCSSearchAlgorithm0.maxn();
      System.setCurrentTimeMillis(0L);
      iCSSearchAlgorithm0.setOptions(stringArray0);
      ICSSearchAlgorithm iCSSearchAlgorithm1 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.getOptions();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      assertEquals(3058, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      int[] intArray0 = new int[2];
      intArray0[0] = (-1030);
      intArray0[1] = (-1030);
      iCSSearchAlgorithm_SeparationSet0.m_set = intArray0;
      iCSSearchAlgorithm_SeparationSet0.m_set = intArray0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      intArray0[0] = (int) (byte) (-1);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)89;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      iCSSearchAlgorithm_SeparationSet0.contains(1533);
      String[] stringArray0 = new String[0];
      iCSSearchAlgorithm0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.name((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("PackageRepository.props", arrayList0, 1);
      iCSSearchAlgorithm0.m_instances = instances0;
      multiClassClassifierUpdateable0.setClassifier((Classifier) null);
      iCSSearchAlgorithm0.setMaxCardinality(3058);
      boolean[][] booleanArray0 = new boolean[1][1];
      iCSSearchAlgorithm0.getMaxCardinality();
      iCSSearchAlgorithm0.getRevision();
      iCSSearchAlgorithm0.maxn();
      iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray0);
      assertEquals(3058, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("PackageRepository.props", arrayList0, 1);
      iCSSearchAlgorithm0.m_instances = instances0;
      iCSSearchAlgorithm0.setMaxCardinality(3);
      multiClassClassifierUpdateable0.setDebug(true);
      multiClassClassifierUpdateable0.setClassifier((Classifier) null);
      Attribute attribute0 = new Attribute("7\"ZsKo\"fl");
      arrayList0.add(attribute0);
      boolean[][] booleanArray0 = new boolean[6][4];
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcDependencyGraph(booleanArray0, (ICSSearchAlgorithm.SeparationSet[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.CISearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("PackageRepository.props", arrayList0, 1);
      iCSSearchAlgorithm0.m_instances = instances0;
      iCSSearchAlgorithm0.setMaxCardinality(3058);
      Attribute attribute0 = new Attribute("p,!EkS\"DYX]?a0-");
      iCSSearchAlgorithm0.setMaxCardinality((-3002));
      multiClassClassifierUpdateable0.setClassifier((Classifier) null);
      Attribute attribute1 = new Attribute(".bsi", iCSSearchAlgorithm0.m_instances, 1);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute1);
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      BayesNet bayesNet1 = new BayesNet();
      iCSSearchAlgorithm0.search(bayesNet1, instances0);
      assertEquals((-3002), iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("PackageRepositor$.props", arrayList0, 1);
      iCSSearchAlgorithm0.m_instances = instances0;
      iCSSearchAlgorithm0.setMaxCardinality(3);
      multiClassClassifierUpdateable0.setDebug(true);
      multiClassClassifierUpdateable0.setClassifier((Classifier) null);
      Attribute attribute0 = new Attribute("");
      arrayList0.add(attribute0);
      boolean[][] booleanArray0 = new boolean[6][4];
      arrayList0.add(attribute0);
      boolean[] booleanArray1 = new boolean[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      booleanArray0[4] = booleanArray1;
      iCSSearchAlgorithm0.existsSepSet(4, 2, 3, booleanArray0);
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray0 = new ICSSearchAlgorithm.SeparationSet[1][0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray1 = new ICSSearchAlgorithm.SeparationSet[1];
      iCSSearchAlgorithm_SeparationSetArray1[0] = null;
      iCSSearchAlgorithm_SeparationSetArray0[0] = iCSSearchAlgorithm_SeparationSetArray1;
      boolean[][] booleanArray2 = new boolean[0][8];
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("PackageRepository.prop", arrayList0, 1);
      iCSSearchAlgorithm0.m_instances = instances0;
      iCSSearchAlgorithm0.setMaxCardinality(3);
      multiClassClassifierUpdateable0.setDebug(false);
      arrayList0.remove((Object) ".arff");
      multiClassClassifierUpdateable0.setClassifier(multiClassClassifierUpdateable0);
      Attribute attribute0 = new Attribute(".bsi");
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add(attribute0);
      multiClassClassifierUpdateable0.getRevision();
      iCSSearchAlgorithm0.listOptions();
      multiClassClassifierUpdateable0.setClassifier((Classifier) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PackageRepository.prop");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      boolean[][] booleanArray0 = new boolean[0][0];
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcDependencyGraph(booleanArray0, (ICSSearchAlgorithm.SeparationSet[][]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("PackageRepository.props", arrayList0, 1);
      iCSSearchAlgorithm0.m_instances = instances0;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute(".bsi", iCSSearchAlgorithm0.m_instances, protectedProperties1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      multiClassClassifierUpdateable0.setClassifier((Classifier) null);
      multiClassClassifierUpdateable0.setRandomWidthFactor((-84.56));
      iCSSearchAlgorithm0.setMaxCardinality((-9));
      arrayList0.add(attribute0);
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("PackageRepository.prop5", arrayList0, 1);
      iCSSearchAlgorithm0.m_instances = instances0;
      arrayList0.add((Attribute) null);
      multiClassClassifierUpdateable0.setClassifier((Classifier) null);
      iCSSearchAlgorithm0.setMaxCardinality(3058);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      boolean[][] booleanArray0 = new boolean[0][1];
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.existsSepSet(3, 1, 1, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("PackageRepository.props", arrayList0, 3);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute(".arff", instances0, protectedProperties1);
      arrayList0.add(attribute0);
      SGD sGD0 = new SGD();
      iCSSearchAlgorithm0.setMaxCardinality((-9));
      arrayList0.add(attribute0);
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("PackageRepositor$.props", arrayList0, 1);
      iCSSearchAlgorithm0.m_instances = instances0;
      iCSSearchAlgorithm0.setMaxCardinality(3);
      multiClassClassifierUpdateable0.setDebug(true);
      multiClassClassifierUpdateable0.setClassifier((Classifier) null);
      Attribute attribute0 = new Attribute("");
      arrayList0.add(attribute0);
      boolean[][] booleanArray0 = new boolean[6][4];
      arrayList0.add(attribute0);
      boolean[] booleanArray1 = new boolean[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      booleanArray0[4] = booleanArray1;
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray0 = new ICSSearchAlgorithm.SeparationSet[1][0];
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray1 = new ICSSearchAlgorithm.SeparationSet[1];
      iCSSearchAlgorithm_SeparationSetArray0[0] = iCSSearchAlgorithm_SeparationSetArray1;
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcVeeNodes(booleanArray0, booleanArray0, iCSSearchAlgorithm_SeparationSetArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("PackageRepository.props", arrayList0, 1);
      iCSSearchAlgorithm0.m_instances = instances0;
      multiClassClassifierUpdateable0.setClassifier(multiClassClassifierUpdateable0);
      boolean[] booleanArray0 = new boolean[6];
      multiClassClassifierUpdateable0.setClassifier(multiClassClassifierUpdateable0);
      Attribute attribute0 = new Attribute("P");
      Attribute attribute1 = new Attribute("GK?}xljU\"\"^(>C~C");
      arrayList0.add(attribute1);
      boolean[][] booleanArray1 = new boolean[6][4];
      booleanArray1[0] = booleanArray0;
      booleanArray1[1] = booleanArray0;
      booleanArray1[2] = booleanArray0;
      booleanArray1[3] = booleanArray0;
      boolean[] booleanArray2 = new boolean[6];
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      booleanArray2[2] = false;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      booleanArray2[5] = true;
      booleanArray1[4] = booleanArray2;
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.existsSepSet(4, 3018, 2, booleanArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3018
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("5u^akPhTc&v2", arrayList0, 1);
      iCSSearchAlgorithm0.m_instances = instances0;
      iCSSearchAlgorithm0.setMaxCardinality(3058);
      multiClassClassifierUpdateable0.setClassifier((Classifier) null);
      Attribute attribute0 = new Attribute("");
      arrayList0.add(attribute0);
      boolean[][] booleanArray0 = new boolean[6][4];
      Attribute.typeToString(1);
      boolean[] booleanArray1 = new boolean[5];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray0[4] = booleanArray1;
      iCSSearchAlgorithm0.existsSepSet(4, 2, 3, booleanArray0);
      iCSSearchAlgorithm0.maxCardinalityTipText();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("PackageRepository.prop", arrayList0, 1);
      iCSSearchAlgorithm0.m_instances = instances0;
      multiClassClassifierUpdateable0.setDebug(false);
      arrayList0.remove((Object) ".arff");
      multiClassClassifierUpdateable0.setClassifier(multiClassClassifierUpdateable0);
      Attribute attribute0 = new Attribute(".bsi");
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      multiClassClassifierUpdateable0.getRevision();
      Attribute attribute1 = new Attribute("8034", 2);
      Attribute.typeToString(attribute1);
      arrayList0.add(attribute1);
      iCSSearchAlgorithm0.setMaxCardinality((-3018));
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      Function<Attribute, InputStream> function0 = (Function<Attribute, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Attribute, ? extends InputStream>) function0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      arrayList0.add(attribute1);
      BayesNet bayesNet0 = new BayesNet();
      try { 
        iCSSearchAlgorithm0.search(bayesNet0, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("PackageRepository.prop", arrayList0, 1);
      iCSSearchAlgorithm0.m_instances = instances0;
      multiClassClassifierUpdateable0.setDebug(false);
      arrayList0.remove((Object) ".arff");
      multiClassClassifierUpdateable0.setClassifier(multiClassClassifierUpdateable0);
      Attribute attribute0 = new Attribute(".bsi");
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      multiClassClassifierUpdateable0.getRevision();
      attribute0.setWeight(3);
      Attribute attribute1 = new Attribute("8034", 2);
      Attribute.typeToString(attribute1);
      arrayList0.add(attribute1);
      iCSSearchAlgorithm0.setMaxCardinality((-3018));
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      Function<Attribute, InputStream> function0 = (Function<Attribute, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Attribute, ? extends InputStream>) function0);
      arrayList0.replaceAll(unaryOperator0);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      multiClassClassifierUpdateable0.getRevision();
      BayesNet bayesNet0 = new BayesNet();
      try { 
        iCSSearchAlgorithm0.search(bayesNet0, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }
}
