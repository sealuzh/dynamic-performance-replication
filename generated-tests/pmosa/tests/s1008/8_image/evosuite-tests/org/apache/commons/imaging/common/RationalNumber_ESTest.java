/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 13:05:17 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      String string0 = rationalNumber0.toString();
      assertEquals("-2,147,483,647", string0);
      
      String string1 = rationalNumber0.toDisplayString();
      assertEquals("-2147483647", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 2165);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-180L), 2165);
      rationalNumber0.toDisplayString();
      RationalNumber rationalNumber2 = RationalNumber.valueOf(0);
      assertEquals(0, rationalNumber2.numerator);
      
      String string0 = rationalNumber1.toString();
      assertEquals("-36/433 (-0.083)", string0);
      
      rationalNumber0.negate();
      RationalNumber.valueOf((-180L));
      RationalNumber.factoryMethod(0L, 433);
      rationalNumber0.toDisplayString();
      RationalNumber.factoryMethod(0L, 1);
      RationalNumber rationalNumber3 = RationalNumber.valueOf(2165);
      assertEquals(2165.0, rationalNumber3.doubleValue(), 0.01);
      
      String string1 = rationalNumber0.toDisplayString();
      assertEquals("0", string1);
      
      rationalNumber1.floatValue();
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod(1, 1);
      rationalNumber0.negate();
      rationalNumber4.floatValue();
      RationalNumber rationalNumber5 = RationalNumber.valueOf((-180L));
      assertEquals((-180.0F), rationalNumber5.floatValue(), 0.01F);
      
      RationalNumber.factoryMethod(0L, (-1884L));
      rationalNumber4.doubleValue();
      rationalNumber0.negate();
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1125.0);
      long long0 = rationalNumber0.longValue();
      assertEquals(1125L, long0);
      assertEquals(1125.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(0L, 1108L);
      RationalNumber rationalNumber1 = RationalNumber.valueOf(0.0);
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      rationalNumber2.toDisplayString();
      rationalNumber0.negate();
      RationalNumber rationalNumber3 = RationalNumber.valueOf(0);
      RationalNumber rationalNumber4 = RationalNumber.valueOf(1);
      assertEquals((short)1, rationalNumber4.shortValue());
      
      RationalNumber rationalNumber5 = RationalNumber.valueOf(1237.9943093994198);
      rationalNumber1.toString();
      RationalNumber rationalNumber6 = rationalNumber0.negate();
      rationalNumber6.toDisplayString();
      RationalNumber rationalNumber7 = rationalNumber0.negate();
      rationalNumber7.toDisplayString();
      String string0 = rationalNumber7.toString();
      RationalNumber.factoryMethod((-2018L), 1);
      rationalNumber0.floatValue();
      String string1 = rationalNumber1.toDisplayString();
      assertTrue(string1.equals((Object)string0));
      
      RationalNumber.valueOf(0);
      rationalNumber3.floatValue();
      rationalNumber2.intValue();
      rationalNumber2.floatValue();
      rationalNumber0.intValue();
      assertEquals(1, rationalNumber0.divisor);
      
      double double0 = rationalNumber5.doubleValue();
      assertEquals(1237.9901F, rationalNumber5.floatValue(), 0.01F);
      assertEquals((short)1237, rationalNumber5.shortValue());
      assertEquals(1237.990099009901, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.3296178341070117E-4);
      assertEquals(2, rationalNumber0.numerator);
      assertEquals(2.3296447291788001E-4, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(331.60297213);
      RationalNumber rationalNumber1 = RationalNumber.valueOf(2677694);
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(0L, 150L);
      RationalNumber.valueOf(0L);
      RationalNumber rationalNumber3 = rationalNumber2.negate();
      rationalNumber0.longValue();
      rationalNumber0.longValue();
      rationalNumber0.longValue();
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("331.603", string0);
      
      rationalNumber0.negate();
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod(2677694, 2147483647L);
      String string1 = rationalNumber3.toString();
      assertEquals("0", string1);
      
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod((-2677694), 1);
      rationalNumber4.toString();
      String string2 = rationalNumber4.toString();
      assertEquals("2677694/2147483647 (0.001)", string2);
      
      rationalNumber0.doubleValue();
      long long0 = rationalNumber1.longValue();
      assertEquals(2677694L, long0);
      
      RationalNumber rationalNumber6 = rationalNumber2.negate();
      rationalNumber3.intValue();
      RationalNumber rationalNumber7 = RationalNumber.valueOf(0.0);
      rationalNumber1.doubleValue();
      RationalNumber rationalNumber8 = RationalNumber.valueOf(1);
      rationalNumber8.toString();
      String string3 = rationalNumber6.toDisplayString();
      String string4 = rationalNumber7.toString();
      assertTrue(string4.equals((Object)string3));
      
      rationalNumber8.longValue();
      rationalNumber1.negate();
      int int0 = rationalNumber5.intValue();
      assertEquals((-2677694), int0);
      
      RationalNumber rationalNumber9 = RationalNumber.factoryMethod(1163L, 1);
      assertEquals(1163L, rationalNumber9.longValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      rationalNumber0.toString();
      rationalNumber0.longValue();
      rationalNumber0.longValue();
      rationalNumber0.toString();
      rationalNumber0.intValue();
      rationalNumber0.floatValue();
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber.factoryMethod(0L, 4027L);
      RationalNumber.valueOf(2.147483647E9);
      RationalNumber.valueOf(1.0E-8);
      rationalNumber1.toDisplayString();
      RationalNumber rationalNumber2 = RationalNumber.valueOf((-1.0));
      rationalNumber2.negate();
      RationalNumber.valueOf(0);
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod((-1L), 1);
      RationalNumber.factoryMethod(100000000, 727L);
      rationalNumber3.toString();
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(0L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(8.33333333275732E-4);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0.001", string0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(8.333333333333334E-4, rationalNumber0.doubleValue(), 0.01);
      assertEquals(8.3333335E-4F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483664L, 2147483664L);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483662L, 1L);
      int int0 = rationalNumber0.intValue();
      assertEquals((-2147483634), int0);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-2.147483634E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483637L), (-2147483637L));
      String string0 = rationalNumber0.toString();
      String string1 = rationalNumber0.toDisplayString();
      assertTrue(string1.equals((Object)string0));
      
      RationalNumber.factoryMethod(1, 2858L);
      RationalNumber rationalNumber1 = RationalNumber.valueOf(0.0);
      RationalNumber.factoryMethod(0, 1);
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod((-24L), (-2147483649L));
      rationalNumber3.toDisplayString();
      assertEquals(0L, rationalNumber3.longValue());
      assertEquals(1.1175870884977401E-8, rationalNumber3.doubleValue(), 0.01);
      
      rationalNumber2.longValue();
      assertEquals(1, rationalNumber2.divisor);
      
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod((-2147483637L), 12);
      String string2 = rationalNumber4.toDisplayString();
      assertEquals("-178,956,969.75", string2);
      
      String string3 = rationalNumber4.toString();
      assertEquals("-715827879/4 (-178,956,969.75)", string3);
      
      String string4 = rationalNumber1.toString();
      assertEquals("0", string4);
      
      RationalNumber rationalNumber5 = RationalNumber.valueOf((-1.0));
      assertEquals((-1L), rationalNumber5.longValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483653L), (-2147483653L));
      String string0 = rationalNumber0.toString();
      assertEquals("1", string0);
      
      String string1 = rationalNumber0.toDisplayString();
      assertEquals("1", string1);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, 2858L);
      assertEquals(2858, rationalNumber1.divisor);
      
      RationalNumber rationalNumber2 = RationalNumber.valueOf(0.0);
      assertEquals(0.0, rationalNumber2.doubleValue(), 0.01);
      
      RationalNumber rationalNumber3 = RationalNumber.valueOf(1.567161252751248E-4);
      assertEquals(1, rationalNumber3.numerator);
      
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod(0, 1);
      RationalNumber.factoryMethod(1, 1);
      String string2 = rationalNumber4.toString();
      assertEquals("0", string2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2360.59116517702));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-2,360.591", string0);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-18436217), 2147483662L);
      RationalNumber rationalNumber2 = rationalNumber0.negate();
      rationalNumber1.negate();
      assertEquals((-0.008585033F), rationalNumber1.floatValue(), 0.01F);
      
      long long0 = rationalNumber2.longValue();
      assertEquals(2360L, long0);
      
      RationalNumber.factoryMethod(9218109, 7810);
      RationalNumber.valueOf((-324.37289));
      float float0 = rationalNumber0.floatValue();
      assertEquals((-2360.591F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2360.59116517702));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-2,360.591", string0);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1L, 2147483662L);
      RationalNumber rationalNumber2 = RationalNumber.valueOf(1.027142475322762E-4);
      String string1 = rationalNumber0.toString();
      assertEquals("-18436217/7810 (-2,360.591)", string1);
      
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod((-1256L), 2147483662L);
      rationalNumber3.toDisplayString();
      RationalNumber rationalNumber4 = RationalNumber.valueOf(3463.1993127147766);
      assertEquals(3463L, rationalNumber4.longValue());
      
      RationalNumber rationalNumber5 = rationalNumber1.negate();
      rationalNumber5.toString();
      RationalNumber rationalNumber6 = RationalNumber.valueOf((-18436217));
      RationalNumber rationalNumber7 = RationalNumber.factoryMethod((-152L), (-18436217));
      rationalNumber1.toString();
      String string2 = rationalNumber5.toString();
      assertEquals("-1/-2147483634 (0)", string2);
      
      rationalNumber1.floatValue();
      rationalNumber3.toDisplayString();
      rationalNumber7.intValue();
      float float0 = rationalNumber3.floatValue();
      assertEquals((-5.848706E-7F), float0, 0.01F);
      
      RationalNumber rationalNumber8 = new RationalNumber(0, 7810);
      rationalNumber8.floatValue();
      rationalNumber6.negate();
      assertEquals((short) (-20601), rationalNumber6.shortValue());
      
      String string3 = rationalNumber2.toDisplayString();
      assertEquals("0", string3);
  }
}
