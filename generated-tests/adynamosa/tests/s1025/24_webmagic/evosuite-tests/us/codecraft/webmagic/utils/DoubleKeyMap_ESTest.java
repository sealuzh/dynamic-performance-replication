/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 16:01:20 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<HashMap<Object, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      doubleKeyMap0.put(hashMap1, (Object) hashMap0, (Object) "RO9");
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>(1, 2270);
      Object object0 = doubleKeyMap0.remove(hashMap1, (Object) hashMap2);
      assertEquals("RO9", object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Object, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, Object>(class0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      doubleKeyMap0.put(hashMap0, (Object) class0, (Object) class0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(2270, 2270);
      Object object0 = doubleKeyMap0.remove(hashMap1, (Object) hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<HashMap<Object, String>, Map<Object, Map<Map<String, String>, Map<Object, Object>>>> hashMap0 = new HashMap<HashMap<Object, String>, Map<Object, Map<Map<String, String>, Map<Object, Object>>>>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      HashMap<Object, Map<Map<String, String>, Map<Object, Object>>> hashMap2 = new HashMap<Object, Map<Map<String, String>, Map<Object, Object>>>();
      hashMap0.put(hashMap1, hashMap2);
      DoubleKeyMap<HashMap<Object, String>, Object, Map<Map<String, String>, Map<Object, Object>>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Object, Map<Map<String, String>, Map<Object, Object>>>(hashMap0);
      Map<Object, Map<Map<String, String>, Map<Object, Object>>> map0 = doubleKeyMap0.remove(hashMap1);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      doubleKeyMap0.put((String) null, (String) null, (String) null);
      Map<String, String> map0 = doubleKeyMap0.remove((String) null);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Object, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, Object>(class0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      doubleKeyMap0.put(hashMap0, (Object) class0, (Object) class0);
      Map<Object, Object> map0 = doubleKeyMap0.get(hashMap0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>(class0);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = doubleKeyMap1.remove((Object) null, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Map<String, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Map<String, String>, Integer>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<String, Map<String, String>> hashMap0 = new HashMap<String, Map<String, String>>();
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(hashMap0, class0);
      Map<String, String> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, HashMap<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<String, Integer>>();
      DoubleKeyMap<HashMap<Object, Object>, Object, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Object>, Object, String>();
      Map<Object, HashMap<Map<String, String>, HashMap<String, Map<String, Integer>>>> map0 = doubleKeyMap1.newMap();
      HashMap<HashMap<Object, Object>, Map<Object, Object>> hashMap0 = new HashMap<HashMap<Object, Object>, Map<Object, Object>>();
      DoubleKeyMap<HashMap<Object, Object>, Object, Object> doubleKeyMap2 = new DoubleKeyMap<HashMap<Object, Object>, Object, Object>(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Object object0 = doubleKeyMap2.put(hashMap1, (Object) map0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer(0);
      Object object0 = doubleKeyMap0.put(hashMap0, (Object) doubleKeyMap0, (Object) integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      DoubleKeyMap<Object, String, HashMap<String, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<String, Object>>(class0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap1 = doubleKeyMap1.put((Object) doubleKeyMap0, "", hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>();
      Integer integer0 = doubleKeyMap0.get("#", (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      Map<Object, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(map0);
      Object object1 = doubleKeyMap1.get(object0, "");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Integer, String>>(class0);
      Map<String, HashMap<Integer, String>> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<String, HashMap<String, String>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, String>, Object>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>();
      Map<Integer, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<HashMap<Object, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Object object0 = doubleKeyMap0.put(hashMap1, (Object) hashMap0, (Object) "RO9");
      DoubleKeyMap<Integer, String, String> doubleKeyMap1 = new DoubleKeyMap<Integer, String, String>();
      Map<Object, Map<String, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, String, Object> doubleKeyMap2 = new DoubleKeyMap<Object, String, Object>(map0);
      Object object1 = doubleKeyMap2.get(object0, "");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Integer, Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put((Map<Object, Object>) hashMap0, integer0, integer0);
      Integer integer1 = doubleKeyMap0.get((Map<Object, Object>) hashMap0, integer0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Object, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, Object>(class0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      doubleKeyMap0.put(hashMap0, (Object) class0, (Object) class0);
      Class class1 = (Class)doubleKeyMap0.put(hashMap0, (Object) class0, (Object) hashMap0);
      assertFalse(class1.isEnum());
  }
}
