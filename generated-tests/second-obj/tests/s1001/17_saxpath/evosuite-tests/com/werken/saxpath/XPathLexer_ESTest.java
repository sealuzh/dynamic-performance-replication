/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:54:11 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^Fw.MV>Up3l>");
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.consume(5);
      assertEquals("^Fw.MV>Up3l>", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C{>#Z{");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.comma();
      String string0 = token0.toString();
      assertEquals("[ (32) (C)", string0);
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("{>", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("#Z{", token2.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals("{", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.mod();
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("|=D0{Dq8k>&\"");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("|", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer2.mod();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      xPathLexer2.and();
      xPathLexer2.consume();
      boolean boolean0 = xPathLexer2.isIdentifierStartChar('0');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.setXPath("h<J:7aD+kC");
      Token token1 = xPathLexer0.leftParen();
      assertEquals("h", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("J", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals(":", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ge.fNP@\"]69");
      xPathLexer0.setXPath("A'&oh<o'h;'");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("A", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("( 2'");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("(", token0.getTokenText());
      
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("[ (");
      xPathLexer0.getXPath();
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals("[", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.setXPath("h<J:7aD+kC");
      xPathLexer0.consume();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("<", token1.getTokenText());
      assertEquals(7, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("J", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("n_)");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("n", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("_", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.or();
      Token token2 = xPathLexer0.slashes();
      assertEquals(")", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('_');
      assertTrue(boolean0);
      
      xPathLexer0.dots();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("h<J:7ak+k");
      Token token0 = xPathLexer0.at();
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      String string0 = token0.toString();
      assertEquals("[ (16) (h)", string0);
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.nextToken();
      Token token2 = xPathLexer0.leftBracket();
      String string1 = token2.toString();
      assertEquals("[ (3) (7)", string1);
      
      Token token3 = xPathLexer0.dollar();
      assertEquals("a", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.getPreviousToken();
      token1.toString();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.div();
      token2.toString();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      Token token4 = xPathLexer0.literal();
      assertNotNull(token4);
      assertEquals(27, token4.getTokenType());
      assertEquals("+", token4.getTokenText());
      
      Token token5 = xPathLexer0.getPreviousToken();
      String string2 = token5.toString();
      assertEquals("[ (18) (:)", string2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X[3");
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.consume((-1446));
      XPathLexer xPathLexer1 = new XPathLexer();
      token0.toString();
      xPathLexer1.star();
      Token token1 = xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer("uW#CxYX2+");
      token0.toString();
      xPathLexer2.nextToken();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N<pCZ<|JnurO");
      xPathLexer0.consume();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("p", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("CZ", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.isIdentifierChar('E');
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("<", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("( 2'");
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.plus();
      xPathLexer0.not();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z4gPU*F!HW_");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifier();
      assertEquals("", token0.getTokenText());
      
      xPathLexer0.star();
      Token token1 = xPathLexer0.star();
      assertEquals("F", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.mod();
      Token token2 = xPathLexer0.getPreviousToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("z4gPU", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("!", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = ".=D0{Dq8k,>&\"";
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer(".=D0{Dq8k,>&\"");
      xPathLexer1.mod();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("jfO~eM Z");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("j", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("fO", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("~eM Z", token2.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('h');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer(".=0{Dq8 ,>&");
      xPathLexer0.setXPath("r6.5 ");
      xPathLexer0.nextToken();
      xPathLexer0.colon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.number();
      xPathLexer0.setXPath("h<J:7aD+kC");
      xPathLexer0.pipe();
      xPathLexer0.at();
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.endPosition();
      xPathLexer0.rightParen();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ap*K8");
      xPathLexer0.at();
      xPathLexer0.hasMoreChars();
      xPathLexer0.isIdentifierStartChar('I');
      xPathLexer0.colon();
      xPathLexer0.slashes();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" ^@5$W<X'");
      XPathLexer xPathLexer1 = new XPathLexer(" ^@5$W<X'");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("^@5$W<X'", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("^", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".=0{ISq8k,>&");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      String string0 = token1.toString();
      assertEquals("[ (21) (=)", string0);
      
      Token token2 = xPathLexer0.dollar();
      token2.toString();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("{ISq8k,>&", token3.getTokenText());
      
      String string1 = token2.toString();
      assertEquals("[ (26) (0)", string1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "&@l?.pZ@b";
      XPathLexer xPathLexer1 = new XPathLexer("&@l?.pZ@b");
      Token token0 = xPathLexer1.identifierOrOperatorName();
      token0.toString();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.setPreviousToken(token0);
      token0.toString();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer1.not();
      token1.toString();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token2 = xPathLexer2.equals();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mYs}15h");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("m", token0.getTokenText());
      
      xPathLexer0.operatorName();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('W');
      assertTrue(boolean0);
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("Y", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(".=IS>q8k,>&");
      xPathLexer0.colon();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.getXPath();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer1.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N<pCZ<|JnurO");
      xPathLexer0.consume();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("p", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("C", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("Z", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" ^@5$W<X'");
      xPathLexer0.consume(139);
      XPathLexer xPathLexer1 = new XPathLexer("k@LgkwT&wB#MW*myZ");
      xPathLexer1.nextToken();
      Token token0 = xPathLexer1.not();
      assertEquals("@", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer1.getPreviousToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("k", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z4gPU*F!HW_");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("z4", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("gPU", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("*", token2.getTokenText());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("F", token3.getTokenText());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("!H", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(".=0{Dq8k,>&");
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer0.isIdentifierChar('.');
      xPathLexer0.comma();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1448));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      String string0 = "h<J:7ak+k";
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setXPath("h<J:7ak+k");
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("H,2dqSwjh{N");
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.consume((-41));
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.at();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(16, token0.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("h<J:7aD+kC");
      xPathLexer0.at();
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.slashes();
      xPathLexer1.whitespace();
      XPathLexer xPathLexer2 = new XPathLexer("V*]w'Cd?so{5<C");
      xPathLexer2.setXPath("V*]w'Cd?so{5<C");
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.nextToken();
      xPathLexer3.endPosition();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("871gI}rYY@z");
      Token token0 = xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.colon();
      Token token2 = xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer("K.o{5u2N");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.consume();
      xPathLexer2.identifierOrOperatorName();
      token2.toString();
      String string0 = token1.toString();
      assertEquals("[ (18) (7)", string0);
      
      String string1 = token2.toString();
      assertEquals("[ (6) (1)", string1);
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("gI", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer1.dots();
      assertEquals(14, token4.getTokenType());
      assertEquals("K.", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("aH=&)");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.doubleColon();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("( 2'");
      Token token0 = xPathLexer0.colon();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(" ", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (18) (()", string0);
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("2", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("'", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer1.whitespace();
      assertEquals((-2), token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ap*K8");
      xPathLexer0.setXPath("ap*K8");
      Token token0 = xPathLexer0.minus();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      String string0 = token0.toString();
      assertEquals("[ (6) (a)", string0);
      
      Token token1 = xPathLexer0.nextToken();
      Token token2 = xPathLexer0.leftBracket();
      String string1 = token2.toString();
      assertEquals("[ (3) (*)", string1);
      
      String string2 = token1.toString();
      assertEquals("[ (15) (p)", string2);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer0.whitespace();
      String string3 = token3.toString();
      assertEquals("[ (-2) ()", string3);
      
      XPathLexer xPathLexer2 = new XPathLexer("[l[~c=[aLNe!");
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("8", token4.getTokenText());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("Y(");
      XPathLexer xPathLexer3 = new XPathLexer("Y(");
      xPathLexer1.rightBracket();
      Token token0 = xPathLexer3.nextToken();
      xPathLexer3.rightParen();
      xPathLexer3.notEquals();
      Token token1 = xPathLexer3.doubleColon();
      xPathLexer3.minus();
      token0.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "K.o{5u2N";
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("K.o{5u2N");
      Token token0 = xPathLexer1.number();
      token0.toString();
      xPathLexer1.setPreviousToken(token0);
      Token token1 = xPathLexer0.doubleColon();
      xPathLexer0.consume();
      Token token2 = xPathLexer1.nextToken();
      token2.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("qc");
      xPathLexer0.colon();
      xPathLexer0.dots();
      xPathLexer0.equals();
      xPathLexer0.mod();
      xPathLexer0.literal();
      xPathLexer0.not();
      xPathLexer0.setXPath("qc");
      xPathLexer0.nextToken();
      xPathLexer0.hasMoreChars();
      xPathLexer0.identifier();
      xPathLexer0.consume((-1472));
      xPathLexer0.star();
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("( 2'");
      Token token0 = xPathLexer0.colon();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.equals();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer("iG/LQM3|~_*NG");
      xPathLexer1.doubleColon();
      xPathLexer1.leftBracket();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("iG/LQM3|~_*NG");
      xPathLexer0.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.comma();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.comma();
      xPathLexer3.mod();
      xPathLexer4.currentPosition();
      Token token1 = xPathLexer1.div();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pz4gPU*F!HW_");
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.equals();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.notEquals();
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("^dB%G@(4v");
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer0.pipe();
      xPathLexer0.isIdentifierChar('M');
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.at();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.setXPath("E<shN@]");
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      xPathLexer0.setXPath("h<J:7ak+k");
      Token token2 = xPathLexer0.at();
      Token token3 = xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      token2.toString();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(":", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      xPathLexer0.mod();
      String string0 = token2.toString();
      assertEquals("[ (16) (h)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token5);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.or();
      String string1 = token5.toString();
      assertEquals("[ (15) (7ak)", string1);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (16) (h)");
      xPathLexer3.mod();
      String string2 = token3.toString();
      assertEquals("[ (7) (<)", string2);
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token7 = xPathLexer0.number();
      assertEquals("", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("ml8N8&CWF1b0Qp");
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.currentPosition();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer("=Wf}xS2X~3");
      xPathLexer1.rightParen();
      xPathLexer1.nextToken();
      xPathLexer0.LA(0);
      String string0 = xPathLexer0.getXPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("25;");
      Token token0 = xPathLexer0.equals();
      assertEquals("2", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("5", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("( 2'");
      Token token0 = xPathLexer0.colon();
      xPathLexer0.leftBracket();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.hasMoreChars();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.star();
      xPathLexer1.consume(1564);
      assertEquals("", xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      xPathLexer1.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".)U8f0[4}=qn#j8i");
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.endPosition();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.plus();
      xPathLexer1.number();
      xPathLexer0.at();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.relationalOperator();
      xPathLexer2.comma();
      xPathLexer0.setXPath("X\"%&q=I");
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^Fw.MV>Up3l>");
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.consume(5);
      assertEquals("^Fw.MV>Up3l>", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("r6.5 ");
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Nq!kuQQC^9V9e29:");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      Token token0 = xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("*4DIc1/O(m]Sd,v$x@M");
      xPathLexer0.and();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.rightBracket();
      Token token2 = xPathLexer0.dollar();
      xPathLexer0.identifier();
      xPathLexer0.number();
      token2.toString();
      xPathLexer0.dots();
      token1.toString();
      xPathLexer0.nextToken();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/ d'");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer1.setXPath("/ d'");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("/ d'");
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setXPath("JEd=bV:`SVc(r$n]E");
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "Aj3x]p}Z'[";
      xPathLexer0.setXPath("Aj3x]p}Z'[");
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.dollar();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.colon();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.setXPath("h<J:7aD+kC");
      xPathLexer0.at();
      xPathLexer0.leftBracket();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.plus();
      xPathLexer0.minus();
      token0.toString();
      Token token1 = xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.rightParen();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7}SMA40V\"H,RfcHaD");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("7}SMA40V\"H,RfcHaD");
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token1 = xPathLexer2.leftBracket();
      xPathLexer0.number();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("*4Dc&/O(g]Sd,v$x@M");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("*", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      String string0 = token1.toString();
      assertEquals("[ (1) (4)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("0");
      Token token2 = xPathLexer2.nextToken();
      assertEquals("0", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer2.rightParen();
      assertEquals(2, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.literal();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(3, int0);
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.setXPath("-[t0l&!r*'");
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      assertEquals("-", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("RPyZIO>O#c1H#");
      xPathLexer0.currentPosition();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("P", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("yZIO", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("*4DIc1/O(m]Sd,v$x@M");
      xPathLexer0.mod();
      xPathLexer0.slashes();
      xPathLexer0.not();
      Token token0 = xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.notEquals();
      xPathLexer0.minus();
      xPathLexer0.number();
      token1.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token1);
      XPathLexer xPathLexer1 = new XPathLexer("*4DIc1/O(m]Sd,v$x@M");
      Token token2 = xPathLexer0.and();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("><?`hb&q$pq{i[uPLW0~");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      Token token1 = xPathLexer0.plus();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      token0.toString();
      xPathLexer1.identifierOrOperatorName();
      Token token2 = xPathLexer1.leftBracket();
      xPathLexer1.not();
      token1.toString();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("!>wh B9Q");
      Token token0 = xPathLexer1.nextToken();
      xPathLexer1.at();
      xPathLexer1.plus();
      token0.toString();
      xPathLexer1.rightParen();
      xPathLexer1.rightBracket();
      xPathLexer1.nextToken();
      token0.toString();
      xPathLexer0.at();
      Token token1 = xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "!>wh B9Q";
      XPathLexer xPathLexer1 = new XPathLexer("R<ly");
      xPathLexer1.nextToken();
      Token token0 = xPathLexer0.rightParen();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("*4DIc1/O(m]Sd,v$x@M");
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.dollar();
      Token token2 = xPathLexer0.minus();
      token1.toString();
      token0.toString();
      token2.toString();
      xPathLexer0.setPreviousToken(token0);
      token1.toString();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = new XPathLexer("[ (11) (*)");
      xPathLexer1.leftBracket();
      xPathLexer2.div();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.setXPath("ml88&CWF1b0Qp");
      Token token5 = xPathLexer0.dots();
      assertEquals("m", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertNotSame(token6, token1);
      
      token6.toString();
      token6.toString();
      Token token7 = xPathLexer0.dollar();
      assertEquals("l", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<;KAUrX*");
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      String string0 = null;
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.number();
      xPathLexer0.literal();
      xPathLexer0.setXPath("PGX70/Q`-|");
      xPathLexer0.notEquals();
      xPathLexer0.comma();
      xPathLexer0.rightParen();
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("RPyZIO>O#c1H#");
      xPathLexer0.currentPosition();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("PyZIO", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.currentPosition();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer("=Wf}xS2X~3");
      Token token0 = xPathLexer1.plus();
      assertEquals("=", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer1.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("W", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("f", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.setXPath("e4DIc1JO(m]Sd,v$x@M");
      Token token5 = xPathLexer0.nextToken();
      assertEquals("e4DIc1JO(m]Sd,v$x@M", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals("e", token6.getTokenText());
      assertEquals(1, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.star();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("MZ&g+");
      Token token0 = xPathLexer0.dollar();
      assertEquals("M", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      token1.toString();
      token1.toString();
      token1.toString();
      xPathLexer0.mod();
      token1.toString();
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (4) (Z)", string0);
      
      Token token3 = xPathLexer0.pipe();
      assertEquals("g", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("+", token4.getTokenText());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.or();
      xPathLexer0.literal();
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('3');
      assertTrue(boolean0);
      
      Token token10 = xPathLexer0.minus();
      assertEquals(6, token10.getTokenType());
      
      xPathLexer0.consume(110);
      xPathLexer0.isIdentifierStartChar('3');
      Token token11 = xPathLexer0.getPreviousToken();
      assertEquals(4, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<;KAUrX*");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("Aj3x]p}Z'[");
      Token token0 = xPathLexer0.dollar();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      token0.toString();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("j3x", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      token0.toString();
      Token token2 = xPathLexer0.rightParen();
      assertEquals("]", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      token0.toString();
      Token token3 = xPathLexer0.at();
      String string0 = token0.toString();
      assertEquals("[ (26) (A)", string0);
      
      String string1 = token3.toString();
      assertEquals("[ (16) (p)", string1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5Q2(L#cy");
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.endPosition();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("><?`hb&q$pq{i[uPLW0~");
      Token token0 = xPathLexer0.nextToken();
      String string0 = token0.toString();
      assertEquals("[ (9) (>)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.colon();
      assertEquals("<", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer1.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("?", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("`", token4.getTokenText());
      
      xPathLexer1.setXPath(".i\"6+HG5.C6pZP<}s");
      Token token5 = xPathLexer0.at();
      assertEquals("h", token5.getTokenText());
      
      Token token6 = xPathLexer1.leftParen();
      assertEquals(".", token6.getTokenText());
      
      xPathLexer0.consume();
      Token token7 = xPathLexer1.nextToken();
      assertEquals("i", token7.getTokenText());
      
      Token token8 = xPathLexer0.identifier();
      xPathLexer0.div();
      String string1 = token8.toString();
      assertEquals("[ (15) ()", string1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.setXPath("bF6s[MnlYCf|VLhj");
      xPathLexer0.at();
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K.o{5u2N");
      Token token0 = xPathLexer0.number();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      token1.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer0.nextToken();
      token1.toString();
      xPathLexer0.notEquals();
      xPathLexer1.setPreviousToken((Token) null);
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.nextToken();
      String string0 = "";
      xPathLexer0.setXPath("");
      XPathLexer xPathLexer1 = new XPathLexer("M#I,x@Bit>X[\u0000");
      xPathLexer1.nextToken();
      xPathLexer0.colon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("|=D0{Dq8k>&\"");
      xPathLexer2.nextToken();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer2.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.plus();
      xPathLexer3.rightParen();
      xPathLexer0.relationalOperator();
      xPathLexer1.relationalOperator();
      xPathLexer3.mod();
      xPathLexer1.comma();
      xPathLexer3.and();
      xPathLexer0.hasMoreChars();
      xPathLexer3.consume();
      assertNull(xPathLexer3.getXPath());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      String string0 = "K.o{5u2N";
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("K.o{5u2N");
      Token token0 = xPathLexer1.dots();
      xPathLexer1.setPreviousToken(token0);
      Token token1 = xPathLexer0.slashes();
      xPathLexer1.slashes();
      xPathLexer0.and();
      xPathLexer0.dots();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.number();
      XPathLexer xPathLexer3 = new XPathLexer("K.o{5u2N");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
