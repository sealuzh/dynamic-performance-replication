/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:36:15 GMT 2018
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.serializer.DateCodec;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.ValueFilter;
import com.alibaba.fastjson.util.TypeUtils;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.InputStream;
import java.lang.reflect.Type;
import java.time.Instant;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateCodec_ESTest extends DateCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("sj<Bq41:zw");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) "sj<Bq41:zw", (Object) defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse error
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 308);
      Double double0 = new Double((-997.0));
      dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) double0, (Object) null);
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      dateCodec0.write(jSONSerializer0, double0, (Object) null, (Type) null, 0);
      assertNull(jSONSerializer0.getDateFormatPattern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00", parserConfig0);
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      Date date1 = dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) null, (Object) date0);
      assertNotNull(date1);
      
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
      
      Class<Byte> class0 = Byte.TYPE;
      dateCodec0.cast((DefaultJSONParser) null, (Type) class0, (Object) class0, (Object) null);
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Long long0 = new Long((-190281065685395680L));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("STyke=a]#se");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) long0, (Object) "STyke=a]#se");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"STyke=a]#se\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      ParserConfig parserConfig0 = ParserConfig.global;
      Long long0 = new Long((-2606));
      Date date0 = TypeUtils.castToDate(long0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0001-01-01t00:00:00+08:00", parserConfig0, (-2606));
      JSON.setDefaultTypeKey("fastjson.parser.autoTypeAccept");
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Long long1 = new Long((-2606));
      MockDate mockDate0 = new MockDate((-2606), 1, 22);
      DateCodec dateCodec1 = new DateCodec();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      dateCodec1.write(jSONSerializer0, date0, mockGregorianCalendar0, (Type) null, 2);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 308);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      dateCodec0.instance.cast(defaultJSONParser0, (Type) null, (Object) mockMinguoDate0, (Object) "");
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig parserConfig1 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0001-01-01t00:00:00+08:00", parserConfig1, (-2606));
      JSON.setDefaultTypeKey("fastjson.parser.autoTypeAccept");
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Long long0 = new Long((-2606));
      MockDate mockDate0 = new MockDate((-2606), 1, 0);
      DateCodec dateCodec1 = new DateCodec();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      MockCalendar.getInstance();
      Float float0 = new Float((float) 0);
      MockJapaneseDate mockJapaneseDate0 = dateCodec1.cast(defaultJSONParser0, (Type) class0, (Object) float0, (Object) "0001-01-01t00:00:00+08:00");
      assertNull(mockJapaneseDate0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Long long0 = new Long((-190281065685395680L));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00T00:00:00");
      dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) long0, (Object) "0000-00-00T00:00:00");
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getCalendarType();
      MockDate mockDate0 = new MockDate();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[F");
      Double double0 = new Double(0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      Double.sum(0.0, 0.0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature1 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[0] = serializerFeature1;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0, serializeConfig0);
      Integer integer0 = new Integer(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        dateCodec0.write(jSONSerializer0, integer0, double0, (Type) null, 12);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Date
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getCalendarType();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("gregory");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[7] = serializerFeature1;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      mockGregorianCalendar0.clear(2);
      SerializeConfig serializeConfig0 = new SerializeConfig(2);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0, serializeConfig0);
      jSONSerializer0.writeWithFieldName((Object) serializerFeature0, (Object) serializeConfig0);
      dateCodec0.instance.write(jSONSerializer0, date0, serializeConfig0, (Type) null, 1);
      assertEquals(26, serializeWriter0.size());
      
      System.setCurrentTimeMillis(2);
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String string0 = File.pathSeparator;
      mockGregorianCalendar0.getGregorianChange();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":");
      mockGregorianCalendar0.getLeastMaximum(0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Double double0 = new Double(0);
      Double.isFinite(0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      dateCodec0.write(jSONSerializer0, double0, bufferedInputStream0, (Type) null, 1);
      System.setCurrentTimeMillis((-407L));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getCalendarType();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("gregory");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      mockGregorianCalendar0.clear(2);
      SerializeConfig serializeConfig0 = new SerializeConfig(2);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0, serializeConfig0);
      jSONSerializer0.writeWithFieldName((Object) serializerFeature0, (Object) serializeConfig0);
      dateCodec0.instance.write(jSONSerializer0, date0, serializeConfig0, (Type) null, 1);
      assertEquals(14, serializeWriter0.size());
      
      System.setCurrentTimeMillis(2);
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getCalendarType();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("gregory");
      Double double0 = new Double(0);
      JSON.setDefaultTypeKey("gregory");
      ClassLoader.getSystemClassLoader();
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0, serializeConfig0);
      Float float0 = new Float((-933.104406362));
      Class<Integer> class0 = Integer.class;
      serializeConfig0.getObjectWriter(class0);
      Float.isFinite(0);
      JSON.DEFFAULT_DATE_FORMAT = "fastjson.parser.autoTypeAccept";
      mockGregorianCalendar0.setFirstDayOfWeek(93);
      MockDate mockDate0 = new MockDate(93, 1, 93, 807, (-2959), (-2959));
      dateCodec0.getFastMatchToken();
      Integer integer0 = Integer.getInteger("gregory", 2);
      dateCodec0.write(jSONSerializer0, integer0, jSONSerializer0, class0, 2);
      assertEquals(26, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      ParserConfig parserConfig0 = ParserConfig.global;
      Long long0 = new Long(0L);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00", parserConfig0);
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      byte[] byteArray0 = new byte[7];
      jSONSerializer0.getPropertyPreFilters();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      SerializeConfig.getGlobalInstance();
      List<ValueFilter> list0 = jSONSerializer0.valueFilters;
      dateCodec0.write(jSONSerializer0, (Object) null, (Object) null, (Type) null, 0);
      defaultJSONParser0.getExtraProcessors();
      dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) null, (Object) "0000-00-00");
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
      
      dateCodec0.write(jSONSerializer0, (Object) null, "0000-00-00", (Type) null, 0);
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("G#A_)wKSp:~nu<B");
      int int0 = Calendar.ALL_STYLES;
      DateCodec dateCodec0 = DateCodec.instance;
      JSON.DEFAULT_TYPE_KEY = "@ePa(";
      JSON.DEFFAULT_DATE_FORMAT = "I+=hHt";
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) "I+=hHt", (Object) "/Date(not suprt /w3 cl>s : ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Date(not suprt /w3 cl>s : \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
