/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:24:36 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = new RE2("6^`oyOKVgqLXpn?");
      rE2_0.reset();
      assertEquals("6^`oyOKVgqLXpn?", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("oO{iQ7\"rIY.qeh]m,6.");
      String[] stringArray0 = rE2_0.findSubmatch("oO{iQ7\"rIY.qeh]m,6.");
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = RE2.match("J8OR3_BOUNDARY", "J8OR3_BOUNDARY");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("com.google.re2j.Prog$1");
      // Undeclared exception!
      try { 
        rE2_0.replaceFirst((String) null, "com.google.re2j.Prog$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      RE2 rE2_0 = RE2.compile("|ce}p*Wz]A~8lSt ,W");
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = new RE2("#3iu8CFvM");
      rE2_0.toString();
      int[] intArray0 = rE2_0.findSubmatchIndex("");
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<String> list0 = rE2_0.findAll("", 1);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      List<String[]> list0 = rE2_0.findAllSubmatch("", 929);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("QAFqN6?l+~y:");
      String string0 = rE2_0.replaceAll("QAFqN6?l+~y:", "QAFqN6?l+~y:");
      assertEquals("QAFqN6?l+~y:", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      String string0 = rE2_0.replaceFirst("can't happen", "");
      assertEquals("can't happen", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("y?-VI2Xi<bI+2@@dx", 547, false);
      String string0 = rE2_0.replaceFirst("y?-VI2Xi<bI+2@@dx", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = new RE2("c.$w,");
      assertEquals("c.$w,", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.toString();
      assertEquals("c.$w,", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("c.$w,", string0);
      
      int[] intArray0 = rE2_0.findIndex("c.$w,");
      assertEquals("c.$w,", rE2_0.toString());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = new RE2("Gkx_qy7/ZL&?~|g5,m");
      assertEquals("Gkx_qy7/ZL&?~|g5,m", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-50);
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 1829);
      assertArrayEquals(new byte[] {(byte) (-50)}, byteArray0);
      assertEquals("Gkx_qy7/ZL&?~|g5,m", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllIndex("", 3984);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllIndex("", (-491));
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX(";gV6o+ uX1]Sqp7{t0 ");
      assertEquals(";gV6o+ uX1]Sqp7{t0 ", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch(";gV6o+ uX1]Sqp7{t0 ", 516);
      assertEquals(";gV6o+ uX1]Sqp7{t0 ", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("5");
      assertEquals("5", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String> list0 = rE2_0.findAll("5", 1);
      assertEquals("5", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-114);
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte) (-114));
      assertArrayEquals(new byte[] {(byte) (-114)}, byteArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("^>");
      assertEquals("^>", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.find("^>");
      assertEquals("^>", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Machine machine0 = rE2_0.get();
      assertEquals("^>", rE2_0.toString());
      assertNotNull(machine0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("8OR3_BOUNDARY");
      assertEquals("8OR3_BOUNDARY", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)35);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("8OR3_BOUNDARY", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("com0google.re2j.Prog$1");
      assertEquals("com0google.re2j.Prog$1", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String[] stringArray0 = rE2_0.findSubmatch("com0google.re2j.Prog$1");
      assertEquals("com0google.re2j.Prog$1", rE2_0.toString());
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        rE2_0.replaceFirst((String) null, "com0google.re2j.Prog$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      RE2 rE2_0 = RE2.compileImpl("", 42620, false);
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals("", rE2_0.toString());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll("fUt;%+oK9xc@", 1);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = rE2_0.match("fUt;%+oK9xc@");
      assertEquals("", rE2_0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("{w");
      assertEquals("{w", rE2_0.toString());
      assertNotNull(rE2_0);
      
      boolean boolean0 = rE2_0.match("{w");
      assertEquals("{w", rE2_0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("can't happen", 3984, false);
      assertEquals("can't happen", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (-1141));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("can't happen", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("]8+3WNB&XdFX");
      assertEquals("]8+3WNB&XdFX", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("]8+3WNB&XdFX", (-449));
      assertEquals("]8+3WNB&XdFX", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[3];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("", rE2_0.toString());
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (-63));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = rE2_0.toString();
      assertEquals("", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", (-484));
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-118);
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte) (-118));
      assertArrayEquals(new byte[] {(byte) (-118), (byte)122, (byte) (-118)}, byteArray0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = new RE2("U:,+");
      assertEquals("U:,+", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceAll("U:,+", "U:,+");
      assertEquals("U:,+", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("U:,++", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("Tifinagh");
      assertEquals("Tifinagh", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[2];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals("Tifinagh", rE2_0.toString());
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("$");
      assertEquals("$", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceAll("$", "$");
      assertEquals("$", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("$$", string0);
      
      int[] intArray0 = rE2_0.findSubmatchIndex("$$");
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertEquals("$", rE2_0.toString());
      assertNotNull(intArray0);
      
      Machine machine0 = rE2_0.get();
      assertEquals("$", rE2_0.toString());
      assertNotNull(machine0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals("", rE2_0.toString());
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)83;
      RE2 rE2_0 = RE2.compilePOSIX("com.google.re2j.RE2");
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("]8+3WNB&XdFX");
      assertEquals("]8+3WNB&XdFX", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllIndex("]8+3WNB&XdFX", 1485);
      assertEquals("]8+3WNB&XdFX", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("P");
      assertEquals("P", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = RE2.quoteMeta("P");
      assertNotNull(string0);
      assertEquals("P", string0);
      
      boolean boolean0 = rE2_0.match("P");
      assertEquals("P", rE2_0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RE2.quoteMeta("Xk1}\"yu&o");
      assertNotNull(string0);
      assertEquals("Xk1\\}\"yu&o", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("-");
      assertEquals("-", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (-63));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("-", rE2_0.toString());
      assertNull(list0);
      
      String string0 = rE2_0.toString();
      assertEquals("-", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[5];
      byte[] byteArray0 = new byte[0];
      intArray0[2] = 344;
      intArray0[3] = 889;
      intArray0[4] = 344;
      RE2 rE2_0 = RE2.compilePOSIX("|z:a4");
      assertEquals("|z:a4", rE2_0.toString());
      assertNotNull(rE2_0);
      
      rE2_0.prefixComplete = true;
      assertEquals("|z:a4", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("|z:a4", 344);
      assertEquals("|z:a4", rE2_0.toString());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)14;
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)14}, byteArray0);
      assertEquals("", rE2_0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("E/zEw0");
      assertEquals("E/zEw0", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String> list0 = rE2_0.findAll("", 1345);
      assertEquals("E/zEw0", rE2_0.toString());
      assertNull(list0);
      
      String string0 = rE2_0.toString();
      assertEquals("E/zEw0", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("E/zEw0", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("}1.'");
      assertEquals("}1.'", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2401);
      intArray0[1] = (-2420);
      intArray0[2] = (-2401);
      intArray0[3] = (-2401);
      boolean boolean0 = rE2_0.match("}1.'", (-2401), (-2401), (-2401), intArray0, 66369);
      assertArrayEquals(new int[] {(-2401), (-2420), (-2401), (-2401), 0}, intArray0);
      assertEquals("}1.'", rE2_0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 1156, true);
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-3);
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (-1358));
      assertArrayEquals(new byte[] {(byte) (-3)}, byteArray0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-71);
      int[] intArray0 = new int[0];
      RE2 rE2_0 = RE2.compile("UTF-8");
      assertEquals("UTF-8", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-71), (byte)0, (byte)0}, byteArray0);
      assertEquals("UTF-8", rE2_0.toString());
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllIndex("", 1428);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1428;
      boolean boolean0 = rE2_0.match("", 1428, (-350), 1428, intArray0, (-350));
      assertArrayEquals(new int[] {1428}, intArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("`pA5:Kr&0");
      assertEquals("`pA5:Kr&0", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("`pA5:Kr&0", rE2_0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte byte0 = (byte) (-100);
      Machine machine0 = rE2_0.get();
      assertEquals("", rE2_0.toString());
      assertNotNull(machine0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-100);
      byteArray0[2] = (byte) (-100);
      byteArray0[5] = (byte) (-100);
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte)0, (byte) (-100), (byte)0, (byte)0, (byte) (-100)}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals("", rE2_0.toString());
      assertNotNull(intArray0);
      
      int[] intArray1 = machine0.submatches();
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals("", rE2_0.toString());
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      int int0 = 0;
      List<String[]> list0 = rE2_0.findAllSubmatch("", 0);
      assertEquals("", rE2_0.toString());
      assertNull(list0);
      
      // Undeclared exception!
      try { 
        rE2_0.match("", 0, 0, (byte) (-100), intArray1, 50);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceAll("com.gooNle.re2j.R%2", "");
      assertEquals("", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("com.gooNle.re2j.R%2", string0);
      
      boolean boolean0 = rE2_0.longest;
      assertFalse(boolean0);
      
      int[] intArray0 = rE2_0.findSubmatchIndex("");
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals("", rE2_0.toString());
      assertNotNull(intArray0);
      
      rE2_0.prefix = "com.gooNle.re2j.R%2";
      assertEquals("", rE2_0.toString());
      
      String string1 = rE2_0.toString();
      assertEquals("", rE2_0.toString());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = rE2_0.findSubmatch("");
      assertEquals("", rE2_0.toString());
      assertNull(stringArray0);
      
      int[] intArray1 = rE2_0.findSubmatchIndex("com.gooNle.re2j.R%2");
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals("", rE2_0.toString());
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      String string2 = rE2_0.toString();
      assertEquals("", rE2_0.toString());
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int[] intArray2 = rE2_0.findIndex("|QDHS");
      assertEquals("", rE2_0.toString());
      assertNull(intArray2);
      
      rE2_0.prefix = "";
      assertEquals("", rE2_0.toString());
      
      boolean boolean1 = RE2.match("com.gooNle.re2j.R%2", "DTF8");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", (-26));
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      int[] intArray3 = rE2_0.findIndex("DTF8");
      assertArrayEquals(new int[] {0, 0}, intArray3);
      assertEquals("", rE2_0.toString());
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotNull(intArray3);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      byteArray0[4] = (byte) (-63);
      byteArray0[6] = (byte) (-63);
      boolean boolean2 = rE2_0.match("|QDHS", (-26), (-26), (byte)0, (int[]) null, 39);
      assertEquals("", rE2_0.toString());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string3 = "j;fY[2rg3]`\"w(,\\u.";
      String string4 = rE2_0.find(string3);
      assertEquals("", rE2_0.toString());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
  }
}
