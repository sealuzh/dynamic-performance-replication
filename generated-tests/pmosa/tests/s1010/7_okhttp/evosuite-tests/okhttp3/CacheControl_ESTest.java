/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 16:36:35 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noCache();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(16, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder0.minFresh(16, timeUnit1);
      assertSame(cacheControl_Builder2, cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.FORCE_CACHE.toString();
      cacheControl0.isPrivate();
      cacheControl0.noStore();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxStale(0, timeUnit0);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noStore();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.noTransform();
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder0.maxStale(0, timeUnit0);
      assertSame(cacheControl_Builder5, cacheControl_Builder4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.FORCE_CACHE.toString();
      cacheControl0.FORCE_NETWORK.headerValue = "~u{Y";
      boolean boolean0 = cacheControl0.noTransform();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.FORCE_CACHE.toString();
      cacheControl0.FORCE_NETWORK.headerValue = "~uB#{";
      boolean boolean0 = cacheControl0.noTransform();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.toString();
      cacheControl0.headerValue = "~uB#{";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "~uB#{";
      stringArray0[1] = "~uB#{";
      stringArray0[2] = "~uB#{";
      stringArray0[3] = "~uB#{";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl.parse(headers0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("6+)uoONO&MMyC,L", "Expected alternating header names and values");
      Headers headers1 = headers_Builder1.build();
      CacheControl.parse(headers1);
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      cacheControl2.FORCE_CACHE.toString();
      cacheControl0.noCache();
      cacheControl0.mustRevalidate();
      cacheControl0.isPublic();
      cacheControl1.noCache();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      int int0 = (-129);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxAge((-129), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -129
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("no-transform, ", "no-transform, ");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[6];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      boolean boolean0 = cacheControl0.noCache();
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noTransform());
      assertFalse(boolean0);
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      cacheControl_Builder0.maxAge(1, timeUnit0);
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      assertEquals(0, cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.FORCE_NETWORK.headerValue = "JOly:pr~ cTLD>zz&J(";
      cacheControl0.toString();
      cacheControl0.FORCE_NETWORK.headerValue = "max-stale=2147483647, only-if-cached";
      cacheControl0.minFreshSeconds();
      cacheControl0.noTransform();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noStore();
      cacheControl0.mustRevalidate();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxStale((-1), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder0.noCache();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "TMe1B:cUs6*MWr.";
      cacheControl0.toString();
      stringArray0[1] = "PWvZoe4uR];?W";
      stringArray0[2] = ")";
      stringArray0[3] = "";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl1.FORCE_CACHE.headerValue = "PWvZoe4uR];?W";
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      cacheControl0.headerValue = "namesAndValues == null";
      cacheControl_Builder1.minFresh(0, timeUnit0);
      cacheControl0.minFreshSeconds();
      cacheControl_Builder0.noCache();
      cacheControl0.mustRevalidate();
      cacheControl0.maxStaleSeconds();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.onlyIfCached();
      cacheControl0.toString();
      cacheControl0.mustRevalidate();
      cacheControl0.toString();
      // Undeclared exception!
      try { 
        cacheControl_Builder3.minFresh((-959), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -959
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.headerValue = "";
      cacheControl0.noCache();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(32, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noStore();
      cacheControl_Builder2.maxStale(32, timeUnit0);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.maxStale(32, timeUnit0);
      cacheControl_Builder3.build();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.onlyIfCached();
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.noCache();
      cacheControl_Builder5.maxAge(951, timeUnit0);
      cacheControl0.onlyIfCached();
      cacheControl_Builder0.minFresh(32, timeUnit0);
      cacheControl_Builder2.onlyIfCached();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers headers0 = new Headers(headers_Builder0);
      CacheControl.parse(headers0);
      String string0 = "e6 jo1AZ%9wy";
      // Undeclared exception!
      try { 
        headers_Builder0.add("e6 jo1AZ%9wy", "N<1)!\"k,R\"1g^y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected char 0x20 at 2 in header name: e6 jo1AZ%9wy
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.maxAgeSeconds();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder1.minFresh((-1), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "no-transform, ";
      stringArray0[1] = ")cZ%>?c8V^Qq>m'R=Y";
      stringArray0[2] = "max-age";
      stringArray0[3] = "Qokl5<`,]h>(43";
      stringArray0[4] = "d";
      stringArray0[5] = "headers == null";
      Headers headers0 = Headers.of(stringArray0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("d", ")cZ%>?c8V^Qq>m'R=Y");
      Headers.of((Map<String, String>) hashMap0);
      headers0.toMultimap();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.sMaxAgeSeconds();
      boolean boolean0 = cacheControl0.isPrivate();
      assertFalse(boolean0);
      
      cacheControl0.sMaxAgeSeconds();
      Headers headers1 = Headers.of(stringArray0);
      CacheControl cacheControl1 = CacheControl.parse(headers1);
      int int0 = cacheControl1.sMaxAgeSeconds();
      assertFalse(cacheControl1.onlyIfCached());
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), int0);
      assertFalse(cacheControl1.mustRevalidate());
      assertFalse(cacheControl1.isPublic());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.noTransform());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("cache-control", "s.limit Q8= spos");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "no-transform, ";
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Pragma", "no-transform, ");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      hashMap0.put(" '", (String) null);
      CacheControl.parse(headers0);
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(285, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.minFresh(285, timeUnit0);
      // Undeclared exception!
      try { 
        cacheControl_Builder2.maxStale((-748), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -748
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Pragma", "*jebn{| j[|btf");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put("eDmM^Wv(3eG~d", "must-revalidate");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.names();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      boolean boolean0 = cacheControl0.onlyIfCached();
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noCache());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("cache-control", "Ov)t3t:0W=d6e+x;}t");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      boolean boolean0 = cacheControl0.onlyIfCached();
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(boolean0);
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("cache-control", "s-maxage=");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl.parse(headers0);
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.minFresh((-987), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -987
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }
}
