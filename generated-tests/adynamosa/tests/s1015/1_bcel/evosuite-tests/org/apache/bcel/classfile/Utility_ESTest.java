/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 23:00:06 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)83;
      byte[] byteArray1 = Utility.decode("n@(~%mT=rF", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantString constantString0 = new ConstantString((-4102));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence1.markSupported();
      byteSequence2.markSupported();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-4102), (byte) (-1));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-1), 3289);
      String string0 = "9\\OhO<]IL){4=";
      // Undeclared exception!
      try { 
        Utility.signatureToString("9OhO<]IL){4=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `9OhO<]IL){4='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)76;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)76;
      byteArray1[1] = (byte)76;
      byteArray1[2] = (byte)90;
      byteArray1[3] = (byte)76;
      byteArray1[4] = (byte)76;
      byteArray1[5] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[16];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      constantArray0[5] = (Constant) constantMethodHandle0;
      constantArray0[4] = (Constant) constantMethodHandle0;
      constantArray0[5] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.compactClassName("anewarray", "anewarray", false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("LZ/5}_8J,;V");
      Utility.getSignature("'Bz?Ijv&/ZH/c");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)75;
      Object object0 = new Object();
      Utility.encode(byteArray0, false);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("ff 00 4b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00", string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$ff$AK$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A", string1);
      
      int int0 = Utility.clearBit(1530, 155);
      assertEquals(1530, int0);
      
      byte[] byteArray1 = Utility.decode("$ff$AK$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A", false);
      assertEquals(20, byteArray1.length);
      
      String string2 = Utility.accessToString(170);
      assertEquals("private static synchronized transient", string2);
      
      Utility.setBit(155, (-385));
      String string3 = Utility.classOrInterface(1530);
      assertEquals("class", string3);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-61);
      byteArray0[0] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.skip((byte) (-61));
      byteSequence0.readFully(byteArray0);
      byteSequence0.reset();
      byteSequence0.mark((byte) (-61));
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("monitorexit", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorexit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)23;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-43);
      Constant[] constantArray0 = new Constant[2];
      String string0 = "tx2{=R4t+*mMRoKOi9";
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("tx2{=R4t+*mMRoKOi9");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(247, (byte) (-43));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      constantPool1.copy();
      constantInvokeDynamic0.accept(emptyVisitor0);
      Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, 9, true);
      Utility.convertString("0:    <illegal opcode>\n1:    dstore_3\n2:    dstore_3\n3:    fload\t\t%0\n5:    fsub\n6:    <illegal opcode>\n");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("0:    <illegal opcode>\n1:    dstore_3\n2:    dstore_3\n3:    fload\t\t%0\n5:    fsub\n6:    <illegal opcode>\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    <illegal opcode>
         // 1:    dstore_3
         // 2:    dstore_3
         // 3:    fload\t\t%0
         // 5:    fsub
         // 6:    <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)96;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)124;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 120, (int) (byte)124, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.classOrInterface(3137);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.classOrInterface((byte) (-62));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("*n<6zbg(rPE? VB'v", "class", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("LocalVariableTable");
      Utility.getSignature("*n<6zbg(rPE? VB'v");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("3xw~|1JJ*q.s.", "interface", "]S%\"?j5|Mjds~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3xw~|1JJ*q.s.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      Object object1 = new Object();
      Object object2 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)74;
      objectArray0[1] = (Object) (byte)0;
      byteArray0[2] = (byte) (-47);
      byte[] byteArray1 = Utility.decode("? super ", false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.skip((byte) (-47));
      byteSequence0.readShort();
      constantPool0.toString();
      Utility.codeToString(byteSequence0, constantPool0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-47), 3353);
      // Undeclared exception!
      try { 
        Utility.signatureToString("swap", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `swap'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-111), 174);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.close();
      byteSequence2.readUnsignedByte();
      byteSequence0.skipBytes((byte) (-111));
      int int0 = Utility.clearBit(174, (byte) (-111));
      assertEquals(174, int0);
      
      int int1 = Utility.setBit(192, (byte) (-111));
      assertEquals(131264, int1);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence1.markSupported();
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byteSequence0.skipBytes(196);
      ConstantPool constantPool2 = constantPool0.copy();
      Utility.codeToString(byteSequence2, constantPool2, false);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool0);
      String string0 = Utility.getSignature("LZ/5}_8J,;V");
      assertEquals("LLZ/5}_8J,;V;", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ConstantString constantString0 = new ConstantString(112);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5,J=BP\"Ld");
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteSequence2, constantPool1);
      Utility.getSignature(".zip");
      // Undeclared exception!
      try { 
        Utility.signatureToString("dcmpl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dcmpl'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      Method.getComparator();
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)49;
      byteArray1[2] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      byteSequence0.close();
      byteSequence0.markSupported();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      byteSequence0.skipBytes((-2231));
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)85;
      byteArray2[1] = (byte)79;
      ByteSequence byteSequence3 = new ByteSequence(byteArray2);
      Utility.codeToString(byteSequence3, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.getSignature("(");
      byte[] byteArray0 = new byte[8];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-3186), (-3186));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.setBit(70, (-3186));
      try { 
        Utility.typeOfSignature("7\"0J@d@Oe(.RXH}8E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7\"0J@d@Oe(.RXH}8E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      String string0 = "p~pY[Gf|Z";
      byteArray0[3] = (byte)61;
      byteArray0[5] = (byte) (-83);
      byte[] byteArray1 = Utility.decode("p~pY[Gf|Z", false);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-83);
      byteArray2[1] = (byte) (-83);
      byteArray2[2] = (byte)61;
      byteArray2[3] = (byte)61;
      byteArray2[4] = (byte) (-83);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 1364, (int) (byte)61, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)117;
      byteArray0[2] = (byte)83;
      byte[] byteArray1 = Utility.decode("n@(~%mT=rF", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantString constantString0 = new ConstantString((-4102));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence1.markSupported();
      byteSequence2.markSupported();
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byteSequence2.skipBytes((-2589));
      Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence2, constantPool1);
      Utility.getSignature("n@(~%mT=rF");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "n@(~%mT=rF";
      stringArray0[1] = "Ln@(~%mT=rF;";
      Utility.accessToString(487, true);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.classOrInterface(3137);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      Constant[] constantArray0 = new Constant[1];
      Utility.isJavaIdentifierPart('j');
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-3357), (-203));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        constantPool0.getConstant((int) (byte) (-62));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -62. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(255, 255);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("Bogus");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.classOrInterface((byte)29);
      assertEquals("class", string0);
      
      Utility.codeToString(byteSequence0, constantPool0, false);
      constantMethodHandle1.copy();
      String string1 = Utility.compactClassName("Bogus", "class", true);
      assertEquals("Bogus", string1);
      
      constantPool1.copy();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool1, false);
      ConstantPool constantPool2 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool2);
      String string2 = Utility.getSignature("short");
      assertEquals("S", string2);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("S");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(245, (byte) (-43));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string0 = Utility.classOrInterface(9);
      assertEquals("class", string0);
      
      constantPool0.accept(emptyVisitor0);
      Utility.compactClassName("\\", "oN)nr\b(vK9N1ppDTu", false);
      Utility.compactClassName("\\");
      String string1 = Utility.getSignature("int");
      assertEquals("I", string1);
      
      String string2 = Utility.compactClassName("int");
      assertEquals("int", string2);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte) (-12);
      String string3 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-12), 2048);
      assertEquals("0:    dstore_0\n1:    fsub\n2:    fsub\n3:    lload_2\n4:    <illegal opcode>\n5:    fsub\n6:    <illegal opcode>\n7:    <illegal opcode>\n", string3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-68);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-68);
      Field.getComparator();
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 2524);
      assertEquals("0:    newarray\t\t<<illegal type>>\n2:    caload\n3:    newarray\t\t<<illegal type>>\n5:    nop\n", string0);
      
      Utility.searchOpcode(" arg");
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("bc 00 34 bc 00 00", string1);
      
      String string2 = Utility.convertString(".__0AbuJ");
      assertEquals(".__0AbuJ", string2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lload_3";
      stringArray0[1] = "aC";
      stringArray0[3] = "aC";
      String string3 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string3);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      Utility.decode("m:i.,WUvU", false);
      String string0 = "xo+}),q";
      byte[] byteArray1 = Utility.decode("xo+}),q", false);
      Utility.isJavaIdentifierPart('|');
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 256, (-40));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'");
      Utility.convertString("Warnin: Padying byte != 0 in ");
      byte[] byteArray0 = Utility.decode("Warnin: Padying byte != 0 in ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[21];
      byteArray1[0] = (byte) (-39);
      byteArray1[1] = (byte)25;
      byteArray1[2] = (byte)109;
      byteArray1[3] = (byte) (-109);
      byteArray1[4] = (byte) (-19);
      byteArray1[5] = (byte) (-73);
      byteSequence0.readFully(byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 48
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("Z;N^u-hA");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)57;
      Utility.convertString("Z;N^u-hA");
      String string0 = "[]";
      // Undeclared exception!
      try { 
        Utility.getSignature("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      boolean boolean0 = false;
      byte[] byteArray1 = Utility.decode("Qvh)bevRC", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readShort();
      byteSequence1.readUnsignedShort();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 1655, 72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(156);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.equals(byteArray0, byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("multianewarray", "h", "multianewarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: multianewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "(Z8r'\"";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("(Z8r'\"", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `8r'\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.classOrInterface(957);
      String string0 = "\\'0X";
      Utility.getSignature("'0X");
      Utility.isJavaIdentifierPart('_');
      try { 
        Utility.methodSignatureArgumentTypes("interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = Utility.accessToString((int) (byte)122);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.searchOpcode("lload_2");
      Utility.getSignature("lload_2");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      byteSequence0.readFully(byteArray0);
      byteSequence0.reset();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.clearBit((-3164), (-217));
      Utility.isJavaIdentifierPart('#');
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-122);
      byteArray0[2] = (byte) (-105);
      Utility.toHexString(byteArray0);
      Utility.encode(byteArray0, false);
      Utility.clearBit((byte)0, (byte) (-105));
      Utility.signatureToString("J#ht@.]}v-lAB<V_|;");
      Utility.decode("$A$A$97", false);
      try { 
        Utility.typeOfSignature("*kh4AE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: kh4AE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-95);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.toHexString(byteArray0);
      Utility.encode(byteArray0, true);
      Utility.clearBit((byte) (-95), (byte) (-95));
      Utility.signatureToString("J#ht@.]}v-lAB<V_|;");
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-95);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 86 a1", string0);
      
      int int0 = Utility.clearBit((byte) (-122), (byte) (-95));
      assertEquals((-124), int0);
      
      String string1 = Utility.signatureToString("J#ht@.]}v-lAB<V_|;");
      assertEquals("long", string1);
      
      byte byte0 = Utility.typeOfSignature("Illegal signature: ");
      assertEquals((byte)10, byte0);
      
      byte byte1 = Utility.typeOfSignature("J#ht@.]}v-lAB<V_|;");
      assertEquals((byte)11, byte1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Utility.getSignature("L;r&,+Cn#u;w");
      Utility.methodSignatureReturnType("L;r&,+Cn#u;w", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("v]d'\"r", "L;r&,+Cn#u;w", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: v]d'\"r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte) (-88);
      byteArray0[8] = (byte)125;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1199), (int) (byte) (-103), false);
      assertEquals("0:    <illegal opcode>\n1:    iconst_3\n2:    ifle\t\t#9237\n5:    dsub\n6:    ifeq\t\t#-22397\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      short short0 = Utility.searchOpcode("lastore");
      assertEquals((short)80, short0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.decode("\n", false);
      try { 
        Utility.typeOfSignature("/z}f0j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /z}f0j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      byteSequence0.close();
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.searchOpcode(")\t");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-95));
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.setBit(2403, (-2632));
      try { 
        Utility.typeOfSignature("freturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: freturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)79;
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte)78;
      byteArray1[4] = (byte) (-59);
      byteArray1[5] = (byte) (-126);
      byteArray1[6] = (byte) (-3);
      byteArray1[7] = (byte)91;
      byteArray1[8] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, (-706), (int) (byte) (-58), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 33533. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.signatureToString("J#ht@.]}v-lAB<V_|;");
      try { 
        Utility.methodSignatureToString("(SD@f+<8C9<veeis6F", "AK", "Ljava/lang/Object", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `@f+<8C9<veeis6F'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte) (-25);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-18), (-1823), true);
      assertEquals("0:    if_icmpgt\t\t#59\n3:    if_icmplt\t\t#4081\n6:    athrow\n7:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-40);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte) (-40);
      byteArray0[7] = (byte) (-40);
      byteArray0[8] = (byte) (-40);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 186, true);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    istore\t\t%216\n4:    nop\n5:    dup_x1\n6:    <illegal opcode>\n7:    <illegal opcode>\n8:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.getSignature("5J=BP\"Ld2");
      String[] stringArray0 = new String[1];
      stringArray0[0] = " methods:\n";
      boolean boolean0 = true;
      Utility.compactClassName(" methods:\n", "org.apache.commons.io.filefilter.NameFileFilter", true);
      Utility.getSignature(" methods:\n");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)25;
      byte byte0 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-24);
      byte byte1 = (byte)37;
      byteArray0[7] = (byte)37;
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantDouble constantDouble1 = null;
      try {
        constantDouble1 = new ConstantDouble(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "EZw% f");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-95);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "void");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte) (-73);
      byteArray1[2] = (byte)90;
      byteArray1[3] = (byte) (-73);
      byteArray1[4] = (byte) (-73);
      byteArray1[5] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5,J=BP\"Ld2");
      byte[] byteArray0 = Utility.decode("5,J=BP\"Ld2", false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-58);
      byteArray1[1] = (byte) (-58);
      byteArray1[2] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      byte[] byteArray2 = Utility.decode("putfield", false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantString constantString1 = new ConstantString((byte)49);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      ByteSequence byteSequence3 = new ByteSequence(byteArray2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence4 = new ByteSequence(byteArray1);
      byteSequence4.markSupported();
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString1;
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byteSequence0.skipBytes((byte) (-58));
      ByteSequence byteSequence5 = new ByteSequence(byteArray2);
      String string0 = Utility.codeToString(byteSequence5, constantPool1, false);
      assertEquals("irem", string0);
      
      String string1 = Utility.codeToString(byteSequence2, constantPool0);
      assertEquals("ifnull\t\t#-14758", string1);
      
      String string2 = Utility.getSignature("f\"m");
      assertEquals("Lf\"m;", string2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-12);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)18;
      byteArray0[0] = (byte)102;
      byteArray0[6] = (byte) (-43);
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("tx2{=R4t+*mMRoKOi9");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(245, (byte) (-43));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, 9, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.getSignature("5,J=BP\"Ld2");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)42, 3066, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-40), (int) (byte)17, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    fastore
         // 2:    aload_0
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)83;
      byte[] byteArray1 = Utility.decode("n@(~%mT=rF", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantString constantString0 = new ConstantString(193);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence1.markSupported();
      byteSequence2.markSupported();
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byteSequence2.skipBytes((-2589));
      Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence2, constantPool1);
      assertArrayEquals(new byte[] {(byte)110, (byte)64, (byte)40, (byte)126, (byte)37, (byte)109, (byte)84, (byte)61, (byte)114, (byte)70}, byteArray1);
      
      Utility.getSignature("n@(~%mT=rF");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "n@(~%mT=rF";
      stringArray0[1] = "Ln@(~%mT=rF;";
      stringArray0[2] = "fdiv";
      stringArray0[3] = "n@(~%mT=rF";
      stringArray0[4] = "n@(~%mT=rF";
      String string0 = Utility.methodTypeToSignature("Ft[S2n%7}+hJ/-|]Yy", stringArray0);
      assertEquals("(Ln@(~%mT=rF;LLn@(~%mT=rF;;Lfdiv;Ln@(~%mT=rF;Ln@(~%mT=rF;)[LFt;", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Utility.convertString("Warnin: Padying byte != 0 in ");
      assertEquals("Warnin: Padying byte != 0 in ", string0);
      
      byte[] byteArray0 = Utility.decode("Warnin: Padying byte != 0 in ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      byte[] byteArray1 = Utility.decode("invokevirtual", false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantString constantString1 = new ConstantString((byte)49);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      byteSequence3.markSupported();
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      byteSequence3.readFully(byteArray1);
      byteSequence4.markSupported();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byteSequence3.skipBytes((byte)49);
      Utility.codeToString(byteSequence2, constantPool0, false);
      String string1 = Utility.codeToString(byteSequence2, constantPool1);
      assertEquals("fdiv", string1);
      
      String string2 = Utility.getSignature("Warnin: Padying byte != 0 in ");
      assertEquals("LWarnin:;", string2);
      
      int int0 = Utility.clearBit((byte)49, 0);
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      byte byte0 = (byte) (-120);
      Utility.getSignature("n/8)7fy.i}Ti_");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-120));
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.clone();
      ConstantDouble constantDouble2 = new ConstantDouble(constantDouble1);
      ConstantDouble constantDouble3 = new ConstantDouble(constantDouble0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      Utility.codeToString(byteSequence1, constantPool1, true);
      Utility.convertString("n/8)7fy.i}Ti_");
      try { 
        Utility.typeOfSignature("NIsAv;<OA};X@q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NIsAv;<OA};X@q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)75;
      byte[] byteArray1 = Utility.decode("n@(~%mT=rF", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantString constantString0 = new ConstantString(193);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence1.markSupported();
      byteSequence2.markSupported();
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byteSequence2.skipBytes((-2589));
      Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence2, constantPool1);
      assertArrayEquals(new byte[] {(byte)110, (byte)64, (byte)40, (byte)126, (byte)37, (byte)109, (byte)84, (byte)61, (byte)114, (byte)70}, byteArray1);
      
      String string0 = Utility.getSignature("n@(~%mT=rF");
      assertEquals("Ln@(~%mT=rF;", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utility.convertString("Warnin: Padying byte != 0 in ");
      byte[] byteArray0 = Utility.decode("Warnin: Padying byte != 0 in ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Warnin: Padying byte != 0 in ";
      objectArray0[1] = (Object) byteSequence1;
      objectArray0[2] = (Object) "Warnin: Padying byte != 0 in ";
      objectArray0[3] = (Object) constantString0;
      objectArray0[4] = (Object) byteSequence1;
      Utility.printArray(objectArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("{Warnin: Padying byte != 0 in , org.apache.bcel.util.ByteSequence@7a11852b, Warnin: Padying byte != 0 in , CONSTANT_String[8](string_index = 22369), org.apache.bcel.util.ByteSequence@7a11852b}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{Warnin: Padying byte != 0 in , org.apache.bcel.util.ByteSequence@7a11852b, Warnin: Padying byte != 0 in , CONSTANT_String[8](string_index = 22369), org.apache.bcel.util.ByteSequence@7a11852b}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "5,J=BP\"Ld2";
      Utility.getSignature("5,J=BP\"Ld2");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(3290);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = null;
      try {
        constantMethodref0 = new ConstantMethodref(byteSequence2);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Method.getComparator();
      byte[] byteArray0 = Utility.decode("5,J=BP\"Ld2", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString((byte) (-115));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.markSupported();
      byteSequence2.markSupported();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byteSequence2.skipBytes(1);
      Utility.codeToString(byteSequence1, constantPool1, true);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence3, constantPool1);
      assertEquals(1, byteSequence3.getIndex());
      
      String string0 = Utility.getSignature("saload");
      assertEquals("Lsaload;", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ConstantString constantString0 = new ConstantString(112);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool1, false);
      Utility.codeToString(byteSequence2, constantPool1);
      Utility.getSignature("dload_1");
      // Undeclared exception!
      try { 
        Utility.signatureToString("dload_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dload_1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utility.methodTypeToSignature("!9PMg:J7I7?B", (String[]) null);
      Utility.methodSignatureToString("()L!9PMg:J7I7?B;", "()L!9PMg:J7I7?B;", "\n");
      Utility.accessToString(61, false);
      Utility.searchOpcode("UZx3-");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-26);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("+&wb@=,;%YD,_~-6<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &wb@=,;%YD,_~-6<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.isJavaIdentifierPart('D');
      byte byte0 = (byte) (-72);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utility.methodTypeToSignature("!9PMg:J7I7?B", (String[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "()L!9PMg:J7I7?B;");
      Utility.typeOfSignature("Z;N^u-hA");
      byte[] byteArray0 = Utility.decode("Invalid byte tag in constant pool: ", false);
      Utility.signatureToString("Z;N^u-hA", true);
      Constant[] constantArray0 = new Constant[5];
      ConstantInteger constantInteger0 = new ConstantInteger(43);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantDouble constantDouble0 = new ConstantDouble('=');
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantInteger0.accept(emptyVisitor0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.replace("_cSil!", "()L!9PMg:J7I7?B;", "Dyb`m:iPQF6|Ay%");
      try { 
        Utility.decode("Invalid byte tag in constant pool: ", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.compactClassName("\t(wide)", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-23);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("org.apache", "\t(wide)", false);
      assertEquals("org.apache", string0);
      
      String string1 = Utility.getSignature("\t(wide)");
      assertEquals("L(wide);", string1);
      
      Object object0 = new Object();
      Utility.printArray((Object[]) null);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-23);
      byteArray1[1] = (byte)45;
      byteArray1[2] = (byte)45;
      byteArray1[3] = (byte)112;
      byteArray1[4] = (byte)68;
      byteArray1[5] = (byte)68;
      byteArray1[6] = (byte)45;
      byteArray1[7] = (byte)68;
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-123);
      byte byte0 = (byte) (-115);
      byteArray0[2] = (byte) (-115);
      byte byte1 = (byte)18;
      byteArray0[3] = (byte)18;
      byteArray0[3] = (byte)106;
      Field.getComparator();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-115), (int) (byte)25);
      Utility.toHexString(byteArray0);
      Utility.convertString("00 85 8d 6a 00 00 00 00 00");
      try { 
        Utility.typeOfSignature("00 85 8d 6a 00 00 00 00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00 85 8d 6a 00 00 00 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-64);
      Method.getComparator();
      Utility.decode("aUc SeR", false);
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray1 = new byte[5];
      byteArray1[1] = (byte) (-64);
      byteArray1[2] = (byte) (-104);
      byteArray1[3] = (byte) (-64);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.classOrInterface((-1936));
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-104);
      byteArray2[1] = (byte) (-64);
      byteArray2[2] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, constantPool1, (-1936), (int) (byte) (-64));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dcmpg
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byte[] byteArray1 = Utility.decode("Qvh)bevRC", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence1.close();
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence2.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = "invokespecial";
      try { 
        Utility.methodSignatureArgumentTypes("invokespecial", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokespecial
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(255, 249);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("Bogus");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string0 = Utility.classOrInterface((byte) (-4));
      assertEquals("interface", string0);
      
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.compactClassName("Bogus", "interface", true);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("06 64 fc 91 a5 2f", string1);
      
      String string2 = Utility.compactClassName("Ab");
      assertEquals("Ab", string2);
      
      String string3 = Utility.getSignature("int");
      assertEquals("I", string3);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "5,J=BP\"Ld2";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(255, 249);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("Bogus");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.classOrInterface((byte) (-4));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 12, (-1192));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      byteArray0[0] = (byte)51;
      byteArray0[3] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("baload", "pQcw7Iad4<Bq7l~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"pQcw7Iad4<Bq7l~\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte) (-15);
      byteArray0[8] = (byte) (-87);
      String string0 = Utility.compactClassName("invokevirtual", "}", false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)68;
      byteArray1[1] = (byte) (-98);
      byteArray1[2] = (byte)45;
      byteArray1[3] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Z/5}_8J,";
      stringArray0[1] = "Z/5}_8J,";
      stringArray0[2] = "Z/5}_8J,";
      stringArray0[3] = "\t(wide)";
      stringArray0[4] = "short";
      stringArray0[5] = "invokespecial";
      stringArray0[6] = "short";
      Utility.methodTypeToSignature("Z/5}_8J,", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.searchOpcode("short");
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.replace("B]G'qg@m", "oyMcrw6S-P0G2", "invokespecial");
      try { 
        Utility.decode("ifle", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-95);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 b7 a1", string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$A$b7$a1", string1);
      
      int int0 = Utility.clearBit((byte) (-73), (byte) (-95));
      assertEquals((-75), int0);
      
      String string2 = Utility.signatureToString("J#ht@.]}v-lAB<V_|;");
      assertEquals("long", string2);
      
      byte[] byteArray1 = Utility.decode("$A$b7$a1", false);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-73), (byte) (-95)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Method.getComparator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wide");
      byte[] byteArray0 = Utility.decode("x4", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString((-1505));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.markSupported();
      byteSequence2.markSupported();
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byteSequence1.skipBytes(66);
      Utility.codeToString(byteSequence0, constantPool1, false);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool2);
      assertEquals("caload", string0);
      
      String string1 = Utility.getSignature("LR,lh1UiLpM+");
      assertEquals("LLR,lh1UiLpM+;", string1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmpeE5q");
      byteArray0[5] = (byte)95;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("if_icmpeE5q", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpeE5q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte)36;
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.getSignature("char");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = null;
      ConstantPool constantPool1 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.convertString("8e9}c,)kXU^&?H8_rQ");
      try { 
        Utility.typeOfSignature("18:h/ wh?\"`AQ1j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 18:h/ wh?\"`AQ1j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte)33;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[0] = (byte)33;
      int int0 = (-3235);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)33, (-3235));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-94);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[2] = (byte) (-78);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.setBit((byte) (-78), (byte) (-78));
      try { 
        Utility.methodSignatureReturnType(">\t", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JavaClass.getComparator();
      byte[] byteArray0 = Utility.decode("H,N(", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence2);
      ConstantMethodref constantMethodref1 = new ConstantMethodref((-991), (-1551));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H,N(");
      byteSequence0.read();
      String string0 = ",K!5Vx{n@8i[*Z~.C";
      String string1 = "HscJK\\v/@7zTyV";
      try { 
        MockURI.URI("dstore_1", ",K!5Vx{n@8i[*Z~.C", "HscJKv/@7zTyV", 73, "9S)[}+\\RPWyc_wOE*", "H,N(", ";C");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: dstore_1://,K!5Vx%7Bn%408i%5B*Z~.C@HscJKv/@7zTyV:739S)%5B%7D+%5CRPWyc_wOE*?H,N(#;C
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      Method.getComparator();
      Utility.decode("aUc SeR", false);
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray1 = new byte[5];
      byteArray1[1] = (byte)40;
      byteArray1[2] = (byte)40;
      byteArray1[3] = (byte)40;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.classOrInterface((-1936));
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-104);
      byteArray2[1] = (byte)40;
      byteArray2[2] = (byte)40;
      Utility.codeToString(byteArray2, constantPool1, (-1936), (int) (byte)40);
      Utility.isJavaIdentifierPart('2');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.typeOfSignature("0:    dcmpg\n1:    dload_2\n2:    dload_2\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    dcmpg
         // 1:    dload_2
         // 2:    dload_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      Object object1 = new Object();
      Object object2 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      objectArray0[1] = (Object) (byte)86;
      byteArray0[2] = (byte) (-47);
      byte[] byteArray1 = Utility.decode("? super ", false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-47), 3331);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)86, (int) (byte)74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte) (-90);
      byteArray1[2] = (byte) (-90);
      byteArray1[3] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = "Invalid signature: `";
      Utility.convertString("Invalid signature: `");
      Utility.accessToString(1634);
      try { 
        Utility.typeOfSignature("anewarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: anewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "(";
      Field.getComparator();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte) (-115);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 156, (-1301));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)61;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantString constantString0 = new ConstantString((byte)61);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(13, 199);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-549), (int) (byte) (-23));
      ConstantPool constantPool0 = new ConstantPool(byteSequence1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)61, 191);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-116);
      byte byte0 = (byte) (-85);
      byteArray0[6] = (byte) (-85);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " skipped");
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)68, (byte)95);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)68, (int) (byte)61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantString constantString0 = new ConstantString((byte) (-71));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = null;
      Utility.isJavaIdentifierPart(',');
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "=t";
      try { 
        Utility.typeOfSignature("=t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)28;
      byteArray0[1] = (byte)89;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.replace("D=,q)rC`jhL,", "A3", "D=,q)rC`jhL,");
      Utility.clearBit(199, 182);
      Utility.setBit((-1), 179);
      try { 
        Utility.typeOfSignature("A3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantString constantString0 = new ConstantString((byte) (-71));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence3.close();
      ConstantString constantString1 = new ConstantString((-725));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantString1;
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      Utility.compactClassName("iv>,+8^Q&o%F");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 732, (-442));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47360. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Method.getComparator();
      Utility.decode("aUc SeR", false);
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)40, (-1275), (LocalVariable[]) null, constantPool0);
      String string0 = "m\"2!J9hn+93P";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "(", "m\"2!J9hn+93P", false, localVariableTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object object0 = new Object();
      Utility.searchOpcode("(");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter1, objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) "\t<";
      Object object1 = new Object();
      objectArray0[4] = (Object) "\t<";
      Object object2 = new Object();
      objectArray0[6] = (Object) "\t<";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      objectArray0[1] = (Object) (byte)86;
      byteArray0[2] = (byte) (-47);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart(',');
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)56, 94);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iadd", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(12, 174);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-83), 171);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5116, (-4273));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Utility.getSignature("(");
      byte[] byteArray0 = new byte[27];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-74);
      byte byte0 = (byte) (-87);
      byteArray0[4] = (byte) (-87);
      ConstantString constantString0 = new ConstantString((byte)76);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-87), (byte)14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3135), (int) (byte)14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.getSignature("(");
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)14, (int) (byte)14, false);
      constantPool1.copy();
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)14, (int) (byte) (-15), false);
      Utility.fillup("lookupswitch", (-1402), false, 'r');
      try { 
        Utility.decode("impdep2", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "[;";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("Iz,Oo");
      String string0 = "(";
      byte byte0 = (byte) (-13);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-123);
      Field.getComparator();
      byte[] byteArray1 = Utility.decode(", class=<unknown>", false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)123, (int) (byte)18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Method.getComparator();
      byte[] byteArray0 = Utility.decode("*Z$TYb/s-", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(899);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)49;
      byteArray1[2] = (byte)49;
      byteArray1[2] = (byte) (-115);
      byteArray1[3] = (byte) (-115);
      byteArray1[4] = (byte)49;
      byteArray1[5] = (byte) (-115);
      byteArray1[6] = (byte) (-115);
      byteArray1[7] = (byte) (-115);
      byteArray1[8] = (byte)49;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(90, (byte) (-115));
      constantArray0[4] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, false);
      assertArrayEquals(new byte[] {(byte)42, (byte)90, (byte)19, (byte)89, (byte)98, (byte)47, (byte)115, (byte)45}, byteArray0);
      
      Utility.codeToString(byteSequence2, constantPool1);
      String string0 = Utility.getSignature("? super ");
      assertEquals("L?;", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantString constantString0 = new ConstantString((byte)36);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readUnsignedByte();
      byteSequence2.markSupported();
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("lconst_0");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString(45);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = null;
      boolean boolean0 = true;
      LocalVariableTable localVariableTable0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("nop", "0Z%Cf\"", (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)21;
      byteArray1[1] = (byte)21;
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)0, (-3222), true);
      Utility.isJavaIdentifierPart('f');
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)21, 163);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-115);
      byte byte0 = (byte)18;
      byteArray0[3] = (byte)18;
      byteArray0[3] = (byte)123;
      Field.getComparator();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.convertString("8e9}c,)kXU^&?H8_rQ");
      try { 
        Utility.typeOfSignature("8e9}c,)kXU^&?H8_rQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8e9}c,)kXU^&?H8_rQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.searchOpcode(")\t");
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteSequence0.readShort();
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence1);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence2);
      byteSequence0.reset();
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(182, (byte) (-95));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantMethodHandle0.setReferenceKind(182);
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantFloat constantFloat0 = null;
      try {
        constantFloat0 = new ConstantFloat(byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      Method.getComparator();
      Utility.decode("aUc SeR", false);
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-115);
      byteArray0[0] = (byte)40;
      byteArray1[2] = (byte)40;
      byteArray1[3] = (byte)40;
      byteArray1[4] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.convertString("aUc SeR");
      Object object0 = new Object();
      Utility.printArray((Object[]) constantArray0);
      Utility.classOrInterface((byte)40);
      Utility.searchOpcode("class");
      // Undeclared exception!
      try { 
        Utility.signatureToString("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `double'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("N5(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N5('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.methodTypeToSignature("!9PMg:J7I7?B", (String[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.methodSignatureArgumentTypes("()L!9PMg:J7I7?B;");
      byteSequence0.reset();
      Utility.methodSignatureArgumentTypes("()L!9PMg:J7I7?B;");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence1.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)26;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.searchOpcode(")\t");
      byte byte0 = (byte)44;
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)68, 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Utility.replace("kScr;eU", "kScr;eU", "kScr;eU");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("bipush\t\t21", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Utility.methodTypeToSignature("!9PMg:J7I7?B", (String[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.isJavaIdentifierPart('=');
      String string0 = "Z;N^u-hA";
      byte[] byteArray0 = Utility.decode("Z;N^u-hA", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 89, 2846);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = Utility.decode("tableswitch", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      Field.getComparator();
      byte[] byteArray1 = Utility.decode("',BY#M`$", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (short)29793, (int) (short)29793);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte) (-117);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)80, 114);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "!9PMg:J7I7?B";
      String string0 = Utility.methodTypeToSignature("'", stringArray0);
      assertEquals("(L!9PMg:J7I7?B;)L';", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-26);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.methodSignatureToString("(L!9PMg:J7I7?B;)L';", "Warning: Padding byte != 0 in ", "\n");
      assertEquals("\n ' Warning: Padding byte != 0 in (!9PMg:J7I7?B arg1)", string1);
      
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$a3$e6", string2);
      
      String string3 = Utility.accessToString(184, true);
      assertEquals("static final transient", string3);
      
      short short0 = Utility.searchOpcode("short");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)28;
      byteArray0[1] = (byte)90;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)28;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "Warnin: Padying byte != 0 in ";
      Utility.convertString("Warnin: Padying byte != 0 in ");
      byte[] byteArray0 = Utility.decode("Warnin: Padying byte != 0 in ", false);
      byte byte0 = (byte)84;
      byte byte1 = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("breakpoint");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: breakpoint
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.getSignature("5,J=BP\"Ld2");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format((byte) (-55), 195, false, 's');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y|&Xkz_A-)4`CX/", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y|&Xkz_A-)4`CX/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.getSignature("]#u<~R+P");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "L]#u<~R+P;";
      stringArray0[1] = "]#u<~R+P";
      stringArray0[2] = "invo#eVirtual";
      stringArray0[4] = "invo#eVirtual";
      stringArray0[5] = "short";
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = Utility.decode("tableswitch", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2144, 122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)126;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Field.getComparator();
      Constant.getComparator();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("iand");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iand'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = Utility.decode("tableswitch", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      Field.getComparator();
      byte[] byteArray1 = Utility.decode("5,J=BP\"Ld2", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (short)29793, (int) (byte)61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("!9PMg:J7I7?B", (String[]) null);
      assertEquals("()L!9PMg:J7I7?B;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte) (-40);
      byteArray0[7] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        Utility.typeOfSignature("X>jwpOMjTa6;dT}{4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X>jwpOMjTa6;dT}{4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-6);
      String string0 = "invokeVirtual";
      Utility.convertString("org.apache.bcel.classfile.FieldOrMethod");
      // Undeclared exception!
      try { 
        Utility.signatureToString("L|t0", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L|t0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Utility.getSignature("5,J=BP\"Ld2");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format((byte) (-55), 195, false, 's');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantString constantString0 = new ConstantString(184);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.readInt();
      constantPool0.setConstantPool(constantArray0);
      constantPool0.toString();
      Integer integer0 = new Integer(66);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureReturnType("1)CONSTANT_String[8](string_index = 184)\n2)CONSTANT_String[8](string_index = 184)\n3)CONSTANT_String[8](string_index = 184)\n4)CONSTANT_String[8](string_index = 184)\n5)CONSTANT_String[8](string_index = 184)\n6)CONSTANT_String[8](string_index = 184)\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("lconst_0");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString(45);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), 123);
      assertEquals("0:    nop\n1:    lreturn\n2:    lcmp\n3:    istore_2\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("!9PMg:J7I7?B", (String[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.methodSignatureArgumentTypes("()L!9PMg:J7I7?B;");
      Utility.methodSignatureArgumentTypes("()L!9PMg:J7I7?B;");
      // Undeclared exception!
      try { 
        Utility.signatureToString("LYj++z2b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LYj++z2b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("P[pgwfTgRGT0FO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P[pgwfTgRGT0FO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)97;
      byteArray0[8] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifne\t\t#20475", string0);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.convertString("EcC<GQzd\"\"");
      assertEquals("EcC<GQzd\\\"\\\"", string1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Utility.format(1473, 1473, true, 'g');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantString constantString0 = new ConstantString((byte)83);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.markSupported();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("aastore", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "Warnin: Padding byte != 0 in ";
      Utility.convertString("Warnin: Padding byte != 0 in ");
      byte[] byteArray0 = Utility.decode("breakpoint", false);
      byte byte0 = (byte)84;
      byte byte1 = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readShort();
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("breakpoint");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: breakpoint
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.typeOfSignature("Byte code error: ");
      ConstantString constantString0 = new ConstantString(315);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-94);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 44, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Utility.format(1473, 1473, true, 'g');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Field.getComparator();
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-3107), (-1180));
      assertEquals("0:    aastore\n1:    aastore\n2:    iconst_5\n3:    aastore\n4:    aastore\n5:    aastore\n6:    aastore\n7:    iload_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantString0;
      constantArray0[7] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-72), (int) (byte)84, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47104. Constant pool size is: 8
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-116);
      byte byte0 = (byte) (-78);
      byteArray0[6] = (byte) (-78);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " skipped");
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)68, (byte)95);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)68, (int) (byte)61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("QOsh.", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[8];
      byteSequence0.skipBytes((byte) (-117));
      byteArray1[0] = (byte) (-124);
      byteArray1[1] = (byte) (-117);
      byteArray1[2] = (byte) (-124);
      byteArray1[3] = (byte)21;
      byteArray1[4] = (byte) (-124);
      byteArray1[6] = (byte)24;
      byteArray1[7] = (byte)21;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("QOsh.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QOsh.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("!9PMg:J7I7?B", (String[]) null);
      assertEquals("()L!9PMg:J7I7?B;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte) (-40);
      byteArray0[7] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "bs~5Ui(,:,JG";
      String string1 = "invokespecial";
      boolean boolean0 = true;
      LocalVariableTable localVariableTable0 = null;
      try { 
        Utility.methodSignatureToString("bs~5Ui(,:,JG", "", "invokespecial", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: bs~5Ui(,:,JG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte byte0 = (byte)89;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("dup", "<", false);
      Utility.replace("", ";R'kdRM4E:", "dup");
      Constant[] constantArray0 = new Constant[3];
      try { 
        ConstantUtf8.getInstance((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[";
      stringArray0[1] = "[";
      stringArray0[2] = "if_icmpne";
      stringArray0[3] = "[";
      stringArray0[4] = "wRp[IT";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("wRp[IT", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.getSignature("]#u<~R+P");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "L]#u<~R+P;";
      stringArray0[1] = "]#u<~R+P";
      stringArray0[2] = "invo#eVirtual";
      stringArray0[4] = "invo#eVirtual";
      stringArray0[5] = "short";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      Utility.fillup("%J aTkZY-ZJdDDJpf_", (-741), false, '2');
      String string1 = Utility.signatureToString("Dont call getValueByte() on a non BYTE ElementValue", false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("o{N@W1#>jl", "fload_0", "f", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: o{N@W1#>jl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Field.getComparator();
      byte[] byteArray0 = Utility.decode("H,N(", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1551), (-1551), false);
      assertEquals("0:    dstore_1\n1:    aload_2\n2:    astore_3\n3:    dload_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Utility.searchOpcode(":H@!``Q,Mv3Nz7mH");
      Utility.searchOpcode(":H@!``Q,Mv3Nz7mH");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-94);
      Field.getComparator();
      byte[] byteArray1 = Utility.decode("&.X", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 155, (int) (byte)61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)35;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-43);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("tx2{=R4t+*mMRoKOi9");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(247, (byte) (-43));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, 9, true);
      Utility.convertString("0:    <illegal opcode>\n1:    dstore_3\n2:    <illegal opcode>\n3:    fload_1\n4:    nop\n5:    fsub\n6:    <illegal opcode>\n");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("0:    <illegal opcode>\n1:    dstore_3\n2:    <illegal opcode>\n3:    fload_1\n4:    nop\n5:    fsub\n6:    <illegal opcode>\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    <illegal opcode>
         // 1:    dstore_3
         // 2:    <illegal opcode>
         // 3:    fload_1
         // 4:    nop
         // 5:    fsub
         // 6:    <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Utility.methodTypeToSignature("!9PMg:J7I7?B", (String[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.methodSignatureArgumentTypes("()L!9PMg:J7I7?B;");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmpeq");
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      byte[] byteArray1 = new byte[0];
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.compactClassName("if_icmplt");
      assertEquals("if_icmplt", string0);
      
      int int0 = Utility.setBit((byte)0, (byte)47);
      assertEquals(32768, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)65;
      String string0 = "breakpoint";
      byte[] byteArray1 = Utility.decode("breakpoint", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)48, 413);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('N');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)58;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)52;
      byteArray0[3] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantString constantString0 = new ConstantString((byte)52);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readInt();
      constantPool0.setConstantPool(constantArray0);
      constantPool1.toString();
      byteSequence1.skipBytes((byte)69);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("astore\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Utility.accessToString((-1243), true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)11;
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-7), (byte)77);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-3144), 1007);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)97;
      byteArray1[1] = (byte)51;
      byteArray1[2] = (byte) (-34);
      byteArray1[3] = (byte)97;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 402, 557);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("!9PMg:J7I7?B", (String[]) null);
      assertEquals("()L!9PMg:J7I7?B;", string0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      boolean boolean0 = Utility.isJavaIdentifierPart('@');
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("Z;N^u-hA");
      assertEquals((byte)4, byte0);
      
      byte[] byteArray0 = Utility.decode("Invalid byte tag in constant pool: ", false);
      assertEquals(35, byteArray0.length);
      
      Utility.signatureToString("Z;N^u-hA", true);
      Constant[] constantArray0 = new Constant[5];
      ConstantInteger constantInteger0 = new ConstantInteger(43);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      byteSequence0.skipBytes(5);
      Utility.codeToString(byteSequence0, constantPool0, false);
      constantPool1.setConstantPool(constantArray0);
      String string1 = Utility.replace("\tdefault = ", "!9PMg:J7I7?B", "$");
      assertEquals("\tdefault = ", string1);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("ineg", string2);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmpeq");
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      byte[] byteArray1 = new byte[0];
      byteSequence0.read(byteArray1);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.compactClassName("if_icmplt");
      assertEquals("if_icmplt", string0);
      
      int int0 = Utility.setBit((byte)36, 0);
      assertEquals(37, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.methodTypeToSignature("!9PMg:J7I7?B", (String[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.isJavaIdentifierPart('@');
      Utility.typeOfSignature("Z;N^u-hA");
      byte[] byteArray0 = Utility.decode("Invalid byte tag in constant pool: ", false);
      Utility.signatureToString("Z;N^u-hA", true);
      Constant[] constantArray0 = new Constant[5];
      ConstantInteger constantInteger0 = new ConstantInteger(43);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantFloat constantFloat0 = new ConstantFloat(43);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantInteger constantInteger2 = new ConstantInteger(constantInteger1);
      constantArray0[3] = (Constant) constantInteger2;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("HscJKv/@7zTyV");
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      Utility.codeToString(byteArray0, constantPool2, (-1638), 82);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-105);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1628, 1628);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)9);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1576, (byte)9);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[2] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      MockFile mockFile0 = new MockFile("lreturn");
      String string0 = "int";
      MockFile mockFile1 = new MockFile(mockFile0, "int");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "ad 09 ff cc 16 97");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ad 09 ff cc 16 97
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmpeq");
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.compactClassName("if_icmplt");
      assertEquals("if_icmplt", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = "tableswitch";
      byte[] byteArray0 = Utility.decode("tableswitch", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string1 = "U:%d$$";
      try { 
        Utility.methodSignatureArgumentTypes("U:%d$$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U:%d$$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Utility.methodTypeToSignature("!9PMg:J7I7?B", (String[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-16);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.methodSignatureToString("()L!9PMg:J7I7?B;", "\">R|:4H'", "\n");
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureReturnType("!9PMg:J7I7?B", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!9PMg:J7I7?B'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-108);
      Utility.format((byte) (-83), (byte)61, false, 'u');
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q@U:z,E&7[dx=-J\"8", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q@U:z,E&7[dx=-J\"8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.clearBit(157, 191);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fneg", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Utility.getSignature("(");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[0] = (byte)45;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-23);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 244, 1002);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Utility.typeOfSignature("ZW?\"~CC");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ZW?\"~CC");
      Object object0 = new Object();
      Object object1 = new Object();
      Utility.compactClassName("ZW?\"~CC", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat((byte)4);
      constantFloat0.setBytes((-1431.963F));
      Field.getComparator();
      Utility.decode("ZW?\"~CC", false);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantFloat0.toString();
      constantPool1.toString();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte)40;
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte)4;
      byteArray1[5] = (byte)4;
      Utility.codeToString(byteArray1, constantPool0, (int) (byte)4, (int) (byte)4);
      try { 
        Utility.decode("Dont call getValueShort() on a non SHORT ElementValue", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Field.getComparator();
      Utility.decode("aUc SeR", false);
      Utility.replace("void", "\t\t<", ">\t");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) ">\t";
      objectArray0[1] = (Object) ">\t";
      objectArray0[2] = (Object) "\t\t<";
      Utility.printArray(objectArray0, false, false);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) "void";
      objectArray1[1] = (Object) (byte) (-108);
      objectArray1[2] = (Object) null;
      objectArray1[3] = (Object) "aUc SeR";
      objectArray1[4] = (Object) (byte) (-83);
      objectArray1[5] = (Object) null;
      objectArray1[6] = (Object) "\t\t<";
      Object object0 = new Object();
      objectArray1[7] = object0;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = Utility.decode("tableswitch", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ineg", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.fillup("nop", 40, false, 'i');
      assertEquals("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiinop", string1);
      
      String string2 = Utility.fillup("if_acmpne\t\t#0", (-2266), true, '|');
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Utility.searchOpcode(")\t");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-95));
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aload_2", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) "\t<";
      Object object1 = new Object();
      objectArray0[4] = (Object) "\t<";
      Object object2 = new Object();
      objectArray0[6] = (Object) "\t<";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-47);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 69, (-332));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      String string0 = "? super ";
      try { 
        Utility.decode("K*S^L4ks\"R$/if", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      byte[] byteArray0 = new byte[22];
      byteArray0[14] = (byte)49;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)49;
      byteArray0[5] = (byte)52;
      Field.getComparator();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-101), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)61;
      Field.getComparator();
      byte[] byteArray1 = Utility.decode("aUc SeR", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)61, (int) (byte) (-83));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) "\t<";
      Object object1 = new Object();
      objectArray0[4] = (Object) "\t<";
      Object object2 = new Object();
      objectArray0[6] = (Object) "\t<";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-47);
      byte[] byteArray1 = Utility.decode("? super ", false);
      String string0 = Utility.replace("aUc SeR", "b5|-X2\"1^i7", "ifnull");
      assertEquals("aUc SeR", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertArrayEquals(new byte[] {(byte)63, (byte)32, (byte)115, (byte)117, (byte)112, (byte)101, (byte)114, (byte)32}, byteArray1);
      assertEquals("lstore_0", string1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)52;
      byteArray0[3] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantString constantString0 = new ConstantString((byte)52);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-3135), (byte)0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(byteSequence0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantString0;
      constantString0.setStringIndex(45);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Byte code error: ");
      Constant.getComparator();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence3, (ConstantPool) null, false);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)104;
      byteArray1[1] = (byte)105;
      byteArray1[2] = (byte)105;
      byteArray1[3] = (byte)95;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmpeq");
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) (byte)84;
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("QOsh.", true);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte) (-117);
      byteArray0[7] = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2634, (int) (byte) (-117));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.compactClassName("invokevirtuae", "^}", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("ireturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ireturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Utility.isJavaIdentifierPart('?');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)76;
      String string0 = "(string_index = ";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "void";
      stringArray0[1] = "eQ5vI>s:]_;9<B";
      stringArray0[2] = "eQ5vI>s:]_;9<B";
      stringArray0[3] = "(string_index = ";
      stringArray0[4] = "(string_index = ";
      stringArray0[5] = "eQ5vI>s:]_;9<B";
      stringArray0[6] = "(string_index = ";
      try { 
        Utility.methodTypeToSignature("eQ5vI>s:]_;9<B", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Utility.getSignature("(");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-23);
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      byteSequence0.readUnsignedByte();
      constantPool0.setConstantPool(constantArray0);
      String string0 = constantPool0.toString();
      byteSequence0.skipBytes((-958));
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Utility.getSignature("(");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte)68;
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      constantPool0.setConstantPool(constantArray0);
      String string0 = constantPool0.toString();
      byteSequence0.skipBytes((-958));
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("QOsh.", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedShort();
      byteSequence1.markSupported();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      ByteSequence byteSequence3 = null;
      try {
        byteSequence3 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.compactClassName("invokevirtual", "^}", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      try { 
        Utility.methodSignatureToString("T;g#*zgQP~`%6", "invokevirtual", "static", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: T;g#*zgQP~`%6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) "\t<";
      Object object1 = new Object();
      objectArray0[4] = (Object) "\t<";
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "\t<";
      byte[] byteArray0 = new byte[5];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "\t<";
      stringArray0[2] = "\t<";
      stringArray0[3] = "\t<";
      stringArray0[4] = "\t<";
      String string0 = Utility.methodTypeToSignature("\t<", stringArray0);
      assertEquals("(L;L<;L<;L<;L<;)L<;", string0);
      
      String string1 = Utility.replace("\n", "0-HR3Z;", "int");
      assertEquals("\n", string1);
      
      String string2 = Utility.convertString(")eMr_@GE&[");
      assertEquals(")eMr_@GE&[", string2);
      
      byte byte0 = Utility.typeOfMethodSignature("(L;L<;L<;L<;L<;)L<;");
      assertEquals((byte)14, byte0);
      
      String string3 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$A$A", string3);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Field.getComparator();
      byte[] byteArray1 = Utility.decode("aUc SeR", false);
      Utility.replace("void", "\t\t<", ">\t");
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\u0006:H@!p`Q,v3Nz7mH", "\u0006:H@!p`Q,v3Nz7mH", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Utility.compactClassName("MC", false);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-117);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1560, (int) (byte)108);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Utility.isJavaIdentifierPart('Q');
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-101);
      byteArray0[6] = (byte)52;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)52;
      Utility.format((byte)52, (byte)0, true, 'o');
      String string0 = "+";
      // Undeclared exception!
      try { 
        Utility.signatureToString("+", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.signatureToString("SAME", false);
      String string0 = "new";
      Utility.compactClassName("new", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        byteSequence0.readFully(byteArray0, (-2454), (int) (byte) (-86));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)90;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)58;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 b7 3a", string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$A$b7$3a", string1);
      
      int int0 = Utility.clearBit((byte) (-73), (byte)58);
      assertEquals((-67108937), int0);
      
      Utility.signatureToString("J#ht@.]}v-lAB<V_|;");
      byte[] byteArray1 = Utility.decode("$A$b7$3a", false);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-73), (byte)58}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Utility.searchOpcode("\u0006:H@!p`Q,v3Nz7mH");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("tb/5Ut;", "\u0006:H@!p`Q,v3Nz7mH", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Utility.searchOpcode("\u0006:H@!p`Q,v3Nz7mH");
      Utility.searchOpcode("\u0006:H@!p`Q,v3Nz7mH");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-94);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)18;
      byteArray1[1] = (byte) (-94);
      byteArray1[2] = (byte)18;
      byteArray1[4] = (byte)18;
      byteArray1[4] = (byte)18;
      byteArray1[5] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.compactClassName("[", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.fillup("lload_1", 72, true, 't');
      assertEquals("lload_1ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantString constantString0 = new ConstantString((byte)52);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-3138), (byte)52);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.getSignature("(");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[0] = (byte)45;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-110);
      byte byte0 = (byte) (-93);
      byteArray0[4] = (byte) (-93);
      Utility.format((byte) (-15), (byte) (-15), false, 'E');
      // Undeclared exception!
      try { 
        Utility.signatureToString("XbDq", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XbDq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)58;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("5a b7 3a", string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("Z$b7$3a", string1);
      
      int int0 = Utility.clearBit((byte) (-73), (byte)58);
      assertEquals((-67108937), int0);
      
      String string2 = Utility.signatureToString("J#ht@.]}v-lAB<V_|;");
      assertEquals("long", string2);
      
      byte[] byteArray1 = Utility.decode("Z$b7$3a", false);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-73), (byte)58}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Utility.searchOpcode("\u0006:H@!p`Q,v3Nz7mH");
      Utility.searchOpcode("\u0006:H@!p`Q,v3Nz7mH");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-94);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte) (-94);
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte)123;
      byteArray1[4] = (byte)123;
      byteArray1[5] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("\t(wide)", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)45;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)68;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "U=E@bR0M[EE");
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)3, (-2147));
      assertEquals("3:    saload\n4:    fstore_1\n5:    aload_3\n6:    dadd\n7:    dadd\n8:    nop\n", string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)68;
      objectArray0[1] = (Object) (byte)3;
      Utility.compactClassName("\t(wide)");
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{68, 3}", string1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = Utility.getSignature("\t<");
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)36;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)95;
      byteArray0[2] = (byte)105;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-43);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("tx2{=R4t+*mMRoKOi9");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(247, (byte) (-43));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte)5, 9, true);
      assertEquals("5:    fsub\n6:    <illegal opcode>\n", string0);
      
      String string1 = Utility.convertString("5:    fsub\n6:    <illegal opcode>\n");
      assertEquals("5:    fsub\\n6:    <illegal opcode>\\n", string1);
      
      String string2 = Utility.accessToString((-37), true);
      assertEquals("public private static final volatile transient native abstract strictfp synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-115);
      byte byte0 = (byte)18;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte)54;
      byteArray0[8] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-16), (int) (byte) (-115), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("QOsh.", true);
      byte byte0 = (byte)108;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1706, 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("swap", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)18;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(668, (byte)25);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 199, 3978, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 123. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("goto\t\t#-22617", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      constantPool0.accept(descendingVisitor0);
      Class<InputStream> class1 = InputStream.class;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JavaClass javaClass1 = classPathRepository0.loadClass(class1);
      javaClass1.toString();
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      DescendingVisitor descendingVisitor1 = new DescendingVisitor(javaClass1, emptyVisitor1);
      constantPool0.accept(descendingVisitor1);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(40, 1390, (LocalVariable[]) null, constantPool0);
      localVariableTable0.clone();
      try { 
        Utility.methodSignatureToString("0HBd", "rD", ">\t", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0HBd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      LocalVariable[] localVariableArray0 = null;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      constantPool0.accept(descendingVisitor0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte)1;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1681, 663);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte)54;
      byteArray0[8] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload\t\t%133", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("\t(wide)", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte)99;
      byteArray0[8] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)3, (-2147));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 4:    fstore_1
         // 5:    aload_3
         // 6:    dadd
         // 7:    dadd
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = Utility.getSignature("(");
      assertEquals("L(;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[0] = (byte)45;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte)68;
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      constantPool0.setConstantPool(constantArray0);
      constantPool0.toString();
      byteSequence0.skipBytes((-958));
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("if_icmpgt\t\t#17389", string1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Utility.getSignature("5,J=BP\"Ld2");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)45;
      byteArray0[1] = (byte)45;
      Utility.format((-594), (byte) (-15), true, 'E');
      // Undeclared exception!
      try { 
        Utility.signatureToString("P5K.DW ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P5K.DW '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-17);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-17);
      byteArray0[8] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      ConstantString constantString0 = new ConstantString((-68));
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.available();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h]wL");
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      String string0 = Utility.methodSignatureReturnType("F`R8`\"~~");
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classil.Utility$JavaWriter", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.typeOfSignature("ddiv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ddiv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-114);
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-114);
      byteArray0[0] = (byte)122;
      byteArray0[3] = (byte) (-101);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)122;
      byteArray1[1] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)52, (int) (byte)52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int int0 = 0;
      Utility.classOrInterface(0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "class";
      Object object0 = new Object();
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte)35;
      byteArray1[2] = (byte)35;
      byteArray1[3] = (byte)35;
      byteArray1[4] = (byte)35;
      byteArray1[5] = (byte)35;
      byteArray1[6] = (byte)35;
      byteArray1[7] = (byte)35;
      byteArray1[8] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.close();
      ConstantString constantString0 = new ConstantString((byte)35);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "breakpoint");
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("{class, null, null, null, null}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {class, null, null, null, null}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte byte0 = (byte)24;
      Utility.compactClassName("\t(wide)", false);
      byte byte1 = (byte)21;
      byte[] byteArray0 = new byte[8];
      Utility.format(11, (byte)21, true, '^');
      Utility.convertString("dreturn");
      Utility.isJavaIdentifierPart('y');
      Utility.convertString("'");
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("R!UQaQ{k8vAG6ZL[f-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R!UQaQ{k8vAG6ZL[f-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<Object> class0 = Object.class;
      syntheticRepository0.loadClass(class0);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantString constantString0 = new ConstantString((-3422));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "checkcast");
      try { 
        Utility.codeToString(byteSequence1, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.getSignature("(");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte)68;
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      byteSequence0.skipBytes((-958));
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.replace("\tdefault = ", (String) null, "5=G8%boev");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      byteSequence0.close();
      ConstantString constantString0 = new ConstantString((byte)5);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = "ZW?\"~CC";
      Utility.typeOfSignature("ZW?\"~CC");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ZW?\"~CC");
      Object object0 = new Object();
      Object object1 = new Object();
      Utility.compactClassName("ZW?\"~CC", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat((byte)4);
      constantFloat0.setBytes((-1431.963F));
      Field.getComparator();
      byte[] byteArray1 = Utility.decode("ZW?\"~CC", false);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 173, (int) (byte)4, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) "\t<";
      Object object1 = new Object();
      objectArray0[4] = (Object) "\t<";
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "\t<";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      ConstantString constantString0 = new ConstantString((byte)86);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t<");
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "java.lang.Short";
      Utility.searchOpcode("java.lang.Short");
      String string1 = "2a|1OTLh*W";
      try { 
        Utility.typeOfSignature("2a|1OTLh*W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2a|1OTLh*W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)76;
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-37);
      byte byte1 = (byte)8;
      byteArray0[2] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        byteSequence0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.getSignature("dneg");
      try { 
        Utility.methodSignatureArgumentTypes("(wde)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `wde)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('N');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)52;
      byteArray0[3] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantString constantString0 = new ConstantString((byte)52);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-3135), (byte)52);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(byteSequence0);
      ConstantString constantString1 = new ConstantString((byte)52);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantString0;
      constantString1.setStringIndex(45);
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantMethodHandle1.setReferenceIndex(1402);
      constantArray0[4] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence1, constantPool0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      short short0 = Utility.searchOpcode("fstore_2");
      assertEquals((short)69, short0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.searchOpcode("\u0006:H@!``Q,Mv3Nz7mH");
      Utility.searchOpcode("\u0006:H@!``Q,Mv3Nz7mH");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)44);
      constantArray0[0] = (Constant) constantFloat0;
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 8, (int) (byte)97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.compactClassName(",?mi(6B@aRc^_u)vQ<");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('N');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantString constantString0 = new ConstantString((byte)52);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-3135), (byte)52);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(byteSequence0);
      ConstantString constantString1 = new ConstantString((byte)52);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantMethodHandle1.setReferenceIndex(1402);
      constantArray0[4] = (Constant) constantString1;
      Constant[] constantArray1 = new Constant[1];
      constantArray1[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray1);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readInt();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("iflt\t\t#13367", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.searchOpcode("\u0006:H@!``Q,Mv3Nz7mH");
      Utility.searchOpcode("\u0006:H@!``Q,Mv3Nz7mH");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-95), 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ladd
         // 1:    if_icmpge\t\t#11426
         // 4:    lstore_1
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte) (-57), (int) (byte) (-57), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("B;}U22h%R!E");
      assertEquals((byte)8, byte0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "B;}U22h%R!E";
      objectArray0[1] = (Object) "B;}U22h%R!E";
      objectArray0[2] = (Object) "B;}U22h%R!E";
      objectArray0[3] = (Object) "B;}U22h%R!E";
      objectArray0[4] = (Object) "B;}U22h%R!E";
      objectArray0[5] = (Object) "B;}U22h%R!E";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)65;
      Utility.encode(byteArray0, false);
      Utility.convertString("cJ92I?6");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)1;
      Utility.toHexString(byteArray1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "ea(Co7>9k!K*";
      objectArray0[1] = (Object) (byte)48;
      Utility.printArray(objectArray0, false, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0);
      try { 
        Utility.typeOfSignature("\t(wide)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t(wide)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.searchOpcode("\u0006:H@!``Q,Mv3Nz7mH");
      short short0 = Utility.searchOpcode("\u0006:H@!``Q,Mv3Nz7mH");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)44);
      constantFloat0.setBytes((byte)64);
      constantArray0[0] = (Constant) constantFloat0;
      Field.getComparator();
      byte[] byteArray1 = Utility.decode("TcIQfX;j;0K$", false);
      assertEquals(12, byteArray1.length);
      
      String string0 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{CONSTANT_Float[4](bytes = 64.0)}", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantString constantString0 = new ConstantString((byte)52);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-3135), (byte)52);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("daload", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.getSignature("(");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte)68;
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      byteSequence0.skipBytes((-958));
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.replace("\tdefault = ", (String) null, "5=G8%boev");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "(";
      Utility.getSignature("(");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-15);
      try { 
        Utility.typeOfSignature("Ooops, what primitive type is ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ooops, what primitive type is 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Utility.getSignature("O\t<");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "LO;";
      objectArray0[1] = (Object) "LO;";
      objectArray0[2] = (Object) "O\t<";
      Object object1 = new Object();
      objectArray0[4] = (Object) "O\t<";
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "O\t<";
      objectArray0[7] = (Object) "O\t<";
      Utility.printArray(objectArray0, true, false);
      Utility.format(62, (-3116), false, 's');
      Utility.signatureToString("LO;", true);
      try { 
        Utility.methodSignatureReturnType("O", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload\t\t%133", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.getSignature("\t<");
      Object object0 = new Object();
      boolean boolean0 = true;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "L<;";
      objectArray0[1] = (Object) "L<;";
      objectArray0[2] = (Object) "\t<";
      Object object1 = new Object();
      objectArray0[4] = (Object) "\t<";
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "\t<";
      objectArray0[7] = (Object) "\t<";
      Utility.printArray(objectArray0, true, false);
      Utility.format(62, (-3116), false, 's');
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantString constantString0 = new ConstantString((byte)52);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-3138), (byte)52);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(byteSequence0);
      ConstantString constantString1 = new ConstantString((byte)52);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantMethodHandle1.setReferenceIndex(1402);
      constantArray0[4] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.searchOpcode(")\t");
      Utility.searchOpcode(")\t");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-95));
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-95), (-3424));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fneg
         // 1:    freturn
         // 2:    if_icmplt\t\t#20526
         // 5:    dload_3
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("QOsh.", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1706, 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantString constantString0 = new ConstantString((byte)52);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-3154), (byte)52);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(byteSequence0);
      ConstantString constantString1 = new ConstantString((byte)52);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantMethodHandle1.setReferenceIndex(1402);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)52, (int) (byte) (-101), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      Utility.printArray(objectArray0, true, false);
      Utility.format(306, (-1727), true, 'N');
      Utility.signatureToString("Invalid>method siIature: ", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("wide", stringArray0);
      Utility.accessToString(81, false);
      Utility.compactClassName("impdep2", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("&vG)yb(G", "ifnull", "wide", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &vG)yb(G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Utility.getSignature(".x1TY?3&:");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ".x1TY?3&:";
      objectArray0[1] = (Object) "L/x1TY?3&:;";
      objectArray0[2] = (Object) ".x1TY?3&:";
      objectArray0[3] = (Object) "L/x1TY?3&:;";
      objectArray0[4] = (Object) ".x1TY?3&:";
      objectArray0[5] = (Object) ".x1TY?3&:";
      Object object0 = new Object();
      objectArray0[6] = object0;
      Utility.printArray(objectArray0, true, true);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.typeOfSignature("instanceof");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: instanceof
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      byte[] byteArray0 = new byte[6];
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)6, 10);
      Utility.classOrInterface(2246);
      // Undeclared exception!
      Utility.replace("class", "", (String) null);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.getSignature("\t<");
      Object object0 = new Object();
      boolean boolean0 = true;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "L<;";
      objectArray0[1] = (Object) "L<;";
      objectArray0[2] = (Object) "\t<";
      Object object1 = new Object();
      objectArray0[4] = (Object) "\t<";
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "\t<";
      objectArray0[7] = (Object) "\t<";
      Utility.printArray(objectArray0, true, false);
      Utility.format(62, (-3116), false, 's');
      // Undeclared exception!
      try { 
        Utility.signatureToString("MC", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MC'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.getSignature(".x1TY?3&:");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ".x1TY?3&:";
      objectArray0[1] = (Object) "L/x1TY?3&:;";
      objectArray0[3] = (Object) "L/x1TY?3&:;";
      objectArray0[4] = (Object) ".x1TY?3&:";
      objectArray0[5] = (Object) ".x1TY?3&:";
      Object object0 = new Object();
      objectArray0[6] = object0;
      Utility.printArray(objectArray0, true, true);
      Utility.format(1514, 1514, true, 's');
      Utility.signatureToString("L/x1TY?3&:;", true);
      try { 
        Utility.methodSignatureReturnType(".x1TY?3&:", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `.x1TY?3&:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = Utility.getSignature("(");
      assertEquals("L(;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte)68;
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      byteSequence0.skipBytes((-958));
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ifle\t\t#17389", string1);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      MockPrintStream mockPrintStream0 = new MockPrintStream("getfield");
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) constantArray0);
      assertEquals(0, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Utility.searchOpcode("0GN");
      Utility.searchOpcode("0GN");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-95));
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantFloat0;
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantFloat0;
      constantArray0[5] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2253, 95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte)20;
      byteArray0[8] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, (int) (byte)75);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lload_1", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Utility.compactClassName("\t(wide)", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-119);
      byteArray0[7] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, (int) (byte)76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Utility.searchOpcode("\u0006:H@!``Q,Mv3Nz7mH");
      Utility.searchOpcode("\u0006:H@!``Q,Mv3Nz7mH");
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)123;
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-94);
      byte byte1 = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)41;
      byte byte2 = (byte)118;
      byteArray0[6] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)44);
      constantArray0[0] = (Constant) constantFloat0;
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[3J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `3J'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Utility.searchOpcode("\u0006:H@!``Q,Mv3Nz7mH");
      Utility.searchOpcode("\u0006:H@!``Q,Mv3Nz7mH");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)44);
      constantArray0[0] = (Constant) constantFloat0;
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 8, (int) (byte)97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Utility.compactClassName("\t(wide)", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, (int) (byte)108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)52;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)52;
      ConstantString constantString0 = new ConstantString((byte)52);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-3135), (byte)52);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString1 = new ConstantString((byte)52);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantArray0[4] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)52, (-150));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = Utility.getSignature("(");
      assertEquals("L(;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte)68;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ret\t\t%76", string1);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Utility.searchOpcode("\u0006:H@!``Q,Mv3Nz7mH");
      short short0 = Utility.searchOpcode("\u0006:H@!``Q,Mv3Nz7mH");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)44);
      constantArray0[0] = (Constant) constantFloat0;
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("ladd", string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("[3J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `3J'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Utility.searchOpcode("K Y.-PxXd&t2^w$p");
      short short0 = Utility.searchOpcode("K Y.-PxXd&t2^w$p");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-94));
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantFloat0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("&Or%RQ`rC");
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantFloat0;
      constantArray0[5] = (Constant) constantFloat0;
      constantArray0[6] = (Constant) constantFloat0;
      constantArray0[7] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fneg", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "class";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "class";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte) (-78);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("W$I$X$A_$U$b2", string1);
      
      String string2 = Utility.convertString("\t\t%");
      assertEquals("\t\t%", string2);
      
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("57 08 17 00 5f 14 b2", string3);
      
      String string4 = Utility.format((byte)23, (byte)20, false, 'N');
      assertEquals("NNNNNNNNNNNNNNNNNN23", string4);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Utility.accessToString(74);
      Utility.getSignature("private static volatile");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(221, 74);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3519, 102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = Utility.compactClassName("\t(wide)", false);
      assertEquals("\t(wide)", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1086), 3227);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1467788917), (byte)24);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("idiv", string1);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Utility.classOrInterface(102);
      Utility.isSet((-1412), 1535);
      Utility.searchOpcode("null");
      Utility.compactClassName("null");
      Utility.setBit(1535, 1024);
      try { 
        Utility.methodSignatureArgumentTypes("EH@2bLu*:Pjg76Oo", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EH@2bLu*:Pjg76Oo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('^');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Constant[] constantArray0 = new Constant[5];
      ConstantString constantString0 = new ConstantString((byte)49);
      constantArray0[0] = (Constant) constantString0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-101), (byte)49);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(byteSequence1);
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantString constantString1 = new ConstantString(57);
      constantArray0[3] = (Constant) constantString1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)52, 859);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[4] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.compactClassName("5xH", false);
      assertEquals("5xH", string0);
      
      short short0 = Utility.searchOpcode("!");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, 1490);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Utility.getSignature("(");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte)68;
      String[] stringArray0 = new String[6];
      stringArray0[0] = " methods:\n";
      stringArray0[1] = "L(;";
      stringArray0[2] = ")\t";
      stringArray0[3] = "mZ^x%Il,PS";
      stringArray0[4] = ")\t";
      stringArray0[5] = "(";
      String string0 = Utility.methodTypeToSignature("L(;", stringArray0);
      assertEquals("(Lmethods:;LL(;;L);LmZ^x%Il,PS;L);L(;)LL(;;", string0);
      
      String string1 = Utility.replace("L(;", "(", "goto_w");
      assertEquals("Lgoto_w;", string1);
      
      String string2 = Utility.convertString(")\t");
      assertEquals(")\t", string2);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = ",?mi(6B@aRc^_u)vQ<";
      Utility.compactClassName(",?mi(6B@aRc^_u)vQ<");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-125), (byte) (-125));
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-125), 144);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Utility.searchOpcode("\u0006:H@!``Q,Mv3Nz7mH");
      short short0 = Utility.searchOpcode("\u0006:H@!``Q,Mv3Nz7mH");
      assertEquals((short) (-1), short0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-94);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("a$a2$A$A$A$A$A", string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-94);
      objectArray0[1] = (Object) "a$a2$A$A$A$A$A";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{-94, a$a2$A$A$A$A$A}", string1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Utility.getSignature("(");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-119);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)45, (byte) (-15));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)14, (byte)45);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      constantArray0[3] = (Constant) constantInterfaceMethodref1;
      constantArray0[4] = (Constant) constantInterfaceMethodref1;
      constantArray0[5] = (Constant) constantInterfaceMethodref0;
      constantInterfaceMethodref1.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, 1560, 143);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      String string1 = Utility.convertString("nop");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)73;
      String string0 = Utility.encode(byteArray0, false);
      String string1 = Utility.convertString("");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      constantPool0.accept(descendingVisitor0);
      Class<InputStream> class1 = InputStream.class;
      JavaClass javaClass1 = classPathRepository0.loadClass(class1);
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      DescendingVisitor descendingVisitor1 = new DescendingVisitor(javaClass1, emptyVisitor1);
      constantPool0.accept(descendingVisitor1);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(40, 1390, (LocalVariable[]) null, constantPool0);
      try { 
        Utility.methodSignatureToString("0HBd", "rD", ">\t", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0HBd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("ifle\t\t#23371", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      Utility.typeOfSignature("IM8.<<qD(r4A8B=)G");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.classOrInterface(83);
      try { 
        Utility.methodSignatureReturnType("IM8.<<qD(r4A8B=)G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.setBit(2752, 2752);
      Utility.format(12, (-3038), false, '?');
      Utility.isJavaIdentifierPart('Z');
      Utility.accessToString(221);
      try { 
        Utility.decode("public protected static final volatile transient", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Utility.isJavaIdentifierPart('9');
      try { 
        Utility.typeOfSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("8or)DP~&[,?]Z</");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8or)DP~&[,?]Z</
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L>(;V");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$", "$", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, (int) (byte) (-38));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)49;
      byteArray0[0] = (byte)122;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ishr", string0);
      
      String string1 = Utility.compactClassName("org.apache.bcel.classfile.RuntimeVisibleAnnotations", false);
      assertEquals("org.apache.bcel.classfile.RuntimeVisibleAnnotations", string1);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.classOrInterface(1231);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, (-2522), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("i`s&&H)P*[6>NnyJ,~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P*[6>NnyJ,~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = null;
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("CYU8k@voG");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantString constantString0 = new ConstantString((-316));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[2] = (Constant) constantString1;
      ConstantString constantString2 = new ConstantString(byteSequence0);
      constantArray0[3] = (Constant) constantString2;
      ConstantDouble constantDouble0 = new ConstantDouble((-509.19));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[4] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 21561. Constant pool size is: 5
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Utility.methodSignatureReturnType("`Fu=2pW]HL)IwR^E4");
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3pZ*7^`3:r Wc9f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3pZ*7^`3:r Wc9f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " rqw|.Eb`N>x0";
      stringArray0[1] = " rqw|.Eb`N>x0";
      stringArray0[2] = " rqw|.Eb`N>x0";
      stringArray0[3] = "j=ydnNL-ta";
      stringArray0[4] = " rqw|.Eb`N>x0";
      Utility.methodTypeToSignature(" rqw|.Eb`N>x0", stringArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3077), (int) (byte)45, false);
      File file0 = MockFile.createTempFile("0:    aload_3\n", "0:    aload_3\n");
      MockFile mockFile0 = new MockFile(file0, "Z?TU$chU|<d5m1WC");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "j=ydnNL-ta");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " reaching EOF");
      Utility.typeOfSignature("FXM{");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("BootstrapMethods", (String) null, "The");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: BootstrapMethods
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".k]G\"c4&J50iZ");
      Utility.getSignature("(");
      try { 
        Utility.methodSignatureArgumentTypes("(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Utility.convertString("The list offnames must not be null");
      try { 
        Utility.methodSignatureReturnType("M/e9UaZb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M/e9UaZb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("L/k]G\"c4&J50iZ;V");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "9I*s.>FiABkFr@";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9I*s.>FiABkFr@");
      Utility.compactClassName("", "java.lang.Double", false);
      try { 
        Utility.typeOfSignature("9I*s.>FiABkFr@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9I*s.>FiABkFr@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Utility.clearBit((-643), (-1));
      try { 
        Utility.methodSignatureArgumentTypes("arraylength", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: arraylength
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Utility.getSignature("(");
      Utility.isSet((-4267), (-4267));
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("X&(J@Q^.0#l8'Z/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X&(J@Q^.0#l8'Z/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = "\"";
      Utility.replace(".x1TY?3&:", "\"", "\"");
      try { 
        Utility.typeOfSignature(".x1TY?3&:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .x1TY?3&:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Utility.getSignature(".x1TY?3&:");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ".x1TY?3&:";
      objectArray0[1] = (Object) "L/x1TY?3&:;";
      objectArray0[2] = (Object) ".x1TY?3&:";
      objectArray0[3] = (Object) "L/x1TY?3&:;";
      objectArray0[4] = (Object) ".x1TY?3&:";
      objectArray0[5] = (Object) ".x1TY?3&:";
      Object object0 = new Object();
      objectArray0[6] = object0;
      Utility.printArray(objectArray0, true, true);
      Utility.format(1514, 1514, true, 's');
      try { 
        Utility.typeOfSignature("MC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = "YSSF";
      try { 
        Utility.methodSignatureReturnType("YSSF", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YSSF'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Utility.getSignature("(");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)68, 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Utility.clearBit(1940, 1940);
      Utility.clearBit(0, 1940);
      String string0 = "_*DzY&[k";
      try { 
        Utility.typeOfSignature("_*DzY&[k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _*DzY&[k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = "qf;xt";
      boolean boolean0 = true;
      try { 
        Utility.typeOfSignature("\"]--d=|]N9eqP#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"]--d=|]N9eqP#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("N_z^7w*", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N_z^7w*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("C0GtDr3E9Z");
      assertEquals((byte)5, byte0);
      
      int int0 = Utility.clearBit(1955, 1955);
      assertEquals(1955, int0);
      
      String string0 = Utility.accessToString(1955);
      assertEquals("public private synchronized transient native interface abstract", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("The list of names must not be null", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The list of names must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " arg");
      Utility.compactClassName("W7z}3T", false);
      try { 
        Utility.methodSignatureReturnType("W7z}3T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W7z}3T'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("The list of names must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The list of names must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lrem", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = Utility.signatureToString("Constant pool at index ", false);
      assertEquals("char", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)64;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      int int0 = Utility.clearBit(90, (byte)31);
      assertEquals(90, int0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      boolean boolean0 = true;
      int int0 = 1888;
      Utility.fillup("RZs[YBLUK$:8/KA^b", 1888, true, 'Z');
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("RZs[YBLUK$:8/KA^b", (String) null, "monitorexit", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RZs[YBLUK$:8/KA^b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("H,N(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H,N('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = "Tygv!?";
      Utility.compactClassName("Tygv!?");
      String string1 = "";
      boolean boolean0 = false;
      Utility.decode("", false);
      String string2 = "";
      int int0 = 0;
      boolean boolean1 = true;
      char char0 = 'L';
      Utility.fillup("", 0, true, 'L');
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Utility.compactClassName(",?mi(6B@aRc^_u)vQ<");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(1, byteSequence0.getIndex());
      
      String string0 = Utility.convertString("x`apn[Xs%");
      assertEquals("x`apn[Xs%", string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      byte[] byteArray0 = null;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      int int0 = (-2186);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool1, (-2186), (-2186));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "(", "(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.compactClassName(",?mi(6B@aRc^_u)vQ<");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.signatureToString("Z(/ffG", true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte) (-113);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$ea$b7z$m$afJ$8f", string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      // Undeclared exception!
      try { 
        Utility.signatureToString("[", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = "-#Z4";
      try { 
        Utility.typeOfSignature("-#Z4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -#Z4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Utility.typeOfSignature("B;}U22h%R!E");
      Utility.clearBit((byte)8, (byte)8);
      try { 
        Utility.typeOfMethodSignature("(aOZ9BI0:beV+{0><U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (aOZ9BI0:beV+{0><U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("QRRw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QRRw'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)106;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.convertString("bYFlnKZ%eB0.p");
      Utility.accessToString(743);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "bYFlnKZ%eB0.p";
      stringArray0[1] = "bYFlnKZ%eB0.p";
      stringArray0[2] = "public private protected synchronized volatile transient interface";
      stringArray0[3] = "Heztr'=,UO$pVH";
      stringArray0[4] = "bYFlnKZ%eB0.p";
      stringArray0[5] = "public private protected synchronized volatile transient interface";
      stringArray0[6] = "public private protected synchronized volatile transient interface";
      stringArray0[7] = "bYFlnKZ%eB0.p";
      Utility.methodTypeToSignature("?l 5cXt", stringArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("B;}U22h%R!E");
      assertEquals((byte)8, byte0);
      
      int int0 = Utility.clearBit((byte)8, (byte)8);
      assertEquals(8, int0);
      
      String string0 = Utility.signatureToString("B;}U22h%R!E", false);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)48;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("A0", string0);
      
      String string1 = Utility.convertString(">(");
      assertEquals(">(", string1);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = Utility.compactClassName("K4|ht?K0c", false);
      assertEquals("K4|ht?K0c", string0);
      
      byteArray0[1] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(3227, 1596);
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      byteSequence0.readBoolean();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)0, (byte)0);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dload_3", string1);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.replace("'", "'", "'");
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      try { 
        Utility.typeOfSignature("HnbvokestaCic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HnbvokestaCic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      Utility.compactClassName(",?mi(6B@aRc^_u)vQ<");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("nop", string0);
      
      Utility.accessToString(154, false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-56);
      byteArray1[1] = (byte)71;
      byteArray1[2] = (byte)38;
      byteArray1[3] = (byte)46;
      byteArray1[4] = (byte)90;
      byteArray1[5] = (byte) (-52);
      byteArray1[6] = (byte) (-57);
      byteArray1[7] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 3989, (int) (byte)90, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = Utility.getSignature("boolean");
      assertEquals("Z", string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString(32, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureArgumentTypes("<illegal opcode>", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = "(";
      try { 
        Utility.methodSignatureArgumentTypes("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String string0 = Utility.getSignature("void");
      assertEquals("V", string0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      try { 
        Utility.typeOfSignature("QRRw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QRRw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = Utility.compactClassName("K4|ht?K0c", false);
      assertEquals("K4|ht?K0c", string0);
      
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(3227, 1596);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)24, 16);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dload\t\t%41", string1);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)104;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)105, (int) (byte)47, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = "Q\\<T{F`::q;>";
      String string1 = null;
      Utility.convertString("Q<T{F`::q;>");
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      short short0 = Utility.searchOpcode("arraylength");
      assertEquals((short)190, short0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)40;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-56);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      boolean boolean1 = Utility.isJavaIdentifierPart('m');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      Utility.getSignature("$l$8b$I$A$A$A$A$A$A$A");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit(81, (-1174));
      Utility.signatureToString("L$l$8b$I$A$A$A$A$A$A$A;");
      Utility.accessToString(81);
      try { 
        Utility.methodSignatureReturnType("public final volatile", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public final volatile'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("RPN1~hO9");
      MockPrintStream mockPrintStream0 = new MockPrintStream("LRPN1~hO9;");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "LRPN1~hO9;";
      objectArray0[1] = (Object) "LRPN1~hO9;";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "long";
      stringArray0[1] = "LRPN1~hO9;";
      stringArray0[2] = "long";
      stringArray0[3] = "long";
      String string0 = Utility.methodTypeToSignature("long", stringArray0);
      assertEquals("(JLLRPN1~hO9;;JJ)J", string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)76;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)76;
      byteArray1[1] = (byte)80;
      byteArray1[2] = (byte)61;
      byteArray1[3] = (byte)84;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray1[4] = (byte)58;
      byteArray1[5] = (byte)34;
      byteArray1[6] = (byte)29;
      byteArray1[7] = (byte)61;
      byteArray1[8] = (byte)61;
      Utility.equals(byteArray0, byteArray1);
      Utility.setBit(40, (byte)76);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\n\t\tthrows ", "java.lang.2>c3 T$NC.X99", "4h$o).Ka4Vq|x=bF9S", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         // \t\tthrows 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature(",3QZjNC}Bk1Q<q`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,3QZjNC}Bk1Q<q`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("S");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = Utility.compactClassName("breakp", "", true);
      assertEquals("breakp", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)82;
      Utility.equals(byteArray0, byteArray0);
      String string1 = Utility.fillup("breakp", (byte)82, false, 'L');
      assertEquals("LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLbreakp", string1);
      
      String string2 = Utility.classOrInterface((byte)82);
      assertEquals("class", string2);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      try { 
        Utility.typeOfSignature("0GN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0GN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("T){Z>");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("RPN1~hO9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RPN1~hO9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = "Gc]voi^'";
      try { 
        Utility.typeOfSignature("Gc]voi^'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gc]voi^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "5+5";
      try { 
        Utility.typeOfSignature("5+5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5+5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("K Y.-PxXd&t2^$p", false);
      assertEquals(14, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Utility.typeOfSignature("Deprecated");
      assertEquals((byte)7, byte0);
      
      boolean boolean0 = Utility.isSet((byte)7, (byte)7);
      assertFalse(boolean0);
      
      String string0 = Utility.classOrInterface(1825);
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("!GO^IIbf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GO^IIbf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString((int) (byte) (-7));
      assertEquals("public static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("RPN1~hO9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RPN1~hO9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Utility.clearBit((-1937), (-1937));
      try { 
        Utility.methodSignatureToString("Y*iY$at", "g", "", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y*iY$at
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("B}l64Tikh/\"S!");
      assertEquals((byte)8, byte0);
      
      String string0 = Utility.replace("{@c2dD", "B}l64Tikh/\"S!", "{@c2dD");
      assertEquals("{@c2dD", string0);
      
      String string1 = Utility.accessToString(3589, true);
      assertEquals("public protected abstract strictfp", string1);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("K Y.-PxXd&t2^$p", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K Y.-PxXd&t2^$p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      int int0 = 1231;
      Utility.classOrInterface(1231);
      try { 
        Utility.typeOfSignature(";Aly~xfm'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;Aly~xfm'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = Utility.getSignature(" Y.-PxXd&t2^$p");
      assertEquals("LY/-PxXd&t2^$p;", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('*');
      assertFalse(boolean0);
      
      String string1 = Utility.format(147, 147, true, '*');
      assertEquals("147************************************************************************************************************************************************", string1);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("Unreachable default case reached!", "Unreachable default case reached!", true);
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(68, 68);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 68, 16, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      try { 
        Utility.typeOfSignature("$dZ8i,ZuL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $dZ8i,ZuL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "4sc!ECYl<_I";
      try { 
        Utility.typeOfSignature("4sc!ECYl<_I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4sc!ECYl<_I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "#|";
      try { 
        Utility.typeOfSignature("#|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "RqJ8_-nxN7hA+vP";
      try { 
        Utility.methodSignatureReturnType("RqJ8_-nxN7hA+vP", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RqJ8_-nxN7hA+vP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")9Bl-}$i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )9Bl-}$i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("B;}U22h%R!E");
      assertEquals((byte)8, byte0);
      
      int int0 = Utility.clearBit(181, (byte)8);
      assertEquals(181, int0);
      
      String string0 = Utility.compactClassName("B;}U22h%R!E", "j<+", true);
      assertEquals("B;}U22h%R!E", string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("K Y.-PxXd&t2^$p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K Y.-PxXd&t2^$p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      try { 
        Utility.typeOfSignature("K Y.-PxXd&t2^$p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K Y.-PxXd&t2^$p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@fi,N;m:TLym\"]6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @fi,N;m:TLym\"]6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.methodSignatureReturnType("B;}U22h%R!E", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("byte");
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AaKle)BvMfk1~q?");
      Utility.isSet((-1063), (-1063));
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.methodSignatureReturnType("Invalid StackMap frame_type");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.methodSignatureReturnType("F'{b", true);
      byte[] byteArray1 = new byte[2];
      byte byte0 = (byte)103;
      byteArray1[0] = (byte)103;
      byteArray1[1] = (byte)75;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("float", "Invalid StackMap frame_type");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Invalid StackMap frame_type\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("B;}U22h%R!E", true);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) null;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[<clinit>");
      assertEquals((byte)13, byte0);
      
      String string0 = Utility.compactClassName("[<clinit>", true);
      assertEquals("[<clinit>", string0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9I*s.>FiABkFr@");
      try { 
        Utility.typeOfSignature("9I*s.>FiABkFr@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9I*s.>FiABkFr@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V7%)kOe[jc[");
      assertEquals((byte)12, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('%');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("&+1z]#!?CcV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &+1z]#!?CcV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = "<";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("E%on=kcf3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E%on=kcf3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Utility.compactClassName("new", true);
      String string0 = "Unreachable default case reached!";
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = "inWokedynamic";
      Utility.compactClassName("inWokedynamic", true);
      String string1 = "W@difN&#*KH@<>r&";
      try { 
        Utility.typeOfSignature("W@difN&#*KH@<>r&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W@difN&#*KH@<>r&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid method signature: ");
      assertEquals((byte)10, byte0);
      
      boolean boolean0 = Utility.isSet(81, (byte)10);
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("Invalid method signature: ");
      assertEquals("LInvalid;", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = "!";
      try { 
        Utility.typeOfSignature("!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("(bytes = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (bytes = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = "D";
      Utility.methodSignatureReturnType("D", false);
      String string1 = "impdep2";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("double", "impdep2");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // impdep2
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      try { 
        Utility.typeOfSignature("E%on=kcf3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E%on=kcf3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("*( ~W~mpsq]0N}edYA<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ( ~W~mpsq]0N}edYA<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t\t%");
      String string0 = Utility.format((-1573), 67, true, 'z');
      assertEquals("-1573zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz", string0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = Utility.accessToString(237, true);
      assertEquals("public protected static volatile transient", string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Utility.compactClassName("V", true);
      Utility.classOrInterface(4230);
      Utility.setBit((-131), 543);
      Utility.setBit((-131), 102);
      String string0 = Utility.signatureToString("V", true);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.decode("org.apache.bcel.classfile.Utility$JavaWriter", false);
      Utility.format(71, 93, false, '');
      // Undeclared exception!
      try { 
        Utility.signatureToString("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.setBit(80, 80);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, ",", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)34;
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("DN'Ji5NSajVtw5f#?-", "DN'Ji5NSajVtw5f#?-", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.ConstantUtf8$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.ConstantUtf8$1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.format((-1727), (-1727), false, 'b');
      assertEquals("-1727", string0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature(">@o-zm!oT#mw7#_::");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >@o-zm!oT#mw7#_::
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Utility.isJavaIdentifierPart('<');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.isSet(55, (-3869));
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = "%f<doQ%o$~40w";
      try { 
        Utility.typeOfSignature("%f<doQ%o$~40w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %f<doQ%o$~40w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Utility.getSignature("| ?WN?i^nV6_0DO");
      Object object0 = new Object();
      String string0 = Utility.printArray((Object[]) null, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = "6";
      try { 
        Utility.typeOfSignature("6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("sStW");
      Locale locale0 = Locale.CHINA;
      mockPrintStream0.printf(locale0, "static", (Object[]) null);
      MockPrintStream mockPrintStream1 = new MockPrintStream("goto_w");
      Utility.printArray((PrintStream) mockPrintStream1, (Object[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("goto_w", "l'}Z_'C", "QSw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: goto_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "QSw";
      stringArray0[1] = "QSw";
      stringArray0[2] = "QSw";
      stringArray0[3] = "}po";
      stringArray0[4] = "%f<doQ%o$~40w";
      stringArray0[5] = "%f<doQ%o$~40w";
      stringArray0[6] = "%f<doQ%o$~40w";
      String string0 = Utility.methodTypeToSignature("QSw", stringArray0);
      assertEquals("(LQSw;LQSw;LQSw;L}po;L%f<doQ%o$~40w;L%f<doQ%o$~40w;L%f<doQ%o$~40w;)LQSw;", string0);
      
      byte[] byteArray0 = Utility.decode("M", false);
      assertArrayEquals(new byte[] {(byte)77}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Utility.methodTypeToSignature("4h$o).Ka4Vq|x=bF9S", (String[]) null);
      Utility.isJavaIdentifierPart('0');
      // Undeclared exception!
      try { 
        Utility.signatureToString(":M>/)_0M'|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `:M>/)_0M'|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "goto_w");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("Jx`>ejz$*an~*m0", "Jx`>ejz$*an~*m0");
      File file0 = MockFile.createTempFile("goto_w", "goto_w", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "goto_w";
      objectArray0[5] = (Object) "Jx`>ejz$*an~*m0";
      objectArray0[6] = (Object) mockFileOutputStream0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Utility.format(0, 1613, true, 'R');
      String string0 = Utility.getSignature(", high = ");
      assertEquals("L,;", string0);
      
      String string1 = Utility.compactClassName(", high = ", true);
      assertEquals(", high = ", string1);
      
      Object[] objectArray0 = new Object[0];
      String string2 = Utility.printArray(objectArray0, true, true);
      assertEquals("{}", string2);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("%f<doQ%o$~40w", "%f<doQ%o$~40w", "%f<doQ%o$~40w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %f<doQ%o$~40w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Object object0 = new Object();
      String string0 = Utility.methodTypeToSignature("\t\t%", (String[]) null);
      assertEquals("()L%;", string0);
      
      int int0 = Utility.clearBit((-1649), 11);
      assertEquals((-3697), int0);
      
      String string1 = Utility.accessToString((-124), false);
      assertEquals("protected transient native interface abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      String string0 = Utility.signatureToString("Invalid signature: `");
      assertEquals("int", string0);
      
      Utility.searchOpcode("Invalid signature: `");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)34;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("5d 0a cc 45 22", string1);
      
      short short0 = Utility.searchOpcode("sdu8S%u?op8rt('=K");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PxLb");
      String string0 = "int";
      Utility.compactClassName("int", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Utility.methodTypeToSignature("XVUG>j`B(<0T@2p", (String[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-112);
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureToString("i$8a$90", (String) null, "impdep1", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i$8a$90
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Utility.classOrInterface(15);
      Utility.getSignature("class");
      Utility.methodSignatureReturnType("Signature");
      try { 
        Utility.methodSignatureReturnType("*C#QFUo(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `*C#QFUo('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Object object0 = new Object();
      Utility.methodTypeToSignature("%f<doQ%o$~40w", (String[]) null);
      Utility.isJavaIdentifierPart('@');
      String string0 = Utility.signatureToString("ZOvp.1k$");
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Utility.classOrInterface(15);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "6;.\"Fx~<u3m*jyT+F`", "JV{J3#E9W=EjoXt`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('y');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      boolean boolean1 = Utility.isSet(55, 55);
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.convertString("AMrOi(\"IBi9<WWK5t/");
      assertEquals("AMrOi(\\\"IBi9<WWK5t/", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Utility.isJavaIdentifierPart('\u008D');
      try { 
        Utility.typeOfMethodSignature("org.apache.bcel.util.ClassLoaderRepository");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.util.ClassLoaderRepository
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String[] stringArray0 = Constants.CONSTANT_NAMES;
      int int0 = Utility.clearBit(40, 40);
      assertEquals(40, int0);
      
      int int1 = Utility.setBit((-3871), 971);
      assertEquals((-1823), int1);
      
      String[] stringArray1 = Constants.OPCODE_NAMES;
      String string0 = Utility.accessToString(971, true);
      assertEquals("public private static volatile transient native", string0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String string0 = null;
      Utility.isSet(5, (-530));
      Utility.format(5, 5, true, 'm');
      String string1 = "... (truncated)";
      // Undeclared exception!
      try { 
        Utility.signatureToString("... (truncated)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `... (truncated)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Utility.classOrInterface(651);
      try { 
        Utility.methodSignatureArgumentTypes("<Q{D9Wl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <Q{D9Wl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PxLb");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("6;.\"Fx~<u3m*jyT+F`", "PxLb", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Utility.classOrInterface(4);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Object object0 = new Object();
      Utility.setBit(97, 2382);
      String string0 = "void";
      try { 
        Utility.typeOfMethodSignature("void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String[] stringArray0 = Constants.CONSTANT_NAMES;
      Utility.clearBit(40, 40);
      int int0 = 971;
      Utility.setBit((-3871), 971);
      try { 
        Utility.methodSignatureArgumentTypes("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Utility.format(186, 186, true, '&');
      // Undeclared exception!
      try { 
        Utility.signatureToString("186&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `186&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      int int0 = (-638);
      Utility.accessToString((-638), true);
      Utility.searchOpcode("nop");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("private transient native abstract strictfp synthetic annotation enum", "private transient native abstract strictfp synthetic annotation enum", "private transient native abstract strictfp synthetic annotation enum", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private transient native abstract strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      int int0 = 186;
      boolean boolean0 = true;
      char char0 = '0';
      boolean boolean1 = false;
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Utility.compactClassName("\t", "The offset cannot be negative", false);
      Utility.methodTypeToSignature("The offset cannot be negative", (String[]) null);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)126;
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)91;
      Constant[] constantArray0 = new Constant[4];
      MockFile mockFile0 = new MockFile("\t");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, ".%.p(/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \".%.p(/\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Utility.isSet(175, 175);
      Utility.fillup("|s^dVdmli", 175, true, '[');
      Utility.isJavaIdentifierPart('C');
      try { 
        Utility.methodSignatureArgumentTypes("s)J4oU]Cr}F<9sL{", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: s)J4oU]Cr}F<9sL{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Utility.classOrInterface(31);
      Utility.accessToString(31);
      int int0 = 1416;
      Utility.setBit(1416, 31);
      try { 
        Utility.typeOfMethodSignature("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Object object0 = new Object();
      String string0 = Utility.accessToString(0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      try { 
        Utility.typeOfSignature("fl_wG1Kga|\"rr4L>h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fl_wG1Kga|\"rr4L>h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String[] stringArray0 = Constants.CONSTANT_NAMES;
      Utility.clearBit(37, 37);
      int int0 = 966;
      Utility.setBit((-3871), 966);
      try { 
        Utility.methodSignatureArgumentTypes("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Utility.classOrInterface(0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "class";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "class";
      objectArray0[3] = (Object) "class";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.printArray(objectArray0, true);
      Utility.convertString("{class, java.lang.Object@64c8f905, class, class, null}");
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Utility.printArray(objectArray0);
      Utility.isSet(171, 171);
      Utility.printArray(objectArray0);
      Utility.getSignature(".$db!`'`a0\">6G;T");
      try { 
        Utility.typeOfMethodSignature("%=~`tsS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %=~`tsS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = "v9\"fRpe%((~`&?aLfn";
      // Undeclared exception!
      try { 
        Utility.signatureToString("void", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `void'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Utility.setBit((-1122), (-1122));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "bjTGkw";
      stringArray0[1] = "bjTGkw";
      stringArray0[2] = "bjTGkw";
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.getSignature("f[xA?~ExX;E,@5==:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[xA?~ExX;E,@5==:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Utility.compactClassName("\t", "The offset cannot be negative", false);
      Utility.printArray((Object[]) null, false, false);
      String string0 = Utility.compactClassName(" ");
      assertEquals(" ", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      String string1 = Utility.methodTypeToSignature("\t", stringArray0);
      assertEquals("(L;L;)L;", string1);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      String string0 = Utility.compactClassName("The offset cannot be negative");
      assertEquals("The offset cannot be negative", string0);
      
      short short0 = Utility.searchOpcode("... (truncated)");
      assertEquals((short) (-1), short0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ifnonnull", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.append((CharSequence) "ifnonnull");
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The offset cannot be negative";
      String string1 = Utility.methodTypeToSignature("s)J4oU]Cr}F<9sL{", stringArray0);
      assertEquals("(LThe;)Ls)J4oU]Cr}F<9sL{;", string1);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Utility.format(186, 186, false, '0');
      // Undeclared exception!
      try { 
        Utility.signatureToString("UnW", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UnW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Utility.searchOpcode("");
      Utility.replace("?>...", "?>...", "`Tw{$0$W6],pzWi");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)111;
      byteArray0[7] = (byte)91;
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "bjTGkw";
      stringArray0[1] = "bjTGkw";
      stringArray0[2] = "bjTGkw";
      stringArray0[3] = "f[xA?~ExX;E,@5==:";
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("bjTGkw", "bjTGkw");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) stringArray0);
      assertEquals(74L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Utility.classOrInterface(0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "class";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) "class";
      Utility.printArray(objectArray0, false);
      Utility.convertString("class, java.lang.Object@1b6954a7, class, class, class");
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Utility.convertString("p/AIQ^GQ9");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte)37;
      byteArray0[8] = (byte)0;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String string0 = "Tygv!?";
      Utility.compactClassName("Tygv!?");
      String string1 = "";
      boolean boolean0 = true;
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      int int0 = 171;
      Utility.isSet(171, 171);
      char char0 = '[';
      Utility.fillup("|s^dVdmli", 171, true, '[');
      Utility.isJavaIdentifierPart('[');
      try { 
        Utility.methodSignatureArgumentTypes("|s^dVdmli", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |s^dVdmli
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Utility.accessToString(48);
      Utility.isSet((-1541), 48);
      Utility.fillup("5!-.Za>I6<K,I&4)G'", 5123, false, '8');
      Utility.isSet((-269), 9);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      String string0 = Utility.convertString("p/AIQ^GQ9");
      assertEquals("p/AIQ^GQ9", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte)37;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("V$b0$o$K$L$A$f7$r$A", string1);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Utility.accessToString(18, false);
      Utility.printArray((Object[]) null);
      Utility.getSignature("private final");
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Utility.isSet(0, 0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false, false);
      Utility.accessToString(1848);
      Utility.printArray(objectArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        Charset.forName("static final synchronized native interface abstract");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // static final synchronized native interface abstract
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Utility.compactClassName("\t", "The offset cannot be negative", false);
      Utility.printArray((Object[]) null, false, false);
      Utility.getSignature("");
      Utility.isJavaIdentifierPart('1');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "static", "ineg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^eH=";
      stringArray0[1] = "^eH=";
      stringArray0[2] = "^eH=";
      Utility.methodTypeToSignature("^eH=", stringArray0);
      boolean boolean0 = false;
      Utility.printArray((Object[]) stringArray0, false);
      int int0 = 0;
      Utility.accessToString(0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("vlc,", "^eH=", "aw{M9:T=9St");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: vlc,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Utility.isJavaIdentifierPart('>');
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Utility.accessToString(48);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "final synchronized";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "final synchronized";
      stringArray0[4] = "final synchronized";
      stringArray0[5] = "";
      stringArray0[6] = "final synchronized";
      Utility.methodTypeToSignature("", stringArray0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)8;
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)110;
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)8, (byte)8);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      int int0 = 99;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(99, 48);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      DataInput dataInput0 = null;
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.commons.io.filefilter.MagicNumberFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.commons.io.filefilter.MagicNumberFileFilter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = "{y-70-I~R\\IWk)";
      Utility.compactClassName("{y-70-I~RIWk)");
      String string1 = "";
      boolean boolean0 = false;
      Utility.decode("", false);
      String string2 = "";
      int int0 = 0;
      boolean boolean1 = true;
      char char0 = 'L';
      Utility.fillup("", 0, true, 'L');
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-43);
      byte byte0 = (byte) (-15);
      byteArray0[6] = (byte) (-15);
      Utility.equals(byteArray0, byteArray0);
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Utility.searchOpcode("");
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Utility.setBit((-1122), (-1122));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "bjTGkw";
      stringArray0[1] = "bjTGkw";
      stringArray0[2] = "bjTGkw";
      stringArray0[3] = "f[xA?~ExX;E,@5==:";
      stringArray0[4] = "bjTGkw";
      stringArray0[5] = "bjTGkw";
      stringArray0[6] = "(name_index = ";
      stringArray0[7] = "bjTGkw";
      stringArray0[8] = "bjTGkw";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("bjTGkw", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[xA?~ExX;E,@5==:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      String string0 = "";
      String string1 = "!e5VLr[3S1z`][p(s";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "!e5VLr[3S1z`][p(s", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Utility.format(186, 186, true, '0');
      // Undeclared exception!
      try { 
        Utility.signatureToString("UnW", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UnW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte) (-23);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("v$A$A$A$A$f2$e9", string0);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      int int0 = 0;
      Utility.classOrInterface(0);
      try { 
        Utility.methodSignatureReturnType("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Utility.isSet(0, 149);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)46;
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantFieldref constantFieldref0 = null;
      try {
        constantFieldref0 = new ConstantFieldref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Utility.isSet(0, 0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[0] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object2;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false, false);
      Utility.accessToString(1848);
      Utility.printArray(objectArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        Charset.forName("static final synchronized native interface abstract");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // static final synchronized native interface abstract
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      char char0 = '3';
      Utility.isJavaIdentifierPart('3');
      Utility.accessToString(256);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-72);
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureReturnType("\t", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<Object> class0 = Object.class;
      syntheticRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      Object object0 = new Object();
      Utility.printArray((Object[]) constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(167L);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      String string0 = Utility.format(168, 168, true, 'U');
      assertEquals("168UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU", string0);
      
      String string1 = Utility.format(168, (-1692), true, 'U');
      assertEquals("168", string1);
      
      String string2 = Utility.classOrInterface((-1692));
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "168UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU";
      String string3 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string3);
      
      String string4 = Utility.compactClassName("class", "org.apache.bcel.classfile.MethodParameter", false);
      assertTrue(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      boolean boolean0 = true;
      char char0 = '5';
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 1694, true, '5');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Utility.clearBit((-1883776027), (-1883776027));
      int int0 = (-2997);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      char char0 = 'f';
      Utility.fillup("null", (-2997), false, 'f');
      String string0 = "null";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("<illegal opcode>", "null", "null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      boolean boolean0 = Utility.isSet(0, 6);
      assertFalse(boolean0);
      
      String string0 = Utility.fillup("iNu=-clyzwvG9Mol:r", 0, false, '\'');
      assertEquals("iNu=-clyzwvG9Mol:r", string0);
      
      Utility.isSet(1841, 6);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)25;
      byteArray0[8] = (byte)0;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$5d$cak$S$Ah$A$Z$A", string1);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      int int0 = 171;
      Utility.isSet(171, 171);
      String string0 = "|s^dVdmli";
      Utility.fillup("|s^dVdmli", 171, true, ' ');
      Utility.isJavaIdentifierPart(' ');
      try { 
        Utility.methodSignatureArgumentTypes("|s^dVdmli", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |s^dVdmli
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Utility.setBit((-1122), (-1122));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "bjTGkw";
      stringArray0[1] = "bjTGkw";
      stringArray0[2] = "bjTGkw";
      stringArray0[3] = "f[xA?~ExX;E,@5==:";
      stringArray0[4] = "bjTGkw";
      stringArray0[5] = "bjTGkw";
      Utility.isJavaIdentifierPart('g');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("rqib9", "bjTGkw", "bjTGkw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: rqib9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      int int0 = 171;
      Utility.isSet(171, 171);
      Utility.fillup("|s^dVdmli", 171, true, '[');
      Utility.isJavaIdentifierPart('[');
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("|s^dVdmli", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |s^dVdmli
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Utility.isJavaIdentifierPart('[');
      String string0 = "\t\t%";
      try { 
        Utility.methodSignatureArgumentTypes("\t\t%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
      
      String string1 = Utility.classOrInterface(1231);
      assertEquals("class", string1);
      
      boolean boolean0 = Utility.isSet(32, (-1070));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      int int0 = 0;
      Utility.classOrInterface(0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "class";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) "class";
      Utility.printArray(objectArray0, false);
      Utility.convertString("class, java.lang.Object@9991471, class, class, class");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("int", "class, java.lang.Object@9991471, class, class, class", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)2;
      Utility.toHexString(byteArray0);
      String string0 = "w$";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("w$", "fd 10 7b 11 0e 66 00 02", "fd 10 7b 11 0e 66 00 02", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: w$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals(", , , , , , , ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      String string0 = ")lsUcEgX9)qGe'sUG";
      try { 
        Utility.methodSignatureReturnType(")lsUcEgX9)qGe'sUG", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `qGe'sUG'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 0, 973);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      String string0 = "iload_3";
      boolean boolean0 = true;
      Utility.compactClassName("iload_3", true);
      Utility.classOrInterface(0);
      try { 
        Utility.typeOfMethodSignature("iload_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      String string0 = "Invalid signature: `";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("Invalid signature: `", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid signature: `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      String string0 = "zUVQceU/H[EAq:L?IDR";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("zUVQceU/H[EAq:L?IDR", "zUVQceU/H[EAq:L?IDR", "zUVQceU/H[EAq:L?IDR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: zUVQceU/H[EAq:L?IDR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)5;
      Utility.toHexString(byteArray0);
      Utility.compactClassName("", true);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      String string0 = "RCKiw";
      try { 
        Utility.typeOfMethodSignature("RCKiw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RCKiw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Utility.searchOpcode("");
      Utility.isSet((short) (-1), 0);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Utility.compactClassName("Y");
      String string0 = "U/`,9%*-@$ddjS";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("U/`,9%*-@$ddjS", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U/`,9%*-@$ddjS'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
