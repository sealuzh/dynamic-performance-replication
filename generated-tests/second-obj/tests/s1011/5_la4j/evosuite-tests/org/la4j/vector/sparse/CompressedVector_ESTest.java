/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:58:17 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(2141288203, (-3922));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -3922.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(846, 929);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 929.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      boolean boolean0 = compressedVector0.nonZeroAt(1270);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2361, 2361);
      boolean boolean0 = compressedVector0.nonZeroAt(2361);
      assertFalse(boolean0);
      
      compressedVector0.nonZeroIterator();
      assertEquals(2361, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-2293)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-2293), vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4389;
      CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-459.6668086);
      doubleArray0[0] = 0.0;
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.toSparseVector();
      compressedVector0.each(vectorProcedure0);
      compressedVector0.setAll(0.0);
      int int0 = 2298;
      String string0 = null;
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 922);
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength((-2317));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2317
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1271);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(1271);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random(1281, (double) 1281, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1484.076165154);
      doubleArray0[1] = (-625.832702428);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-1484.076165154), (-625.832702428)}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1288, 1288);
      assertNotNull(compressedVector0);
      assertEquals(1288, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.eachNonZero((VectorProcedure) null);
      assertEquals(1288, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("!d-\"@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 4389;
      CompressedVector compressedVector0 = CompressedVector.zero(4389, 4389);
      assertNotNull(compressedVector0);
      assertEquals(4389, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)4389).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(4389, vectorFunction0);
      assertEquals(2.27842333105491E-4, compressedVector0.density(), 0.01);
      assertEquals(4389, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        compressedVector0.mkString((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (-31.54709471586039);
      doubleArray0[1] = 869.187599;
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1265);
      assertNotNull(compressedVector0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1265, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.mkString((NumberFormat) null, "$rEF.IG~]O{?1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0, 0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      
      String string0 = compressedVector0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      
      compressedVector0.setAll(100.0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer(985);
      assertNotNull(integer0);
      assertEquals(985, (int)integer0);
      
      Byte byte0 = new Byte((byte) (-6));
      assertNotNull(byte0);
      assertEquals((byte) (-6), (byte)byte0);
      
      Byte byte1 = hashMap0.put(integer0, byte0);
      assertNull(byte1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Byte byte2 = new Byte((byte) (-22));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-22), (byte)byte2);
      
      Byte byte3 = hashMap0.put(integer0, byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte) (-6), (byte)byte3);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      HashMap hashMap1 = (HashMap)hashMap0.clone();
      assertNotNull(hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1285);
      assertNotNull(compressedVector0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(7.782101167315176E-4, compressedVector0.density(), 0.01);
      assertEquals(1285, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.swapElements(1285, 1285);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(7.782101167315176E-4, compressedVector0.density(), 0.01);
      assertEquals(1285, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.set(16, 1.0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0.0015564202334630351, compressedVector0.density(), 0.01);
      assertEquals(1285, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1298);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1298, compressedVector0.length());
      
      boolean boolean0 = compressedVector0.nonZeroAt(519);
      assertFalse(boolean0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1298, compressedVector0.length());
      
      compressedVector0.swapElements((-1), 1298);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1298, compressedVector0.length());
      
      MockRandom mockRandom0 = new MockRandom(648L);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      compressedVector0.setAll(519);
      assertEquals(1298, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1298, compressedVector0.length());
      
      double double0 = compressedVector0.getOrElse(519, 0.0);
      assertEquals(519.0, double0, 0.01);
      assertEquals(1298, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1298, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(17, vectorFunction0);
      assertEquals(0.9992295839753467, compressedVector0.density(), 0.01);
      assertEquals(1297, compressedVector0.cardinality());
      assertEquals(1298, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1271);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1271, compressedVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(216);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1271, compressedVector0.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(216, compressedVector1.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector1 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      
      byte byte0 = (byte) (-126);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-19);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1312;
      doubleArray0[2] = (double) 1312;
      doubleArray0[3] = (double) 1312;
      doubleArray0[4] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1312.0, 1312.0, 1312.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.6, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (double)1312, (-1015.156345065), 1486.856258, 1312.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertArrayEquals(new double[] {0.0, 1312.0, 1312.0, 1312.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      
      compressedVector0.swapElements(1312, 1312);
      assertArrayEquals(new double[] {0.0, 1312.0, 1312.0, 1312.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertArrayEquals(new double[] {0.0, 1312.0, 1312.0, 1312.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(vectorIterator0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(1312, 0.0, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(1312, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)2;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      assertNotSame(sparseVector0, compressedVector0);
      assertNotNull(sparseVector0);
      assertEquals(1, sparseVector0.length());
      assertEquals(1, sparseVector0.cardinality());
      assertEquals(1.0, sparseVector0.density(), 0.01);
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertNotSame(compressedVector0, sparseVector0);
      assertNotNull(denseVector0);
      assertEquals(1312, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1312, denseVector0.length());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("\u00A4#,##0.00;(\u00A4#,##0.00)", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals("($", decimalFormat0.getNegativePrefix());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals(")", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("$", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("\u00A4#,##0.00;(\u00A4#,##0.00)", decimalFormat0.toPattern());
      
      String string0 = sparseVector0.mkString((NumberFormat) decimalFormat0);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      assertNotSame(sparseVector0, compressedVector0);
      assertNotNull(string0);
      assertEquals("$2.00", string0);
      assertEquals(1, sparseVector0.length());
      assertEquals(1, sparseVector0.cardinality());
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("\u00A4#,##0.00;(\u00A4#,##0.00)", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals("($", decimalFormat0.getNegativePrefix());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals(")", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("$", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("\u00A4#,##0.00;(\u00A4#,##0.00)", decimalFormat0.toPattern());
      
      int int0 = 2772;
      boolean boolean0 = sparseVector0.nonZeroAt(2772);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      assertNotSame(sparseVector0, compressedVector0);
      assertFalse(boolean0);
      assertEquals(1, sparseVector0.length());
      assertEquals(1, sparseVector0.cardinality());
      assertEquals(1.0, sparseVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertNotSame(compressedVector0, sparseVector0);
      assertEquals(1312, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1288);
      assertNotNull(compressedVector0);
      assertEquals(1288, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll((-5.086064979487492));
      assertEquals(1288, compressedVector0.cardinality());
      assertEquals(1288, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(4389, 4389);
      assertNotNull(compressedVector0);
      assertEquals(4389, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)4389).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(4389, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4389, compressedVector0.length());
      assertEquals(2.27842333105491E-4, compressedVector0.density(), 0.01);
      
      double[] doubleArray0 = new double[1];
      Vector vector0 = Vector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(vector0);
      assertEquals(1, vector0.length());
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(805.1203166282).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction1);
      assertEquals(4389, compressedVector0.length());
      assertEquals(4.55684666210982E-4, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      
      boolean boolean0 = compressedVector0.nonZeroAt(2512);
      assertFalse(boolean0);
      assertEquals(4389, compressedVector0.length());
      assertEquals(4.55684666210982E-4, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      
      compressedVector0.swapElements(2512, (-642));
      assertEquals(4389, compressedVector0.length());
      assertEquals(4.55684666210982E-4, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Byte byte0 = hashMap0.put(integer0, (Byte) null);
      assertNull(byte0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      
      int int0 = (-2250);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer((-2250));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-2250), (int)integer0);
      
      Double double0 = new Double(1838.98727354786);
      assertNotNull(double0);
      assertEquals(1838.98727354786, (double)double0, 0.01);
      
      Double double1 = hashMap0.put(integer0, double0);
      assertTrue(integer0.equals((Object)int0));
      assertNull(double1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      int int1 = 1293;
      // Undeclared exception!
      try { 
        Vector.fromMap(hashMap0, 1293);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(1312, 0.0, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(805.1203166282).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(7.621951219512195E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertNotNull(denseVector0);
      assertEquals(7.621951219512195E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      assertEquals(1312, denseVector0.length());
      
      compressedVector0.set(0, (byte)0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(mockRandom2);
      
      // Undeclared exception!
      try { 
        CompressedVector.random((int) (byte)0, (-3250.98), (Random) mockRandom2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(1312, 0.0, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((byte)0, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      assertEquals(7.621951219512195E-4, compressedVector0.density(), 0.01);
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertNotNull(denseVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      assertEquals(7.621951219512195E-4, compressedVector0.density(), 0.01);
      assertEquals(1312, denseVector0.length());
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      UnaryOperator<Double> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      compressedVector0.set((byte)0, 2720.0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      assertEquals(7.621951219512195E-4, compressedVector0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((byte)0, vectorFunction1);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 1312;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1312;
      doubleArray0[3] = (double) 1312;
      doubleArray0[4] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1312.0, 1312.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(287.92043082614606, (double)1312, (-1.0), 0.0, (double)1312).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 1312.0, 1312.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.8, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      int int1 = (-305);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(860.6328459014596).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-305), vectorFunction1);
      assertArrayEquals(new double[] {0.0, 0.0, 1312.0, 1312.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 1312.0, 1312.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(sparseVector0, compressedVector0);
      assertNotNull(sparseVector0);
      assertEquals(5, sparseVector0.length());
      assertEquals(0.4, sparseVector0.density(), 0.01);
      assertEquals(2, sparseVector0.cardinality());
      
      // Undeclared exception!
      try { 
        compressedVector0.toDenseVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -305
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      CompressedVector compressedVector0 = CompressedVector.random(1312, 0.0, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((byte)0, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      assertEquals(7.621951219512195E-4, compressedVector0.density(), 0.01);
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertNotNull(denseVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      assertEquals(7.621951219512195E-4, compressedVector0.density(), 0.01);
      assertEquals(1312, denseVector0.length());
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      UnaryOperator<Double> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      compressedVector0.swapElements((-2808), (-1450));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      assertEquals(7.621951219512195E-4, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(1312, 0.0, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(1312, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = new CompressedVector(1644);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertEquals(1644, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      
      double double0 = compressedVector1.getOrElse(1588, (-1634.215179));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals((-1634.215179), double0, 0.01);
      assertEquals(1644, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(1312, 0.0, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)2;
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = (-1415.337);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 2.0, 2.0, (-1415.337)}, doubleArray0, 0.01);
      assertNotSame(sparseVector0, compressedVector0);
      assertNotNull(sparseVector0);
      assertEquals(0.6, sparseVector0.density(), 0.01);
      assertEquals(5, sparseVector0.length());
      assertEquals(3, sparseVector0.cardinality());
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertNotSame(compressedVector0, sparseVector0);
      assertNotNull(denseVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      assertEquals(1312, denseVector0.length());
      
      compressedVector0.set(0, 0.0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertNotSame(compressedVector0, sparseVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      ((CompressedVector) sparseVector0).updateAt(0, vectorFunction1);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 2.0, 2.0, (-1415.337)}, doubleArray0, 0.01);
      assertNotSame(sparseVector0, compressedVector0);
      assertEquals(0.6, sparseVector0.density(), 0.01);
      assertEquals(5, sparseVector0.length());
      assertEquals(3, sparseVector0.cardinality());
      
      double double0 = sparseVector0.getOrElse((byte)0, 2691.3855679491);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 2.0, 2.0, (-1415.337)}, doubleArray0, 0.01);
      assertNotSame(sparseVector0, compressedVector0);
      assertEquals(2691.3855679491, double0, 0.01);
      assertEquals(0.6, sparseVector0.density(), 0.01);
      assertEquals(5, sparseVector0.length());
      assertEquals(3, sparseVector0.cardinality());
      
      boolean boolean0 = compressedVector0.nonZeroAt((byte)0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertNotSame(compressedVector0, sparseVector0);
      assertFalse(boolean0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(1312, 0.0, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      
      byte byte0 = (byte)0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((byte)0, vectorFunction0);
      assertEquals(7.621951219512195E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertNotNull(denseVector0);
      assertEquals(7.621951219512195E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      assertEquals(1312, denseVector0.length());
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double[] doubleArray0 = new double[0];
      Vector vector0 = Vector.fromArray(doubleArray0);
      assertFalse(vector0.equals((Object)denseVector0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(vector0, denseVector0);
      assertNotNull(vector0);
      assertEquals(0, vector0.length());
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1312, vectorFunction1);
      assertEquals(7.621951219512195E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      
      int int0 = 2141288203;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((byte)0, 2141288203);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(1312, 0.0, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1312, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((byte)0, vectorFunction0);
      assertEquals(7.621951219512195E-4, compressedVector0.density(), 0.01);
      assertEquals(1312, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertNotNull(denseVector0);
      assertEquals(7.621951219512195E-4, compressedVector0.density(), 0.01);
      assertEquals(1312, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1312, denseVector0.length());
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      UnaryOperator<Double> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      compressedVector0.set((byte)0, 2720.0);
      assertEquals(7.621951219512195E-4, compressedVector0.density(), 0.01);
      assertEquals(1312, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(7.621951219512195E-4, compressedVector0.density(), 0.01);
      assertEquals(1312, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      boolean boolean0 = compressedVector0.nonZeroAt((byte)0);
      assertTrue(boolean0);
      assertEquals(7.621951219512195E-4, compressedVector0.density(), 0.01);
      assertEquals(1312, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MockRandom mockRandom0 = new MockRandom(1312);
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(1312, 0.0, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      int int0 = 0;
      double double0 = 805.1203166282;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(byte)2).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((byte)0, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      assertEquals(7.621951219512195E-4, compressedVector0.density(), 0.01);
      
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(sparseVector0, compressedVector0);
      assertNotNull(sparseVector0);
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(5, sparseVector0.length());
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertNotSame(compressedVector0, sparseVector0);
      assertNotNull(denseVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      assertEquals(7.621951219512195E-4, compressedVector0.density(), 0.01);
      assertEquals(1312, denseVector0.length());
      
      compressedVector0.set(0, (byte)2);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertNotSame(compressedVector0, sparseVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      assertEquals(7.621951219512195E-4, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(byte)2).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((byte)0, vectorFunction1);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertNotSame(compressedVector0, sparseVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      assertEquals(7.621951219512195E-4, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse((-1240), (-1415.337));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-1240' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Long long0 = Long.valueOf((-3335L));
      assertNotNull(long0);
      assertEquals((-3335L), (long)long0);
      
      long long1 = Long.max((-2586L), 1307L);
      assertEquals(1307L, long1);
      
      boolean boolean0 = linkedList0.add(long0);
      assertFalse(long0.equals((Object)long1));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 9);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertNotSame(sparseVector0, compressedVector0);
      assertNotNull(sparseVector0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(9, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      
      compressedVector0.setAll((-3335L));
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertNotSame(compressedVector0, sparseVector0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertNotSame(compressedVector0, sparseVector0);
      assertNotNull(byteArray0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1299);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1299, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      Integer integer0 = new Integer(1299);
      assertNotNull(integer0);
      assertEquals(1299, (int)integer0);
      
      compressedVector0.swapElements(1299, 2125);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1299, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      
      DecimalFormat decimalFormat1 = new DecimalFormat();
      assertTrue(decimalFormat1.equals((Object)decimalFormat0));
      assertNotNull(decimalFormat1);
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      
      String string0 = compressedVector0.toMatrixMarket((NumberFormat) decimalFormat0);
      assertTrue(decimalFormat0.equals((Object)decimalFormat1));
      assertNotSame(decimalFormat0, decimalFormat1);
      assertNotNull(string0);
      assertEquals("%%MatrixMarket vector coordinate real\n1299 0\n", string0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1299, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      
      double double0 = compressedVector0.product();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1299, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)5, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1299, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)5, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1299, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1299, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector1.eachNonZero(vectorProcedure0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)5, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1299, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1299, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[5];
      intArray0[0] = 1312;
      intArray0[1] = 1312;
      intArray0[2] = 1312;
      intArray0[3] = 1312;
      intArray0[4] = 1312;
      CompressedVector compressedVector0 = new CompressedVector(1312, 1312, doubleArray0, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1312, 1312, 1312, 1312, 1312}, intArray0);
      assertNotNull(compressedVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1312, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1312, 1312, 1312, 1312, 1312}, intArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1312, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      
      compressedVector0.setAll(1312);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1312, 1312, 1312, 1312, 1312}, intArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1312, compressedVector0.cardinality());
      assertEquals(1312, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1299);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1299, compressedVector0.length());
      
      compressedVector0.swapElements(1299, 2128);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1299, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(345.623).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((byte)0, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(7.698229407236335E-4, compressedVector0.density(), 0.01);
      assertEquals(1299, compressedVector0.length());
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertNotNull(denseVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(7.698229407236335E-4, compressedVector0.density(), 0.01);
      assertEquals(1299, compressedVector0.length());
      assertEquals(1299, denseVector0.length());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(7.698229407236335E-4, compressedVector0.density(), 0.01);
      assertEquals(1299, compressedVector0.length());
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(7.698229407236335E-4, compressedVector0.density(), 0.01);
      assertEquals(1299, compressedVector0.length());
      assertEquals(7.698229407236335E-4, compressedVector1.density(), 0.01);
      assertEquals(1299, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(7.698229407236335E-4, compressedVector0.density(), 0.01);
      assertEquals(1299, compressedVector0.length());
      
      compressedVector1.toBinary();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(4389, 4389);
      assertNotNull(compressedVector0);
      assertEquals(4389, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)4389).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(4389, vectorFunction0);
      assertEquals(2.27842333105491E-4, compressedVector0.density(), 0.01);
      assertEquals(4389, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      double[] doubleArray0 = new double[1];
      Vector vector0 = Vector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(vector0);
      assertEquals(1, vector0.length());
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction1);
      assertEquals(2.27842333105491E-4, compressedVector0.density(), 0.01);
      assertEquals(4389, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.swapElements(4389, 0);
      assertEquals(2.27842333105491E-4, compressedVector0.density(), 0.01);
      assertEquals(4389, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      boolean boolean0 = compressedVector0.nonZeroAt(2512);
      assertFalse(boolean0);
      assertEquals(2.27842333105491E-4, compressedVector0.density(), 0.01);
      assertEquals(4389, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.swapElements(9, (-652));
      assertEquals(2.27842333105491E-4, compressedVector0.density(), 0.01);
      assertEquals(4389, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-116);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(32);
      assertNotNull(compressedVector0);
      assertEquals(32, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      Integer integer0 = new Integer(1293);
      assertNotNull(integer0);
      assertEquals(1293, (int)integer0);
      
      compressedVector0.setAll(32);
      assertEquals(32, compressedVector0.length());
      assertEquals(32, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      int int0 = 2128;
      int int1 = 1276;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1276, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1273);
      assertNotNull(compressedVector0);
      assertEquals(1273, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      Integer integer0 = new Integer(1273);
      assertNotNull(integer0);
      assertEquals(1273, (int)integer0);
      
      compressedVector0.swapElements(1273, 2128);
      assertEquals(1273, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(345.623).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((byte)0, vectorFunction0);
      assertEquals(1273, compressedVector0.length());
      assertEquals(7.855459544383347E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertNotNull(denseVector0);
      assertEquals(1273, compressedVector0.length());
      assertEquals(7.855459544383347E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1273, denseVector0.length());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(1273, compressedVector0.length());
      assertEquals(7.855459544383347E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(1273, compressedVector0.length());
      assertEquals(7.855459544383347E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1273, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(7.855459544383347E-4, compressedVector1.density(), 0.01);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.subtract((Vector) compressedVector0);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotNull(compressedVector2);
      assertEquals(1273, compressedVector0.length());
      assertEquals(7.855459544383347E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1273, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(7.855459544383347E-4, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(1273, compressedVector2.length());
      
      compressedVector2.iterator();
      CompressedVector compressedVector3 = CompressedVector.fromBinary(byteArray0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2241.0, (-153.262334057), 345.623, 2241.0, 100.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector3.update(vectorFunction1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2128;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = 345.623;
      doubleArray0[3] = (double) 2128;
      doubleArray0[4] = (double) 1273;
      doubleArray0[5] = (double) 2128;
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) (byte)0;
      Vector.fromArray(doubleArray0);
      VectorFunction vectorFunction2 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2128.0).when(vectorFunction2).evaluate(anyInt() , anyDouble());
      compressedVector2.updateAt((-3200), vectorFunction2);
      Object object0 = new Object();
      compressedVector3.equals(object0);
      CompressedVector.fromBinary(byteArray0);
      compressedVector3.nonZeroAt((byte)0);
      compressedVector3.swapElements((byte)0, 32);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      CompressedVector.fromCollection(linkedList0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MockRandom mockRandom0 = new MockRandom((-14L));
      CompressedVector compressedVector0 = CompressedVector.random(1312, 0.0, (Random) mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((byte)0, vectorFunction0);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      compressedVector0.toDenseVector();
      compressedVector0.set(1, (byte)2);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Double> unaryOperator0 = UnaryOperator.identity();
      Double double0 = new Double((-1.0));
      unaryOperator0.apply(double0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      sparseVector0.add(2140.947819222072);
      compressedVector0.toDiagonalMatrix();
      CompressedVector compressedVector1 = new CompressedVector(1);
      compressedVector0.toBinary();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1, (-174));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1299);
      compressedVector0.max();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(776.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((byte)0, vectorFunction0);
      compressedVector0.toDenseVector();
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector.fromBinary(byteArray0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector1 = new CompressedVector();
      compressedVector0.swapElements(794, (byte)0);
      compressedVector0.iterator();
      compressedVector0.nonZeroAt(794);
      CompressedVector.zero(1298, 1298);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1299);
      compressedVector0.max();
      compressedVector0.swapElements(1299, 2128);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(345.623).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((byte)0, vectorFunction0);
      compressedVector0.toDenseVector();
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[3] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      Vector.constant(1290, (byte)0);
      CompressedVector compressedVector2 = new CompressedVector((byte)0);
      compressedVector0.swapElements((byte)0, 2034);
      compressedVector2.equals((Vector) compressedVector1, 1093.73);
      compressedVector2.nonZeroAt((byte)0);
      int int0 = (-1017);
      // Undeclared exception!
      try { 
        compressedVector1.swapElements(2365, 795);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1299);
      Integer integer0 = new Integer(1299);
      compressedVector0.swapElements(1299, 1299);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(345.623).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((byte)0, vectorFunction0);
      compressedVector0.toDenseVector();
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.innerProduct(compressedVector1);
      compressedVector0.max();
      compressedVector0.toDiagonalMatrix();
      Vector.constant(1299, (-777.0));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 1299;
      int[] intArray0 = new int[1];
      intArray0[0] = 1299;
      CompressedVector compressedVector2 = null;
      try {
        compressedVector2 = new CompressedVector((-873), (-873), doubleArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -873
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1299, 1299);
      Integer integer0 = new Integer(1299);
      compressedVector0.swapElements(1299, 2128);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(345.623).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((byte)0, vectorFunction0);
      compressedVector0.toDenseVector();
      compressedVector0.blank();
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector1.toDiagonalMatrix();
      CompressedVector compressedVector2 = CompressedVector.zero(2128, 2128);
      compressedVector2.equals((Vector) compressedVector1, 1292.4369594299446);
      compressedVector0.toDiagonalMatrix();
      Vector.constant(2128, (-777.0));
      // Undeclared exception!
      try { 
        compressedVector1.swapElements((-1112), (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1299);
      Integer integer0 = new Integer(1299);
      compressedVector0.swapElements(1299, 2128);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(345.623).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((byte)0, vectorFunction0);
      compressedVector0.toDenseVector();
      compressedVector0.toBinary();
      Vector vector0 = compressedVector0.subtract((Vector) compressedVector0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.toDiagonalMatrix();
      vector0.toDiagonalMatrix();
      Vector.constant(2128, (-777.0));
      CompressedVector compressedVector1 = new CompressedVector(2128);
      compressedVector0.swapElements((-1112), (byte)0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1299);
      compressedVector0.swapElements(1299, 2125);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(345.623).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((byte)0, vectorFunction0);
      compressedVector0.toDenseVector();
      Vector vector0 = compressedVector0.blank();
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      Locale locale0 = new Locale("q>.d{\"-.|w>bu0g?G");
      locale0.clone();
      Locale locale1 = Locale.JAPANESE;
      NumberFormat.getCurrencyInstance(locale0);
      compressedVector1.setAll(345.623);
      compressedVector1.divide((-32.0));
      vector0.sum();
      org.evosuite.runtime.Random.setNextRandom(370);
      compressedVector1.iterator();
      compressedVector0.toBinary();
      // Undeclared exception!
      try { 
        compressedVector1.swapElements((-3771), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
}
