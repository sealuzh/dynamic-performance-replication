/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 16:54:52 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = RE2.match("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      String string0 = rE2_0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("''Q1@YvMVGdK6o");
      int[] intArray0 = rE2_0.findSubmatchIndex("''Q1@YvMVGdK6o");
      assertArrayEquals(new int[] {0, 14}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", (-973));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = new RE2("`");
      List<int[]> list0 = rE2_0.findAllIndex("`", 10);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      List<String[]> list0 = rE2_0.findAllSubmatch("", (-490));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("can't happen");
      String string0 = rE2_0.replaceAll("can't happen", "can't happen");
      assertEquals("can't happen", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      List<String[]> list0 = rE2_0.findAllSubmatch("", 15);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("y/jI.c{h!yXwG`{`|");
      assertEquals("y/jI.c{h!yXwG`{`|", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("y/jI.c{h!yXwG`{`|", 1190);
      assertEquals("y/jI.c{h!yXwG`{`|", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (-660));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[3];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 575);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", string0);
      assertEquals("", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 0);
      assertEquals("", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 425);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("com.google.re2j.Parser");
      assertEquals("com.google.re2j.Parser", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.find("com.google.re2j.Parser");
      assertEquals("com.google.re2j.Parser", string0);
      assertEquals("com.google.re2j.Parser", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = new RE2("y/jc.c{<h!yXXwG`{`|");
      assertEquals("y/jc.c{<h!yXXwG`{`|", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceAll("y/jc.c{<h!yXXwG`{`|", "y/jc.c{<h!yXXwG`{`|");
      assertEquals("y/jc.c{<h!yXXwG`{`||y/jc.c{<h!yXXwG`{`|", string0);
      assertEquals("y/jc.c{<h!yXXwG`{`|", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("Q");
      assertEquals("Q", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceFirst("Q", "Q");
      assertEquals("Q", string0);
      assertEquals("Q", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceFirst("", "");
      assertEquals("", string0);
      assertEquals("", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("qJTF-8");
      assertEquals("qJTF-8", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (-387));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("qJTF-8", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("y/jI.c{<h!yXXwG`{`|");
      assertEquals("y/jI.c{<h!yXXwG`{`|", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (-2476));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("y/jI.c{<h!yXXwG`{`|", rE2_0.toString());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = new RE2("q*-^S;8y28e");
      assertEquals("q*-^S;8y28e", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String> list0 = rE2_0.findAll("q*-^S;8y28e", 256);
      assertEquals("q*-^S;8y28e", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("", rE2_0.toString());
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("'0#i");
      assertEquals("'0#i", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte) (-70));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("'0#i", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("%");
      assertEquals("%", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String> list0 = rE2_0.findAll("%", 101);
      assertEquals("%", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals("", rE2_0.toString());
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("com.google.re2j.Inst$Op");
      assertEquals("com.google.re2j.Inst$Op", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findSubmatchIndex("com.google.re2j.Inst$Op");
      assertEquals("com.google.re2j.Inst$Op", rE2_0.toString());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = RE2.quoteMeta("ycjc.c{<h!yXXwG`{`|");
      assertEquals("ycjc\\.c\\{<h!yXXwG`\\{`\\|", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = RE2.match("P+Spm?V>c7Df7P", "P+Spm?V>c7Df7P");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RE2 rE2_0 = RE2.compile("YvujK^wPV");
      assertEquals("YvujK^wPV", rE2_0.toString());
      assertNotNull(rE2_0);
      
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("YvujK^wPV", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = new RE2("1hi");
      assertEquals("1hi", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllIndex("1hi", 0);
      assertEquals("1hi", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("M5!AtBW^R,1");
      assertEquals("M5!AtBW^R,1", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.find("M5!AtBW^R,1");
      assertEquals("", string0);
      assertEquals("M5!AtBW^R,1", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = new RE2("M5!AtBW6R,j");
      assertEquals("M5!AtBW6R,j", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("M5!AtBW6R,j", 1690);
      assertEquals("M5!AtBW6R,j", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("J+zi");
      assertEquals("J+zi", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceFirst("J+zi", "J+zi");
      assertEquals("J+zi", string0);
      assertEquals("J+zi", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals("", rE2_0.toString());
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("M5!AtBW6R,j");
      assertEquals("M5!AtBW6R,j", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String[] stringArray0 = rE2_0.findSubmatch("M5!AtBW6R,j");
      assertEquals("M5!AtBW6R,j", rE2_0.toString());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RE2 rE2_0 = new RE2("!:$pb'Zrb");
      assertEquals("!:$pb'Zrb", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("!:$pb'Zrb", rE2_0.toString());
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("`Wj;}7%GHQ6b`");
      assertEquals("`Wj;}7%GHQ6b`", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 425);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("`Wj;}7%GHQ6b`", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", 0);
      assertEquals("", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RE2 rE2_0 = new RE2("Jf");
      assertEquals("Jf", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("Jf", rE2_0.toString());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = new int[10];
      boolean boolean0 = rE2_0.match("", 0, 0, 0, intArray0, 0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RE2 rE2_0 = new RE2("j-^j|/tB8i");
      assertEquals("j-^j|/tB8i", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("j-^j|/tB8i", rE2_0.toString());
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findIndex("");
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals("", rE2_0.toString());
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = new int[10];
      boolean boolean0 = rE2_0.match("", 39, 0, 0, intArray0, 39);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("com.google.re2j.Inst$Op");
      assertEquals("com.google.re2j.Inst$Op", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findIndex("com.google.re2j.Inst$Op");
      assertEquals("com.google.re2j.Inst$Op", rE2_0.toString());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("y/j.c{<!;yXwG{`|");
      assertEquals("y/j.c{<!;yXwG{`|", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals("y/j.c{<!;yXwG{`|", rE2_0.toString());
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RE2 rE2_0 = new RE2("~");
      assertEquals("~", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = new int[10];
      boolean boolean0 = rE2_0.match("~", 0, 0, 0, intArray0, 0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals("~", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("~", 0);
      assertEquals("~", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RE2 rE2_0 = new RE2("[!Bg#x_~iP@5]#^");
      assertNotNull(rE2_0);
      
      String[] stringArray0 = rE2_0.findSubmatch("[!Bg#x_~iP@5]#^");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      boolean boolean0 = rE2_0.match("''Q1@YvMVGdK6o", 0, 0, 2, (int[]) null, 2);
      assertTrue(boolean0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("#Z|^S'5X,-zn(%)4N&");
      assertEquals("#Z|^S'5X,-zn(%)4N&", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.prefix;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = rE2_0.findSubmatch("#Z|^S'5X,-zn(%)4N&");
      assertEquals("#Z|^S'5X,-zn(%)4N&", rE2_0.toString());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RE2 rE2_0 = new RE2("lK5M1|mTX5~5X>(KHM)");
      assertEquals("lK5M1|mTX5~5X>(KHM)", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("lK5M1|mTX5~5X>(KHM)", 561);
      assertEquals("lK5M1|mTX5~5X>(KHM)", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }
}
