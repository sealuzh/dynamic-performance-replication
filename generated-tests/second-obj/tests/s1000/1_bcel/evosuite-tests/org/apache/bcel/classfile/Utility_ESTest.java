/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:08:50 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Member;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      try { 
        Utility.methodSignatureReturnType("<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal type>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte byte0 = Constants.T_REFERENCE;
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      String string0 = "lcmp";
      // Undeclared exception!
      try { 
        Utility.signatureToString("lcmp", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lcmp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)34;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 68 22", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format('W', 'W', false, 'W');
      try { 
        Utility.typeOfSignature("WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW87");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW87
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utility.format((byte)0, (byte)0, false, ']');
      try { 
        Utility.typeOfSignature("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("lF|r!.#B9fA?o", stringArray0);
      assertEquals("()LlF|r!/#B9fA?o;", string0);
      
      int int0 = Utility.clearBit(12, 88);
      assertEquals(12, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('u');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = Utility.replace("aThrow", "aThrow", "class_index");
      assertEquals("class_index", string0);
      
      String string1 = Utility.getSignature("class_index");
      assertEquals("Lclass_index;", string1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(",/", ",/", ",/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals(", , , , , ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte byte0 = Constants.ATTR_RUNTIMEINVISIBLE_PARAMETER_ANNOTATIONS;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)15;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)15;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.decode("1", false);
      Utility.replace("D", "D", "unknown");
      try { 
        Utility.typeOfSignature("m<>NdgkAbv|H)y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: m<>NdgkAbv|H)y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.searchOpcode("Z&\rd?!D;\"-");
      Utility.compactClassName("Z&\rd?!D;\"-", "Z&\rd?!D;\"-", true);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        Utility.typeOfSignature("athrow");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: athrow
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 20;
      Utility.fillup("4IXZY-", 20, true, 'w');
      try { 
        Utility.typeOfSignature("4IXZY-wwwwwwwwwwwwww");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4IXZY-wwwwwwwwwwwwww
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "YE\"M";
      try { 
        Utility.typeOfSignature("YE\"M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YE\"M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.compactClassName("monitorenteKr", false);
      try { 
        Utility.methodSignatureReturnType("monitorenteKr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `monitorenteKr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.signatureToString("D?E");
      try { 
        Utility.typeOfSignature("2;}pK ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2;}pK 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("T[`ldvN4n:^`Q#=q&Uj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T[`ldvN4n:^`Q#=q&Uj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utility.replace("K*=f", "in3okeinterface", "in3okeinterface");
      Utility.setBit(2241, 2241);
      try { 
        Utility.typeOfMethodSignature("K*=f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K*=f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "tableswitch";
      String string0 = Utility.methodTypeToSignature(">5;4? lvci", stringArray0);
      assertEquals("(Ltableswitch;)L>5;4?;", string0);
      
      boolean boolean0 = Utility.isSet(234, 249);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-16);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-16), (int) (byte) (-16));
      assertEquals("0:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (int) (byte) (-67), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "b`'r=,symP&m8%o@";
      Utility.convertString(">p(UKtVY");
      String[] stringArray1 = Constants.ITEM_NAMES;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)38, (-567));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1XlC*o>SXPq5&`,|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1XlC*o>SXPq5&`,|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "\\\\";
      MockPrintStream mockPrintStream0 = new MockPrintStream("\\");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream1.close();
      Utility.printArray((PrintStream) mockPrintStream1, (Object[]) null);
      try { 
        Utility.typeOfMethodSignature("iconst_m1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iconst_m1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.searchOpcode("invokestatic");
      short short0 = Utility.searchOpcode("invokestatic");
      assertEquals((short)184, short0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-56);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("73 c8", string0);
      
      String string1 = Utility.compactClassName("FeZ9CA", false);
      assertEquals("FeZ9CA", string1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.signatureToString("Db=4Bh6A+MO", true);
      Utility.methodTypeToSignature("double", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = Utility.fillup("<Unknown>", 120, false, 'v');
      assertEquals("vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv<Unknown>", string0);
      
      String string1 = Utility.compactClassName(", high = ", false);
      assertEquals(", high = ", string1);
      
      int int0 = Utility.clearBit((-22), (-2169));
      assertEquals((-150), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.isJavaIdentifierPart('H');
      Utility.classOrInterface((-1689));
      // Undeclared exception!
      try { 
        Utility.signatureToString("fH8Q`r)41u[j]RXR-;<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fH8Q`r)41u[j]RXR-;<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.compactClassName("", false);
      Utility.isSet((-2627), 0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.getSignature("invokedynamic");
      try { 
        Utility.typeOfSignature("if_acmpeq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_acmpeq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "H-kWLIF5.lNC]E}a+_";
      try { 
        Utility.methodSignatureReturnType("H-kWLIF5.lNC]E}a+_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H-kWLIF5.lNC]E}a+_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.methodSignatureReturnType("B#h");
      Utility.setBit(330, 1584);
      Utility.searchOpcode("%rhS99#IYx73e");
      Utility.typeOfSignature("B#h");
      ConstantFloat constantFloat0 = new ConstantFloat((-3901.38F));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-13);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic0 = null;
      try {
        constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = Utility.format((-1726), (-1726), false, 'T');
      assertEquals("-1726", string0);
      
      String string1 = Utility.convertString("J8*");
      assertEquals("J8*", string1);
      
      short short0 = Utility.searchOpcode("return");
      assertEquals((short)177, short0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          byte[] byteArray0 = new byte[2];
          byteArray0[0] = (byte) (-77);
          byteArray0[1] = (byte) (-95);
          ByteSequence byteSequence0 = new ByteSequence(byteArray0);
          Constant[] constantArray0 = new Constant[3];
          ConstantInteger constantInteger0 = new ConstantInteger((byte) (-77));
          constantArray0[1] = (Constant) constantInteger0;
          ConstantLong constantLong0 = new ConstantLong((byte) (-77));
          ConstantPool constantPool0 = new ConstantPool(constantArray0);
          constantPool0.toString();
          Utility.searchOpcode("<illegal opcode>");
          Utility.methodSignatureReturnType("CjnHyg|7c9QMN");
          Utility.isJavaIdentifierPart('Q');
          ByteSequence byteSequence1 = new ByteSequence(byteArray0);
          ByteSequence byteSequence2 = new ByteSequence(byteArray0);
          Utility.toHexString(byteArray0);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1556)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor106.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.typeOfSignature("Total of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-51);
      byteArray0[4] = (byte)14;
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        MockURI.URI("^sf[q", "Z&\rd?!D;\"-Z&\rd?!D;\"-", "Z&\rd?!D;\"-Z&\rd?!D;\"-", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ^sf[q://Z&\rd?!D;\"-Z&\rd?!D;\"-Z&%0Dd%3F!D;%22-Z&%0Dd%3F!D;%22-
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "P4=";
      stringArray0[1] = "P4=";
      stringArray0[2] = "P4=";
      stringArray0[3] = "b`'r=,symP&m8%o@";
      String string0 = Constants.ILLEGAL_TYPE;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q\"@WFq.3q<jBxM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q\"@WFq.3q<jBxM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)48;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$3f0", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Object object0 = new Object();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      int int0 = Member.PUBLIC;
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureReturnType("$u8O>9/%!|B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$u8O>9/%!|B'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      try { 
        Utility.typeOfSignature("PfP@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PfP@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.searchOpcode("Z&\rd?!D;\"-");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      Utility.isJavaIdentifierPart('8');
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.signatureToString("Z&\rd?!D;\"-");
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = Utility.isSet(133, (-133));
      boolean boolean1 = Utility.isJavaIdentifierPart('_');
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.replace("multianewarray", "wk~P[%.x73Fx%H T|", (String) null);
      assertNotNull(string0);
      assertEquals("multianewarray", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = Utility.signatureToString("LCache;", true);
      assertEquals("Cache", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("#");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte) (-56);
      String string0 = "Lph&/B>dxN/#f_+l-\\";
      try { 
        Utility.methodSignatureReturnType("Lph&/B>dxN/#f_+l-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lph&/B>dxN/#f_+l-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.searchOpcode("Z&\rd?!D;\"-");
      Utility.searchOpcode("Z&\rd?!D;\"-");
      Utility.isJavaIdentifierPart('~');
      String string0 = Constants.ILLEGAL_TYPE;
      // Undeclared exception!
      try { 
        Utility.signatureToString("<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal type>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-42);
      boolean boolean0 = Utility.isSet(7, 7);
      assertFalse(boolean0);
      
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "D";
      Utility.signatureToString("D");
      Utility.fillup("7IXZY-", 20, true, 'w');
      try { 
        Utility.typeOfSignature("7IXZY-wwwwwwwwwwwwww");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7IXZY-wwwwwwwwwwwwww
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = Utility.getSignature("D?E");
      assertEquals("LD?E;", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = Utility.typeOfSignature("LD?E;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.typeOfSignature("B");
      try { 
        Utility.typeOfSignature("java.lng.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lng.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = Utility.signatureToString("D?E");
      assertEquals("double", string0);
      
      byte byte0 = Utility.typeOfSignature("Couldn't find: ");
      assertEquals((byte)5, byte0);
      
      int int0 = Utility.setBit(70, (-1487));
      assertEquals(131142, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)78;
      Utility.equals(byteArray0, byteArray0);
      Utility.replace("invokespecial", "U0", "invokespecial");
      try { 
        Utility.typeOfSignature("U0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utility.methodTypeToSignature("new", (String[]) null);
      Utility.methodSignatureArgumentTypes("()Lnew;");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("]]:gt3#fKsMp9}_`C", "new", "]]:gt3#fKsMp9}_`C", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]]:gt3#fKsMp9}_`C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "0fFA{@.M<zo5=K_?";
      Utility.typeOfSignature("J@");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0fFA{@.M<zo5=K_?");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        constantPool0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)23;
      try { 
        Utility.typeOfSignature("\"rB,ZAG]G|OCC)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"rB,ZAG]G|OCC)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ireturn");
      try { 
        Utility.typeOfSignature("$A`Fj}3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A`Fj}3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utility.replace("aThrow", "aThrow", "class_index");
      // Undeclared exception!
      try { 
        Utility.getSignature("Uz{0d[>BwD<^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[>BwD<^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      Utility.searchOpcode("L,;V");
      Utility.methodTypeToSignature("L,;V", (String[]) null);
      Utility.compactClassName("5FZcI#WgPU7ZAM$8", "()LL,;V;", true);
      Utility.signatureToString("Illegally nested brackets:");
      Utility.isSet((-64), 175);
      try { 
        Utility.typeOfSignature("5FZcI#WgPU7ZAM$8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5FZcI#WgPU7ZAM$8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "int";
      Utility.convertString("int");
      try { 
        Utility.typeOfSignature(";W,0#\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;W,0#\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.compactClassName("char", "athrow", true);
      Utility.replace("athrow", "void", "IndVA^F,F5dp}");
      Utility.signatureToString("IndVA^F,F5dp}");
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.classOrInterface((-291));
      boolean boolean0 = true;
      Utility.format((-291), 0, true, 'v');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "void";
      stringArray0[1] = "interface";
      try { 
        Utility.methodTypeToSignature("-291", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfSignature("StackMap");
      try { 
        Utility.typeOfMethodSignature("\t\t#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.compactClassName("D*", "8F[_5)}'\"PIK'd(-", true);
      Utility.replace("D*", "8F[_5)}'\"PIK'd(-", "5ImuLpdB:+M@Zf5%1");
      Utility.typeOfSignature("D*");
      Utility.compactClassName("wP>~ |7J");
      Utility.searchOpcode("wP>~ |7J");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("aKl", "5ImuLpdB:+M@Zf5%1", "Invalid signature: `");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aKl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = false;
      Utility.convertString("w\"zrayA'Z~m{@2Cl\"");
      try { 
        Utility.methodSignatureReturnType("w\"zrayA'Z~m{@2Cl\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `w\"zrayA'Z~m{@2Cl\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Illegally nested brackets:");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.convertString("Illegally nested brackets:");
      assertEquals("Illegally nested brackets:", string0);
      
      String string1 = Utility.accessToString(87, true);
      assertEquals("public private protected final volatile", string1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.accessToString(125, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Pattern.quote("'d)}");
      try { 
        Utility.typeOfSignature("'d)}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'd)}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = Constants.ILLEGAL_OPCODE;
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.decode("-yW3?e$", false);
      Utility.isSet((byte)65, (byte)118);
      Utility.replace("tableswitch", "tableswitch", "");
      try { 
        Utility.typeOfSignature("RGS$;G*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RGS$;G*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utility.replace("!A", "!A", "EMgr0_M?0Z=j*e;n>(");
      try { 
        Utility.typeOfSignature("2;}pK ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2;}pK 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = Utility.compactClassName("", false);
      assertEquals("", string0);
      
      byte byte0 = Utility.typeOfSignature("Invalid class name ");
      assertEquals((byte)10, byte0);
      
      int int0 = Utility.setBit((byte)10, 70);
      assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      short short0 = Constants.PUTFIELD_QUICK;
      char char0 = 'D';
      Utility.getSignature(" (");
      // Undeclared exception!
      try { 
        Utility.signatureToString("byte", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `byte'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      short short0 = Constants.PUTFIELD_QUICK;
      byte[] byteArray0 = Utility.decode("dN+4@h[", false);
      Utility.getSignature("Z&\rd?!D;\"-");
      Utility.replace("dN+4@h[", "dN+4@h[", "LZ&\rd?!D;\"-;");
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.getSignature("CONSTANT_Double");
      try { 
        Utility.typeOfSignature("6qfG5,@?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6qfG5,@?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("EMgr0_M?0Z=j*e;n>(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EMgr0_M?0Z=j*e;n>('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Utility.compactClassName("Illegally nested brackets:", false);
      Utility.compactClassName("Illegally nested brackets:");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)65;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)112, 1328);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref0;
      constantArray0[4] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.searchOpcode("<illegal opcode>");
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9l+at");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9l+at
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "EMgr0_M?0Z=j*e;n>(";
      try { 
        Utility.typeOfSignature("EMgr0_M?0Z=j*e;n>(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EMgr0_M?0Z=j*e;n>(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.isSet((-2627), 0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.typeOfSignature("Zc `Xu:jh|?iq");
      Utility.isSet(171, 171);
      Utility.getSignature("A/)=Ix_Bi;>lev4*8");
      try { 
        Utility.typeOfSignature("=Fw/~R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =Fw/~R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("S~'pm~;", "S~'pm~;", "S~'pm~;");
      try { 
        Utility.typeOfSignature(", pair. = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , pair. = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.isSet(91, 89);
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Object object0 = new Object();
      Object object1 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature(")vs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )vs
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[0] = (byte)22;
      byteArray0[0] = (byte)22;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)22;
      byteArray0[1] = (byte)22;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte byte0 = ObjectStreamConstants.TC_CLASSDESC;
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lload\t\t%22", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)92;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)92, 155, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jsr_w");
      Utility.replace("jsr_w", "jsr_w", "jsr_w");
      try { 
        Utility.typeOfSignature(".class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)68;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[4] = (byte) (-22);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = Constants.CONSTRUCTOR_NAME;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.fillup("<init>", (byte)74, false, 'O');
      assertEquals("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO<init>", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dstore_3", string2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("(Vc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (Vc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        Utility.typeOfSignature("O<|'F2d>xU8y=a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O<|'F2d>xU8y=a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "aload";
      Utility.compactClassName("aload", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("R/h>TtX}EeVJQB>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R/h>TtX}EeVJQB>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      Utility.equals(byteArray0, byteArray0);
      int int0 = (-2456);
      Utility.isSet((-2456), 103);
      byte byte0 = (byte)118;
      try { 
        Utility.typeOfSignature("Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.isJavaIdentifierPart('b');
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[18];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-78);
      try { 
        Utility.methodSignatureReturnType("R/mH0gwcO6~!E", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R/mH0gwcO6~!E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-124);
      byte byte0 = (byte)102;
      byteArray0[2] = (byte)102;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4266, (int) (byte)102, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.compactClassName("", false);
      try { 
        Utility.typeOfSignature("%S?4?}Er");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %S?4?}Er
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+fm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      short short0 = Utility.searchOpcode("Z&\rd?!D;\"-");
      assertEquals((short) (-1), short0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)45;
      byteArray0[4] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((-1617));
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 75, 829);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.convertString("'");
      Utility.compactClassName("ei,Qi]li8IPg");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence1, constantPool0);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.accessToString((int) (byte) (-55), true);
      assertEquals("public static volatile transient native abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.typeOfSignature("F.)0lxi)3IkYP3V");
      // Undeclared exception!
      try { 
        Utility.signatureToString("[bnYG=Z@ezA:fy1u*5p", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `bnYG=Z@ezA:fy1u*5p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Utility.convertString("\t");
      Utility.convertString("\t");
      Utility.getSignature("\t");
      Utility.setBit(49, 298);
      Utility.replace("\t", "L;", "L;");
      Utility.getSignature("");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t", "L;", "org.apache.commons.io.filefilter.NameFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.format(160, 160, false, 'H');
      try { 
        Utility.typeOfSignature("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH160");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH160
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.getSignature("D?E");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.classOrInterface((byte)49);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ru5:+qE@{46jj5");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)85, 41, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Constants.ILLEGAL_OPCODE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Lsynthetic;V");
      int int0 = 176;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), 51, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)49;
      String string0 = Constants.ILLEGAL_OPCODE;
      short short0 = Utility.searchOpcode("<illegal opcode>");
      assertEquals((short)203, short0);
      
      byte[] byteArray1 = Utility.decode("<illegal opcode>", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal opcode>");
      boolean boolean0 = Utility.isSet(183, (byte)49);
      assertFalse(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("istore_1", string1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-97);
      ConstantPool constantPool0 = null;
      Utility.classOrInterface((byte) (-97));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 98, 103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-93);
      String string0 = Utility.compactClassName("instanceof", "instanceof", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpgt\t\t#0", string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "instanceof";
      String string2 = Utility.printArray(objectArray0, false);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.compactClassName("CONSTANT_MethodHandle", false);
      assertEquals("CONSTANT_MethodHandle", string3);
      
      int int0 = Utility.clearBit(2759, (-2328));
      assertEquals(2759, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "D?E";
      boolean boolean0 = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      try { 
        Utility.decode("$w95PK$)@[.)", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)63;
      byteArray0[4] = (byte) (-22);
      String string0 = Utility.compactClassName("_1oad-2");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lstore\t\t%63", string1);
      
      byteSequence0.mark((byte)55);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "_1oad-2";
      String string2 = Utility.printArray(objectArray0, false, false);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.format('W', 'W', false, 'W');
      try { 
        Utility.methodSignatureReturnType("WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW87", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW87'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = (byte)74;
      byteArray0[0] = (byte)74;
      byte byte1 = (byte)55;
      byteArray0[1] = (byte)55;
      String string0 = "3TmC-.= %";
      try { 
        Utility.typeOfSignature("3TmC-.= %");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3TmC-.= %
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte byte0 = (byte)116;
      // Undeclared exception!
      try { 
        Utility.signatureToString("PMGClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PMGClass'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_CLASSDESC;
      Utility.convertString("*MbH06iJ_N'QPd<_3>");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = Constants.ITEM_NAMES;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*MbH06iJ_N'QPd<_3>");
      Utility.compactClassName("*MbH06iJ_N'QPd<_3>");
      Utility.setBit((byte)114, 9);
      try { 
        Utility.typeOfSignature("*MbH06iJ_N'QPd<_3>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MbH06iJ_N'QPd<_3>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = Constants.OPCODE_NAMES;
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-350), (-350));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantClass constantClass0 = new ConstantClass(3);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      byteSequence0.readChar();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SQ&Px{%)MCKU#e7");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      constantInterfaceMethodref0.toString();
      byte[] byteArray1 = new byte[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray1[0] = (byte)23;
      byteArray1[1] = (byte)23;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 30, (int) (byte) (-109), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "T[`ldn:^`Q#=q&Uj";
      stringArray0[1] = "<illegal type>";
      stringArray0[2] = "jsr";
      stringArray0[3] = "T[`ldn:^`Q#=q&Uj";
      stringArray0[4] = "putstatic";
      stringArray0[5] = "ISD'R3W8V@vQb$P";
      stringArray0[6] = "putstatic";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("putstatic", "<illegal type>", "putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Utility.convertString("\t#");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.getSignature("\t#");
      assertEquals("L#;", string0);
      
      String string1 = Utility.convertString("CONSTANT_Float");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("baload", string2);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\t#");
      Utility.printArray((Object[]) null);
      String string3 = Utility.compactClassName("CONSTANT_Float");
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte)109;
      byteArray0[8] = (byte)8;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 405);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      short short0 = Constants.PUTFIELD_QUICK;
      byte[] byteArray0 = Utility.decode("dN+4@h[", false);
      Utility.getSignature("Z&\rd?!D;\"-");
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.getSignature("CONSTANT_Double");
      try { 
        Utility.methodSignatureArgumentTypes("isub");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: isub
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String[] stringArray0 = Constants.ITEM_NAMES;
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i");
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString((byte) (-46));
      ConstantLong constantLong0 = new ConstantLong((byte) (-46));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantFloat constantFloat0 = new ConstantFloat((-1507L));
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      short short0 = Constants.PUTFIELD_QUICK;
      byte[] byteArray0 = Utility.decode("dN4S[", false);
      Constant[] constantArray0 = new Constant[14];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteSequence0.readChar();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1807, 97, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "long");
      Utility.clearBit((byte) (-79), (-3204));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)114;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)78, (int) (byte)71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte byte0 = Constants.ITEM_InitObject;
      Utility.searchOpcode("$C[`Ow2336");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("$C[`Ow2336", false);
      Utility.compactClassName("E}OX{#~}#t:eH");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.close();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E}OX{#~}#t:eH");
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("E}OX{#~}#t:eH", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E}OX{#~}#t:eH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      short short0 = Constants.PUTFIELD_QUICK;
      byte[] byteArray0 = Utility.decode("dN+4@h[", false);
      Constant[] constantArray0 = new Constant[14];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.isSet((short)207, (short)207);
      byteSequence0.readChar();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1807, 97, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.convertString("i");
      String[] stringArray0 = Constants.ITEM_NAMES;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)73, 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)49;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.searchOpcode("<illegal opcode>");
      byte[] byteArray1 = Utility.decode("<illegal opcode>", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal opcode>");
      Utility.isSet(183, (byte)49);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      String string1 = "@/L=C-AP4=l~.t9d,";
      try { 
        Utility.typeOfSignature("@/L=C-AP4=l~.t9d,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @/L=C-AP4=l~.t9d,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.searchOpcode("ifnull");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#_%oGN's");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "'";
      String string1 = "o(OBej@DJ";
      Utility.compactClassName("'", "o(OBej@DJ", true);
      String string2 = "I'\"bmt@3&";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I'\"bmt@3&");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short)198, (int) (byte)41, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-78), 207);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2670, 2670, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Pattern.quote("yf[C|F/");
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.fillup("@53hP", 47, true, '\"');
      assertEquals("@53hP\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", string0);
      
      String string1 = Utility.compactClassName("929!y?az1;,T|!");
      assertEquals("929!y?az1;,T|!", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("astore_0", string2);
      
      String string3 = Utility.classOrInterface(239);
      assertEquals("class", string3);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)16, (byte)16);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.close();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals(2, byteSequence1.getIndex());
      
      String string0 = Utility.classOrInterface((byte)16);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.convertString("\t#");
      Utility.convertString("\t#");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t#";
      Utility.getSignature("\t#");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[0] = (byte)16;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)0, (byte)16);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.searchOpcode("<illegal opcode>");
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("N*lXI XK23kRZ;N2=XG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N*lXI XK23kRZ;N2=XG'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Utility.signatureToString("J4o#><Z2e*");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readInt();
      byteSequence0.read();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1);
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable(42, 2826, byteSequence1, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("B$kST", false);
      Utility.isSet((byte)118, 471);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.classOrInterface(3214);
      try { 
        Utility.methodSignatureReturnType("W'!n!p{'$=~.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W'!n!p{'$=~.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte byte0 = Constants.CONSTANT_InterfaceMethodref;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "YE\"M";
      stringArray0[1] = "YE\"M";
      stringArray0[2] = "YE\"M";
      stringArray0[3] = "YE\"M";
      Utility.methodTypeToSignature("YE\"M", stringArray0);
      try { 
        Utility.methodSignatureReturnType("YE\"M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YE\"M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char char0 = '[';
      String string0 = Constants.ILLEGAL_TYPE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "<illegal type>";
      Utility.getSignature("monitorexit");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-14);
      int int0 = (-220);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-95), (-220), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Utility.setBit(49, 49);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      Utility.compactClassName("newarray", "newarray", true);
      byte byte0 = ObjectStreamConstants.TC_EXCEPTION;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-11), (int) (byte) (-11), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.convertString("i");
      String[] stringArray0 = Constants.ITEM_NAMES;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byteSequence1.readByte();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0);
      assertEquals(2, byteSequence1.getIndex());
      
      Utility.getSignature("glscya<$H");
      Utility.codeToString(byteSequence2, constantPool1, true);
      short short0 = Utility.searchOpcode("i");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[0] = (byte)36;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3019), 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fload_2
         // 1:    astore_1
         // 2:    nop
         // 3:    daload
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1, 1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Constant[] constantArray0 = new Constant[11];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.convertString("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0'\"(R!ng1");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("v7Im\"", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 1)null
         // 2)null
         // 3)null
         // 4)null
         // 5)null
         // 6)null
         // 7)null
         // 8)null
         // 9)null
         // 10)null
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte) (-126);
      byteArray0[0] = (byte) (-126);
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.isJavaIdentifierPart('4');
      Utility.codeToString(byteArray0, (ConstantPool) null, 5, (int) (byte) (-126));
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      Utility.classOrInterface(68);
      Utility.printArray((Object[]) stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("K\b:>V8'UK", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K\b:>V8'UK'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "G}y]r-8nu&y%d";
      try { 
        Utility.typeOfSignature("G}y]r-8nu&y%d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G}y]r-8nu&y%d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = true;
      Utility.format((-54), 82, true, 'R');
      try { 
        Utility.typeOfSignature("-54RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -54RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.methodTypeToSignature("new", (String[]) null);
      assertEquals("()Lnew;", string0);
      
      Utility.methodSignatureArgumentTypes("()Lnew;");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("aload_0", string1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Constant[] constantArray0 = new Constant[11];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      try { 
        Utility.typeOfSignature("> %)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: > %)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String[] stringArray0 = Constants.ITEM_NAMES;
      Utility.signatureToString("Z&\rd?!D;\"-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte) (-56);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockFile mockFile0 = new MockFile("arraylength");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      byteSequence1.reset();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("lsub", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "lsub";
      objectArray0[2] = (Object) byteArray0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) byteSequence0;
      objectArray0[5] = (Object) null;
      Utility.printArray(objectArray0, true);
      String string1 = Utility.classOrInterface(178);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      short short0 = Constants.PUTFIELD_QUICK;
      Utility.getSignature("Z&\rd?!D;\"-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("getstatic", false);
      Utility.isSet((byte)118, 471);
      Utility.typeOfSignature("LZ&\rd?!D;\"-;");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.classOrInterface(216);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("dsub", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dsub
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Utility.format('W', 82, true, 'W');
      try { 
        Utility.typeOfSignature("87WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 87WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      short short0 = Constants.PUTFIELD_QUICK;
      Utility.getSignature("Z&\rd?!D;\"-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("B$kST", false);
      Utility.isSet((byte)118, 471);
      Utility.typeOfSignature("LZ&\rd?!D;\"-;");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.classOrInterface(216);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("(class_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class_index = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.convertString("Z&\rd?!D;\"-");
      assertEquals("Z&\\rd?!D;\\\"-", string0);
      
      String[] stringArray0 = Constants.ITEM_NAMES;
      String string1 = Utility.compactClassName("Z&\\rd?!D;\"-");
      assertEquals("Z&\\rd?!D;\"-", string1);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = Utility.compactClassName("Z&\\rd?!D;\"-", "Z&\\rd?!D;\"-", true);
      assertEquals("", string2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string3 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iaload", string3);
      
      String string4 = Utility.classOrInterface((byte)46);
      assertEquals("class", string4);
      
      String string5 = Utility.methodSignatureReturnType("Z&\\rd?!D;\"-");
      assertEquals("boolean", string5);
      
      byte byte0 = Utility.typeOfSignature("Z&\\rd?!D;\"-");
      assertEquals((byte)4, byte0);
      
      Utility.convertString("@cc@bPyR,hl");
      Utility.convertString("static");
      String string6 = Utility.convertString("@cc@bPyR,hl");
      assertFalse(string6.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Utility.searchOpcode("invokestatic");
      Utility.searchOpcode("ifnull");
      byte[] byteArray0 = Utility.decode("invokestatic", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureReturnType("fdiv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fdiv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String[] stringArray0 = Constants.ITEM_NAMES;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray1 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format(198, 57, true, '\u0019');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)99;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 157, (int) (byte) (-80), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Utility.searchOpcode("invWkest7tic");
      byte[] byteArray0 = Utility.decode("invWkest7tic", false);
      byte byte0 = (byte) (-88);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.encode(byteArray1, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object object0 = new Object();
      String string0 = null;
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Utility.convertString("#");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("IS=0sv23", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1837, 1837, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MockFile mockFile0 = new MockFile("arraylength", "arraylength");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arraylength");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arraylength");
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      
      Utility.getSignature("nop");
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool1, false);
      boolean boolean0 = Utility.isJavaIdentifierPart('p');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.setBit(217, 217);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)117;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(1254);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)117, 1600);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte byte0 = Constants.ATTR_EXCEPTIONS;
      MockFile mockFile0 = new MockFile("arraylength");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("arraylength");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `arraylength'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("),W!z", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 171, (-2853), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-950), (int) (byte)92, false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(")", "#N-Lr&!y9~.s+n3db");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // #N-Lr&!y9~.s+n3db
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "impdep1");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)59, (-1958));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)55;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)63;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.compactClassName("iload_2");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("lstore_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lstore_0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)10;
      byteArray0[8] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, 329, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Z&\rd?!D;\"-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("getstatic");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte) (-33);
      byteArray0[8] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Z&\rd?!D;\"-", "fWE:{lHs<RO8l", "Invalid signature: `");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Z&\rd?!D;\"-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-93);
      String string0 = "i";
      Utility.convertString("i");
      String[] stringArray0 = Constants.ITEM_NAMES;
      Utility.compactClassName("i", "9NVt`", true);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)125;
      byteArray1[1] = (byte)40;
      byteArray1[2] = (byte) (-46);
      byteArray1[3] = (byte) (-93);
      byteArray1[4] = (byte)125;
      byteArray1[5] = (byte)40;
      byteArray1[6] = (byte) (-93);
      byteArray1[7] = (byte) (-46);
      byteArray1[8] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.getSignature("i");
      Utility.convertString("java.lang.StringBuffer");
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "sh0ort");
      byte[] byteArray0 = Utility.decode("M'86", false);
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "sh0ort";
      objectArray0[5] = (Object) "M'86";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cache hit ");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(201, (byte)16);
      constantFieldref0.toString();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      Utility.codeToString(byteSequence1, constantPool0, false);
      Utility.searchOpcode("<illegal opcode>");
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("CONSTANT_Fieldref[9](class_index = 201, name_and_type_index = 16)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "sh0ort");
      byte[] byteArray0 = Utility.decode("M'86", false);
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "sh0ort";
      objectArray0[5] = (Object) "M'86";
      objectArray0[6] = (Object) "M'86";
      Utility.codeToString(byteArray0, (ConstantPool) null, (-220), (-220), false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("astore_2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: astore_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode(">", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3430, 150, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.convertString("");
      Utility.convertString("");
      Utility.getSignature("");
      Constant[] constantArray0 = new Constant[14];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.methodSignatureReturnType("L;");
      Utility.setBit((-2208), (-2208));
      int int0 = 4;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)108;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3, (int) (byte)108, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)18;
      byteArray0[8] = (byte)18;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)119;
      byteArray0[3] = (byte)119;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)119;
      byteArray1[1] = (byte)119;
      byteArray1[2] = (byte)119;
      byteArray1[3] = (byte)119;
      byteArray1[4] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "dneg";
      objectArray0[6] = (Object) constantPool0;
      // Undeclared exception!
      try { 
        Utility.signatureToString("dneg", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dneg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.convertString("Z&\rd?!D;\"-");
      Utility.getSignature("Class must not be null");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)87;
      byteArray0[3] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.searchOpcode("Z&\\rd?!D;\"-");
      String string0 = Utility.methodSignatureReturnType("Z&\rd?!D;\"-");
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPool0.toString();
      Utility.getSignature("1)null\n2)null\n3)null\n4)null\n");
      constantPool0.copy();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-77);
      byteArray0[7] = (byte) (-77);
      byteArray0[2] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 179. Constant pool size is: 5
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = true;
      Utility.getSignature("#=&H<~Tkgv*{y(8'");
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("APPEND ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: APPEND 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.searchOpcode("invokestatic");
      Utility.searchOpcode("ifnull");
      byte[] byteArray0 = Utility.decode("ifnull", false);
      Utility.isSet(471, 471);
      Utility.typeOfSignature("Vni1_2gY$6&7MI^");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      Utility.classOrInterface((short)184);
      try { 
        Utility.methodSignatureReturnType("W!L((u{_SM#oMdQ_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W!L((u{_SM#oMdQ_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("46+O e^rJ`K>qJ!=Gn", "instanceof", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte byte0 = Constants.ATTR_SIGNATURE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("^hv4iRAU&`6<");
      Utility.compactClassName(")\t");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)8;
      byteArray0[2] = (byte)67;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = "ifle";
      Utility.searchOpcode("ifle");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 911, (int) (byte)8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Pattern.quote("'d)}");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)26;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)26);
      ConstantLong constantLong0 = new ConstantLong((byte)79);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$H71uXrI");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.isJavaIdentifierPart('\"');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 53, (int) (byte) (-95));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte byte0 = Constants.ITEM_InitObject;
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = Utility.decode("E}OX{#~}#t:eH", false);
      Utility.isSet((byte)6, (byte)118);
      Utility.typeOfSignature("B$kST");
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.available();
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.classOrInterface((byte)118);
      try { 
        Utility.methodSignatureReturnType("9r@`@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `9r@`@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Utility.convertString("#");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("|JifR", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1837, 1837, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Constant[] constantArray0 = new Constant[14];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.searchOpcode("<illegal opcode>");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-55), 175, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-80);
      byteArray1[1] = (byte)3;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("areturn", string0);
      
      String string1 = Utility.classOrInterface((-2190));
      assertEquals("interface", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('0');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      Utility.signatureToString("S_G{SgT");
      String string0 = Utility.compactClassName("S_G{SgT", "S_G{SgT", true);
      assertEquals("", string0);
      
      byte[] byteArray1 = Utility.decode("short", false);
      assertArrayEquals(new byte[] {(byte)115, (byte)104, (byte)111, (byte)114, (byte)116}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = 188;
      Utility.format(188, 188, true, 'y');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wide");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface(188);
      Utility.convertString("wide");
      // Undeclared exception!
      try { 
        Utility.decode("$3ZD}FzOYDcf;}", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3Z\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)84;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)46, (byte)59);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantClass constantClass0 = new ConstantClass(74);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)102);
      try { 
        Utility.typeOfMethodSignature("IC 6h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: IC 6h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      short short0 = Constants.PUTFIELD_QUICK;
      Utility.getSignature("Z&\rd?!D;\"-");
      byte[] byteArray0 = Utility.decode("B$kST", false);
      Utility.isSet((byte) (-115), 471);
      Utility.typeOfSignature("LZ&\rd?!D;\"-;");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.classOrInterface(216);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short)7763, (int) (short)7763, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Lk&)d Q");
      Utility.compactClassName("Lk&)d Q", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1321, (int) (byte) (-55), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("monitorenter", false);
      byte[] byteArray1 = new byte[0];
      Utility.codeToString(byteArray1, (ConstantPool) null, (-220), 55, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byteSequence0.readChar();
      boolean boolean1 = true;
      try { 
        Utility.methodSignatureArgumentTypes("monitorenter", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorenter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-61);
      byte byte0 = (byte) (-57);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte) (-112);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, 1117, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Constant[] constantArray0 = new Constant[11];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      Utility.getSignature("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.compactClassName("Illegal type: ");
      byteSequence0.reset();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      Utility.codeToString(byteSequence1, constantPool0);
      try { 
        Utility.methodSignatureReturnType("faload", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `faload'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)61;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)61, (int) (byte)61, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte byte0 = Constants.ITEM_InitObject;
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)6;
      byteArray0[3] = (byte)6;
      MockPrintStream mockPrintStream0 = new MockPrintStream("\\");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.encode(byteArray0, true);
      Utility.accessToString(50);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte byte0 = Constants.CONSTANT_InterfaceMethodref;
      Utility.convertString("*MbH06miJ_N'Q,Pe<_3>");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = Constants.ITEM_NAMES;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.searchOpcode("*MbH06miJ_N'Q,Pe<_3>");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)11;
      Utility.equals(byteArray0, byteArray1);
      try { 
        Utility.methodSignatureReturnType("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ru5:+qE@{46jj5");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ru5:+qE@{46jj5");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ru5:+qE@{46jj5");
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)17, (int) (byte) (-119), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int int0 = Pattern.LITERAL;
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-62);
      byteArray1[1] = (byte) (-62);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet(4054, 65);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)65;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (-1479), 1102);
      LocalVariable[] localVariableArray0 = new LocalVariable[3];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("0:    lload_1\n1:    ladd\n2:    iushr\n3:    if_icmpge\t\t#23876\n", "return");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"return\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = Constants.ITEM_NAMES;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 188, 95, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      MockFile mockFile0 = new MockFile("arraylength", "arraylength");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arraylength");
      byte[] byteArray0 = new byte[21];
      byteArray0[1] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      Utility.codeToString(byteSequence0, constantPool0, false);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-118);
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte)109;
      byteArray0[8] = (byte)8;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 405);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.getSignature("monitorexit");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-75);
      ConstantLong constantLong0 = new ConstantLong((byte) (-75));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantLong constantLong2 = new ConstantLong(constantLong0);
      constantLong1.toString();
      ConstantFloat constantFloat0 = new ConstantFloat((byte)37);
      ConstantLong constantLong3 = new ConstantLong(constantLong1);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantLong2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("astore\t\t%181");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `astore\t\t%181'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-14);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 197, 197, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      MockFile mockFile0 = new MockFile("arraylength", "arraylength");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arraylength");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arraylength");
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.replace("qJV.(Du]pRUvK~", "areturn", "areturn");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "d";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "d";
      String string1 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-117);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-42), 1962, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -117
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      String string0 = Constants.ILLEGAL_OPCODE;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.methodTypeToSignature("Cu|qsHA", (String[]) null);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.convertString("8}i");
      Utility.getSignature("8}i");
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("8}i", "(bytes = ", "8}i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8}i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[11];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      Object object0 = new Object();
      String string0 = "(VyteVM = ";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(VyteVM = ", "(VyteVM = ", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `yteVM = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(");
      short short0 = Constants.MULTIANEWARRAY;
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", ":<$f=s~4=eb/L", "$94$94$94$A", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.close();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      Utility.encode(byteArray0, false);
      Utility.compactClassName("jsr_w");
      try { 
        Utility.typeOfSignature("jsr_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jsr_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.convertString("#");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("#", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1837, 1837, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      MockFile mockFile0 = new MockFile("arraylength");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      Utility.classOrInterface((byte)82);
      Utility.isJavaIdentifierPart('4');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.clearBit((byte) (-104), (byte) (-60));
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      MockFile mockFile0 = new MockFile("arraylength");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byte[] byteArray1 = Utility.decode("arraylength", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteSequence0.readChar();
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-104);
      byteArray2[1] = (byte)82;
      byteArray2[2] = (byte) (-104);
      ByteSequence byteSequence1 = new ByteSequence(byteArray2);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 97, 500, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("i", "i", false);
      String[] stringArray0 = Constants.ITEM_NAMES;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence1.readByte();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.getSignature("glscya<$H");
      Utility.codeToString(byteSequence2, constantPool0, true);
      Utility.searchOpcode("i");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-93);
      MockFile mockFile0 = new MockFile("wm(PC)Cpt7~,U", "wm(PC)Cpt7~,U");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wm(PC)Cpt7~,U");
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-93), (int) (byte) (-93), false);
      byte[] byteArray1 = Utility.decode("0:    if_icmpgt\t\t#0\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n", false);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 2272, (int) (byte) (-93), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("o9J", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = null;
      int int0 = 1256;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1256, 1256);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Utility.convertString("");
      Utility.convertString("");
      Utility.getSignature("");
      Constant[] constantArray0 = new Constant[14];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.searchOpcode("<illegal opcode>");
      char char0 = 'f';
      Utility.isJavaIdentifierPart('f');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      int int0 = 196;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 196, (-2676));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.replace("Z&\rK!%;\"", "Z&\rK!%;\"", "Z&\rK!%;\"");
      String[] stringArray0 = Locale.getISOLanguages();
      Pattern.quote("Z&\rK!%;\"");
      byte byte0 = ObjectStreamConstants.TC_EXCEPTION;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("Ndo{]=xy}ju$Q", "Z&\rK!%;\"", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.printArray((Object[]) stringArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Z&\rK!%;\"", "Z&\rK!%;\"", "QZ&\rK!%;\"E", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Z&\rK!%;\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.compactClassName("impdep1", "impdep1", false);
      try { 
        Utility.typeOfSignature("N^<s.}~3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N^<s.}~3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Locale.getISOCountries();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = null;
      Utility.classOrInterface((byte)94);
      Utility.isJavaIdentifierPart('M');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 255, 739);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.convertString("");
      Utility.convertString("");
      Utility.getSignature("");
      Constant[] constantArray0 = new Constant[14];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.methodSignatureReturnType("L;");
      Utility.setBit((-2208), (-2208));
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)48;
      byteArray0[5] = (byte)68;
      try { 
        Utility.typeOfSignature("&jgW1S28");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &jgW1S28
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[2] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 175, 68, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String[] stringArray0 = Constants.ITEM_NAMES;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      Utility.compactClassName("h=BssC*l/BM*d", true);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 191, (int) (byte) (-108), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jf");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)80;
      byteArray1[1] = (byte) (-88);
      byteArray1[2] = (byte)78;
      byteArray1[3] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 214, 214, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Utility.compactClassName("X}^[-VP1@$,", true);
      Utility.compactClassName("X}^[-VP1@$,");
      // Undeclared exception!
      try { 
        Utility.signatureToString("X}^[-VP1@$,", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X}^[-VP1@$,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("dload\t\t%95");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dload\t\t%95
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (int) (byte)71, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null);
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.isSet((-92), 2);
      int int0 = Pattern.CASE_INSENSITIVE;
      Utility.signatureToString("F");
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)71;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("F", true);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      try { 
        Utility.typeOfSignature("Ki^D^:r>/;hv{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ki^D^:r>/;hv{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ru5:+qE@{46jj5");
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ypb@", "Ru5:+qE@{46jj5", "ycTw79x(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ypb@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte) (-28);
      Utility.methodSignatureReturnType("V");
      // Undeclared exception!
      try { 
        Pattern.quote((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)82;
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ycTw79x(", "bcel.maxcached.size", "void", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ycTw79x(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = "j*}^W$hX3FZb%g'D";
      byte[] byteArray0 = Utility.decode("j*}^W$hX3FZb%g'D", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool1);
      String string1 = "ypb@";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("fmul", "[Dc6F", "A;EC=|YXq", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fmul
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = (byte) (-97);
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Utility.decode("\"A'*~Eqmp0^-rCS1xZ", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence2.readShort();
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-85);
      byteArray2[1] = (byte) (-119);
      ByteSequence byteSequence3 = new ByteSequence(byteArray2);
      byteSequence3.readShort();
      byteSequence2.readBoolean();
      ByteSequence byteSequence4 = new ByteSequence(byteArray2);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 778, 778, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String[] stringArray0 = Constants.ACCESS_NAMES;
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((-391));
      constantArray0[1] = (Constant) constantClass0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)73;
      Utility.equals(byteArray0, byteArray0);
      Utility.getSignature("Dzh<!");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.convertString("!MMjZ/uVX$E/2(HmT");
      String[] stringArray1 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      Utility.codeToString(byteSequence1, constantPool0);
      Utility.isSet((-391), (byte)126);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.replace("boolean", "boolean", "boolean");
      Utility.compactClassName("VNa][/I|^G", "boolean", false);
      byte byte0 = ObjectStreamConstants.TC_EXCEPTION;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-119);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("VNa][/I|^G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: VNa][/I|^G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte) (-126);
      byteArray0[0] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.compactClassName("8~p<2Wb_\"RWB", "class", true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool1, false);
      Utility.printArray((Object[]) constantArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Wcf;ksvh!&J\"[1RvPz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wcf;ksvh!&J\"[1RvPz'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "arraylength";
      MockFile mockFile0 = new MockFile("arraylength", "arraylength");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface((byte)100);
      Utility.isJavaIdentifierPart('-');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)100;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)100, (int) (byte)100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ru5:+qE@{46jj5");
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ypb@", "Ru5:+qE@{46jj5", "ycTw79x(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ypb@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.classOrInterface(962);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.clearBit(257, (byte) (-46));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-410), 584);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    <illegal opcode>
         // 2:    <illegal opcode>
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Constant[] constantArray0 = new Constant[14];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.setBit((-2208), (-2208));
      Utility.classOrInterface((byte)85);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-110);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 252, (-2208), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -98
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1786), (-1786), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Utility.setBit(49, 49);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      boolean boolean0 = false;
      Utility.compactClassName("newarray", "newarray", false);
      byte byte0 = ObjectStreamConstants.TC_EXCEPTION;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence2, (ConstantPool) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("newarray", "newarray", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ru5:+qE@{46jj5");
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-85);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence1.readBoolean();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), 84, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      int int0 = Pattern.LITERAL;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-70));
      ConstantString constantString0 = new ConstantString((-1503));
      Constant[] constantArray0 = new Constant[9];
      constantArray0[1] = (Constant) constantFloat0;
      Utility.printArray((Object[]) constantArray0);
      Utility.isJavaIdentifierPart('*');
      Utility.methodTypeToSignature("{null, CONSTANT_Float[4](bytes = -70.0), null, null, null, null, null, null, null}", (String[]) null);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wVide");
      Locale.getISOCountries();
      byte byte0 = ObjectStreamConstants.TC_EXCEPTION;
      Utility.compactClassName("wo", "boolean", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)123;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      byteSequence0.readShort();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "boolean");
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 154, 148, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("j*}^W$hX3FZb%g'D", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readChar();
      byteSequence1.readShort();
      byteSequence1.readBoolean();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-70);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (-2299), (int) (byte) (-70), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = "j*}^W$hX3FZb%g'D";
      byte[] byteArray1 = Utility.decode("<clinit>", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)81;
      byteArray2[1] = (byte) (-2);
      byteArray2[2] = (byte)85;
      byteArray2[3] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, (ConstantPool) null, 243, (int) (byte)81, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.convertString("Z&\rK?!%;\"-");
      String[] stringArray0 = Constants.ITEM_NAMES;
      Utility.convertString("Z&\rK?!%;\"-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray1 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-92);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2245), 1844, false);
      Utility.format(588, (byte) (-92), true, '\'');
      Utility.printArray((Object[]) stringArray1, false);
      Utility.compactClassName("if_icmpeq", true);
      Utility.clearBit(1844, (-3));
      try { 
        Utility.typeOfMethodSignature("if_acmpeq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_acmpeq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1883), (int) (byte) (-63), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.classOrInterface(4712);
      Utility.classOrInterface(4712);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("interface", "(m", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ru5:+qE@{46jj5");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)17;
      byteArray0[0] = (byte)17;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<init>");
      byteArray0[1] = (byte) (-85);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte) (-74);
      int int0 = Pattern.LITERAL;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-82);
      Utility.getSignature("<init>");
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureArgumentTypes("A[F{9Py");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A[F{9Py
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String[] stringArray0 = Constants.ITEM_NAMES;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte) (-73);
      String[] stringArray1 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      byteArray0[16] = (byte) (-73);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte) (-73), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Lk&)d Q");
      Utility.compactClassName("r\"_Yt", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-55);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-83);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-55), 183, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `long'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.printArray((Object[]) null, true);
      byte[] byteArray0 = Utility.decode(", npairs = ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.printArray((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Constant[] constantArray0 = new Constant[14];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-65);
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-55), 175, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        byteSequence0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\nC?");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-52);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0);
      Pattern.quote("\nC?");
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.compactClassName("Q\nC?E", false);
      Utility.methodTypeToSignature("Q\nC?E", (String[]) null);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte)116;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)37, (int) (byte) (-11), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte) (-101);
      byteArray0[0] = (byte) (-101);
      Utility.classOrInterface((byte)0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 924, (int) (byte) (-101), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface(42);
      Utility.isJavaIdentifierPart('4');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)3;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 34, (-2482), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ru5:+qE@{46jj5");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ru5:+qE@{46jj5");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      byteSequence0.readShort();
      byteSequence1.readShort();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString(":", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.getSignature("<illegal type>");
      try { 
        Utility.methodSignatureReturnType("L<illegal;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "\t(wide)";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t(wide)");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[5] = (byte) (-59);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byteArray0[6] = (byte) (-59);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t(wide)");
      MockFile mockFile0 = new MockFile("5FZcI#Wg");
      mockFile0.deleteOnExit();
      // Undeclared exception!
      try { 
        Utility.signatureToString("OKhH.ZM,:[VXFs8X", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OKhH.ZM,:[VXFs8X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ru5:+qE@{46jj5");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)61;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)61, (int) (byte)61, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true, false);
      Utility.searchOpcode("{java.lang.Object@3f7bc485, java.lang.Object@6884d0cc, java.lang.Object@294f8129, java.lang.Object@3428b966}");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String[] stringArray0 = Constants.ITEM_NAMES;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "instanceof");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 993, 993, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-70);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 74, (int) (byte) (-70));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-102);
      Utility.compactClassName("instanceof", "instanceof", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "instanceof";
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("CONSTANT_MethodHandle", false);
      Utility.clearBit(2759, (-2328));
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String[] stringArray0 = Constants.ACCESS_NAMES;
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-350), 7);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantClass constantClass0 = new ConstantClass((-350));
      constantInterfaceMethodref0.clone();
      constantInterfaceMethodref0.copy();
      constantArray0[1] = (Constant) constantClass0;
      String[] stringArray1 = Constants.ACCESS_NAMES;
      Utility.printArray((Object[]) constantArray0);
      Utility.isJavaIdentifierPart('*');
      Utility.methodTypeToSignature("{CONSTANT_InterfaceMethodref[11](class_index = -350, name_and_type_index = 7), CONSTANT_Class[7](name_index = -350)}", stringArray0);
      Utility.searchOpcode("if_acmpeq");
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      Utility.clearBit(177, (byte)103);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)103;
      byteArray1[1] = (byte)103;
      Utility.clearBit(3077, 177);
      Utility.typeOfMethodSignature("(Lpublic;Lprivate;Lprotected;Lstatic;Lfinal;Lsynchronized;Lvolatile;Ltransient;Lnative;Linterface;Labstract;Lstrictfp;Lsynthetic;Lannotation;Lenum;)[[L{CONSTANT_InterfaceMethodref;");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 419, (int) (byte)103, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte)20;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      byteArray0[5] = (byte)20;
      byteArray0[3] = (byte)20;
      byteArray0[6] = (byte)20;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-7), (int) (byte)20, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Constants.ILLEGAL_OPCODE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal opcode>");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte) (-73);
      byteArray0[8] = (byte) (-80);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 199, 1318, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.compactClassName("i2d");
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      Utility.replace("i2d", "i2d", "sH)wE'e5y!vi`F~");
      Utility.searchOpcode("i2d");
      String string0 = Constants.ILLEGAL_OPCODE;
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Constants.CONSTRUCTOR_NAME;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.compactClassName("<init>", false);
      Utility.getSignature("<init>");
      try { 
        Utility.methodSignatureReturnType("L<init>;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `init>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-76);
      Utility.accessToString((-1786), true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1786), (-1786), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      byteSequence0.readBoolean();
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2391), (int) (short)22304, true);
      Object object0 = new Object();
      Utility.printArray((Object[]) null, false, false);
      try { 
        Utility.methodSignatureArgumentTypes("0:    pop\n1:    lload_2\n2:    i2s\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    pop
         // 1:    lload_2
         // 2:    i2s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte) (-120);
      byteArray0[0] = (byte) (-120);
      ConstantPool constantPool0 = null;
      String string0 = Constants.CONSTRUCTOR_NAME;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".K");
      byteSequence1.close();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-120);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 183, (-610), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-79);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-65), 41);
      Utility.compactClassName("0:    athrow\n1:    return\n2:    d2l\n3:    nop\n4:    aload\t\t%177\n", true);
      Utility.convertString("monitorenter");
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-100), 2341, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Utility.format('G', 'G', false, 'G');
      byte byte0 = Constants.CONSTANT_Double;
      try { 
        Utility.methodSignatureReturnType("GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG71", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG71'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantClass constantClass0 = new ConstantClass(40);
      MockPrintStream mockPrintStream0 = new MockPrintStream("vr!(M9g.");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "vr!(M9g.";
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.isJavaIdentifierPart('*');
      String[] stringArray0 = new String[7];
      stringArray0[0] = "'xBdv?AJl_j1k";
      stringArray0[1] = "vr!(M9g.";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)79;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)79, (int) (byte)72, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte) (-63);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-63);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<clinit>");
      boolean boolean0 = false;
      String string1 = "RuntimeInvisibleParameterAnnotations";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "<clinit>";
      stringArray0[1] = ", low = ";
      stringArray0[2] = "RuntimeInvisibleParameterAnnotations";
      stringArray0[3] = "<clinit>";
      stringArray0[4] = "<clinit>";
      Utility.methodTypeToSignature("RuntimeInvisibleParameterAnnotations", stringArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, false);
      Utility.convertString("$c1$A");
      boolean boolean1 = true;
      try { 
        Utility.decode("$c1$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byte byte0 = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      byte byte1 = (byte)11;
      String string0 = Constants.ILLEGAL_OPCODE;
      String string1 = "XGLsynchronized;V";
      try { 
        Utility.typeOfSignature("XGLsynchronized;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XGLsynchronized;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Constant[] constantArray0 = new Constant[14];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-118);
      byte byte0 = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)56;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-71), 200);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 12542. Constant pool size is: 14
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2670, 2670, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Constant[] constantArray0 = new Constant[14];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray1[2] = (byte) (-63);
      byteArray1[3] = (byte) (-63);
      byteArray1[4] = (byte) (-63);
      byteArray1[5] = (byte) (-63);
      Utility.equals(byteArray0, byteArray1);
      Utility.getSignature("native");
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteArray0, constantPool0, (-2486), (int) (byte)48);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0:    nop\n1:    faload\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n");
      Utility.encode(byteArray0, false);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      int int0 = Pattern.CANON_EQ;
      char char0 = File.pathSeparatorChar;
      Utility.format(195, (-2486), true, ':');
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)39;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-424), 2126, true);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)71;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte) (-85);
      byteArray0[5] = (byte) (-85);
      byteArray0[8] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("g");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Utility.isJavaIdentifierPart('4');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.clearBit((byte) (-104), (byte) (-106));
      Utility.printArray((Object[]) stringArray0, true, false);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-114);
      int int0 = 1;
      boolean boolean0 = true;
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, 1, 1, true);
  }
}
