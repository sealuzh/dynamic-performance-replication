/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:20:13 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      Attribute attribute0 = new Attribute("");
      ClassWriter classWriter0 = new ClassWriter((-1630));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1630), "Deprecated", "Signature", "Deprecated", (Object) null);
      ByteVector byteVector1 = byteVector0.putByteArray((byte[]) null, 16, 16);
      fieldWriter0.put(byteVector1);
      System.setCurrentTimeMillis(5743);
      fieldWriter0.getSize();
      classWriter0.visitSource("", "Signature");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "Deprecated", "Signature", "Deprecated", "Deprecated");
      fieldWriter0.visitAnnotation("The wildcard array must not be null", false);
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector(2);
      Attribute attribute0 = new Attribute("The wildcard array must not be null");
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "Deprecated", "Signature", "Deprecated", "Deprecated");
      fieldWriter0.visitAnnotation("The wildcard array must not be null", true);
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector(2);
      Attribute attribute0 = new Attribute("The wildcard array must not be null");
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(346);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 346, "Cc#o8)BQW9FT'", "Cc#o8)BQW9FT'", "long", (Object) null);
      fieldWriter0.getSize();
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 184, "long", "long", "long", "long");
      fieldWriter1.visitEnd();
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(4096);
      Attribute attribute0 = new Attribute("");
      ClassWriter classWriter0 = new ClassWriter((-1730));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1630), "Deprecated", "Signature", ".m*", (Object) null);
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(4096);
      int int0 = 5743;
      Attribute attribute0 = new Attribute("");
      ClassWriter classWriter0 = new ClassWriter((-1730));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1630), "Deprecated", "Signature", ".m*", (Object) null);
      byteVector0.putLong((-285L));
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.index = 0;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "Deprecated", "Signature", "Deprecated", "Deprecated");
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("The wildcard array must not be null", true);
      fieldWriter0.getSize();
      fieldWriter0.visitAnnotation("Signature", false);
      fieldWriter0.visitEnd();
      ByteVector byteVector0 = new ByteVector(2);
      ByteVector byteVector1 = byteVector0.put12(1, 1);
      ByteVector byteVector2 = byteVector0.putUTF8("!}eF+");
      byteVector2.put12(0, 28);
      ByteVector byteVector3 = byteVector1.putUTF8("{.=");
      ByteVector byteVector4 = byteVector3.putUTF8("The wildcard array must not be null");
      fieldWriter0.put(byteVector0);
      Attribute attribute0 = new Attribute("!}eF+");
      fieldWriter0.put(byteVector4);
      fieldWriter0.visitAttribute(attribute0);
      AnnotationVisitor annotationVisitor1 = fieldWriter0.visitAnnotation("!}eF+", true);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.index = 0;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "Deprecated", "Signature", "Deprecated", "Deprecated");
      fieldWriter0.visitAnnotation("The wildcard array must not be null", true);
      fieldWriter0.getSize();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("Signature", false);
      fieldWriter0.visitEnd();
      ByteVector byteVector0 = new ByteVector(2);
      byteVector0.put12(1, 1);
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, 1, "The wildcard array must not be null", "^FIJwlxOEx |", "pqV{U.3@/1r(z", annotationVisitor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.AnnotationWriter@10
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-10));
      classWriter0.index = 1;
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put11((-10), (-10));
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      classWriter0.firstMethod = null;
      ByteVector byteVector2 = byteVector0.put12(3, 1373);
      byteVector2.putByte(2321);
      ByteVector byteVector3 = byteVector0.put12(1578, 1);
      byteVector3.putInt(1);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 1, "Signature", "Signature", (String) null, byteVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ByteVector@6
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-10));
      classWriter0.index = 1;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-10), "Deprecated", "Signature", "Deprecated", "Deprecated");
      fieldWriter0.visitAnnotation("Deprecated", true);
      int int0 = Frame.CHAR;
      fieldWriter0.visitEnd();
      ByteVector byteVector0 = new ByteVector(1);
      int int1 = (-1330);
      ByteVector byteVector1 = byteVector0.put12((-1330), 2);
      byteVector1.putUTF8("");
      String[] stringArray0 = new String[0];
      classWriter0.visit((-10), (-1866), "Deprecated", "UNeWp\"Fc@x6Q", "", stringArray0);
      byteVector0.put12(2112, (-10));
      byteVector0.putUTF8("{.=");
      ByteVector byteVector2 = new ByteVector();
      byteVector2.putUTF8("");
      fieldWriter0.put(byteVector1);
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
