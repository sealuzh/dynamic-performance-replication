/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:47:42 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Buffer buffer0 = pipe0.buffer;
      long long0 = buffer0.indexOf((byte)122, 4001L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.flush();
      // Undeclared exception!
      try { 
        buffer0.write(buffer0, 1000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.buffer();
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null, 8L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8Line(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.md5(buffer0);
      buffer0.writeIntLe((-371));
      buffer0.readUtf8CodePoint();
      buffer0.require(0L);
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer0.read(buffer1, 2116L);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Charset.defaultCharset();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      Buffer buffer1 = buffer0.write(byteString0);
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-104);
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(100000L);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      try { 
        buffer1.readFrom((InputStream) bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Pipe pipe0 = new Pipe(328L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.close();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(242L);
      Buffer buffer1 = pipe0.buffer;
      buffer0.read(buffer1, 242L);
      buffer1.timeout();
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer1.indexOf(byteString0, (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe(993);
      buffer0.readShortLe();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Pipe pipe1 = new Pipe(1000000L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = pipe1.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.writeLongLe(1000000L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        buffer1.read(buffer0, (-10L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -10
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Pipe pipe0 = new Pipe(744L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.hmacSha1(byteString0);
      buffer0.indexOf(byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeInt(2021161080);
      realBufferedSink0.buffer.readAll(buffer0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Pipe pipe0 = new Pipe(9952L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(99999999999L);
      buffer1.writeByte((-1679));
      buffer0.completeSegmentByteCount();
      buffer0.readHexadecimalUnsignedLong();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("[AHC!ued`<7", 1069, 1069);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 1069 > 11
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.md5();
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Charset.defaultCharset();
      buffer1.writeHexadecimalUnsignedLong((-1));
      buffer_UnsafeCursor0.next();
      buffer1.indexOf((byte) (-20), 0L, 2282L);
      Buffer buffer2 = buffer1.emitCompleteSegments();
      buffer2.sha512();
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x66
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-1643L));
      buffer1.outputStream();
      buffer0.readByteArray();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Pipe pipe0 = new Pipe(400L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeIntLe(3349);
      try { 
        buffer0.readUtf8LineStrict(400L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=4 content=150d0000\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte) (-83));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(3L);
      Buffer buffer0 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("@", charset0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.indexOfElement(byteString0, 1L);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer0.equals(buffer1);
      buffer0.snapshot();
      buffer1.readAll(buffer0);
      // Undeclared exception!
      try { 
        buffer1.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOfElement((ByteString) null);
      byte[] byteArray0 = new byte[0];
      buffer0.read(byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.copyTo((Buffer) null, (long) (-1), 4L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(4L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.next();
      buffer0.readDecimalLong();
      buffer0.snapshot();
      buffer0.outputStream();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("[AHC!ued`<7", (-930), (-930));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -930
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeUtf8("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeShortLe((-5005));
      // Undeclared exception!
      try { 
        buffer1.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(1000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Pipe pipe0 = new Pipe(1680L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeHexadecimalUnsignedLong(489L);
      // Undeclared exception!
      try { 
        buffer0.snapshot(2799);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=0 byteCount=2799
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Pipe pipe0 = new Pipe(1238L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)106;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      buffer0.readFrom((InputStream) sequenceInputStream0);
      buffer0.emit();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Pipe pipe0 = new Pipe(1730L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.toString();
      buffer0.writeHexadecimalUnsignedLong(1730L);
      Buffer buffer1 = buffer0.writeDecimalLong(1730L);
      buffer0.hashCode();
      HashingSource.md5(buffer0);
      Buffer buffer2 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer1, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      try { 
        buffer0.readUtf8LineStrict(21L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      try { 
        buffer1.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-1668L));
      buffer1.readDecimalLong();
      buffer0.readByteArray();
      buffer0.inputStream();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      Inflater inflater0 = new Inflater(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Buffer buffer1 = buffer0.writeLong(76L);
      Buffer buffer2 = buffer0.clone();
      buffer0.writeHexadecimalUnsignedLong(0L);
      buffer1.indexOf((byte) (-32), 0L, 0L);
      buffer2.clear();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.md5(buffer0);
      Pipe pipe0 = new Pipe(5388L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = buffer0.writeIntLe((-371));
      try { 
        buffer2.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=8dfeffff\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1803));
      try { 
        buffer1.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 4: 1 (to read code point prefixed 0xfffffff5)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Pipe pipe0 = new Pipe(2122L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.completeSegmentByteCount();
      Buffer buffer1 = new Buffer();
      buffer1.md5();
      buffer0.readUtf8(0L);
      Buffer buffer2 = buffer0.writeDecimalLong(0L);
      buffer2.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer2.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[6];
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1803));
      byteArray0[1] = (byte)0;
      Buffer buffer2 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      buffer2.hmacSha1(byteString1);
      Buffer buffer3 = buffer2.writeLongLe(100L);
      buffer3.readUtf8CodePoint();
      try { 
        buffer1.require(65533);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-1728L));
      HashingSink hashingSink0 = HashingSink.sha256(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.write(byteString0);
      buffer0.size();
      buffer0.hmacSha1(byteString0);
      // Undeclared exception!
      try { 
        buffer1.read(buffer0, 1000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1803));
      HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      realBufferedSource0.readByteString();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.exhausted();
      try { 
        realBufferedSource0.buffer.readFully(buffer0, 945L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.offset = 20L;
      buffer_UnsafeCursor0.resizeBuffer(5622L);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(100000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=100000000000 > size=4
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.close();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = new Buffer();
      buffer0.writeLongLe((-2032L));
      Pipe pipe0 = new Pipe(3L);
      Buffer buffer2 = pipe0.buffer;
      BufferedSink bufferedSink0 = buffer1.write((Source) buffer0, 3L);
      realBufferedSource0.buffer.readAll(bufferedSink0);
      Buffer buffer3 = realBufferedSource0.buffer;
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer0.writeDecimalLong((byte)42);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HashingSink hashingSink0 = HashingSink.sha1(deflaterSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.segmentSizes();
      buffer1.write((Source) buffer0, (-4250L));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      try { 
        buffer1.write((Source) realBufferedSource0, 2729L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.md5();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      buffer0.completeSegmentByteCount();
      buffer0.completeSegmentByteCount();
      HashingSource.md5(hashingSource0);
      ByteString byteString1 = hashingSource0.hash();
      buffer0.rangeEquals(0L, byteString0);
      byteString1.md5();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte) (-20), (-1L), 2282L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-1 toIndex=2282
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString1 = new ByteString(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("already attached to a buffer");
      buffer0.rangeEquals(4L, byteString0, (-729), (-729));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)22;
      Pipe pipe0 = new Pipe((byte)22);
      Buffer buffer0 = pipe0.buffer;
      buffer0.sha512();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[6];
      buffer0.writeUtf8CodePoint((-1803));
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      try { 
        inflaterSource0.read(buffer0, 100L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeByte((-805));
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.clear();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer0 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-647L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((byte)58);
      ByteString byteString0 = buffer0.sha1();
      buffer0.indexOf(byteString0, 18L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSink0.buffer.writeShortLe((byte)58);
      try { 
        buffer0.write((Source) realBufferedSink0.buffer, 6L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Pipe pipe0 = new Pipe(744L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = true;
      Buffer buffer1 = buffer0.clone();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      Buffer buffer2 = buffer1.writeByte((-1810));
      hashingSource0.read(buffer0, 744L);
      ByteString byteString0 = hashingSource0.hash();
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[2] = byteString0;
      byteStringArray0[2] = byteString0;
      Buffer buffer3 = buffer2.writeLongLe(744L);
      buffer2.readUtf8CodePoint();
      buffer2.require((-1810));
      buffer3.writeInt((-1906));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hw]XkRe{1[.XF");
      buffer0.writeDecimalLong(1L);
      buffer0.snapshot();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = pipe0.buffer;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.readUnsafe();
      buffer1.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte)80, (long) (byte)80, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=1 fromIndex=80 toIndex=1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString(0L);
      Buffer buffer1 = buffer0.writeLongLe(691L);
      buffer1.writeInt(97);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      HashingSource hashingSource1 = HashingSource.sha1(buffer0);
      byte[] byteArray0 = new byte[5];
      HashingSource.md5(hashingSource1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.timeout();
      hashingSource1.hash();
      ByteString byteString0 = realBufferedSource0.readByteString((long) (byte)0);
      byteString0.sha512();
      realBufferedSource0.indexOfElement(byteString0);
      buffer0.rangeEquals((long) (byte)0, byteString0);
      byte byte0 = ObjectStreamConstants.TC_ENUM;
      realBufferedSource0.buffer.readAndWriteUnsafe();
      buffer0.sha1();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.getByte((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      buffer0.indexOf(byteString1);
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[4] = byteString1;
      Buffer buffer2 = buffer0.writeByte(97);
      buffer1.completeSegmentByteCount();
      buffer2.readDecimalLong();
      buffer2.snapshot();
      Charset.defaultCharset();
      Buffer buffer3 = new Buffer();
      buffer3.writeShortLe(97);
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer0.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Pipe pipe0 = new Pipe(2117L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.completeSegmentByteCount();
      buffer0.writeShort((-682));
      Buffer buffer1 = pipe0.buffer;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer2 = buffer0.writeByte((byte)0);
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer3 = buffer2.writeString("", charset0);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.toString();
      ByteString byteString1 = hashingSource0.hash();
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString1;
      byteStringArray0[4] = byteString1;
      byteStringArray0[5] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer3.select(options0);
      buffer2.hmacSha256(byteString1);
      buffer2.indexOf((byte) (-59), 0L);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[6];
      Buffer buffer1 = pipe0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Buffer buffer2 = buffer0.readFrom((InputStream) byteArrayInputStream0, 0L);
      buffer2.writeInt(42);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("`s,GVOjBG{c,u.^'S", (int) (byte) (-1), (-2147483646), charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      buffer0.hmacSha256(byteString0);
      buffer0.clear();
      ByteString.encodeUtf8("");
      Buffer buffer1 = buffer0.writeInt((-389));
      buffer1.readIntLe();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.readAll(buffer1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("5&!");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeLong(76L);
      buffer0.readInt();
      // Undeclared exception!
      try { 
        buffer1.getByte(100000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=100000000000 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.require(130L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(9955L);
      Buffer buffer1 = new Buffer();
      HashingSource.sha1(buffer0);
      buffer1.writeDecimalLong(714L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer2 = new Buffer();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = buffer0.sha1();
      byteString0.toAsciiLowercase();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1T+`|0eYC`f1QFSqY");
      String string0 = "3!b9Z,)";
      realBufferedSink0.writeUtf8("3!b9Z,)");
      try { 
        realBufferedSink0.buffer.write((Source) buffer0, (long) (byte)11);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[6];
      Buffer buffer1 = buffer0.writeInt(178);
      buffer0.sha1();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      buffer0.snapshot();
      try { 
        buffer1.writeTo((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("5&!");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      buffer0.writeTo((OutputStream) mockFileOutputStream0);
      buffer0.indexOf((byte) (-32), 41L, 41L);
      buffer0.writeDecimalLong(41L);
      buffer0.readUnsafe();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("5&!");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      Buffer buffer1 = buffer0.writeLong((-1890L));
      buffer1.writeTo((OutputStream) mockFileOutputStream0);
      buffer0.indexOf((byte) (-32), 76L, 76L);
      buffer1.writeDecimalLong(76L);
      buffer1.flush();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "068xsf]gP2");
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte((-221));
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer1.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Pipe pipe0 = new Pipe(999998L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer1.writeByte((byte)0);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.hash();
      buffer0.indexOf((byte)0, (long) (byte)0);
      try { 
        buffer2.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeInt((-729));
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer0.write((Source) buffer1, (long) (-729));
      realBufferedSink0.writeLong((-570L));
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-68);
      byteArray0[4] = (byte) (-126);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      Buffer buffer2 = (Buffer)hashingSink0.delegate();
      HashingSink hashingSink1 = HashingSink.sha512(buffer2);
      hashingSink1.hash();
      hashingSink1.hash();
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer3.select(options0);
      buffer3.readLongLe();
      // Undeclared exception!
      try { 
        buffer2.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(2028179000);
      try { 
        buffer1.readUtf8Line(1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      long long0 = 4L;
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.indexOf(byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      Buffer buffer1 = new Buffer();
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong(2654L);
      HashingSink hashingSink0 = HashingSink.sha512(bufferedSink0);
      ByteString byteString1 = hashingSink0.hash();
      hashingSink0.hash();
      Buffer buffer2 = bufferedSink0.buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer2.writeByte((-362));
      buffer2.readUtf8Line();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\u0000\u0000\u0000\u0000\u0000\u0000");
      // Undeclared exception!
      try { 
        HashingSink.hmacSha512((Sink) null, byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("5!");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.writeLong(76L);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      buffer0.readUtf8();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000009L);
      Pipe pipe1 = new Pipe(1000009L);
      Buffer buffer0 = pipe1.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt(21);
      Buffer buffer1 = bufferedSink0.buffer();
      realBufferedSink0.buffer.write((Source) buffer1, (long) (byte) (-104));
      BufferedSink bufferedSink1 = realBufferedSink0.writeLong(2654L);
      HashingSink.sha512(bufferedSink1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readUtf8LineStrict(60L);
      bufferedSink0.buffer();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(2932L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[6];
      int int0 = 11;
      buffer0.writeUtf8CodePoint(11);
      byteArray0[1] = (byte) (-21);
      Buffer buffer1 = pipe0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) byteArrayInputStream0, (-2510L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2510
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("5&!");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      buffer0.writeLong((-1891L));
      buffer0.indexOf((byte) (-32), 76L, 76L);
      buffer0.emitCompleteSegments();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1803));
      HashingSource.md5(buffer0);
      buffer1.clone();
      // Undeclared exception!
      try { 
        buffer0.read(buffer1, 280375465082880L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[6];
      Buffer buffer1 = pipe0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      buffer0.readFrom((InputStream) byteArrayInputStream0, 0L);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("`s,GVOjBG{c,u.^'S", (int) (byte)6, (-2147483646), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -2147483646 < 6
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)58;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeUtf8CodePoint(1952257861);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 745d1745
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Pipe pipe0 = new Pipe(1730L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.toString();
      buffer0.writeHexadecimalUnsignedLong(1730L);
      buffer0.hashCode();
      HashingSource.md5(buffer0);
      Buffer buffer1 = new Buffer();
      buffer0.writeUtf8CodePoint(210);
      buffer0.emit();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("5&!");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.writeLong((-1891L));
      Buffer buffer1 = buffer0.clone();
      buffer1.writeHexadecimalUnsignedLong(15L);
      buffer0.emitCompleteSegments();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Pipe pipe0 = new Pipe(1659L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)102;
      byteArray0[8] = (byte) (-128);
      buffer0.write(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Pipe pipe0 = new Pipe(2117L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeShort((-646));
      Buffer buffer2 = pipe0.buffer;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Charset.defaultCharset();
      buffer1.toString();
      HashingSource hashingSource0 = HashingSource.md5(buffer2);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.toString();
      hashingSource0.hash();
      hashingSource0.hash();
      Pipe pipe1 = new Pipe(3L);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer2, inflater0);
      buffer2.readUtf8Line();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000009L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.completeSegmentByteCount();
      int int0 = 15;
      Buffer buffer1 = buffer0.writeShort(15);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.md5();
      buffer0.segmentSizes();
      hashingSource0.close();
      long long0 = 10000000000000L;
      // Undeclared exception!
      try { 
        buffer1.readUtf8(10000000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=0 byteCount=10000000000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null, (-1540), (-1990));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Pipe pipe0 = new Pipe(2086L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.completeSegmentByteCount();
      Buffer buffer1 = buffer0.writeShort(1064);
      buffer1.sha1();
      buffer0.readShortLe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      buffer0.writeUtf8CodePoint(1064);
      Charset charset0 = Charset.defaultCharset();
      buffer1.writeString("", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer.writeLong(255L);
      buffer1.readUtf8CodePoint();
      long long0 = new Integer((short)10244);
      Integer integer0 = new Integer((short)10244);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Pipe pipe0 = new Pipe(332L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeInt(65);
      // Undeclared exception!
      try { 
        buffer0.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Pipe pipe0 = new Pipe(9952L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(99999999999L);
      ByteString byteString0 = buffer1.snapshot();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.exhausted();
      realBufferedSource0.buffer.indexOf(byteString0);
      Buffer buffer2 = pipe0.buffer;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer1.writeByte(248);
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSource0);
      ByteString byteString1 = hashingSource0.hash();
      byteString1.toString();
      hashingSource0.hash();
      // Undeclared exception!
      try { 
        byteString1.substring(248);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jN<J0)xTb>[JBV-l");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      long long0 = 76L;
      Buffer buffer1 = buffer0.writeLong(76L);
      buffer0.readFully(byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      HashingSink.hmacSha1(buffer0, byteString0);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x4c
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(4L);
      buffer1.readDecimalLong();
      buffer0.readByteArray();
      buffer0.inputStream();
      buffer0.writeLongLe(4L);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer1.selectPrefix(options0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("5e!");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5e!");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeLong(76L);
      buffer0.indexOf((byte)58, 10L, (long) (byte)58);
      buffer1.emitCompleteSegments();
      // Undeclared exception!
      try { 
        buffer0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("5!");
      Buffer buffer1 = buffer0.writeDecimalLong(2147483647L);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("5!", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream1);
      // Undeclared exception!
      try { 
        buffer1.copyTo((OutputStream) dataOutputStream0, (long) (byte)58, 110L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=10 offset=58 byteCount=110
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "okio.GzipSource");
      Pipe pipe0 = new Pipe(5854L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = pipe0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("okio.GzipSource");
      mockFileOutputStream0.release();
      mockFileOutputStream0.flush();
      buffer1.copyTo((OutputStream) mockFileOutputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(255L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1000000L);
      buffer0.writableSegment(2048);
      Buffer buffer2 = pipe0.buffer;
      buffer2.indexOf((byte)79);
      buffer1.readShort();
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.segmentSizes();
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer0.writeUtf8("]gDR/T\"&}");
      buffer2.skip((-4111L));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-18);
      buffer0.md5();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("J<4xLMRe16&U", 2147483646, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 0 < 2147483646
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Pipe pipe0 = new Pipe(1396L);
      Buffer buffer0 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("=]T,zbn~_e4M$");
      charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        buffer0.writeString("9AEj9BY-s", 2036, 2036, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 2036 > 9
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      buffer0.indexOf(byteString1);
      Buffer buffer1 = buffer0.writeDecimalLong(3L);
      buffer1.completeSegmentByteCount();
      buffer0.snapshot();
      buffer1.readDecimalLong();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~bM{wQ7#/t~1G-s.;");
      HashingSink.hmacSha256(buffer1, byteString0);
      buffer1.write(byteArray0);
      buffer1.indexOfElement(byteString1, 3L);
      buffer1.readUtf8();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      Buffer buffer1 = buffer0.writeIntLe((-371));
      buffer0.writeLongLe((-2109L));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-9);
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.indexOfElement(byteString0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      hashingSink0.hash();
      byteString0.toString();
      buffer1.size();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        buffer1.read(buffer0, (long) (byte) (-124));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -124
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(4294967309L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong((-7L));
      buffer1.snapshot();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x2d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = "uk,@t@X7!K\"^=6-";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uk,@t@X7!K\"^=6-");
      HashingSink.md5(buffer0);
      buffer0.completeSegmentByteCount();
      int int0 = (-708);
      int int1 = 766;
      Buffer buffer1 = buffer0.writeShort(766);
      Buffer buffer2 = buffer1.writeByte((-708));
      buffer2.completeSegmentByteCount();
      HashingSource hashingSource0 = HashingSource.md5(buffer2);
      ByteString byteString0 = hashingSource0.hash();
      buffer1.rangeEquals((-763L), byteString0);
      byteString0.md5();
      // Undeclared exception!
      try { 
        buffer2.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.indexOf(byteString0);
      Buffer buffer2 = pipe0.buffer;
      Buffer buffer3 = buffer2.writeDecimalLong((-1L));
      ByteString byteString1 = new ByteString(byteArray0);
      buffer0.indexOfElement(byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[3] = byteString1;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString1;
      Options.of(byteStringArray0);
      realBufferedSink0.writeUtf8CodePoint(56319);
      realBufferedSink0.outputStream();
      buffer0.readUtf8Line();
      realBufferedSink0.buffer.clear();
      // Undeclared exception!
      try { 
        buffer3.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(1000000L);
      byte byte0 = (byte) (-104);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(8192);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      long long0 = (-1890L);
      buffer1.writeLong(76L);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("m3Du", "m3Du");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // m3Du
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-53L));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tveCd4nBmV");
      ByteString byteString1 = ByteString.decodeBase64("tveCd4nBmV");
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      hashingSource0.toString();
      hashingSource0.hash();
      byteString1.base64Url();
      byteString1.sha1();
      Charset.defaultCharset();
      buffer0.indexOf(byteString0);
      buffer1.readDecimalLong();
      hashingSource0.hash();
      HashingSink.sha512(buffer0);
      buffer0.clear();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(9952L);
      Buffer buffer1 = pipe0.buffer;
      HashingSource.sha1(buffer0);
      Buffer buffer2 = buffer1.writeDecimalLong(99999999999988L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer2.readLongLe();
      // Undeclared exception!
      try { 
        realBufferedSink0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(4294967309L);
      boolean boolean0 = pipe0.sinkClosed;
      Buffer buffer0 = pipe0.buffer;
      buffer0.hmacSha1(byteString0);
      Buffer buffer1 = buffer0.writeDecimalLong(3L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer0.indexOf(byteString0);
      Buffer buffer3 = pipe0.buffer;
      ByteString byteString1 = new ByteString(byteArray0);
      buffer1.indexOfElement(byteString0);
      HashingSource.md5(buffer0);
      Inflater inflater0 = new Inflater(false);
      Buffer buffer4 = realBufferedSink0.buffer;
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(3L);
      Buffer buffer1 = buffer0.writeByte(97);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("K h~_aQGl!( ");
      Buffer buffer2 = buffer1.copyTo((OutputStream) mockFileOutputStream0);
      try { 
        buffer2.skip(3L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(2L);
      boolean boolean0 = pipe0.sinkClosed;
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      Buffer buffer1 = pipe0.buffer;
      ByteString[] byteStringArray0 = new ByteString[22];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      buffer1.selectPrefix(options0);
      buffer0.snapshot();
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(1000026L);
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(1000026L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~bM{wQ7#/t~1G-s.;");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(2);
      Buffer buffer2 = buffer0.clone();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      buffer0.indexOfElement(byteString0);
      HashingSource.sha256(buffer2);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      buffer2.readUtf8((long) 1);
      realBufferedSink0.writeUtf8(">uISh");
      realBufferedSink0.buffer.getByte(1);
      buffer2.readByteArray();
      buffer1.inputStream();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-104);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-857), (byte) (-104));
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer1.writableSegment(2147221567);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      buffer0.indexOf(byteString1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt(11);
      BufferedSink bufferedSink1 = realBufferedSink0.writeUtf8("t]p1U!Z{O*b");
      ((RealBufferedSink) bufferedSink1).buffer.hmacSha1(byteString0);
      realBufferedSink0.buffer.indexOf(byteString0);
      bufferedSink1.write(byteString1);
      ((RealBufferedSink) bufferedSink0).buffer.writeLong(11);
      buffer0.readByteArray();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = ((RealBufferedSink) bufferedSink1).buffer.writeString("t]p1U!Z{O*b", charset0);
      byte byte0 = (byte)4;
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte)4, (long) 11, (long) (byte)4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=54 fromIndex=11 toIndex=4
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(10000000L);
      buffer0.snapshot();
      buffer0.readHexadecimalUnsignedLong();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Pipe pipe0 = new Pipe(4294967309L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeByte(2);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.hash();
      buffer1.readUtf8((long) (byte)0);
      Buffer buffer2 = buffer0.clone();
      buffer2.request((byte)0);
      buffer1.snapshot();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Buffer buffer3 = buffer2.writeLong(4294967295L);
      // Undeclared exception!
      try { 
        buffer3.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(10000000000000000L);
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = pipe0.buffer;
      Buffer buffer3 = buffer0.writeDecimalLong(9223372036854775807L);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer3.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Pipe pipe1 = new Pipe(1000000L);
      Buffer buffer0 = pipe1.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = buffer1.writeLongLe(0L);
      buffer2.sha1();
      HashingSink hashingSink0 = HashingSink.sha512(realBufferedSink0);
      hashingSink0.hash();
      ByteString byteString0 = hashingSink0.hash();
      ByteString[] byteStringArray0 = new ByteString[2];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink1.writeDecimalLong(100000000000000000L);
      realBufferedSink0.buffer.selectPrefix(options0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.offset = 20L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Pipe pipe0 = new Pipe(999999L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe1 = new Pipe(999999L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink1.buffer.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(20L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(3L);
      pipe0.sourceClosed = true;
      Buffer buffer0 = pipe0.buffer;
      buffer0.equals(pipe0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-70);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        buffer0.readFrom((InputStream) byteArrayInputStream0, 280375465082880L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeLongLe(10L);
      buffer0.size();
      buffer2.read(buffer0, 0L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(0L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.seek((-1));
      buffer_UnsafeCursor0.buffer.sha256();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = false;
      Buffer buffer1 = buffer0.writeDecimalLong(3L);
      Buffer buffer2 = pipe0.buffer;
      Buffer buffer3 = buffer1.writeHexadecimalUnsignedLong(3L);
      Buffer buffer4 = pipe0.buffer;
      buffer3.readShort();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer4.writeDecimalLong(1000000000000000L);
      buffer0.indexOf((byte)105, 3L, 2147L);
      buffer4.sha512();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)68;
      byteArray0[2] = (byte)1;
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSource0);
      ByteString byteString1 = hashingSource0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.write(byteString1);
      realBufferedSource0.buffer.writeDecimalLong(10000000000000000L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource1.buffer();
      buffer1.clone();
      Buffer buffer3 = realBufferedSink0.buffer;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("|oD0X7HB%5l,fsW");
      buffer2.readUnsafe();
      Buffer buffer4 = realBufferedSink0.buffer;
      Buffer buffer5 = buffer4.copyTo((OutputStream) mockFileOutputStream0);
      buffer5.read(buffer0, (long) (byte)68);
      hashingSource0.hash();
      buffer5.hmacSha512(byteString0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = new Buffer();
      buffer1.sha1();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      realBufferedSink0.writeLong((-2815L));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer2.readUtf8CodePoint();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSink0.writeUtf8CodePoint(65533);
      realBufferedSink0.outputStream();
      realBufferedSink0.buffer.readUtf8Line();
      Pipe pipe1 = null;
      try {
        pipe1 = new Pipe((-2596));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -2596
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      realBufferedSink0.writeDecimalLong(65536L);
      // Undeclared exception!
      try { 
        buffer0.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000007L);
      Pipe pipe1 = new Pipe(1000007L);
      Buffer buffer0 = pipe1.buffer;
      Buffer buffer1 = (Buffer)buffer0.emit();
      buffer0.outputStream();
      Buffer buffer2 = buffer0.writeInt((-857));
      ByteString byteString0 = buffer2.sha1();
      buffer2.indexOf(byteString0, 18L);
      ByteString byteString1 = buffer0.sha512();
      buffer1.rangeEquals(3513L, byteString1, 4512, (int) (byte) (-104));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer3 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer3.indexOf((byte)67, (long) (byte) (-104), (-772L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-104 toIndex=-772
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Pipe pipe0 = new Pipe(999998L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer1.writeByte((byte)0);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      // Undeclared exception!
      try { 
        buffer2.indexOf(byteString0, (-1241L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((byte)58);
      ByteString byteString0 = buffer0.sha1();
      buffer0.indexOf(byteString0, 18L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.writeShortLe((byte)58);
      realBufferedSink0.buffer.readByte();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.snapshot((-1803));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=-1803
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.hashCode();
      Buffer buffer1 = buffer0.writeByte((-1431655764));
      buffer1.readByte();
      buffer0.readUtf8Line();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      buffer0.flush();
      try { 
        buffer1.write((Source) realBufferedSource0, 582L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000007L);
      Pipe pipe1 = new Pipe(1000007L);
      Buffer buffer0 = pipe1.buffer;
      buffer0.emit();
      OutputStream outputStream0 = buffer0.outputStream();
      Buffer buffer1 = buffer0.writeLong(1L);
      Buffer buffer2 = buffer1.writeTo(outputStream0);
      // Undeclared exception!
      try { 
        buffer2.indexOf((byte)58, 19L, (-2456L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=8 fromIndex=19 toIndex=-2456
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Pipe pipe1 = new Pipe(1000000L);
      Buffer buffer0 = pipe1.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = buffer1.writeLongLe(0L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSink0.buffer.readLong();
      buffer2.sha1();
      ByteString[] byteStringArray0 = new ByteString[2];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink1.outputStream();
      BufferedSink bufferedSink0 = realBufferedSink1.writeDecimalLong(100000000000000006L);
      realBufferedSink0.buffer.selectPrefix(options0);
      ((RealBufferedSink) bufferedSink0).buffer.select(options0);
      Buffer buffer3 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer3.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.next();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer();
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink0.buffer);
      buffer0.writeDecimalLong(100000L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      hashingSource0.hash();
      ByteString byteString0 = realBufferedSource0.readByteString();
      realBufferedSink0.buffer.indexOf(byteString0, 10L);
      buffer0.clone();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Buffer buffer1 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      hashingSource0.hash();
      byteString0.substring((int) (byte)0, (int) (byte)0);
      byteString0.indexOf(byteArray0);
      byteString0.toAsciiUppercase();
      buffer1.equals(hashingSource0);
      buffer0.hashCode();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.indexOf(byteString0);
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[2] = byteString0;
      Buffer buffer2 = buffer0.writeByte(97);
      buffer1.completeSegmentByteCount();
      buffer0.snapshot();
      buffer2.readDecimalLong();
      buffer0.readHexadecimalUnsignedLong();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Pipe pipe0 = new Pipe(999999L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Pipe pipe1 = new Pipe(999999L);
      realBufferedSink0.writeShortLe((-1615));
      Buffer buffer1 = realBufferedSink1.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink1.buffer.readAndWriteUnsafe();
      realBufferedSink0.writeIntLe((-1));
      HashingSource.md5(realBufferedSink0.buffer);
      buffer_UnsafeCursor0.resizeBuffer(0L);
      ByteString byteString0 = new ByteString((byte[]) null);
      int int0 = 84;
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null, 84, 84);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(9955L);
      Buffer buffer1 = pipe0.buffer;
      HashingSource.sha1(buffer0);
      Buffer buffer2 = buffer1.writeDecimalLong(99999999999988L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer2.indexOf(byteString0, 99999999999988L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.hash();
      buffer0.writeDecimalLong(100000000000000L);
      // Undeclared exception!
      try { 
        buffer0.readUtf8(100000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=15 offset=0 byteCount=100000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Pipe pipe1 = new Pipe(1000000L);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = buffer1.writeLongLe(0L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSink0.buffer.readLong();
      buffer2.sha1();
      HashingSink hashingSink0 = HashingSink.sha512(realBufferedSink0);
      hashingSink0.hash();
      ByteString byteString0 = hashingSink0.hash();
      ByteString[] byteStringArray0 = new ByteString[2];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink1.buffer.inputStream();
      realBufferedSink1.outputStream();
      realBufferedSink1.writeDecimalLong(100000000000000006L);
      realBufferedSink0.buffer.selectPrefix(options0);
      Buffer buffer3 = realBufferedSink0.buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer3.writeString("aAB0", charset0);
      Object object0 = new Object();
      buffer0.equals(object0);
      buffer3.write(realBufferedSource0.buffer, (long) 0);
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Number too large: 10000000000000000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      boolean boolean0 = pipe0.sinkClosed;
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(3L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.next();
      buffer0.readDecimalLong();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeString((String) null, (int) (byte)58, (-2147483625), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Pipe pipe0 = new Pipe(238L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong((-238L));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      hashingSink0.hash();
      buffer0.readInt();
      Buffer buffer2 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte(106);
      Buffer buffer3 = new Buffer();
      Buffer buffer4 = pipe0.buffer;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer5 = buffer_UnsafeCursor1.buffer;
      OutputStream outputStream0 = bufferedSink0.outputStream();
      Buffer buffer6 = buffer5.copyTo(outputStream0);
      buffer6.completeSegmentByteCount();
      InputStream inputStream0 = buffer_UnsafeCursor0.buffer.inputStream();
      buffer4.writeUtf8("beginIndex < 0: ");
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer3);
      Buffer buffer7 = realBufferedSink0.buffer;
      Segment segment0 = buffer6.head;
      Buffer buffer8 = pipe0.buffer;
      buffer8.readByteString();
      buffer2.readFrom(inputStream0);
      realBufferedSink1.buffer.completeSegmentByteCount();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Pipe pipe0 = new Pipe(44L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(44L);
      buffer1.snapshot();
      buffer0.readHexadecimalUnsignedLong();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(4L);
      boolean boolean0 = pipe0.sinkClosed;
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      Buffer buffer1 = buffer0.writeDecimalLong(3L);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byteStringArray0[3] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      buffer1.selectPrefix(options0);
      ByteString byteString2 = new ByteString(byteArray0);
      buffer0.indexOfElement(byteString0);
      Buffer buffer2 = pipe0.buffer;
      Buffer buffer3 = buffer0.writeDecimalLong((-1L));
      Buffer buffer4 = new Buffer();
      buffer3.segmentSizes();
      buffer2.readDecimalLong();
      // Undeclared exception!
      try { 
        buffer2.readAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Pipe pipe0 = new Pipe(999986L);
      Pipe pipe1 = new Pipe(999986L);
      Buffer buffer0 = pipe1.buffer;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Buffer buffer1 = buffer0.writeInt((-857));
      ByteString byteString0 = buffer1.sha1();
      Buffer buffer2 = new Buffer();
      buffer1.equals(buffer2);
      Buffer buffer3 = pipe1.buffer;
      buffer0.readShortLe();
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString0;
      // Undeclared exception!
      try { 
        buffer1.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.buffer();
      // Undeclared exception!
      try { 
        buffer1.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("5!");
      byte byte0 = (byte)58;
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5!");
      byteArray0[0] = (byte)58;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer0.size = 1000000000000L;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeLong((byte)58);
      buffer0.readFully(byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink.hmacSha1(buffer1, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.sha512();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      buffer0.writeUtf8CodePoint(128);
      Buffer buffer3 = realBufferedSource1.buffer.writeDecimalLong(100000000000000L);
      buffer3.segmentSizes();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      buffer_UnsafeCursor0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor1);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readByteArray();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount > Integer.MAX_VALUE: 1000000000003
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort((-682));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "not attached to a buffer");
      Buffer buffer2 = buffer1.writeInt((-682));
      ByteString byteString0 = buffer1.sha1();
      byteString0.toString();
      buffer2.indexOf(byteString0, 11L);
      Buffer buffer3 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = null;
      buffer2.hashCode();
      realBufferedSink0.buffer.indexOf(byteString0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer3);
      realBufferedSource0.buffer.outputStream();
      realBufferedSink1.buffer.readUtf8Line();
      realBufferedSink1.writeDecimalLong(100000000L);
      buffer1.readAll(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.snapshot((-682));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-682
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Pipe pipe0 = new Pipe(999999L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe1 = new Pipe(999999L);
      SegmentPool.byteCount = 999999L;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Buffer buffer1 = realBufferedSink1.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink1.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(39L);
      realBufferedSink1.buffer();
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSink0.buffer);
      hashingSource0.hash();
      realBufferedSink0.buffer.segmentSizes();
      buffer_UnsafeCursor0.resizeBuffer(0L);
      buffer0.snapshot();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer1.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Pipe pipe0 = new Pipe(999999L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe1 = new Pipe(999999L);
      SegmentPool.byteCount = 999999L;
      realBufferedSink0.writeShortLe(18);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      realBufferedSink0.writeIntLe((-1));
      buffer_UnsafeCursor0.resizeBuffer(39L);
      Buffer buffer1 = realBufferedSink0.buffer();
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSink0.buffer);
      hashingSource0.hash();
      realBufferedSink0.buffer.segmentSizes();
      buffer_UnsafeCursor0.resizeBuffer(6L);
      buffer0.snapshot();
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x12
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000009L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeInt((-1840700268));
      Pipe pipe1 = new Pipe(139243L);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink1.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink1.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(180203L);
      realBufferedSink0.buffer();
      realBufferedSink1.buffer.segmentSizes();
      buffer_UnsafeCursor0.resizeBuffer(180203L);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      Pipe pipe2 = new Pipe(180203L);
      Buffer buffer1 = pipe2.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer_UnsafeCursor0.buffer.readUnsafe();
      realBufferedSource0.buffer();
      buffer_UnsafeCursor2.buffer.readByteArray();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor2.seek(4L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=4 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(4L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.write(buffer_UnsafeCursor1.data);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(1000009L);
      Pipe pipe1 = new Pipe(1000009L);
      Buffer buffer0 = pipe1.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Pipe pipe2 = new Pipe(1000009L);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      realBufferedSink1.writeShortLe(54);
      realBufferedSink1.buffer.equals(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      buffer3.writeByte(43);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink1.buffer);
      Buffer buffer4 = realBufferedSource0.buffer;
      HashingSink hashingSink0 = HashingSink.sha256(realBufferedSink1);
      hashingSink0.hash();
      // Undeclared exception!
      try { 
        buffer1.read((Buffer) null, 1000009L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(9919L);
      // Undeclared exception!
      try { 
        buffer0.write((Buffer) null, 224L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(4L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.next();
      long long0 = buffer_UnsafeCursor0.offset;
      ByteString byteString0 = buffer0.snapshot();
      HashingSource.hmacSha256(buffer_UnsafeCursor0.buffer, byteString0);
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor1.buffer.readByteArray();
      buffer_UnsafeCursor1.buffer.writeUtf8("H-siX/SrFU Xkpwso", 1, 1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort((-269));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/5!");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)58;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)95;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byte[] byteArray1 = new byte[18];
      byteArray1[0] = (byte)58;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeLong((byte)58);
      buffer1.writeByte((byte)58);
      buffer0.indexOf((byte)58, 10L, (long) (byte)58);
      // Undeclared exception!
      try { 
        buffer0.readByteString((long) (byte)58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=11 offset=0 byteCount=58
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      boolean boolean0 = pipe0.sinkClosed;
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(3L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.next();
      buffer0.readDecimalLong();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Dxq-?Vo40xTU6");
      buffer0.writeInt((byte)67);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = buffer0.sha1();
      byteString0.toAsciiLowercase();
      buffer0.indexOf(byteString0, (long) (byte)67);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dxq-?Vo40xTU6");
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("!{7/$ 5f,I5");
      Buffer buffer1 = (Buffer)buffer0.write((Source) ((RealBufferedSink) bufferedSink0).buffer, 6L);
      buffer1.writeShortLe((byte)67);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Charset.forName("charset == null");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // charset == null
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Pipe pipe0 = new Pipe(287L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000000L);
      buffer1.readInt();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "D&jP$hD};;S88=Q";
      buffer1.writeUtf8("D&jP$hD};;S88=Q");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Pipe pipe1 = new Pipe(1000000000000L);
      Buffer buffer2 = pipe1.buffer;
      buffer1.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Pipe pipe0 = new Pipe(1730L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(8192L);
      Buffer buffer2 = realBufferedSink0.buffer();
      realBufferedSink1.writeHexadecimalUnsignedLong(1730L);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1L));
      realBufferedSink1.buffer.writeLongLe(3L);
      buffer_UnsafeCursor0.buffer.hashCode();
      HashingSource.md5(buffer0);
      Buffer buffer4 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer2);
      Sink sink0 = hashingSink0.delegate();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(sink0);
      Buffer buffer5 = realBufferedSink2.buffer();
      buffer5.indexOf((byte) (-94));
      buffer3.writeLong(195L);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(4294967309L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeByte(2);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      buffer1.readUtf8((long) (byte)0);
      Buffer buffer2 = buffer0.clone();
      byteString0.compareTo(byteString1);
      buffer2.request(2);
      byteString0.toAsciiUppercase();
      buffer1.snapshot();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer3 = pipe0.buffer;
      buffer2.write(byteString0);
      Charset.defaultCharset();
      buffer2.sha512();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      buffer1.size();
      Buffer buffer4 = realBufferedSink1.buffer;
      realBufferedSink0.buffer.writeInt((byte)0);
      realBufferedSink0.buffer.sha1();
      buffer3.buffer();
      try { 
        buffer3.skip(139264L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(4L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.next();
      buffer0.snapshot();
      buffer_UnsafeCursor1.buffer.writeUtf8CodePoint(36);
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor1.buffer.readByteArray();
      buffer_UnsafeCursor1.buffer.writeUtf8("H-siX/SrFU Xkpwso", 1, 1);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byte byte0 = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-13);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hw]XkRe{1[.XF");
      Buffer buffer1 = buffer0.writeDecimalLong(100000000018L);
      ByteString byteString0 = buffer0.snapshot();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer1.readHexadecimalUnsignedLong();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.flush();
      buffer0.indexOfElement(byteString0, 100000000018L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("9E;@N$!j[f+", charset0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = buffer1.writeDecimalLong((byte) (-34));
      Buffer buffer3 = buffer0.writeDecimalLong((-1L));
      buffer3.snapshot();
      buffer2.readHexadecimalUnsignedLong();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 21);
      // Undeclared exception!
      try { 
        buffer2.readFrom((InputStream) pushbackInputStream0, (-2613L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2613
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Pipe pipe0 = new Pipe(2117L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.completeSegmentByteCount();
      Buffer buffer1 = buffer0.writeShort((-683));
      Buffer buffer2 = buffer1.writeIntLe((-1123));
      Integer integer0 = new Integer((-1123));
      buffer0.readShortLe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong((-683));
      GzipSink gzipSink0 = new GzipSink(buffer0);
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer1.writeUtf8("2giKf.k@ym*m.d&Z<{");
      pipe0.sinkClosed = false;
      MockFile mockFile0 = new MockFile("2giKf.k@ym*m.d&Z<{");
      realBufferedSink0.buffer.completeSegmentByteCount();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("2giKf.k@ym*m.d&Z<{");
      buffer2.writeUtf8CodePoint(65536);
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.skip(65536);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      buffer0.hmacSha256(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.next();
      buffer_UnsafeCursor1.buffer.writeUtf8CodePoint(1);
      buffer_UnsafeCursor1.next();
      buffer_UnsafeCursor0.buffer.readByteArray();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.write(buffer_UnsafeCursor0.data);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink1.buffer.writeShortLe((-492));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      realBufferedSink1.buffer.inputStream();
      // Undeclared exception!
      try { 
        buffer1.write((Source) buffer_UnsafeCursor1.buffer, (long) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-104);
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      byteString1.lastIndexOf(byteArray0);
      buffer0.indexOf(byteString1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Pipe pipe1 = new Pipe(4L);
      realBufferedSink0.buffer();
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong(2654L);
      HashingSink hashingSink0 = HashingSink.sha512(bufferedSink0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("source == this");
      Buffer buffer1 = pipe0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.readAndWriteUnsafe();
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString1;
      ByteString byteString2 = hashingSink0.hash();
      byteStringArray0[1] = byteString2;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString1;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      ((RealBufferedSink) bufferedSink0).buffer.selectPrefix(options0);
      long long0 = 1000000000000L;
      realBufferedSink0.writeHexadecimalUnsignedLong(1000000000000L);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer1.require((-1L));
      // Undeclared exception!
      try { 
        buffer1.writableSegment((byte) (-104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.indexOf(byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Pipe pipe1 = new Pipe(4L);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = (Buffer)realBufferedSink0.buffer.write((Source) buffer1, (long) (byte) (-79));
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeLong(2654L);
      HashingSink.sha512(realBufferedSink1);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer2, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      byteString1.toString();
      ByteString byteString2 = hashingSource0.hash();
      hashingSource0.hash();
      buffer2.indexOf(byteString0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer3 = realBufferedSink1.buffer;
      realBufferedSink2.buffer.rangeEquals(238L, byteString2);
      buffer3.readUtf8LineStrict(887L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readAndWriteUnsafe();
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer4.write((Source) buffer2, 929L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Dxq-?Vo40xTU6");
      buffer0.writeInt((byte)67);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = buffer0.sha1();
      buffer0.indexOf(byteString0, (long) (byte)67);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("xd|h}");
      buffer0.clone();
      Buffer buffer1 = realBufferedSink0.buffer.writeShortLe((byte)67);
      Buffer buffer2 = (Buffer)buffer0.write((Source) ((RealBufferedSink) bufferedSink0).buffer, 6L);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)bufferedSink0.emitCompleteSegments();
      HashingSource hashingSource0 = HashingSource.hmacSha1(realBufferedSink1.buffer, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      buffer2.indexOf(byteString1);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      Buffer buffer3 = realBufferedSink1.buffer;
      hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.hmacSha512(bufferedSink0, byteString0);
      ByteString byteString2 = hashingSink0.hash();
      buffer2.rangeEquals(3395L, byteString2);
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha1();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong(2654L);
      ((RealBufferedSink) bufferedSink0).buffer.readUtf8CodePoint();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Buffer buffer1 = bufferedSink0.buffer();
      long long0 = 6L;
      buffer1.indexOf(byteString0, 6L);
      ((RealBufferedSink) bufferedSink0).buffer.readShortLe();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      bufferedSink0.writeHexadecimalUnsignedLong(0);
      buffer0.readAndWriteUnsafe();
      Buffer buffer2 = new Buffer();
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(4L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      buffer1.writeUtf8CodePoint((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer_UnsafeCursor0.next();
      Buffer buffer2 = buffer1.emitCompleteSegments();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Unexpected hex string: ");
      buffer0.md5();
      buffer0.indexOf((byte) (-53), (long) 0);
      Buffer buffer3 = buffer_UnsafeCursor1.buffer;
      ByteString byteString0 = buffer0.sha1();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer4 = buffer_UnsafeCursor0.buffer.writeUtf8("NMCy,o'BZu:pcCPFcc?");
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer3, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      buffer_UnsafeCursor1.buffer.indexOf(byteString1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer5 = realBufferedSink0.buffer;
      ByteString byteString2 = hashingSource0.hash();
      buffer_UnsafeCursor0.buffer.rangeEquals((long) 0, byteString2);
      HashingSink hashingSink0 = HashingSink.hmacSha1(buffer2, byteString2);
      ByteString byteString3 = hashingSink0.hash();
      HashingSink.hmacSha1(buffer0, byteString3);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer0);
      Buffer buffer6 = realBufferedSink1.buffer;
      buffer4.outputStream();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(2);
      Buffer buffer2 = buffer0.clone();
      Buffer buffer3 = buffer2.clone();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString0.utf8 = null;
      buffer0.indexOfElement(byteString0);
      byteString0.base64Url();
      byteString0.lastIndexOf(byteArray0, (-1847));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLongLe(100000000000000000L);
      GzipSink gzipSink0 = new GzipSink(bufferedSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer4 = realBufferedSource0.buffer;
      buffer3.hmacSha512(byteString0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(gzipSink0);
      realBufferedSink1.emitCompleteSegments();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(gzipSink0);
      buffer3.completeSegmentByteCount();
      Buffer buffer5 = new Buffer();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }
}
