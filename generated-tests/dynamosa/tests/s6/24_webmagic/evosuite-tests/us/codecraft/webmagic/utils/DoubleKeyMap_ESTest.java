/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 15:49:32 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Map<Integer, Integer>> hashMap0 = new HashMap<Integer, Map<Integer, Integer>>();
      HashMap<String, Map<Integer, Map<Integer, Integer>>> hashMap1 = new HashMap<String, Map<Integer, Map<Integer, Integer>>>();
      Integer integer0 = new Integer(0);
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, hashMap2);
      hashMap1.put("lp:", hashMap0);
      DoubleKeyMap<String, Integer, Map<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Map<Integer, Integer>>(hashMap1);
      doubleKeyMap0.remove("lp:", integer0);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Map<Integer, Map<Integer, Integer>>> hashMap0 = new HashMap<String, Map<Integer, Map<Integer, Integer>>>();
      HashMap<Integer, Map<Integer, Integer>> hashMap1 = new HashMap<Integer, Map<Integer, Integer>>();
      hashMap0.put("lp:", hashMap1);
      DoubleKeyMap<String, Integer, Map<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Map<Integer, Integer>>(hashMap0);
      Map<Integer, Map<Integer, Integer>> map0 = doubleKeyMap0.remove("lp:");
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(class0);
      Integer integer0 = new Integer(1368);
      doubleKeyMap0.put(integer0, (Object) class0, "us.codecraft.webmagic.utils.DoubleKeyMap");
      Map<Object, String> map0 = doubleKeyMap0.remove(integer0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(class0);
      Map<String, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(map0, class0);
      Object object0 = new Object();
      Object object1 = doubleKeyMap1.remove((String) null, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>();
      Map<Object, Map<String, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(map0);
      Map<HashMap<Object, String>, Map<Integer, Object>> map1 = doubleKeyMap1.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Object, String>, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<HashMap<Object, String>, Integer, Object>(map1, class0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Integer integer0 = new Integer((-1773));
      Object object0 = doubleKeyMap2.get(hashMap0, integer0);
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap3 = new DoubleKeyMap<String, Integer, Integer>(class0);
      Map<String, Map<Object, Object>> map2 = doubleKeyMap3.newMap();
      DoubleKeyMap<String, Object, Object> doubleKeyMap4 = new DoubleKeyMap<String, Object, Object>(map2, class0);
      Object object1 = doubleKeyMap4.remove((String) null, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<Integer, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Integer, Integer>, Integer>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>();
      Integer integer0 = new Integer(1);
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<String, String, Map<String, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<String, String>>();
      Map<String, Map<String, String>> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(class0);
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(hashMap0, class0);
      Object object0 = new Object();
      Object object1 = doubleKeyMap1.put((Object) doubleKeyMap0, "", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      Object object0 = doubleKeyMap0.put((String) null, (String) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Map<Object, Object>> hashMap0 = new HashMap<Integer, Map<Object, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(hashMap0, class0);
      Integer integer0 = new Integer(378);
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put(integer0, object0, (Object) integer0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Map<String, Object>, Integer> hashMap0 = new HashMap<Map<String, Object>, Integer>();
      DoubleKeyMap<Object, Map<String, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, Object>, Integer>();
      Integer integer0 = doubleKeyMap0.get((Object) hashMap0, (Map<String, Object>) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>(class0);
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      String string0 = doubleKeyMap1.get((Object) class0, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      Object object0 = new Object();
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      Object object1 = doubleKeyMap0.get(object0, "");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Object, Object>, String>();
      Map<HashMap<Object, Object>, String> map0 = doubleKeyMap0.get((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(hashMap0);
      Map<String, Object> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      Map<Object, Map<Object, HashMap<Object, Integer>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, HashMap<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, HashMap<Object, Integer>>(map0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) map0, (Object) map0, (HashMap<Object, Integer>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Map<String, Map<Map<String, Object>, String>>> hashMap0 = new HashMap<String, Map<String, Map<Map<String, Object>, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Map<Map<String, Object>, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<Map<String, Object>, String>>(hashMap0, class0);
      HashMap<Map<String, Object>, String> hashMap1 = new HashMap<Map<String, Object>, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put("us.codecraft.webmagic.utils.DoubleKeyMap", "'", (Map<Map<String, Object>, String>) hashMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Object>, String, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, Object>((Map<HashMap<String, Object>, Map<String, Object>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<String, Map<Map<String, Object>, Object>, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Map<Map<String, Object>, Object>, Object>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Object, Map<String, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, Object>, Integer>();
      Object object0 = new Object();
      Map<Map<String, Object>, Integer> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      Map<String, Object> map0 = doubleKeyMap0.newMap();
      Integer integer0 = new Integer(6);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      DoubleKeyMap<String, Map<String, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<String, Map<String, Object>, Object>();
      doubleKeyMap1.put("", map0, (Object) integer0);
      Object object0 = doubleKeyMap1.put("", map0, (Object) hashMap0);
      assertEquals(6, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<Integer, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Integer, Integer>, Integer>();
      Map<Map<String, Object>, Object> map0 = doubleKeyMap0.newMap();
      HashMap<String, Map<Map<Map<String, Object>, Object>, Object>> hashMap0 = new HashMap<String, Map<Map<Map<String, Object>, Object>, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Map<Map<String, Object>, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<String, Map<Map<String, Object>, Object>, Object>(hashMap0, class0);
      Object object0 = doubleKeyMap1.get((String) null, map0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<Map<String, Object>, Integer, Map<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Map<String, Object>, Integer, Map<Integer, String>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>();
      Map<String, Object> map0 = doubleKeyMap1.newMap();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = new Integer(1821);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      doubleKeyMap0.put((Map<String, Object>) hashMap0, integer0, (Map<Integer, String>) hashMap1);
      Map<Integer, String> map1 = doubleKeyMap0.get(map0, integer0);
      assertEquals(0, map1.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Map<String, Object>>, Object, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Map<String, Object>>, Object, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Map<Integer, Map<Integer, Integer>>> hashMap0 = new HashMap<String, Map<Integer, Map<Integer, Integer>>>();
      DoubleKeyMap<String, Integer, Map<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Map<Integer, Integer>>(hashMap0);
      HashMap<Integer, Map<Integer, Integer>> hashMap1 = new HashMap<Integer, Map<Integer, Integer>>();
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      hashMap1.put((Integer) null, hashMap2);
      hashMap0.put("us.codecraft.webmagic.utils.MultiKeyMapBase", hashMap1);
      Integer integer0 = new Integer(1382);
      doubleKeyMap0.remove("us.codecraft.webmagic.utils.MultiKeyMapBase", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }
}
