/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 04:02:57 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStreamWriter;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.selector.RegexSelector;
import us.codecraft.webmagic.thread.CountableThreadPool;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#5LBQJ+i9`l#PK");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-399));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      boolean boolean0 = true;
      Spider spider2 = spider1.setExitWhenComplete(true);
      int int0 = (-1211);
      // Undeclared exception!
      try { 
        spider2.thread((-1211));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("WebMagic");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("WebMagic");
      Spider spider2 = spider1.setSpawnUrl(false);
      Spider spider3 = spider2.addPipeline((Pipeline) null);
      spider2.setEmptySleepTime(3696);
      Spider spider4 = spider3.setExitWhenComplete(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider5 = spider4.startRequest(linkedList0);
      spider5.getScheduler();
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "y}[nB\"@~[7^7qtHNF}8";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("y}[nB\"@~[7^7qtHNF}8");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      Spider spider2 = spider1.clearPipeline();
      CollectorPipeline collectorPipeline0 = spider2.getCollectorPipeline();
      spider2.pipeline(collectorPipeline0);
      RegexSelector regexSelector0 = null;
      try {
        regexSelector0 = new RegexSelector("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.selector.RegexSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("2#*Bm8eGT");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("");
      Spider spider1 = spider0.addPipeline(filePipeline0);
      Request[] requestArray0 = new Request[4];
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("/=R(zX");
      fileCacheQueueScheduler0.poll(spider0);
      requestArray0[0] = null;
      fileCacheQueueScheduler0.poll(spider1);
      requestArray0[1] = null;
      Request request0 = new Request();
      requestArray0[2] = request0;
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      requestArray0[3] = null;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#5TLBQJ+i9`l#PK");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      Page page0 = Page.fail();
      assertFalse(page0.isDownloadSuccess());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Init");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5906);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) forkJoinPool0, (-2125));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/data/webmagic");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("/data/webmagic", "");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider4 = spider3.startRequest(list0);
      CollectorPipeline collectorPipeline0 = spider4.getCollectorPipeline();
      Spider spider5 = spider4.addPipeline(collectorPipeline0);
      spider5.initComponent();
      spider4.start();
      // Undeclared exception!
      try { 
        spider2.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/data/webmagic");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("/data/webmagic", "");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider4 = spider3.startRequest(list0);
      CollectorPipeline collectorPipeline0 = spider4.getCollectorPipeline();
      Spider spider5 = spider4.addPipeline(collectorPipeline0);
      spider5.initComponent();
      spider4.start();
      // Undeclared exception!
      try { 
        spider3.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", userAgent='");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("K@z=aA2tT;Z|\"i5W,");
      Spider spider0 = new Spider(simplePageProcessor0);
      Json json0 = new Json((String) null);
      json0.getFirstSourceText();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      spider1.isSpawnUrl();
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "K@z=aA2tT;Z|\"i5W,";
      stringArray0[2] = "K@z=aA2tT;Z|\"i5W,";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "K@z=aA2tT;Z|\"i5W,";
      stringArray0[6] = null;
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("fPyqH");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      String string0 = spider0.getUUID();
      assertNull(string0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.Init;
      spider_Status0.getValue();
      spider_Status0.getValue();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      Spider spider2 = spider1.startRequest((List<Request>) null);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider3 = spider2.setPipelines(linkedList0);
      Spider spider4 = spider3.setUUID(" error");
      Spider spider5 = spider4.setSpawnUrl(true);
      Page page0 = new Page();
      Page page1 = page0.setRawText(" error");
      // Undeclared exception!
      try { 
        spider5.extractAndAddRequests(page1, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.pipeline(consolePipeline0);
      spider1.thread(1300);
      String string0 = "8w]LRn:,m8dH2jiF";
      Json json0 = new Json("8w]LRn:,m8dH2jiF");
      Class<SpiderListener> class0 = SpiderListener.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Spider.Status.fromValue(11);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(11, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      ThreadFactory threadFactory1 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(0, 11, 0, timeUnit0, blockingQueue0, threadFactory1, threadPoolExecutor_DiscardOldestPolicy0);
      CountableThreadPool countableThreadPool0 = new CountableThreadPool(11, threadPoolExecutor0);
      spider0.threadPool = countableThreadPool0;
      Spider spider1 = spider0.clearPipeline();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5hA");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      Scheduler scheduler0 = null;
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider3 = spider1.downloader(phantomJSDownloader0);
      Spider spider4 = spider1.setUUID("5hA");
      Spider spider5 = spider4.setSpawnUrl(true);
      spider5.setSpiderListeners((List<SpiderListener>) null);
      Page page0 = Page.fail();
      page0.getTargetRequests();
      spider0.startRequest((List<Request>) null);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider6 = spider3.addPipeline(collectorPipeline0);
      spider2.initComponent();
      spider6.start();
      // Undeclared exception!
      try { 
        spider5.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("I9`H");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("I9`H");
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("I9`H");
      spider1.setScheduler(fileCacheQueueScheduler0);
      RegexSelector regexSelector0 = null;
      try {
        regexSelector0 = new RegexSelector("I9`H", 24);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.selector.RegexSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("zl");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[2];
      spider0.getSpiderListeners();
      spider0.setSpiderListeners((List<SpiderListener>) null);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("A0X%:g,YFXM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#5TLBJ?+i9`l#PK");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("#5TLBJ?+i9`l#PK", "");
      Spider spider1 = spider0.setUUID("");
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      spider1.downloader(phantomJSDownloader0);
      spider1.getAll((Collection<String>) linkedBlockingQueue0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("B~~tr^:gW");
      // Undeclared exception!
      try { 
        spider1.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" I#TiJdT:H");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" /Kf", " /Kf");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.clearPipeline();
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider4 = spider3.startRequest(list0);
      CollectorPipeline collectorPipeline0 = spider2.getCollectorPipeline();
      Spider spider5 = spider0.addPipeline(collectorPipeline0);
      spider3.initComponent();
      spider4.start();
      spider5.initComponent();
      spider5.extractAndAddRequests(page0, false);
      assertTrue(spider5.isExitWhenComplete());
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      // Undeclared exception!
      try { 
        spider4.setScheduler(queueScheduler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getUUID();
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#5LBQJ+i9`l#PK");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string0 = spider0.getUUID();
      assertNull(string0);
      
      spider0.stop();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#5TLBQJ+i9`l#PK");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#5TLBQJ+i9`l#PK");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string0 = spider0.getUUID();
      assertNull(string0);
      
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(318, threadFactory0);
      scheduledThreadPoolExecutor0.getActiveCount();
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 3066);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("e5Za?6Js/");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("e5Za?6Js/");
      spider1.getSite();
      long long0 = spider1.getPageCount();
      assertEquals(0L, long0);
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&zl");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      boolean boolean0 = false;
      Spider spider3 = spider2.setExitWhenComplete(false);
      Spider spider4 = spider3.setScheduler((Scheduler) null);
      spider1.getThreadAlive();
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      spider3.setSpiderListeners(linkedList1);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider5 = spider4.startRequest(list0);
      Spider spider6 = spider5.scheduler((Scheduler) null);
      CollectorPipeline collectorPipeline0 = spider6.getCollectorPipeline();
      spider3.addPipeline(collectorPipeline0);
      // Undeclared exception!
      try { 
        spider4.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#5TLBQJ+i9`l#PK");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string0 = spider0.getUUID();
      assertNull(string0);
      
      spider0.getStatus();
      spider0.getCollectorPipeline();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "5hA";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5hA");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      spider1.clearPipeline();
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      spider2.clearPipeline();
      String string1 = "";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider3 = spider1.downloader(phantomJSDownloader0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      spider1.startUrls(list0);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider3.getAll((Collection<String>) linkedBlockingQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.downloader.PhantomJSDownloader";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.downloader.PhantomJSDownloader");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.isSpawnUrl();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Request request0 = new Request();
      Request request1 = request0.addHeader("us.codecraft.webmagic.downloader.PhantomJSDownloader", "G]o[y*i`}zo^kf2` L");
      linkedList0.add(request0);
      LinkedBlockingQueue<OutputStreamWriter> linkedBlockingQueue0 = new LinkedBlockingQueue<OutputStreamWriter>();
      linkedList0.containsAll(linkedBlockingQueue0);
      request1.setMethod("HTTP request failed");
      Request request2 = request1.setMethod("G]o[y*i`}zo^kf2` L");
      linkedList0.add(request2);
      spider0.startRequest(linkedList0);
      // Undeclared exception!
      try { 
        spider0.sleep((-1231));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("%");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("%", "%UzAA}^$Yh^p");
      spider0.downloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      ForkJoinPool.commonPool();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "%";
      stringArray0[1] = "";
      stringArray0[2] = "%UzAA}^$Yh^p";
      stringArray0[3] = "";
      stringArray0[4] = "%UzAA}^$Yh^p";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#5TLBQJ+i9`l#PK");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m|!oVH");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      spider1.getAll((Collection<String>) linkedBlockingQueue0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("#5TLBQJ+i9`l#PK");
      ForkJoinPool.commonPool();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[y9_^gZ*WBP vEU");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("[y9_^gZ*WBP vEU", "[y9_^gZ*WBP vEU");
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(40, threadPoolExecutor_DiscardOldestPolicy0);
      spider1.setExecutorService(scheduledThreadPoolExecutor0);
      spider0.getAll((Collection<String>) linkedBlockingQueue0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#5TLBQJ+i9`l#PK");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("#5TLBQJ+i9`l#PK", "#5TLBQJ+i9`l#PK");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      spider0.setUUID("#5TLBQJ+i9`l#PK");
      LinkedBlockingQueue<String> linkedBlockingQueue1 = new LinkedBlockingQueue<String>();
      spider0.getAll((Collection<String>) linkedBlockingQueue1);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("#5TLBQJ+i9`l#PK");
      spider1.getThreadAlive();
      spider1.stop();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Init");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getCollectorPipeline();
      spider0.isExitWhenComplete();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("9n5dJkJ)Q");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("9n5dJkJ)Q", "lN{+");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      spider1.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.clearPipeline();
      spider2.checkIfRunning();
      Spider spider3 = spider1.downloader(phantomJSDownloader0);
      spider3.getAll((Collection<String>) linkedBlockingQueue0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9n5dJkJ)Q");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("$j");
      spider1.run();
      ForkJoinPool.commonPool();
      String[] stringArray0 = new String[0];
      spider0.test(stringArray0);
      List<SpiderListener> list0 = spider3.getSpiderListeners();
      assertEquals(0L, spider3.getPageCount());
      assertNull(list0);
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("phantomjs");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = spider0.getUUID();
      assertNull(string0);
      
      spider0.getStartTime();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H'gSh]D}0");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request("H'gSh]D}0");
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(20);
      Spider spider1 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("H'gSh]D}0", (String) null);
      spider1.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      spider1.getAll((Collection<String>) set0);
      String string0 = spider1.getUUID();
      assertNull(string0);
      
      spider0.close();
      spider1.getAll((Collection<String>) set0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }
}
