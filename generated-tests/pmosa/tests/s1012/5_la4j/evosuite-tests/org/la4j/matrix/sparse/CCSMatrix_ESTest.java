/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 23:30:35 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cCSMatrix0.toColumnVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal((byte)46, (-1837.9218458642838));
      cCSMatrix0.sum();
      cCSMatrix0.maxInColumn(9);
      cCSMatrix0.nonZeroAt((-1477), 9);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-1837.9218458642838);
      doubleArray2[1] = (-365.7058436);
      doubleArray2[2] = (-356.766374602);
      doubleArray2[3] = (-365.7058436);
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 1411.11455;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = (-1837.9218458642838);
      doubleArray0[1] = doubleArray2;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      assertEquals((-1837.9218458642838), cCSMatrix0.min(), 0.01);
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix((byte)46, 647, (byte)46);
      double double0 = cCSMatrix0.minInColumn(5);
      assertEquals(0.0, double0, 0.01);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(647, 5, matrixFunction0);
      assertEquals(0, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1411.11455;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 645.3605414;
      doubleArray1[3] = 100.0;
      doubleArray1[4] = (-1691.82);
      doubleArray1[5] = 1.0;
      doubleArray1[6] = (-356.766374602);
      doubleArray1[7] = (-365.7058436);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 100.0;
      doubleArray2[1] = (-1877.99051);
      doubleArray2[2] = 100.0;
      doubleArray2[3] = (-365.7058436);
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 3832;
      doubleArray2[1] = (double) 3832;
      doubleArray2[2] = (double) 3832;
      doubleArray2[3] = (double) 3832;
      doubleArray2[4] = (double) 3832;
      doubleArray2[5] = (double) 3832;
      doubleArray2[6] = (double) 3832;
      doubleArray2[7] = (double) 3832;
      doubleArray0[1] = doubleArray2;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.getOrElse(3832, (-2502), 3832.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3832' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        CCSMatrix.random(0, (-1), (double) (-1), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll(Double.NEGATIVE_INFINITY);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll(Double.NEGATIVE_INFINITY);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(0, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      cCSMatrix0.nonZeroIteratorOfColumn(0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.random((-3389), 156, 645.3605414, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 5086;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 5086;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) 5086;
      int[] intArray0 = new int[1];
      intArray0[0] = 5086;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 5086, 0, doubleArray0, intArray0, intArray0);
      cCSMatrix0.iteratorOfRow(2381);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.columnMajorIterator();
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray((-4285), 1231, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -4285x1231
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int[] intArray0 = new int[2];
      intArray0[0] = 2723;
      intArray0[1] = 4;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2723' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MockRandom mockRandom0 = new MockRandom(0L);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(1, 4, 4.9E-324, (Random) mockRandom0);
      assertEquals(0.3, columnMajorSparseMatrix0.max(), 0.01);
      
      double double0 = cCSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      assertEquals(0, cCSMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Matrix.diagonal(0, 0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      double double0 = cCSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(0, 0, 0);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(0, 0);
      Matrix.block(matrix0, matrix0, matrix0, matrix0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      Matrix matrix1 = cCSMatrix0.blankOfShape(0, 0);
      double double0 = cCSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      
      cCSMatrix0.getRow(2562);
      cCSMatrix0.columnMajorIterator();
      assertTrue(cCSMatrix0.equals((Object)matrix1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      cCSMatrix0.toRowVector();
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3133, 647, 3133);
      cCSMatrix0.copyOfShape(3133, 647);
      cCSMatrix0.maxInColumn(1223);
      int int0 = 46;
      cCSMatrix0.getRow(int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 3754;
      int int1 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3754, 0);
      int int2 = 0;
      cCSMatrix0.copyOfColumns(0);
      int int3 = (-1279);
      double[] doubleArray0 = new double[2];
      cCSMatrix0.isColumnMajor();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateColumn(0, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 4;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(4, 4);
      cCSMatrix0.max();
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.max();
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn(3154);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3154
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      Matrix matrix0 = Matrix.diagonal(0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      matrix0.toCSV(numberFormat0);
      matrix0.toColumnVector();
      matrix0.updateColumn(13, vectorFunction0);
      Matrix.constant(13, 1592, (-417.34035));
      cCSMatrix0.insert(matrix0);
      matrix0.divide(0.0);
      cCSMatrix0.add(matrix0);
      cCSMatrix0.getRow(0);
      cCSMatrix0.nonZeroIteratorOfRow(0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix.identity(0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-393.969);
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 0, doubleArray0);
      assertEquals(0, cCSMatrix0.rows());
      
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray1);
      assertEquals((-393.969), cCSMatrix1.min(), 0.01);
      assertEquals(0.4, cCSMatrix1.density(), 0.01);
      assertEquals(32.0, cCSMatrix1.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(4, 4);
      cCSMatrix0.setAll(Double.NEGATIVE_INFINITY);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(4, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 3;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3, 3);
      cCSMatrix0.spliterator();
      int int1 = 4;
      cCSMatrix0.getRow(4);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byte byte0 = (byte)33;
      byteArray0[1] = (byte)33;
      byte byte1 = (byte)5;
      byteArray0[2] = (byte)5;
      byte byte2 = (byte)29;
      byteArray0[3] = (byte)29;
      byte byte3 = (byte)1;
      byteArray0[4] = (byte)1;
      byte byte4 = (byte)115;
      byteArray0[5] = (byte)115;
      byte byte5 = (byte)34;
      byteArray0[6] = (byte)34;
      byte byte6 = (byte)41;
      byteArray0[7] = (byte)41;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.max();
      double double0 = new Double(0.0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(4, 0.0);
      cCSMatrix1.getRow(4);
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3163, (-1.0));
      int[] intArray0 = new int[5];
      intArray0[0] = 2120;
      intArray0[1] = 2120;
      intArray0[2] = (-2509);
      intArray0[3] = 2120;
      intArray0[4] = 3163;
      int[] intArray1 = new int[9];
      intArray1[0] = 4;
      intArray1[1] = 2120;
      intArray1[2] = 3163;
      intArray1[3] = 3163;
      intArray1[4] = (-2509);
      intArray1[5] = 2120;
      intArray1[6] = (-2509);
      intArray1[7] = (-2509);
      intArray1[8] = 2120;
      cCSMatrix0.select(intArray0, intArray1);
      cCSMatrix0.nonZeroIteratorOfColumn(intArray1[4]);
      cCSMatrix0.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3, 1.0);
      MatrixOperation<Integer> matrixOperation0 = (MatrixOperation<Integer>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      cCSMatrix0.apply(matrixOperation0);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1981, 1981);
      int[] intArray0 = new int[12];
      cCSMatrix0.select(intArray0, intArray0);
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure1);
      assertEquals(0, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(14);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      double double0 = cCSMatrix0.manhattanNorm();
      assertEquals(14.0, double0, 0.01);
      
      cCSMatrix0.iteratorOfColumn(14);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(14, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(665, Double.POSITIVE_INFINITY);
      cCSMatrix0.blankOfShape(8, 8);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix0.nonZeroIteratorOfColumn(0);
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2463);
      CCSMatrix.fromCSV("");
      cCSMatrix0.iteratorOfColumn(2243);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfShape(3832, (-1359));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 3832x-1359
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix.diagonal(4, 4);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-966.0);
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(4, 4, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1078);
      int int0 = 6;
      cCSMatrix0.nonZeroAt(6, 32);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.minInRow(6);
      cCSMatrix0.eachNonZero(matrixProcedure0);
      cCSMatrix0.iteratorOfColumn((-1556));
      String string0 = "Sides of blocks are incompatible!";
      CCSMatrix cCSMatrix1 = CCSMatrix.fromMatrixMarket(string0);
      int int1 = Integer.MAX_VALUE;
      int int2 = 3383;
      int int3 = 2405;
      cCSMatrix1.insert((Matrix) cCSMatrix0, int0, int1, int0, int2, int3, int2);
      CCSMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix1, cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      CCSMatrix.identity(0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(3, 3, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int0 = 3;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      int int1 = (-2472);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(0, 37);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.updateColumn(0, vectorFunction0);
      double[][] doubleArray1 = new double[9][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      ColumnMajorSparseMatrix.from2DArray(doubleArray1);
      CCSMatrix cCSMatrix2 = CCSMatrix.from1DArray(0, 37, doubleArray0);
      cCSMatrix2.kroneckerProduct(cCSMatrix0);
      SparseMatrix.from1DArray(0, 3, doubleArray0);
      cCSMatrix2.rotate();
      // Undeclared exception!
      try { 
        cCSMatrix1.blankOfRows((-2472));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2472x37
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3832, 3832);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.maxInColumn(2528);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(2528, vectorProcedure0);
      CCSMatrix.zero((-124), 2528, (-124));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3754, 0);
      double[] doubleArray0 = new double[2];
      cCSMatrix0.isColumnMajor();
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(0, 32, doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix1.foldNonZeroInColumn(0, vectorAccumulator0);
      Matrix.diagonal(32, 1782.89);
      CCSMatrix.identity(1048);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1078, 1078);
      int int0 = 6;
      cCSMatrix0.nonZeroAt(6, 32);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.minInRow(6);
      cCSMatrix0.eachNonZero(matrixProcedure0);
      int int1 = (-1556);
      cCSMatrix0.iteratorOfColumn((-1556));
      String string0 = "Sides of blocks are incompatible!";
      int int2 = 3824;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.update(matrixFunction0);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(int2, int1);
      int int3 = 3795;
      int int4 = 1011;
      int int5 = 2077;
      int int6 = 3829;
      cCSMatrix0.insert((Matrix) sparseMatrix0, int3, int4, int5, int5, int5, int6);
      CCSMatrix cCSMatrix1 = CCSMatrix.fromMatrixMarket(string0);
      int int7 = Integer.MAX_VALUE;
      int int8 = 3383;
      int int9 = 2405;
      cCSMatrix1.insert((Matrix) cCSMatrix0, int0, int7, int0, int8, int9, int8);
      CCSMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix1, cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3133, 647, 3133);
      cCSMatrix0.copyOfShape(3133, 9);
      cCSMatrix0.maxInColumn(1223);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 647;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3133, 647, 3133);
      cCSMatrix0.copyOfShape(3133, 9);
      cCSMatrix0.subtract((-1127.0));
      cCSMatrix0.minInColumn(3133);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(int0, vectorProcedure0);
      String string0 = "ASfnO`@n=-n";
      CCSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3832, 3832);
      Vector vector0 = cCSMatrix0.getRow(3832);
      assertEquals(3832, vector0.length());
      
      double double0 = cCSMatrix0.maxInColumn(1200);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3832, 3832);
      cCSMatrix0.getRow(3832);
      cCSMatrix0.maxInColumn(1200);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int0 = 214;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(214);
      // Undeclared exception!
      try { 
        CCSMatrix.block(sparseMatrix0, cCSMatrix0, sparseMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      CCSMatrix cCSMatrix0 = new CCSMatrix(6, 195, 195);
      cCSMatrix0.copyOfShape((byte)0, 2842);
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(433);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 433
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[2];
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, Double.NEGATIVE_INFINITY);
      cCSMatrix0.toBinary();
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(597);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 597
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(10, 10, 10);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      String string0 = "WO?c=";
      cCSMatrix0.toBinary();
      cCSMatrix0.blankOfRows(275);
      cCSMatrix0.blankOfShape(2139, 0);
      cCSMatrix0.nonZeroIteratorOfColumn((-1));
      int int0 = 1118;
      CCSMatrix.identity(int0);
      int int1 = 0;
      cCSMatrix0.copyOfShape(int1, int1);
      CCSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix((byte)46, 9, (byte)46);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.copyOfShape(9, 9);
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2);
      // Undeclared exception!
      try { 
        cCSMatrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, 1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.manhattanNorm();
      cCSMatrix0.update(matrixFunction0);
      double double0 = cCSMatrix0.min();
      assertEquals(286.7128956128, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, 1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.manhattanNorm();
      cCSMatrix0.update(matrixFunction0);
      double double0 = cCSMatrix0.min();
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3826, 3826);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)875, 0.75, 0.0, (-1572.81), 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(875, vectorFunction0);
      Matrix.diagonal(875, 3826);
      DenseVector.fromCSV("");
      CCSMatrix.from1DArray(30, 30, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(46, Double.NEGATIVE_INFINITY);
      cCSMatrix0.blank();
      cCSMatrix0.max();
      cCSMatrix0.iteratorOfColumn(46);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2489, 2489);
      cCSMatrix0.maxInColumn(8);
      cCSMatrix0.min();
      double[][] doubleArray0 = new double[6][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 8;
      doubleArray1[1] = (double) 2489;
      doubleArray1[2] = (double) 2489;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) (byte) (-72);
      doubleArray1[5] = (double) 8;
      doubleArray1[6] = (double) 2489;
      doubleArray1[7] = (double) 8;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 2489;
      doubleArray3[1] = (double) (byte) (-72);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (double) 8;
      doubleArray4[3] = (double) (byte) (-72);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (double) (byte) (-72);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) 2489;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (double) 8;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = (double) 214;
      doubleArray6[1] = 0.0;
      doubleArray0[5] = doubleArray6;
      CCSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 3832;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3832, 3832);
      int int1 = 875;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)875, (double)875, (double)3832, 4.9E-324).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(875, vectorFunction0);
      double double0 = (-417.34035);
      int int2 = 4848;
      Matrix matrix0 = Matrix.constant(int0, int2, double0);
      cCSMatrix0.insert(matrix0);
      double double1 = (-2622.8130149);
      matrix0.divide(double1);
      cCSMatrix0.minInColumn(int0);
      int int3 = 5152;
      MatrixFunction matrixFunction0 = null;
      cCSMatrix0.updateAt(int3, int1, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3832, 3832);
      cCSMatrix0.getRow((-1062));
      CCSMatrix cCSMatrix1 = CCSMatrix.fromMatrixMarket("org.la4j.LinearAlgebra$DecompositorFactory$1");
      int int0 = 169;
      cCSMatrix1.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(10, 10);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.insert((Matrix) cCSMatrix0);
      assertEquals(0.1, cCSMatrix1.density(), 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)cCSMatrix0.transpose();
      assertEquals(0.1, cRSMatrix0.density(), 0.01);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3832, Double.NEGATIVE_INFINITY);
      cCSMatrix0.setRow(150, 0.0);
      cCSMatrix0.removeLastColumn();
      cCSMatrix0.max();
      int int0 = (-930);
      cCSMatrix0.maxInColumn(int0);
      String string0 = null;
      CCSMatrix.fromMatrixMarket(string0);
      CCSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3832, 3832);
      cCSMatrix0.maxInColumn(1970);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt((-3807), 32, matrixFunction0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      int int0 = (-765);
      cCSMatrix0.getColumn(int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1970, 100.0);
      cCSMatrix0.maxInColumn(1964);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(100.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(1, 32, matrixFunction0);
      cCSMatrix0.maxInColumn(1970);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal((byte)46, 1.0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3832, 3832);
      cCSMatrix0.copyOfShape(10, 10);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(8, 8);
      Matrix matrix0 = cCSMatrix0.removeLastColumn();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 3832;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3832, Double.NEGATIVE_INFINITY);
      byte[] byteArray0 = new byte[1];
      cCSMatrix0.copy();
      byteArray0[0] = (byte)48;
      CCSMatrix cCSMatrix1 = CCSMatrix.fromBinary(byteArray0);
      cCSMatrix0.maxInColumn(int0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix((byte)46, (byte)46, (byte)46);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(4893, (-880.3309));
      Matrix.from1DArray(2502, 2502, (double[]) null);
      cCSMatrix1.copyOfShape((byte)46, 4893);
      cCSMatrix0.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      CCSMatrix cCSMatrix0 = new CCSMatrix((byte)46, (byte)46, (byte)46);
      cCSMatrix0.setAll((-2886.0));
      cCSMatrix0.minInColumn(5);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3832, 3832);
      cCSMatrix0.maxInColumn(1970);
      CCSMatrix cCSMatrix1 = new CCSMatrix(1970, 1970, 1970);
      cCSMatrix0.minInColumn(13);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity((byte)46);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal((byte)46, 4.9E-324);
      Matrix matrix0 = cCSMatrix0.insert((Matrix) sparseMatrix0);
      Matrix matrix1 = matrix0.divide((-872.44197));
      cCSMatrix0.add(matrix1);
      cCSMatrix0.getRow(8);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)46;
      intArray0[1] = 8;
      intArray0[2] = 8;
      cCSMatrix0.select(intArray0, intArray0);
      int int0 = (-494);
      cCSMatrix0.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(10, 10);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2273.3158383092373, 2273.3158383092373, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.add((double) 10);
      cCSMatrix0.min();
      CCSMatrix.diagonal(10, (-373.53388260862));
      double double0 = cCSMatrix0.max();
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(2273.3158383092373, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3832, 3832);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.zero(3832, 16);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(16, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)48;
      CCSMatrix cCSMatrix0 = CCSMatrix.fromBinary(byteArray0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transpose();
      cCSMatrix0.blankOfShape((byte)48, 147);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.copyOfRows(2);
      cCSMatrix0.columnMajorIterator();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, cCSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1970, 100.0);
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(100.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(1, 32, matrixFunction0);
      Matrix matrix0 = cCSMatrix0.copyOfColumns(687);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      matrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 448.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1000.630096);
      doubleArray0[7] = 471.57492;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[4] = 1.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1970, Double.POSITIVE_INFINITY);
      cCSMatrix0.sliceBottomRight(1970, 127);
      cCSMatrix0.maxInColumn(1964);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)127).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(1954, 1954, matrixFunction0);
      cCSMatrix0.maxInColumn((-1758));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal((byte)46, (-1837.9218458642838));
      cCSMatrix0.sum();
      cCSMatrix0.setAll(875.0);
      cCSMatrix0.maxInColumn(9);
      cCSMatrix0.nonZeroAt((-1477), 9);
      CCSMatrix.zero((-74), 1, (-1477));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int int0 = 4;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, 4);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int1 = 1034;
      DenseVector.fromMap(hashMap0, 1034);
      Matrix matrix0 = cCSMatrix0.power(4);
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1034;
      doubleArray1[1] = (double) 1034;
      doubleArray1[2] = (double) 4;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
