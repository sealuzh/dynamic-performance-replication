/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 06:29:47 GMT 2018
 */

package org.apache.commons.jxpath.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import org.apache.commons.jxpath.util.MethodLookupUtils;
import org.apache.commons.jxpath.util.TypeConverter;
import org.apache.commons.jxpath.util.TypeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodLookupUtils_ESTest extends MethodLookupUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[1];
      Object object1 = new Object();
      objectArray0[0] = object1;
      Method method0 = MethodLookupUtils.lookupMethod(class0, "java.lang.Character", objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "getClass";
      Object object0 = new Object();
      Method method0 = MethodLookupUtils.lookupMethod(class0, "getClass", objectArray0);
      assertFalse(method0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) methodLookupUtils0;
      objectArray0[1] = (Object) class0;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "org.apache.commons.jxpath.ExpressionContext";
      MethodLookupUtils.lookupStaticMethod(class0, "org.apache.commons.jxpath.ExpressionContext", objectArray0);
      Class<Integer> class1 = Integer.class;
      MethodLookupUtils.lookupConstructor(class1, objectArray0);
      Class<Object> class2 = Object.class;
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = object0;
      objectArray1[1] = (Object) "org.apache.commons.jxpath.ExpressionContext";
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class2, (String) null, objectArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupStaticMethod(class0, "valueOf", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/logging/LogFactory
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<Object> class0 = Object.class;
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class0, objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/logging/LogFactory
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) class0;
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) methodLookupUtils0;
      objectArray1[1] = (Object) class0;
      objectArray1[2] = (Object) methodLookupUtils0;
      objectArray1[3] = (Object) methodLookupUtils0;
      objectArray1[4] = (Object) methodLookupUtils0;
      MethodLookupUtils.lookupConstructor(class0, objectArray1);
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupConstructor(class1, objectArray0);
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(typeConverter0).convert(any() , any(java.lang.Class.class));
      TypeUtils.setTypeConverter(typeConverter0);
      Class<Object> class2 = Object.class;
      MethodLookupUtils.lookupConstructor(class2, objectArray0);
      Class<String> class3 = String.class;
      MethodLookupUtils.lookupStaticMethod(class3, "bi?&:?iG", objectArray0);
      MethodLookupUtils.lookupStaticMethod(class0, "bi?&:?iG", objectArray0);
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class1, "dTD7_<1P6g7Tfz<OS", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) class0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) methodLookupUtils0;
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupStaticMethod(class1, "", objectArray0);
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class0, objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/logging/LogFactory
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor constructor0 = MethodLookupUtils.lookupConstructor(class0, (Object[]) null);
      assertEquals(1, constructor0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[0];
      MethodLookupUtils.lookupMethod(class0, "", objectArray0);
      MethodLookupUtils.lookupStaticMethod(class0, "", objectArray0);
      Class<String> class1 = String.class;
      MethodLookupUtils.lookupMethod(class1, "", objectArray0);
      Class<Object> class2 = Object.class;
      MethodLookupUtils.lookupStaticMethod(class2, "", objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      MethodLookupUtils.lookupMethod(class2, (String) null, objectArray0);
      MethodLookupUtils.lookupStaticMethod(class1, "", objectArray0);
      Class<Object> class3 = Object.class;
      MethodLookupUtils.lookupConstructor(class3, objectArray0);
      MethodLookupUtils.lookupMethod(class0, "", objectArray0);
      MethodLookupUtils.lookupStaticMethod(class1, "", objectArray0);
      Object[] objectArray1 = new Object[0];
      MethodLookupUtils.lookupStaticMethod(class0, "", objectArray1);
      MethodLookupUtils.lookupConstructor(class2, objectArray1);
      Method method0 = MethodLookupUtils.lookupStaticMethod(class0, "", objectArray1);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) class0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      MethodLookupUtils.lookupMethod(class0, "", objectArray0);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = object1;
      objectArray1[1] = (Object) "";
      objectArray1[2] = (Object) null;
      MethodLookupUtils.lookupMethod(class0, "", objectArray1);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Object[] objectArray2 = new Object[2];
      objectArray2[0] = (Object) null;
      objectArray2[1] = (Object) methodLookupUtils0;
      Constructor constructor0 = MethodLookupUtils.lookupConstructor(class0, objectArray2);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "getClass";
      Object object0 = new Object();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class0, "getClass", objectArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getClass\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<String> class0 = String.class;
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(typeConverter0).canConvert(any() , any(java.lang.Class.class));
      doReturn((Object) null).when(typeConverter0).convert(any() , any(java.lang.Class.class));
      TypeUtils.setTypeConverter((TypeConverter) null);
      TypeUtils.setTypeConverter(typeConverter0);
      Object[] objectArray0 = new Object[1];
      MethodLookupUtils.lookupMethod(class0, "C5l<;4SZ_!&mNt0`", objectArray0);
      MethodLookupUtils.lookupMethod(class0, "", objectArray0);
      objectArray0[0] = (Object) methodLookupUtils0;
      MethodLookupUtils.lookupMethod(class0, "C5l<;4SZ_!&mNt0`", objectArray0);
      MethodLookupUtils.lookupStaticMethod(class0, "", objectArray0);
      Class<String> class1 = String.class;
      MethodLookupUtils.lookupMethod(class1, "", objectArray0);
      Class<Object> class2 = Object.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class2, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) class0;
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupStaticMethod(class1, "java.util.List", objectArray0);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) null;
      objectArray1[1] = (Object) class1;
      objectArray1[2] = (Object) null;
      MethodLookupUtils.lookupStaticMethod(class1, " P", objectArray1);
      Class<Object> class2 = Object.class;
      MethodLookupUtils.lookupStaticMethod(class2, " P", objectArray0);
      MethodLookupUtils.lookupStaticMethod(class0, " P", objectArray1);
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) class1;
      objectArray2[1] = (Object) class1;
      objectArray2[2] = (Object) null;
      objectArray2[3] = (Object) class0;
      objectArray2[4] = (Object) null;
      objectArray2[5] = (Object) null;
      objectArray2[6] = (Object) class2;
      objectArray2[7] = (Object) null;
      objectArray2[8] = (Object) null;
      MethodLookupUtils.lookupConstructor(class0, objectArray2);
      MethodLookupUtils.lookupMethod(class0, "5_L", objectArray0);
      Class<Object> class3 = Object.class;
      MethodLookupUtils.lookupStaticMethod(class3, "java.util.List", objectArray2);
      MethodLookupUtils.lookupConstructor(class2, objectArray1);
      Class<Integer> class4 = Integer.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class4, "3V;)B5X]iB", objectArray2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/logging/LogFactory
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "getClass";
      Class<String> class0 = String.class;
      Method method0 = MethodLookupUtils.lookupMethod(class0, "getClass", objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) class0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) class0;
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      Class<String> class1 = String.class;
      MethodLookupUtils.lookupMethod(class1, "KHJO+.q3BhM(Iyqm", objectArray0);
      Class<String> class2 = String.class;
      MethodLookupUtils.lookupMethod(class2, "KHJO+.q3BhM(Iyqm", objectArray0);
      MethodLookupUtils.lookupMethod(class0, "KHJO+.q3BhM(Iyqm", objectArray0);
      MethodLookupUtils.lookupStaticMethod(class1, "KHJO+.q3BhM(Iyqm", objectArray0);
      Class<String> class3 = String.class;
      MethodLookupUtils.lookupStaticMethod(class3, "java.lang.Integer", objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<Object> class4 = Object.class;
      Method method0 = MethodLookupUtils.lookupMethod(class4, "getField", objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous constructor [null]
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[0];
      MethodLookupUtils.lookupMethod(class0, "Ambigous method call: ", objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<Integer> class1 = Integer.class;
      MethodLookupUtils.lookupStaticMethod(class1, "getInteger", objectArray0);
      Class<String> class2 = String.class;
      Method method0 = MethodLookupUtils.lookupStaticMethod(class2, "Ambigous method call: ", objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) methodLookupUtils0;
      Class<String> class0 = String.class;
      MethodLookupUtils.lookupStaticMethod(class0, "qGpDBU!+", objectArray0);
      MethodLookupUtils methodLookupUtils1 = new MethodLookupUtils();
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) null;
      objectArray1[1] = (Object) "qGpDBU!+";
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class0, objectArray1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/logging/LogFactory
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Class<String> class0 = String.class;
      MethodLookupUtils.lookupMethod(class0, "uKdW}e=kj~", objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<String> class1 = String.class;
      MethodLookupUtils.lookupMethod(class1, "j)-t%<Pu", (Object[]) null);
      Class<String> class2 = String.class;
      MethodLookupUtils.lookupStaticMethod(class2, "a[M]myQ[m]Chp l<]C", (Object[]) null);
      Class<String> class3 = String.class;
      Method method0 = MethodLookupUtils.lookupStaticMethod(class3, "j)-t%<Pu", objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[0];
      Method method0 = MethodLookupUtils.lookupStaticMethod(class0, "getClass", objectArray0);
      assertEquals(273, method0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<Integer> class0 = Integer.class;
      MethodLookupUtils.lookupStaticMethod(class0, "signum", objectArray0);
      Class<String> class1 = String.class;
      Method method0 = MethodLookupUtils.lookupMethod(class1, "signum", objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupStaticMethod(class0, "join", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous method call: join
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupStaticMethod(class0, "valueOf", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous method call: valueOf
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "gY-T\"[V";
      Class<String> class0 = String.class;
      Method method0 = MethodLookupUtils.lookupMethod(class0, "endsWith", objectArray0);
      assertFalse(method0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "notigfy";
      MethodLookupUtils.lookupMethod(class0, "offsetByCodePoints", objectArray0);
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class0, "lastIndexOf", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous method call: lastIndexOf
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "x3Ro";
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class0, "compareTo", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous method call: compareTo
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) class0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Method method0 = MethodLookupUtils.lookupMethod(class0, "valueOf", objectArray0);
      assertEquals("public static java.lang.String java.lang.String.valueOf(java.lang.Object)", method0.toString());
  }
}
