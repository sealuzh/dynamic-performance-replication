/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 22:42:17 GMT 2018
 */

package okhttp3.internal.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiFunction;
import okhttp3.Challenge;
import okhttp3.CookieJar;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.internal.http.HttpHeaders;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpHeaders_ESTest extends HttpHeaders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = ",";
      HttpHeaders.skipWhitespace(",", 1264);
      HttpHeaders.skipWhitespace(",", 1264);
      String string1 = "";
      HttpHeaders.skipUntil("", 1264, "");
      HttpHeaders.skipWhitespace("", 731);
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.hasVaryAll((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "Pu\"Utz**H;~x};k";
      HttpHeaders.skipWhitespace("Pu\"Utz**H;~x};k", 2051);
      HttpHeaders.skipWhitespace("Pu\"Utz**H;~x};k", 4439);
      HttpHeaders.skipUntil("Pu\"Utz**H;~x};k", 0, "Pu\"Utz**H;~x};k");
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@NM6HNn&Qm:u";
      int int0 = HttpHeaders.skipUntil("@NM6HNn&Qm:u", 11, "@NM6HNn&Qm:u");
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.replace((String) null, (String) null);
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      Headers headers0 = Headers.of((Map<String, String>) hashMap1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Response{protocol=";
      headers0.newBuilder();
      hashMap1.put((String) null, "Response{protocol=");
      stringArray0[1] = "okhttp3.internal.http.HttpHeaders";
      stringArray0[2] = "okhttp3.internal.http.HttpHeaders";
      stringArray0[3] = "U0L>ML3f?d^]]";
      Headers headers1 = Headers.of(stringArray0);
      Headers.of((Map<String, String>) hashMap0);
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
      
      HttpHeaders.varyHeaders(headers1, headers0);
      HttpHeaders.parseSeconds("bn{>pho03,l>", 5);
      int int0 = HttpHeaders.parseSeconds("U0L>ML3f?d^]]", 5);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("12-", "12-");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(0, headers1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.contentLength((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.replace((String) null, (String) null);
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      Headers headers0 = Headers.of((Map<String, String>) hashMap1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Response{protocol=";
      headers0.newBuilder();
      hashMap1.put((String) null, "Response{protocol=");
      stringArray0[1] = "okhttp3.internal.http.HttpHeaders";
      stringArray0[2] = "okhttp3.internal.http.HttpHeaders";
      stringArray0[3] = "U0L>ML3f?d^]]";
      Headers.of(stringArray0);
      Headers headers1 = Headers.of(stringArray0);
      boolean boolean0 = HttpHeaders.hasVaryAll(headers1);
      assertFalse(boolean0);
      
      int int0 = HttpHeaders.parseSeconds("@nm6hnn&qm:u", 17);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@NM6HNn&Qm:u";
      stringArray0[1] = "9'Y>~d0ug2";
      stringArray0[2] = "\"([^\"]*)\"";
      stringArray0[3] = "s4l3^#";
      stringArray0[4] = "_^p ";
      stringArray0[5] = "";
      Headers headers0 = Headers.of(stringArray0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      headers0.newBuilder();
      headers0.names();
      headers0.toString();
      hashMap0.clear();
      hashMap0.put("rYFHJXN;h$#/4tS}si", "");
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      headers0.toString();
      hashMap0.merge("]/3jqMh", "4I", biFunction0);
      Headers headers1 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.varyFields(headers0);
      HttpHeaders.contentLength(headers1);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "NL<<gZA,A5H|URAX4*");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      stringArray0[0] = "12-";
      stringArray0[1] = "Qg$";
      stringArray0[2] = "endindex < beginindex";
      stringArray0[3] = "G0kc#!=b";
      Headers headers0 = Headers.of(stringArray0);
      Headers.of(stringArray0);
      headers0.toMultimap();
      headers0.toString();
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers0);
      HttpHeaders.hasVaryAll(headers0);
      // Undeclared exception!
      try { 
        HttpHeaders.hasBody((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      stringArray0[0] = "12-";
      stringArray0[1] = "Qg$";
      int int0 = HttpHeaders.skipWhitespace("Qg$", 0);
      assertEquals(0, int0);
      
      int int1 = HttpHeaders.skipWhitespace(" +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)", 0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.contentLength(headers0);
      hashMap0.put("8yH:", ":0696Wr");
      headers0.get("RVn_javI");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("Content-Length", "S87", biFunction0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      HttpHeaders.varyFields(headers0);
      Headers headers2 = Headers.of((Map<String, String>) hashMap0);
      hashMap0.put("['#DFrP\"V@sxW", "string == null");
      HttpHeaders.contentLength(headers2);
      HttpHeaders.parseChallenges(headers1, "RVn_javI");
      // Undeclared exception!
      try { 
        HttpHeaders.parseChallenges(headers2, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("msvZxNKA#?7", "msvZxNKA#?7");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "msvZxNKA#?7");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = HttpHeaders.skipUntil("Transfer-Encoding", 0, "6");
      assertEquals(17, int0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("realm=\"", "6");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      String[] stringArray0 = new String[0];
      Headers.of(stringArray0);
      hashMap0.entrySet();
      hashMap0.put("realm=\"", "EEE dd-MMM-yyyy HH:mm:ss z");
      Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.parseChallenges(headers0, "~f>yTr>x&");
      int int1 = HttpHeaders.parseSeconds("6", 0);
      assertEquals(6, int1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HttpHeaders.parseSeconds("public,", (-1385));
      HttpHeaders.skipUntil("public,", 1, "public,");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("public,", "([^ \"=]*)");
      hashMap0.clear();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      headers0.toString();
      HttpHeaders.varyFields(headers1);
      HttpHeaders.varyHeaders(headers0, headers1);
      HttpHeaders.parseChallenges(headers0, "([^ \"=]*)");
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.varyMatches((Response) null, headers1, (Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("vary", "\\");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(0, headers1.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("2;\u0000b", "2(&H1~6&");
      hashMap0.put("2;\u0000b", "*");
      hashMap0.put("Q[^ L=]*)", "Q[^ L=]*)");
      // Undeclared exception!
      try { 
        Headers.of((Map<String, String>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected header: 2;\u0000b: *
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      int int0 = HttpHeaders.skipWhitespace("vary", 1834);
      assertEquals(1834, int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "vary";
      stringArray0[1] = "vary";
      stringArray0[2] = "vary";
      stringArray0[3] = "vary";
      stringArray0[4] = "vary";
      stringArray0[5] = "vary";
      stringArray0[6] = "vary";
      stringArray0[7] = "vary";
      Headers headers0 = Headers.of(stringArray0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      HttpHeaders.varyFields(headers1);
      assertEquals(4, headers1.size());
      assertTrue(headers0.equals((Object)headers1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("; realms=", "; realms=");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "; realms=");
      assertEquals(0, list0.size());
  }
}
