/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:59:10 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParserTokenManager_ESTest extends JVCParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(88);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 88. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-85);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream1, "DEFAULT");
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals("[", token0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.maxNextCharInd = 5;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      Token token0 = jVCParserTokenManager0.jjFillToken();
      assertEquals(1, token0.endLine);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 1);
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertEquals(16, token1.kind);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals("\u0000", token2.toString());
      assertEquals(2, token2.endColumn);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)111;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, token0.kind);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(3, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(pipedReader0);
      byte[] byteArray0 = new byte[4];
      simpleCharStream1.available = (-1);
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)98;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream2);
      jVCParserTokenManager0.getNextToken();
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream2.getBeginLine());
      assertEquals(3, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)98;
      byteArray0[5] = (byte)98;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)98, (byte)98, (byte)0, (byte)98, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)98, (byte)98, (byte)0, (byte)98, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)98, (byte)98, (byte)0, (byte)98, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals("[[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream1.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)98, (byte)98, (byte)0, (byte)98, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)111;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)111, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)111, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)111, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("\u0000", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)111, (byte)0}, byteArray0);
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("[", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)111, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(pipedReader0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      byte[] byteArray0 = new byte[3];
      simpleCharStream1.available = (-1);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream2.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91}, byteArray0);
      assertNotNull(simpleCharStream2);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream2);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream2.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream2.getEndColumn());
      assertEquals(1, simpleCharStream2.getLine());
      assertEquals(1, simpleCharStream2.getEndLine());
      assertEquals(1, simpleCharStream2.getBeginLine());
      assertEquals(1, simpleCharStream2.getBeginColumn());
      assertEquals(2, simpleCharStream2.getColumn());
      assertEquals("[[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream2.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91}, byteArray0);
      assertNotNull(token0);
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(simpleCharStream2, simpleCharStream0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream2.getLine());
      assertEquals(1, simpleCharStream2.getEndLine());
      assertEquals(1, simpleCharStream2.getBeginLine());
      assertEquals(3, simpleCharStream2.getBeginColumn());
      assertEquals(3, simpleCharStream2.getColumn());
      assertEquals(3, simpleCharStream2.getEndColumn());
      assertEquals("[", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream2.bufpos);
      assertEquals(3, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91}, byteArray0);
      assertNotNull(token1);
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(token1, token0);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream2.getLine());
      assertEquals(1, simpleCharStream2.getEndLine());
      assertEquals(1, simpleCharStream2.getBeginLine());
      assertEquals(3, simpleCharStream2.getBeginColumn());
      assertEquals(3, simpleCharStream2.getColumn());
      assertEquals(3, simpleCharStream2.getEndColumn());
      assertEquals("", token2.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream2.bufpos);
      assertEquals(3, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91}, byteArray0);
      assertNotNull(token2);
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)88, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)88, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)88, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      
      jVCParserTokenManager0.curLexState = 1340;
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.backup((byte)42);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4053, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)88, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4054, simpleCharStream0.bufpos);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertArrayEquals(new byte[] {(byte)0, (byte)88, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("\u0000", token1.toString());
      assertEquals(4055, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(0, token1.beginLine);
      assertArrayEquals(new byte[] {(byte)0, (byte)88, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)96;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)96, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)96, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)96, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("[[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)96, (byte)0}, byteArray0);
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("`", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.endColumn);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)96, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("[[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("[", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("\u0000", token2.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(4, token2.beginColumn);
      assertEquals(4, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[4] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)0, (byte)0, (byte)59, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals("", token0.toString());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, (byte)91, 0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)0, (byte)0, (byte)59, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1, 3);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)0, (byte)0, (byte)59, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager1);
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getEndColumn());
      assertEquals(91, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getColumn());
      assertEquals(91, simpleCharStream1.getBeginLine());
      assertEquals(91, simpleCharStream1.getLine());
      assertEquals("[[", token1.toString());
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(91, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(91, token1.endLine);
      assertEquals(1, token1.kind);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)0, (byte)0, (byte)59, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token1.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals("\u0000", token2.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token2.beginColumn);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.endColumn);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token3.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token3.endLine);
      assertEquals(4, token3.beginColumn);
      assertEquals(4, token3.endColumn);
      assertEquals(16, token3.kind);
      assertEquals(1, token3.beginLine);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token3);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 3);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager1);
      
      Token token4 = jVCParserTokenManager0.getNextToken();
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals("\u0000", token4.toString());
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, token4.endColumn);
      assertEquals(16, token4.kind);
      assertEquals(1, token4.beginLine);
      assertEquals(1, token4.endLine);
      assertEquals(5, token4.beginColumn);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token4);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)0, (byte)59, (byte)91, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals("", token0.toString());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, (byte)91, 0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)0, (byte)59, (byte)91, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1, 3);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)0, (byte)59, (byte)91, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager1);
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream1.getColumn());
      assertEquals(91, simpleCharStream1.getLine());
      assertEquals(91, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(91, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getEndColumn());
      assertEquals("[[", token1.toString());
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.kind);
      assertEquals(91, token1.beginLine);
      assertEquals(1, token1.endColumn);
      assertEquals(91, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)0, (byte)59, (byte)91, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(pipedReader0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      simpleCharStream1.available = (-1);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)98;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)98, (byte)98, (byte)105, (byte)91, (byte)98, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertEquals("", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream1.bufpos);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertNotNull(token0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertEquals("", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream1.bufpos);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertNotNull(token1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(token1, token0);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(byteArrayInputStream0, (byte)91, 0);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)98, (byte)98, (byte)105, (byte)91, (byte)98, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream2);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream2, 3);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)98, (byte)98, (byte)105, (byte)91, (byte)98, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager1);
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(91, simpleCharStream2.getEndLine());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(1, simpleCharStream2.getEndColumn());
      assertEquals(1, simpleCharStream2.getColumn());
      assertEquals(91, simpleCharStream2.getLine());
      assertEquals(91, simpleCharStream2.getBeginLine());
      assertEquals("[[", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token2.kind);
      assertEquals(91, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(1, token2.endColumn);
      assertEquals(91, token2.endLine);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)98, (byte)98, (byte)105, (byte)91, (byte)98, (byte)0}, byteArray0);
      assertNotNull(token2);
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = jVCParserTokenManager1.jjFillToken();
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertEquals(91, simpleCharStream2.getEndLine());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(1, simpleCharStream2.getEndColumn());
      assertEquals(1, simpleCharStream2.getColumn());
      assertEquals(91, simpleCharStream2.getLine());
      assertEquals(91, simpleCharStream2.getBeginLine());
      assertEquals("[[", token3.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(91, token3.endLine);
      assertEquals(0, token3.beginColumn);
      assertEquals(1, token3.endColumn);
      assertEquals(1, token3.kind);
      assertEquals(91, token3.beginLine);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)98, (byte)98, (byte)105, (byte)91, (byte)98, (byte)0}, byteArray0);
      assertNotNull(token3);
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)91, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, (String) null);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)91, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)91, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals("[[", token0.toString());
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)91, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(3, simpleCharStream1.getBeginColumn());
      assertEquals(4, simpleCharStream1.getColumn());
      assertEquals(4, simpleCharStream1.getEndColumn());
      assertEquals("[[", token1.toString());
      assertEquals(3, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.kind);
      assertEquals(1, token1.endLine);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)91, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)91, (byte)91, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)91, (byte)91, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)91, (byte)91, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("[[", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.kind);
      assertEquals(1, token0.endLine);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)91, (byte)91, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals("[[", token1.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.kind);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)91, (byte)91, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)96;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)96, (byte)96, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)96, (byte)96, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)96, (byte)96, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("[[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)96, (byte)96, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("[", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)96, (byte)96, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager1);
      
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("\u0000", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, (byte)0);
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager2);
      
      Token token1 = jVCParserTokenManager2.getNextToken();
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("\u0000", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)98;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("\u0000", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      
      jVCParserTokenManager0.SwitchTo(0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("[", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(pipedReader0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      simpleCharStream1.ReInit((Reader) pipedReader0, (-1), (-1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      
      simpleCharStream1.available = (-1);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)98;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals("", token0.toString());
      assertEquals(4095, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals("", token1.toString());
      assertEquals(4095, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertNotNull(token1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(token1, token0);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(byteArrayInputStream0, 14, 737);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream2);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream2, 0);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager1);
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(737, simpleCharStream2.getColumn());
      assertEquals(737, simpleCharStream2.getEndColumn());
      assertEquals(737, simpleCharStream2.getBeginColumn());
      assertEquals(14, simpleCharStream2.getLine());
      assertEquals(14, simpleCharStream2.getEndLine());
      assertEquals(14, simpleCharStream2.getBeginLine());
      assertEquals("\u0000", token2.toString());
      assertEquals(0, simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(737, token2.beginColumn);
      assertEquals(16, token2.kind);
      assertEquals(14, token2.endLine);
      assertEquals(737, token2.endColumn);
      assertEquals(14, token2.beginLine);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token2);
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = jVCParserTokenManager0.jjFillToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals("", token3.toString());
      assertEquals(4095, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginColumn);
      assertNotNull(token3);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(4095, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager2);
      
      Token token4 = jVCParserTokenManager1.getNextToken();
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertEquals("\u0000", token4.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(738, simpleCharStream2.getColumn());
      assertEquals(738, simpleCharStream2.getEndColumn());
      assertEquals(14, simpleCharStream2.getLine());
      assertEquals(14, simpleCharStream2.getEndLine());
      assertEquals(738, simpleCharStream2.getBeginColumn());
      assertEquals(14, simpleCharStream2.getBeginLine());
      assertEquals(14, token4.beginLine);
      assertEquals(16, token4.kind);
      assertEquals(738, token4.beginColumn);
      assertEquals(738, token4.endColumn);
      assertEquals(14, token4.endLine);
      assertEquals(1, simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token4);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      
      Token token5 = jVCParserTokenManager1.getNextToken();
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token4));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertEquals("b", token5.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(739, simpleCharStream2.getEndColumn());
      assertEquals(14, simpleCharStream2.getLine());
      assertEquals(739, simpleCharStream2.getBeginColumn());
      assertEquals(14, simpleCharStream2.getEndLine());
      assertEquals(739, simpleCharStream2.getColumn());
      assertEquals(14, simpleCharStream2.getBeginLine());
      assertEquals(739, token5.beginColumn);
      assertEquals(16, token5.kind);
      assertEquals(14, token5.beginLine);
      assertEquals(739, token5.endColumn);
      assertEquals(14, token5.endLine);
      assertEquals(2, simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token5);
      assertNotSame(token5, token1);
      assertNotSame(token5, token2);
      assertNotSame(token5, token3);
      assertNotSame(token5, token0);
      assertNotSame(token5, token4);
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)98;
      byteArray0[6] = (byte)91;
      byteArray0[6] = (byte)98;
      byteArray0[2] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)91, (byte)98, (byte)98, (byte)0, (byte)98, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 5260, (byte)91, (byte)98);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)91, (byte)98, (byte)98, (byte)0, (byte)98, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)91, (byte)98, (byte)98, (byte)0, (byte)98, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      
      jVCParserTokenManager0.curLexState = (int) (byte)91;
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5260, simpleCharStream0.getEndLine());
      assertEquals(91, simpleCharStream0.getBeginColumn());
      assertEquals(91, simpleCharStream0.getEndColumn());
      assertEquals(91, simpleCharStream0.getColumn());
      assertEquals(5260, simpleCharStream0.getLine());
      assertEquals(5260, simpleCharStream0.getBeginLine());
      assertEquals("", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(0, token0.kind);
      assertEquals(5260, token0.beginLine);
      assertEquals(91, token0.beginColumn);
      assertEquals(5260, token0.endLine);
      assertEquals(91, token0.endColumn);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)91, (byte)98, (byte)98, (byte)0, (byte)98, (byte)0}, byteArray0);
      assertNotNull(token0);
      
      jVCParserTokenManager0.jjnewStateCnt = 0;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5260, simpleCharStream0.getEndLine());
      assertEquals(91, simpleCharStream0.getBeginColumn());
      assertEquals(91, simpleCharStream0.getEndColumn());
      assertEquals(91, simpleCharStream0.getColumn());
      assertEquals(5260, simpleCharStream0.getLine());
      assertEquals(5260, simpleCharStream0.getBeginLine());
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5260, simpleCharStream0.getEndLine());
      assertEquals(92, simpleCharStream0.getBeginColumn());
      assertEquals(93, simpleCharStream0.getEndColumn());
      assertEquals(5260, simpleCharStream0.getLine());
      assertEquals(5260, simpleCharStream0.getBeginLine());
      assertEquals(93, simpleCharStream0.getColumn());
      assertEquals("[[", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(5260, token1.beginLine);
      assertEquals(1, token1.kind);
      assertEquals(93, token1.endColumn);
      assertEquals(92, token1.beginColumn);
      assertEquals(5260, token1.endLine);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)91, (byte)98, (byte)98, (byte)0, (byte)98, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)91;
      byteArray0[6] = (byte)91;
      byteArray0[6] = (byte)98;
      byteArray0[2] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)91, (byte)98, (byte)91, (byte)0, (byte)98, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 5260, (byte)91, (byte)98);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)91, (byte)98, (byte)91, (byte)0, (byte)98, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)91, (byte)98, (byte)91, (byte)0, (byte)98, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      
      jVCParserTokenManager0.curLexState = (int) (byte)91;
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(91, simpleCharStream0.getBeginColumn());
      assertEquals(91, simpleCharStream0.getColumn());
      assertEquals(91, simpleCharStream0.getEndColumn());
      assertEquals(5260, simpleCharStream0.getLine());
      assertEquals(5260, simpleCharStream0.getBeginLine());
      assertEquals(5260, simpleCharStream0.getEndLine());
      assertEquals("", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(0, token0.kind);
      assertEquals(5260, token0.beginLine);
      assertEquals(5260, token0.endLine);
      assertEquals(91, token0.endColumn);
      assertEquals(91, token0.beginColumn);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)91, (byte)98, (byte)91, (byte)0, (byte)98, (byte)0}, byteArray0);
      assertNotNull(token0);
      
      jVCParserTokenManager0.jjnewStateCnt = 0;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(91, simpleCharStream0.getBeginColumn());
      assertEquals(91, simpleCharStream0.getColumn());
      assertEquals(91, simpleCharStream0.getEndColumn());
      assertEquals(5260, simpleCharStream0.getLine());
      assertEquals(5260, simpleCharStream0.getBeginLine());
      assertEquals(5260, simpleCharStream0.getEndLine());
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(93, simpleCharStream0.getColumn());
      assertEquals(93, simpleCharStream0.getEndColumn());
      assertEquals(5260, simpleCharStream0.getLine());
      assertEquals(5260, simpleCharStream0.getBeginLine());
      assertEquals(92, simpleCharStream0.getBeginColumn());
      assertEquals(5260, simpleCharStream0.getEndLine());
      assertEquals("[[", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(5260, token1.endLine);
      assertEquals(1, token1.kind);
      assertEquals(93, token1.endColumn);
      assertEquals(5260, token1.beginLine);
      assertEquals(92, token1.beginColumn);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)91, (byte)98, (byte)91, (byte)0, (byte)98, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(pipedReader0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      byte[] byteArray0 = new byte[4];
      simpleCharStream1.available = (-1);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)96;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)96, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream2.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)96, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream2);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream2, 2);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream2.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)96, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager1);
      
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream2.getColumn());
      assertEquals(1, simpleCharStream2.getEndLine());
      assertEquals(1, simpleCharStream2.getBeginColumn());
      assertEquals(2, simpleCharStream2.getEndColumn());
      assertEquals(1, simpleCharStream2.getLine());
      assertEquals(1, simpleCharStream2.getBeginLine());
      assertEquals("[[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream2.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.kind);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)96, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream2.getEndLine());
      assertEquals(3, simpleCharStream2.getBeginColumn());
      assertEquals(3, simpleCharStream2.getColumn());
      assertEquals(1, simpleCharStream2.getLine());
      assertEquals(1, simpleCharStream2.getBeginLine());
      assertEquals(3, simpleCharStream2.getEndColumn());
      assertEquals("`", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream2.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.beginColumn);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)96, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token1, token0);
      
      jVCParserTokenManager0.setDebugStream(jVCParserTokenManager1.debugStream);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream2.getEndLine());
      assertEquals(3, simpleCharStream2.getBeginColumn());
      assertEquals(3, simpleCharStream2.getColumn());
      assertEquals(1, simpleCharStream2.getLine());
      assertEquals(1, simpleCharStream2.getBeginLine());
      assertEquals(3, simpleCharStream2.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream2.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)96, (byte)0}, byteArray0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("[[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 2);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager1);
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("\u0000", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token1, token0);
      
      jVCParserTokenManager1.SwitchTo(1);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(pipedReader0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[5] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91, (byte)0, (byte)91, (byte)0, (byte)0, (byte)91, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals("", token0.toString());
      assertEquals(4095, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals("", token1.toString());
      assertEquals(4095, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertNotNull(token1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(token1, token0);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(byteArrayInputStream0, (byte)91, 0);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)0, (byte)91, (byte)0, (byte)0, (byte)91, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream2);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream2, 3);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)0, (byte)91, (byte)0, (byte)0, (byte)91, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager1);
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getEndColumn());
      assertEquals(91, simpleCharStream2.getEndLine());
      assertEquals(0, simpleCharStream2.getColumn());
      assertEquals(91, simpleCharStream2.getLine());
      assertEquals(91, simpleCharStream2.getBeginLine());
      assertEquals("[", token2.toString());
      assertEquals(0, simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token2.kind);
      assertEquals(91, token2.endLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(91, token2.beginLine);
      assertArrayEquals(new byte[] {(byte)91, (byte)0, (byte)91, (byte)0, (byte)0, (byte)91, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token2);
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(pipedReader0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      simpleCharStream1.available = (-1);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)98;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)86, (byte)86, (byte)86, (byte)98, (byte)59, (byte)86, (byte)98, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals("", token0.toString());
      assertEquals(4095, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals("", token1.toString());
      assertEquals(4095, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertNotNull(token1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(token1, token0);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(byteArrayInputStream0, (byte)86, 0);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream2.bufpos);
      assertArrayEquals(new byte[] {(byte)86, (byte)86, (byte)86, (byte)98, (byte)59, (byte)86, (byte)98, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream2);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream2, 3);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream2.bufpos);
      assertArrayEquals(new byte[] {(byte)86, (byte)86, (byte)86, (byte)98, (byte)59, (byte)86, (byte)98, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager1);
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getColumn());
      assertEquals(0, simpleCharStream2.getEndColumn());
      assertEquals(86, simpleCharStream2.getBeginLine());
      assertEquals(86, simpleCharStream2.getLine());
      assertEquals(86, simpleCharStream2.getEndLine());
      assertEquals("V", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token2.beginColumn);
      assertEquals(16, token2.kind);
      assertEquals(86, token2.endLine);
      assertEquals(86, token2.beginLine);
      assertEquals(0, token2.endColumn);
      assertArrayEquals(new byte[] {(byte)86, (byte)86, (byte)86, (byte)98, (byte)59, (byte)86, (byte)98, (byte)0}, byteArray0);
      assertNotNull(token2);
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals("", token3.toString());
      assertEquals(4095, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginColumn);
      assertNotNull(token3);
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      
      jVCParserTokenManager1.setDebugStream(jVCParserTokenManager0.debugStream);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getColumn());
      assertEquals(0, simpleCharStream2.getEndColumn());
      assertEquals(86, simpleCharStream2.getBeginLine());
      assertEquals(86, simpleCharStream2.getLine());
      assertEquals(86, simpleCharStream2.getEndLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)86, (byte)86, (byte)86, (byte)98, (byte)59, (byte)86, (byte)98, (byte)0}, byteArray0);
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals("", token0.toString());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, 0, 0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1, 0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager1);
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getColumn());
      assertEquals("[[", token2.toString());
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.endLine);
      assertEquals(1, token2.kind);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token2);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = jVCParserTokenManager0.jjFillToken();
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals("", token3.toString());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.kind);
      assertNotNull(token3);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      
      Token token4 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals("\u0000", token4.toString());
      assertEquals(2, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token4.endLine);
      assertEquals(2, token4.endColumn);
      assertEquals(16, token4.kind);
      assertEquals(2, token4.beginColumn);
      assertEquals(0, token4.beginLine);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token4);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)98;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals("", token0.toString());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, 14, 737);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1, 0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager1);
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(14, simpleCharStream1.getLine());
      assertEquals(14, simpleCharStream1.getBeginLine());
      assertEquals(737, simpleCharStream1.getBeginColumn());
      assertEquals(738, simpleCharStream1.getColumn());
      assertEquals(14, simpleCharStream1.getEndLine());
      assertEquals(738, simpleCharStream1.getEndColumn());
      assertEquals("[[", token2.toString());
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(738, token2.endColumn);
      assertEquals(14, token2.endLine);
      assertEquals(14, token2.beginLine);
      assertEquals(737, token2.beginColumn);
      assertEquals(1, token2.kind);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token2);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = jVCParserTokenManager0.jjFillToken();
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals("", token3.toString());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginLine);
      assertNotNull(token3);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager2);
      
      jVCParserTokenManager2.setDebugStream(jVCParserTokenManager0.debugStream);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[2] = (byte)109;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91, (byte)0, (byte)109, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals("", token0.toString());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, 14, 737);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)0, (byte)109, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1, 0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)0, (byte)109, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager1);
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(737, simpleCharStream1.getBeginColumn());
      assertEquals(14, simpleCharStream1.getBeginLine());
      assertEquals(14, simpleCharStream1.getLine());
      assertEquals(737, simpleCharStream1.getColumn());
      assertEquals(14, simpleCharStream1.getEndLine());
      assertEquals(737, simpleCharStream1.getEndColumn());
      assertEquals("[", token2.toString());
      assertEquals(0, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(737, token2.endColumn);
      assertEquals(14, token2.beginLine);
      assertEquals(16, token2.kind);
      assertEquals(14, token2.endLine);
      assertEquals(737, token2.beginColumn);
      assertArrayEquals(new byte[] {(byte)91, (byte)0, (byte)109, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token2);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = jVCParserTokenManager0.jjFillToken();
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals("", token3.toString());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.beginColumn);
      assertNotNull(token3);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      
      Token token4 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals("", token4.toString());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token4.endColumn);
      assertEquals(0, token4.beginColumn);
      assertEquals(0, token4.beginLine);
      assertEquals(0, token4.endLine);
      assertEquals(0, token4.kind);
      assertNotNull(token4);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-119), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals("", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, 0, 695);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-119), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1, 0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-119), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager1);
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(695, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(695, simpleCharStream1.getEndColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(695, simpleCharStream1.getBeginColumn());
      assertEquals("\u0000", token2.toString());
      assertEquals(0, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(695, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(16, token2.kind);
      assertEquals(695, token2.beginColumn);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-119), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token2);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(696, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(696, simpleCharStream1.getEndColumn());
      assertEquals(696, simpleCharStream1.getBeginColumn());
      assertEquals("\u0000", token3.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream1.bufpos);
      assertEquals(0, token3.endLine);
      assertEquals(696, token3.beginColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(696, token3.endColumn);
      assertEquals(16, token3.kind);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-119), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token3);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      
      Token token4 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(697, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(697, simpleCharStream1.getEndColumn());
      assertEquals(697, simpleCharStream1.getBeginColumn());
      assertEquals("\uFFFD", token4.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream1.bufpos);
      assertEquals(0, token4.endLine);
      assertEquals(697, token4.beginColumn);
      assertEquals(16, token4.kind);
      assertEquals(0, token4.beginLine);
      assertEquals(697, token4.endColumn);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-119), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token4);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[2] = (byte)96;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91, (byte)0, (byte)96, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)0, (byte)96, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1, 2);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)0, (byte)96, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager1);
      
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals("[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertArrayEquals(new byte[] {(byte)91, (byte)0, (byte)96, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(2, simpleCharStream1.getBeginColumn());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals("\u0000", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream1.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertArrayEquals(new byte[] {(byte)91, (byte)0, (byte)96, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token1, token0);
      
      jVCParserTokenManager0.setDebugStream(jVCParserTokenManager1.debugStream);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(2, simpleCharStream1.getBeginColumn());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)0, (byte)96, (byte)0}, byteArray0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream1);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(2, simpleCharStream1.getBeginColumn());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)0, (byte)96, (byte)0}, byteArray0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      
      jVCParserTokenManager0.setDebugStream(jVCParserTokenManager1.debugStream);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(2, simpleCharStream1.getBeginColumn());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)0, (byte)96, (byte)0}, byteArray0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(3, simpleCharStream1.getEndColumn());
      assertEquals(3, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals("`", token2.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream1.bufpos);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.endColumn);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertArrayEquals(new byte[] {(byte)91, (byte)0, (byte)96, (byte)0}, byteArray0);
      assertNotNull(token2);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals("[[", token0.toString());
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(3, simpleCharStream1.getEndColumn());
      assertEquals(3, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(3, simpleCharStream1.getBeginColumn());
      assertEquals("\uFFFD", token1.toString());
      assertEquals(2, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.beginColumn);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)78;
      byteArray0[7] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(14, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, (-22), 0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(14, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1, 0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(14, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(jVCParserTokenManager1);
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-22), simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getColumn());
      assertEquals((-22), simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getEndColumn());
      assertEquals((-22), simpleCharStream1.getBeginLine());
      assertEquals("[[", token2.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream1.bufpos);
      assertEquals(1, token2.kind);
      assertEquals((-22), token2.endLine);
      assertEquals(1, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals((-22), token2.beginLine);
      assertNotNull(token2);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("", token3.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginLine);
      assertNotNull(token3);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      
      Token token4 = jVCParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertEquals("", token4.toString());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, token4.beginLine);
      assertEquals(0, token4.kind);
      assertEquals(0, token4.beginColumn);
      assertEquals(0, token4.endLine);
      assertEquals(0, token4.endColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertNotNull(token4);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)101;
      byteArray0[5] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)101, (byte)101, (byte)0, (byte)101, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)101, (byte)101, (byte)0, (byte)101, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)101, (byte)101, (byte)0, (byte)101, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)101, (byte)101, (byte)0, (byte)101, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jVCParserTokenManager1);
      
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals("[[", token0.toString());
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)101, (byte)101, (byte)0, (byte)101, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      StringReader stringReader0 = new StringReader("[[==");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals("[[==", token0.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(3, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(4, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(4, token1.beginColumn);
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(4, token2.beginColumn);
      assertEquals(4, token2.endColumn);
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-101);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)10, (byte) (-101)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-101)}, byteArray0);
      assertNotNull(simpleCharStream1);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)10, (byte) (-101)}, byteArray0);
      assertNotNull(bufferedInputStream0);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(byteArrayInputStream0);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-101)}, byteArray0);
      assertNotNull(simpleCharStream2);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream2));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream2));
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals("", token0.toString());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(simpleCharStream0, simpleCharStream2);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertNotNull(token1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(simpleCharStream0, simpleCharStream2);
      assertNotSame(token1, token0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-101)}, byteArray0);
      assertNotNull(jVCParserTokenManager1);
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getEndColumn());
      assertEquals("\n", token2.toString());
      assertEquals(0, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endColumn);
      assertEquals(6, token2.kind);
      assertEquals(1, token2.endLine);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-101)}, byteArray0);
      assertNotNull(token2);
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      jVCParserTokenManager0.SwitchTo(0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream2));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(simpleCharStream0, simpleCharStream2);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[[+");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 32, (-2053));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-2051), simpleCharStream0.getEndColumn());
      assertEquals((-2053), simpleCharStream0.getBeginColumn());
      assertEquals(32, simpleCharStream0.getBeginLine());
      assertEquals(32, simpleCharStream0.getEndLine());
      assertEquals((-2051), simpleCharStream0.getColumn());
      assertEquals(32, simpleCharStream0.getLine());
      assertEquals("[[+", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(4, token0.kind);
      assertEquals((-2051), token0.endColumn);
      assertEquals((-2053), token0.beginColumn);
      assertEquals(32, token0.beginLine);
      assertEquals(32, token0.endLine);
      assertNotNull(token0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)96;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)96, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(2, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)96, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream1);
      
      SimpleCharStream simpleCharStream1 = null;
      try {
        simpleCharStream1 = new SimpleCharStream(byteArrayInputStream1, "[[+");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      boolean boolean0 = pipedReader0.markSupported();
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-70);
      byteArray0[0] = (byte)11;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-28);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)11, (byte)13, (byte) (-70), (byte)0, (byte)38, (byte) (-28), (byte)5, (byte) (-28)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)11, (byte)13, (byte) (-70), (byte)0, (byte)38, (byte) (-28), (byte)5, (byte) (-28)}, byteArray0);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)11, (byte)13, (byte) (-70), (byte)0, (byte)38, (byte) (-28), (byte)5, (byte) (-28)}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getColumn());
      assertEquals("\u000B", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertArrayEquals(new byte[] {(byte)11, (byte)13, (byte) (-70), (byte)0, (byte)38, (byte) (-28), (byte)5, (byte) (-28)}, byteArray0);
      assertNotNull(token0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals("\r", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(2, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, token1.beginLine);
      assertEquals(6, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)11, (byte)13, (byte) (-70), (byte)0, (byte)38, (byte) (-28), (byte)5, (byte) (-28)}, byteArray0);
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      
      Token token2 = jVCParserTokenManager0.jjFillToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals("\r", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(2, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.endColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(6, token2.kind);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)11, (byte)13, (byte) (-70), (byte)0, (byte)38, (byte) (-28), (byte)5, (byte) (-28)}, byteArray0);
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-101);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)10, (byte) (-101)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-101)}, byteArray0);
      assertNotNull(simpleCharStream1);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)10, (byte) (-101)}, byteArray0);
      assertNotNull(bufferedInputStream0);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(byteArrayInputStream0);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-101)}, byteArray0);
      assertNotNull(simpleCharStream2);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals("", token0.toString());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
      assertNotSame(simpleCharStream0, simpleCharStream2);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertNotNull(token1);
      assertNotSame(simpleCharStream0, simpleCharStream2);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token1, token0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-101)}, byteArray0);
      assertNotNull(jVCParserTokenManager1);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals("", token2.toString());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.kind);
      assertNotNull(token2);
      assertNotSame(simpleCharStream0, simpleCharStream2);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream1, 0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-101)}, byteArray0);
      assertNotNull(jVCParserTokenManager2);
      
      Token token3 = jVCParserTokenManager2.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals("\n", token3.toString());
      assertEquals(0, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, token3.kind);
      assertEquals(1, token3.beginColumn);
      assertEquals(1, token3.endColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-101)}, byteArray0);
      assertNotNull(token3);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
  }
}
