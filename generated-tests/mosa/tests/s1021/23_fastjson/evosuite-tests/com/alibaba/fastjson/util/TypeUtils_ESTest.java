/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:57:43 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.File;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.sql.ClientInfoStatus;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NavigableSet;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.LongBinaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      TypeUtils.loadClass(" F:&8Sv+%!6M<(", classLoader0, true);
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      decimalFormatSymbols0.setMinusSign('{');
      decimalFormatSymbols0.setDecimalSeparator('u');
      MockThread mockThread0 = new MockThread("=I>_Klv(</");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("to", classLoader0);
      TypeUtils.unwrapOptional((Type) null);
      String string0 = TypeUtils.decapitalize("to");
      assertEquals("to", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TypeUtils.decapitalize(")pj,;U*A#Jb");
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      Class<Double> class0 = Double.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, false);
      Class<SimpleDateFormat> class1 = SimpleDateFormat.class;
      Class<LinkageError> class2 = LinkageError.class;
      TypeUtils.isProxy(class2);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class1, jSONType0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<?> class3 = TypeUtils.getClass((Type) class2);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyNamingStrategy0, (Type) class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.LinkageError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TypeUtils.isNumber("1s!fV{Ok:<@X");
      Class<Double> class0 = Double.TYPE;
      TypeUtils.unwrapOptional(class0);
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("dd.MM.yyyy HH:mm:ss", ":00");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, true);
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sqlDateDeserializer0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"fastMatchToken\":2}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<String> class0 = String.class;
      TypeUtils.isProxy(class0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "com.alibaba.fastjson.serializer.EnumSerializer", (Type) class0, (ParserConfig) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.alibaba.fastjson.serializer.EnumSerializer\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeUtils.getCollectionItemClass(class0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      Class<JobAttributes> class1 = JobAttributes.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) noSuchMethodError0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.JobAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      System.setCurrentTimeMillis((-231L));
      Class<Short> class0 = Short.TYPE;
      TypeUtils.getGenericParamType(class0);
      TypeUtils.getSerializeFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<TimeZone> class0 = TimeZone.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) null, (Map<String, Field>) linkedHashMap0, true, propertyNamingStrategy0);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TypeUtils.castToBoolean((Object) null);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("oJ{Q G_5U6_,%");
      // Undeclared exception!
      try { 
        Collator.getInstance((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "not support class : ", fieldArray0);
      TypeUtils.isGenericParamType(class0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      WeakHashMap<IllegalAccessError, BufferCapabilities> weakHashMap0 = new WeakHashMap<IllegalAccessError, BufferCapabilities>();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.fnv1a_64("S");
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.fnv1a_64_lower(">2cWoE(j4u?-W");
      LinkedHashMap<Character, SQLException> linkedHashMap0 = new LinkedHashMap<Character, SQLException>();
      TypeUtils.castToInt((Object) null);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      MockGregorianCalendar mockGregorianCalendar0 = TypeUtils.castToJavaBean((Map<String, Object>) hashtable0, class1, parserConfig0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TypeUtils.isNumber("1s!fV{Ok:<@X");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("1s!fV{Ok:<@X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 1s!fV{Ok:<@X
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TypeUtils.castToByte("");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("javassist.util.proxy.ProxyObject");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.sql.SQLRecoverableException: java.sql.SQLNonTransientConnectionException: java.sql.SQLTransactionRollbackException: java.sql.SQLTransactionRollbackException: javassist.util.proxy.ProxyObject
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "net.sf.cglib.proxy.Factory";
      stringArray0[1] = "Ljava.util.concurrent.ConcurrentSkipListMap";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TypeUtils.isNumber("1s!fV{Ok:<@X");
      TypeUtils.getClassFromMapping("1s!fV{Ok:<@X");
      Class<?> class0 = TypeUtils.getClassFromMapping("=k'(-");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Insets insets0 = new Insets(0, 0, 0, 0);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      Class<JobAttributes> class0 = JobAttributes.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      ConcurrentHashMap<SQLSyntaxErrorException, Dimension> concurrentHashMap0 = new ConcurrentHashMap<SQLSyntaxErrorException, Dimension>();
      ConcurrentHashMap<String, Field> concurrentHashMap1 = new ConcurrentHashMap<String, Field>();
      ParserConfig.parserAllFieldToCache(class0, concurrentHashMap1);
      assertFalse(concurrentHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TypeUtils.castToBigInteger((Object) null);
      long long0 = TypeUtils.fnv1a_64_lower("S");
      assertEquals((-5808537081944601822L), long0);
      
      TypeUtils.clearClassMapping();
      String string0 = TypeUtils.decapitalize("S");
      assertEquals("s", string0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized("s");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Hashtable<SimpleDateFormat, MockCalendar> hashtable0 = new Hashtable<SimpleDateFormat, MockCalendar>();
      hashtable0.clear();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      JobAttributes jobAttributes0 = new JobAttributes();
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(stackOverflowError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.StackOverflowError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "IC";
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("IC");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"IC\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.util.List<java.lang.String>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(sqlDateDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      Class<DecimalFormatSymbols> class1 = DecimalFormatSymbols.class;
      Class<MockJapaneseDate> class2 = MockJapaneseDate.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("getDeclaringClass", linkedHashMap0);
      Class<DateFormatSymbols> class3 = DateFormatSymbols.class;
      FieldInfo fieldInfo0 = new FieldInfo("getDeclaringClass", class3, class2, class0, (Field) null, (-71), (-71), 57344);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(noClassDefFoundError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class0 = TypeUtils.getClass(type0);
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<NumberFormat> class0 = NumberFormat.class;
      Class<RuleBasedCollator> class1 = RuleBasedCollator.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Class<Short> class2 = Short.TYPE;
      TypeUtils.getCollectionItemType(class2);
      Class<SimpleDateFormat> class3 = SimpleDateFormat.class;
      SimpleDateFormat simpleDateFormat0 = TypeUtils.cast((Object) null, class3, (ParserConfig) null);
      assertNull(simpleDateFormat0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.autoTypeSupport", "java/lang/Object", 26);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "fastjson.parser.autoTypeSupport", (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      Class<JobAttributes> class0 = JobAttributes.class;
      TypeUtils.decapitalize("pj,;U*A#Jb");
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], class0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) outOfMemoryError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.lang.OutOfMemoryError -> java.awt.JobAttributes
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TypeUtils.loadClass("$");
      OptionalCodec optionalCodec0 = new OptionalCodec();
      TypeUtils.decapitalize("$");
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      Type[] typeArray0 = new Type[0];
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, type0, type0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "$", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@16c1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("IC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : IC
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      Class<Float> class0 = Float.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClass(type0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : float
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TypeUtils.decapitalize(")pj,;U*A#Jb");
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isNumber(")pj,;U*A#Jb");
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TypeUtils.decapitalize("getCause");
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("getCause");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      TypeUtils.getParserFeatures(class0);
      Class<Byte> class1 = Byte.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.util.SimpleTimeZone
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TypeUtils.castToByte((Object) null);
      Class<Locale> class0 = Locale.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("hCp~YT}X[F}K #Fk7", "f}i|Cg! 2Ltf");
      hashMap0.put("hCp~YT}X[F}K #Fk7", "hCp~YT}X[F}K #Fk7");
      hashMap0.put((String) null, "Ljava.lang.AutoCloseable");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, false);
      TypeUtils.getGenericParamType(class0);
      AtomicLong atomicLong0 = new AtomicLong(10L);
      Short short0 = TypeUtils.castToShort(atomicLong0);
      assertEquals((short)10, (short)short0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m?` s3m&W^F0oG");
      boolean boolean0 = TypeUtils.isHibernateInitialized("m?` s3m&W^F0oG");
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      boolean boolean1 = TypeUtils.isProxy(class0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      parserConfig0.addAccept((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"actualTypeArguments\":[{}],\"rawType\":{},\"typeName\":\"java.util.List<java.lang.String>\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class class0 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1, class0.getModifiers());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Insets insets0 = new Insets((-1196), (-1833), (-1833), (-1196));
      assertEquals((-1196), insets0.top);
      assertEquals((-1833), insets0.left);
      assertEquals((-1196), insets0.right);
      assertEquals((-1833), insets0.bottom);
      assertNotNull(insets0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(insets0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<VerifyError> class0 = VerifyError.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertNotNull(mockSimpleDateFormat0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(mockSimpleDateFormat0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("KF9\"", "1r,!*T*p/OA_tU%77", 35);
      assertEquals("1r,!*T*p/OA_tU%77", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(35, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: KF9\"", sQLNonTransientConnectionException0.toString());
      assertEquals("KF9\"", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertNotNull(parserConfig1);
      assertNotSame(parserConfig1, parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "KF9\"", (Type) class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.IllegalMonitorStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass(":D7 ");
      assertNull(class0);
      
      OptionalCodec optionalCodec0 = new OptionalCodec();
      assertEquals(12, optionalCodec0.getFastMatchToken());
      assertNotNull(optionalCodec0);
      
      String string0 = TypeUtils.decapitalize(":D7 ");
      assertEquals(":D7 ", string0);
      assertNotNull(string0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNotNull(outOfMemoryError0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      assertEquals(12, optionalCodec0.getFastMatchToken());
      assertNotNull(optionalCodec0);
      
      Class<MockJapaneseDate> class2 = MockJapaneseDate.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(serializeBeanInfo0);
      
      Class<SimpleDateFormat> class3 = SimpleDateFormat.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo((Class<?>) class3, (Map<String, String>) hashMap0, propertyNamingStrategy0, false);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
      assertNotNull(serializeBeanInfo1);
      assertNotSame(serializeBeanInfo1, serializeBeanInfo0);
      
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(boolean0);
      
      Class<?> class4 = TypeUtils.getCollectionItemClass(class2);
      assertFalse(class4.isAnnotation());
      assertEquals("class java.lang.Object", class4.toString());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertNotNull(class4);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      String string0 = linkedHashMap0.put("kotlin.ranges.LongRange", "kotlin.ranges.LongRange");
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(1, linkedHashMap0.size());
      assertNull(string0);
      
      String string1 = linkedHashMap0.put("Ljava.lang.AutoCloseable", (String) null);
      assertEquals(2, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      assertNull(string1);
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      SQLNonTransientException sQLNonTransientException0 = TypeUtils.cast((Object) null, class0, parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNull(sQLNonTransientException0);
      
      Class<?> class1 = TypeUtils.loadClass((String) null, (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      assertNotNull(sqlDateDeserializer0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Short short0 = TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      OptionalCodec optionalCodec0 = new OptionalCodec();
      assertEquals(12, optionalCodec0.getFastMatchToken());
      assertNotNull(optionalCodec0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(190, 190, (-901));
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=190,MONTH=190,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-901,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      java.util.Date date0 = TypeUtils.castToDate(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=190,MONTH=190,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-901,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertNotNull(date0);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Short> class0 = Short.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      TypeUtils.clearClassMapping();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      Class<Locale> class0 = Locale.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put((String) null, "Ljava.lang.AutoCloseable");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, false);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class class0 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isPrimitive());
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertNotNull(class0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNotNull(outOfMemoryError0);
      
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl1 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertNotNull(parameterizedTypeImpl1);
      assertSame(parameterizedTypeImpl0, parameterizedTypeImpl1);
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      assertEquals(2, timeDeserializer0.getFastMatchToken());
      assertNotNull(timeDeserializer0);
      
      Type[] typeArray0 = new Type[1];
      Class<TimeUnit> class1 = TimeUnit.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertFalse(class2.isArray());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertEquals(17409, class2.getModifiers());
      assertEquals("class java.util.concurrent.TimeUnit", class2.toString());
      assertNotNull(class2);
      
      typeArray0[0] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class2);
      assertFalse(class2.isArray());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertEquals(17409, class2.getModifiers());
      assertEquals("class java.util.concurrent.TimeUnit", class2.toString());
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      NumberFormatException numberFormatException0 = new NumberFormatException("istoString");
      assertEquals("java.lang.NumberFormatException: istoString", numberFormatException0.toString());
      assertEquals("istoString", numberFormatException0.getMessage());
      assertNotNull(numberFormatException0);
      
      String string0 = numberFormatException0.getLocalizedMessage();
      assertEquals("java.lang.NumberFormatException: istoString", numberFormatException0.toString());
      assertEquals("istoString", numberFormatException0.getMessage());
      assertEquals("istoString", string0);
      assertNotNull(string0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("tY[V.w", numberFormatException0);
      assertEquals("java.lang.NumberFormatException: istoString", numberFormatException0.toString());
      assertEquals("istoString", numberFormatException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: tY[V.w", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("tY[V.w", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLInvalidAuthorizationSpecException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      String string0 = TypeUtils.decapitalize("pj,;U*A#Jb");
      assertEquals("pj,;U*A#Jb", string0);
      assertNotNull(string0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class0 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "pj,;U*A#Jb", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",U$3A~_");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",U$3A~_");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn(parameterizedTypeImpl0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      boolean boolean2 = TypeUtils.compatibleWithFieldName;
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, type0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : interface java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("hCp~YT}X[F}K #Fk7", "f}i|Cg! 2Ltf");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      String string1 = hashMap1.put("hCp~YT}X[F}K #Fk7", "hCp~YT}X[F}K #Fk7");
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertNull(string1);
      assertNotSame(hashMap1, hashMap0);
      
      String string2 = hashMap0.put("InternationalCurrencySymbol", "1|z@d)$");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertNull(string2);
      assertNotSame(hashMap0, hashMap1);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNotNull(illegalThreadStateException0);
      
      Throwable throwable0 = illegalThreadStateException0.fillInStackTrace();
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNull(throwable0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", throwable0.toString());
      assertNotNull(throwable0);
      assertSame(illegalThreadStateException0, throwable0);
      assertSame(throwable0, illegalThreadStateException0);
      
      MockException mockException0 = new MockException(illegalThreadStateException0);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNotNull(mockException0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      NavigableSet<String> navigableSet0 = treeMap0.navigableKeySet();
      assertEquals(0, treeMap0.size());
      assertEquals(0, navigableSet0.size());
      assertTrue(navigableSet0.isEmpty());
      assertNotNull(navigableSet0);
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      assertEquals(0, treeMap0.size());
      assertNotNull(serializeBeanInfo0);
      
      TypeUtils.clearClassMapping();
      String string3 = TypeUtils.decapitalize("fastjson.compatibleWithJavaBean");
      assertEquals("fastjson.compatibleWithJavaBean", string3);
      assertNotNull(string3);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized("Ljava.lang.AutoCloseable");
      assertTrue(boolean0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized("hCp~YT}X[F}K #Fk7");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNotNull(noSuchMethodError0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      assertNotNull(outOfMemoryError0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("pj,;U*A#Jb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : pj,;U*A#Jb
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      assertEquals(12, optionalCodec0.getFastMatchToken());
      assertNotNull(optionalCodec0);
      
      String string0 = TypeUtils.decapitalize("$");
      assertEquals("$", string0);
      assertNotNull(string0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNotNull(outOfMemoryError0);
      
      Type[] typeArray0 = new Type[0];
      Class<Float> class0 = Float.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNotNull(noSuchMethodError0);
      
      String string0 = TypeUtils.decapitalize("pj,;U*A#Jb");
      assertEquals("pj,;U*A#Jb", string0);
      assertNotNull(string0);
      
      Class<Short> class0 = Short.TYPE;
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("short", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, false);
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("short", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      assertEquals("interface java.time.chrono.ChronoLocalDate", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertEquals(1537, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isInterface());
      assertNotNull(class2);
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("%3h##iAk7");
      assertEquals("%3h##iAk7", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, "pj,;U*A#Jb");
      assertEquals("%3h##iAk7", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(mockThread0, "pj,;U*A#Jb");
      assertEquals("%3h##iAk7", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      MockThread mockThread2 = new MockThread("pj,;U*A#Jb");
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotNull(mockThread2);
      
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotNull(classLoader0);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      
      StackTraceElement[] stackTraceElementArray0 = mockThread2.getStackTrace();
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotNull(stackTraceElementArray0);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      
      classLoader0.setPackageAssertionStatus("pj,;U*A#Jb", false);
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      Class<?> class3 = TypeUtils.loadClass("l", classLoader1, false);
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNull(class3);
      
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      assertNotNull(mockIllegalAccessException0);
      
      boolean boolean0 = Float.isFinite(0.0F);
      assertTrue(boolean0);
      
      byte[] byteArray0 = TypeUtils.castToBytes("l");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      StringCharacterIterator stringCharacterIterator0 = null;
      try {
        stringCharacterIterator0 = new StringCharacterIterator(";", 2678);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid position
         //
         verifyException("java.text.StringCharacterIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("getCurrency");
      assertEquals(1549360373152251308L, long0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      String string0 = hashtable0.put("getCurrency", "getCurrency");
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertNull(string0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      boolean boolean1 = Boolean.logicalAnd(false, true);
      assertFalse(boolean1);
      
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, hashtable0, true, propertyNamingStrategy1);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertSame(propertyNamingStrategy1, propertyNamingStrategy0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {getCurrency=getCurrency}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      assertNotNull(outOfMemoryError0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("0c`Ahqlw");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0c`Ahqlw\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNotNull(noSuchMethodError0);
      
      String string0 = TypeUtils.decapitalize("pj,;U*A#Jb");
      assertEquals("pj,;U*A#Jb", string0);
      assertNotNull(string0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNotNull(outOfMemoryError0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("pj,;U*A#Jb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : pj,;U*A#Jb
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      String[] stringArray1 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>();
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertNotNull(hashtable1);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Class<Field> class0 = Field.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, (PropertyNamingStrategy) null, false);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      assertEquals(12, optionalCodec0.getFastMatchToken());
      assertNotNull(optionalCodec0);
      
      String string0 = TypeUtils.decapitalize("$");
      assertEquals("$", string0);
      assertNotNull(string0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      assertNotNull(outOfMemoryError0);
      
      Type[] typeArray0 = new Type[0];
      Class<Short> class0 = Short.TYPE;
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("short", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("short", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class [S", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isArray());
      assertNotNull(class1);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class1);
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("short", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class [S", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isArray());
      assertNotNull(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Constructor<InternalError>[] constructorArray0 = (Constructor<InternalError>[]) Array.newInstance(Constructor.class, 1);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1014497654951707614L));
      assertEquals((short) (-990), bigDecimal0.shortValue());
      assertEquals((byte)34, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) bigDecimal0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Short> class0 = Short.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertEquals("class java.lang.Short", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      TypeUtils.clearClassMapping();
      String string0 = TypeUtils.decapitalize("javax.xml.datatype.XMLGregorianCalendar");
      assertEquals("javax.xml.datatype.XMLGregorianCalendar", string0);
      assertNotNull(string0);
      
      String string1 = TypeUtils.castToString((Object) null);
      assertNull(string1);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      String string2 = TypeUtils.decapitalize("fastjson.parser.autoTypeAccept");
      assertFalse(string2.equals((Object)string0));
      assertEquals("fastjson.parser.autoTypeAccept", string2);
      assertNotNull(string2);
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      String string0 = TypeUtils.decapitalize("pj,;U*A#Jb");
      assertEquals("pj,;U*A#Jb", string0);
      assertNotNull(string0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNotNull(outOfMemoryError0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
      
      Class<JobAttributes> class0 = JobAttributes.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "pj,;U*A#Jb", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.JobAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNotNull(noSuchMethodError0);
      
      String string0 = File.separator;
      assertEquals("/", string0);
      assertNotNull(string0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNotNull(outOfMemoryError0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Class<JobAttributes> class0 = JobAttributes.class;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.loadClass("L@'QeBwZ");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      assertEquals(2, timeDeserializer0.getFastMatchToken());
      assertNotNull(timeDeserializer0);
      
      Type[] typeArray0 = new Type[17];
      Class<TimeUnit> class1 = TimeUnit.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertFalse(class2.isSynthetic());
      assertEquals("class java.util.concurrent.TimeUnit", class2.toString());
      assertFalse(class2.isPrimitive());
      assertEquals(17409, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertNotNull(class2);
      
      typeArray0[0] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class2);
      assertFalse(class2.isSynthetic());
      assertEquals("class java.util.concurrent.TimeUnit", class2.toString());
      assertFalse(class2.isPrimitive());
      assertEquals(17409, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Double double0 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Integer integer0 = TypeUtils.castToInt(double0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Class<Character> class3 = Character.class;
      int int1 = TypeUtils.getSerializeFeatures(class3);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Insets insets0 = new Insets((-2041), (-1482), (-2041), (-1482));
      assertEquals((-1482), insets0.left);
      assertEquals((-1482), insets0.right);
      assertEquals((-2041), insets0.bottom);
      assertEquals((-2041), insets0.top);
      assertNotNull(insets0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.awt.Insets[top=-2041,left=-1482,bottom=-2041,right=-1482]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      InstantiationError instantiationError0 = new InstantiationError();
      assertNull(instantiationError0.getMessage());
      assertEquals("java.lang.InstantiationError", instantiationError0.toString());
      assertNotNull(instantiationError0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Locale locale0 = TypeUtils.toLocale("`1DL._OZ`F]Q=];V9");
      assertEquals("`1dl._OZ`F]Q=];V9", locale0.toString());
      assertEquals("`1dl.", locale0.getLanguage());
      assertEquals("OZ`F]Q=];V9", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      Class<RenderingHints> class0 = RenderingHints.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      JobAttributes jobAttributes0 = new JobAttributes();
      assertEquals(1, jobAttributes0.getFromPage());
      assertEquals(Integer.MAX_VALUE, jobAttributes0.getMaxPage());
      assertEquals(1, jobAttributes0.getToPage());
      assertEquals(1, jobAttributes0.getMinPage());
      assertNull(jobAttributes0.getPrinter());
      assertNull(jobAttributes0.getFileName());
      assertEquals(1, jobAttributes0.getCopies());
      assertNotNull(jobAttributes0);
      
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      assertNull(stackOverflowError0.getMessage());
      assertNotNull(stackOverflowError0);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap1.isEmpty());
      assertNotNull(concurrentHashMap1);
      
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap1, propertyNamingStrategy0, false);
      assertTrue(concurrentHashMap1.isEmpty());
      assertNotNull(serializeBeanInfo0);
      
      Class<SQLDataException> class1 = SQLDataException.class;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      FieldInfo fieldInfo0 = new FieldInfo("e<ZY|<D2Ym{}wNs 1}", class1, class0, class0, (Field) null, (-3084), (-3084), 2336);
      assertNull(fieldInfo0.getFormat());
      assertEquals("e<ZY|<D2Ym{}wNs 1}", fieldInfo0.toString());
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals((-3084), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(2336, fieldInfo0.parserFeatures);
      assertNotNull(fieldInfo0);
      
      Class<SQLNonTransientException> class3 = SQLNonTransientException.class;
      BeanContext beanContext0 = new BeanContext(class3, fieldInfo0);
      assertNull(fieldInfo0.getFormat());
      assertEquals("e<ZY|<D2Ym{}wNs 1}", fieldInfo0.toString());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertEquals((-3084), beanContext0.getFeatures());
      assertEquals("e<ZY|<D2Ym{}wNs 1}", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals((-3084), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(2336, fieldInfo0.parserFeatures);
      assertNotNull(beanContext0);
      
      Class<?> class4 = beanContext0.getFieldClass();
      assertNull(fieldInfo0.getFormat());
      assertEquals("e<ZY|<D2Ym{}wNs 1}", fieldInfo0.toString());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertEquals((-3084), beanContext0.getFeatures());
      assertEquals("e<ZY|<D2Ym{}wNs 1}", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isAnnotation());
      assertEquals("class java.util.SimpleTimeZone", class4.toString());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals((-3084), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(2336, fieldInfo0.parserFeatures);
      assertNotNull(class4);
      
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class3;
      typeArray0[1] = (Type) class2;
      typeArray0[2] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], class0);
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class3, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.util.SimpleTimeZone
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<NumberFormat> class0 = NumberFormat.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("~)hteb?cDrkY", "ic");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, false);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      long long0 = TypeUtils.fnv1a_64("to");
      assertEquals(632818452916781220L, long0);
      
      boolean boolean0 = TypeUtils.isNumber("to");
      assertFalse(boolean0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<SimpleDateFormat> class2 = SimpleDateFormat.class;
      SimpleDateFormat simpleDateFormat0 = TypeUtils.cast((Object) hashMap0, class2, (ParserConfig) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertNotNull(simpleDateFormat0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class class0 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isPrimitive());
      assertEquals("class java.lang.String", class0.toString());
      assertEquals(17, class0.getModifiers());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("1s!fV{Ok:<@X");
      assertFalse(boolean0);
      
      Class<Double> class0 = Double.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Ljava.lang.AutoCloseable", (String) null, (Throwable) null);
      assertEquals("java.sql.SQLNonTransientConnectionException: Ljava.lang.AutoCloseable", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("Ljava.lang.AutoCloseable", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("1s!fV{Ok:<@X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : 1s!fV{Ok:<@X
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      String string0 = TypeUtils.decapitalize("pj,;U*A#Jb");
      assertEquals("pj,;U*A#Jb", string0);
      assertNotNull(string0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      assertNotNull(outOfMemoryError0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      Class<JobAttributes> class0 = JobAttributes.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, (PropertyNamingStrategy) null, true);
      assertNotNull(serializeBeanInfo0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)51;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)1331, bigInteger0.shortValue());
      assertEquals((byte)51, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte) (-97), (byte)39, (byte)14, (byte) (-35), (byte)16, (byte)5, (byte)51}, byteArray0);
      assertNotNull(bigInteger0);
      
      Byte byte0 = TypeUtils.castToByte(bigInteger0);
      assertEquals((short)1331, bigInteger0.shortValue());
      assertEquals((byte)51, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte) (-97), (byte)39, (byte)14, (byte) (-35), (byte)16, (byte)5, (byte)51}, byteArray0);
      assertEquals((byte)51, (byte)byte0);
      assertNotNull(byte0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      assertNotNull(sqlDateDeserializer0);
      
      boolean boolean1 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class class0 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(17, class0.getModifiers());
      assertNotNull(class0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sqlDateDeserializer0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"fastMatchToken\":2}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = TypeUtils.decapitalize("pj,;U*A#Jb");
      assertEquals("pj,;U*A#Jb", string0);
      assertNotNull(string0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      assertNotNull(outOfMemoryError0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Class<Short> class0 = Short.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(boolean0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("sho");
      assertEquals("sho", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      assertEquals("sho", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertEquals("sho", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(classLoader0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertEquals("sho", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertEquals("sho", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("KR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance(locale1);
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("KR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertNotNull(breakIterator0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) breakIterator0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : [checksum=0xcba403eb]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.time.java.sql.SQLNonTransientException");
      assertFalse(boolean0);
      
      Class<Byte> class0 = Byte.class;
      boolean boolean1 = TypeUtils.isProxy(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.time.java.sql.SQLNonTransientException");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Class<TimeZone> class1 = TimeZone.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(serializeBeanInfo0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("java.time.java.sql.SQLNonTransientException");
      assertEquals("java.time.java.sql.SQLNonTransientException", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: java.time.java.sql.SQLNonTransientException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]", sQLRecoverableException0);
      assertEquals("java.time.java.sql.SQLNonTransientException", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: java.time.java.sql.SQLNonTransientException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("]", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLException sQLException0 = new SQLException("]", sQLSyntaxErrorException0);
      assertEquals("java.time.java.sql.SQLNonTransientException", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: java.time.java.sql.SQLNonTransientException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("]", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ]", sQLException0.toString());
      assertEquals("]", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertNotNull(sQLException0);
      
      SecurityException securityException0 = new SecurityException(sQLException0);
      assertEquals("java.time.java.sql.SQLNonTransientException", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: java.time.java.sql.SQLNonTransientException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("]", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ]", sQLException0.toString());
      assertEquals("]", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: ]", securityException0.getMessage());
      assertEquals("java.lang.SecurityException: java.sql.SQLException: ]", securityException0.toString());
      assertNotNull(securityException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("java.time.java.sql.SQLNonTransientException", securityException0);
      assertEquals("java.time.java.sql.SQLNonTransientException", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: java.time.java.sql.SQLNonTransientException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("]", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ]", sQLException0.toString());
      assertEquals("]", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: ]", securityException0.getMessage());
      assertEquals("java.lang.SecurityException: java.sql.SQLException: ]", securityException0.toString());
      assertEquals("java.time.java.sql.SQLNonTransientException", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: java.time.java.sql.SQLNonTransientException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      String string0 = TypeUtils.castToString(sQLDataException0);
      assertEquals("java.time.java.sql.SQLNonTransientException", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: java.time.java.sql.SQLNonTransientException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("]", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ]", sQLException0.toString());
      assertEquals("]", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: ]", securityException0.getMessage());
      assertEquals("java.lang.SecurityException: java.sql.SQLException: ]", securityException0.toString());
      assertEquals("java.time.java.sql.SQLNonTransientException", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: java.time.java.sql.SQLNonTransientException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("| TW0=X!v,JX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : | TW0=X!v,JX
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      String string0 = TypeUtils.decapitalize("pj,;U*A#Jb");
      assertEquals("pj,;U*A#Jb", string0);
      assertNotNull(string0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      assertNotNull(outOfMemoryError0);
      
      Class<?> class0 = TypeUtils.getClassFromMapping("deserialzeArrayMapping");
      assertNull(class0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertNotNull(class2);
      
      Collection collection0 = TypeUtils.createCollection(class2);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Short> class0 = Short.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      long long0 = TypeUtils.fnv1a_64("S");
      assertEquals((-5808501897572499070L), long0);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.lang.Short", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      TypeUtils.clearClassMapping();
      String string0 = TypeUtils.decapitalize("S");
      assertEquals("s", string0);
      assertNotNull(string0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      Class<SQLDataException> class2 = SQLDataException.class;
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      FieldInfo fieldInfo0 = new FieldInfo("e<ZY|<D2Ym{}wNs 1}", class2, class3, typeArray0[0], (Field) null, (-966), (-3084), 12);
      assertEquals("e<ZY|<D2Ym{}wNs 1}", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(12, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals((-3084), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.jsonDirect);
      assertNotNull(fieldInfo0);
      
      Class<Collator> class4 = Collator.class;
      Class class5 = (Class)FieldInfo.getFieldType(class4, class0, typeArray0[0]);
      assertFalse(class5.isInterface());
      assertFalse(class5.isArray());
      assertFalse(class5.isAnnotation());
      assertEquals(17, class5.getModifiers());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertEquals("class java.lang.Short", class5.toString());
      assertFalse(class5.isPrimitive());
      assertNotNull(class5);
      assertSame(class5, class1);
      
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.lang.Short", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("e<ZY|<D2Ym{}wNs 1}", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals((-3084), beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("e<ZY|<D2Ym{}wNs 1}", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(12, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals((-3084), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.jsonDirect);
      assertNotNull(beanContext0);
      
      Class<?> class6 = beanContext0.getFieldClass();
      assertFalse(class6.isPrimitive());
      assertFalse(class6.isAnnotation());
      assertEquals("class java.sql.SQLFeatureNotSupportedException", class6.toString());
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      assertEquals(1, class6.getModifiers());
      assertFalse(class6.isInterface());
      assertFalse(class6.isArray());
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.lang.Short", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("e<ZY|<D2Ym{}wNs 1}", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals((-3084), beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("e<ZY|<D2Ym{}wNs 1}", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(12, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals((-3084), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.jsonDirect);
      assertNotNull(class6);
      assertSame(class1, class5);
      
      typeArray0[2] = (Type) class1;
      typeArray0[4] = (Type) class1;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      typeArray0[8] = (Type) class0;
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal((double) (-3084), mathContext0);
      assertEquals((short) (-3084), bigDecimal0.shortValue());
      assertEquals((byte) (-12), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Long long1 = TypeUtils.castToLong(bigDecimal0);
      assertEquals((short) (-3084), bigDecimal0.shortValue());
      assertEquals((byte) (-12), bigDecimal0.byteValue());
      assertFalse(long1.equals((Object)long0));
      assertEquals((-3084L), (long)long1);
      assertNotNull(long1);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[2]);
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "S", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Character character0 = Character.valueOf('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      Object object0 = properties0.put(character0, character0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertNull(object0);
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) properties0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Character cannot be cast to java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNotNull(noSuchMethodError0);
      
      String string0 = TypeUtils.decapitalize("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertEquals("ljava.util.concurrent.ConcurrentSkipListSet", string0);
      assertNotNull(string0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      assertNotNull(outOfMemoryError0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      ObjectDeserializer objectDeserializer0 = parserConfig0.createJavaBeanDeserializer(class0, class0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(objectDeserializer0);
      
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, (PropertyNamingStrategy) null, true);
      assertNotNull(serializeBeanInfo0);
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("fastjson.parser.deny", hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("Ljava.util.concurrent.ConcurrentSkipListSet", class1, class1, class1, (Field) null, (-1658186498), (-3018), (-3018));
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListSet", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals((-3018), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertEquals((-3018), fieldInfo0.parserFeatures);
      assertNotNull(fieldInfo0);
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListSet", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals((-3018), beanContext0.getFeatures());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListSet", beanContext0.getName());
      assertEquals("", beanContext0.getLabel());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals((-3018), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertEquals((-3018), fieldInfo0.parserFeatures);
      assertNotNull(beanContext0);
      
      Method method0 = beanContext0.getMethod();
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListSet", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals((-3018), beanContext0.getFeatures());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListSet", beanContext0.getName());
      assertEquals("", beanContext0.getLabel());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals((-3018), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertEquals((-3018), fieldInfo0.parserFeatures);
      assertNull(method0);
      
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      String string0 = TypeUtils.decapitalize("pj,;U*A#Jb");
      assertEquals("pj,;U*A#Jb", string0);
      assertNotNull(string0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      assertNotNull(outOfMemoryError0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      Class<Point> class0 = Point.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) linkedHashMap0, false, (PropertyNamingStrategy) null);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("KF9\"", "1r,!*T*p/OA_tU%77", 35);
      assertEquals(35, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("KF9\"", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: KF9\"", sQLNonTransientConnectionException0.toString());
      assertEquals("1r,!*T*p/OA_tU%77", sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ConcurrentHashMap<Calendar, ChronoLocalDate> concurrentHashMap1 = new ConcurrentHashMap<Calendar, ChronoLocalDate>();
      assertTrue(concurrentHashMap1.isEmpty());
      assertNotNull(concurrentHashMap1);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(concurrentHashMap1);
      assertTrue(concurrentHashMap1.isEmpty());
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = TypeUtils.decapitalize(")pj,;U*A#Jb");
      assertEquals(")pj,;U*A#Jb", string0);
      assertNotNull(string0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      assertNotNull(outOfMemoryError0);
      
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      boolean boolean0 = TypeUtils.isNumber(")pj,;U*A#Jb");
      assertFalse(boolean0);
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.sql.SQLRecoverableException", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("java.time.ZoneId");
      assertEquals("java.time.ZoneId", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "toJdbc");
      assertEquals("java.time.ZoneId", threadGroup0.getName());
      assertEquals("toJdbc", threadGroup1.getName());
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNotNull(threadGroup1);
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertNotNull(thread0);
      
      MockThread mockThread0 = new MockThread(thread0, "iNF}i)0ckQ~HL~!>1XV");
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup1, mockThread0, "java.time.ZoneId", (-3750763034362895579L));
      assertEquals("java.time.ZoneId", threadGroup0.getName());
      assertEquals("toJdbc", threadGroup1.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      MockThread mockThread2 = new MockThread(threadGroup1, mockThread1, "false");
      assertEquals("java.time.ZoneId", threadGroup0.getName());
      assertEquals("toJdbc", threadGroup1.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertNotNull(mockThread2);
      
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertEquals("java.time.ZoneId", threadGroup0.getName());
      assertEquals("toJdbc", threadGroup1.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertNotNull(classLoader0);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      
      classLoader0.setClassAssertionStatus("net.sf.cglib.proxy.Factory", true);
      assertEquals("java.time.ZoneId", threadGroup0.getName());
      assertEquals("toJdbc", threadGroup1.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      
      MockThread.reset();
      classLoader0.setPackageAssertionStatus("net.sf.cglib.proxy.Factory", false);
      assertEquals("java.time.ZoneId", threadGroup0.getName());
      assertEquals("toJdbc", threadGroup1.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      
      Class<?> class0 = TypeUtils.loadClass("java.time.ZoneId", classLoader0, true);
      assertEquals("java.time.ZoneId", threadGroup0.getName());
      assertEquals("toJdbc", threadGroup1.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("class java.time.ZoneId", class0.toString());
      assertEquals(1025, class0.getModifiers());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertNotNull(class0);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertEquals("java.time.ZoneId", threadGroup0.getName());
      assertEquals("toJdbc", threadGroup1.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("class java.time.ZoneId", class0.toString());
      assertEquals(1025, class0.getModifiers());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertNull(type0);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      
      Locale locale0 = TypeUtils.toLocale("net.sf.cglib.proxy.Factory");
      assertEquals("", locale0.getISO3Country());
      assertEquals("net.sf.cglib.proxy.factory", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("net.sf.cglib.proxy.factory", locale0.getLanguage());
      assertNotNull(locale0);
      
      Type type1 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type1);
      
      Locale locale1 = TypeUtils.toLocale("Ljava.lang.AutoCloseable");
      assertEquals("", locale1.getISO3Country());
      assertEquals("ljava.lang.autocloseable", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("ljava.lang.autocloseable", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      AtomicLong atomicLong0 = new AtomicLong(2599L);
      assertEquals((short)2599, atomicLong0.shortValue());
      assertEquals(2599, atomicLong0.intValue());
      assertEquals("2599", atomicLong0.toString());
      assertEquals(2599.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(2599.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(2599L, atomicLong0.get());
      assertEquals(2599L, atomicLong0.longValue());
      assertEquals((byte)39, atomicLong0.byteValue());
      assertNotNull(atomicLong0);
      
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(longBinaryOperator0).applyAsLong(anyLong() , anyLong());
      long long0 = atomicLong0.getAndAccumulate(2599L, longBinaryOperator0);
      assertEquals(0L, atomicLong0.get());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0, atomicLong0.intValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(2599L, long0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(atomicLong0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Short> class0 = Short.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Short", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertNotNull(class1);
      
      TypeUtils.clearClassMapping();
      String string0 = TypeUtils.decapitalize("S");
      assertEquals("s", string0);
      assertNotNull(string0);
      
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class1);
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Short", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertNotNull(parameterizedTypeImpl0);
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("e<ZY|<D2Ym{}wNs 1}");
      assertEquals("java.lang.IllegalMonitorStateException: e<ZY|<D2Ym{}wNs 1}", illegalMonitorStateException0.toString());
      assertEquals("e<ZY|<D2Ym{}wNs 1}", illegalMonitorStateException0.getMessage());
      assertNotNull(illegalMonitorStateException0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalMonitorStateException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      AtomicLong atomicLong0 = new AtomicLong(2599L);
      assertEquals("2599", atomicLong0.toString());
      assertEquals(2599L, atomicLong0.longValue());
      assertEquals(2599L, atomicLong0.get());
      assertEquals((byte)39, atomicLong0.byteValue());
      assertEquals(2599.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(2599, atomicLong0.intValue());
      assertEquals((short)2599, atomicLong0.shortValue());
      assertEquals(2599.0F, atomicLong0.floatValue(), 0.01F);
      assertNotNull(atomicLong0);
      
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(2599L).when(longBinaryOperator0).applyAsLong(anyLong() , anyLong());
      long long0 = atomicLong0.getAndAccumulate(2599L, longBinaryOperator0);
      assertEquals("2599", atomicLong0.toString());
      assertEquals(2599L, atomicLong0.longValue());
      assertEquals(2599L, atomicLong0.get());
      assertEquals((byte)39, atomicLong0.byteValue());
      assertEquals(2599.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(2599, atomicLong0.intValue());
      assertEquals((short)2599, atomicLong0.shortValue());
      assertEquals(2599.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(2599L, long0);
      
      Time time0 = TypeUtils.castToSqlTime(atomicLong0);
      assertEquals("2599", atomicLong0.toString());
      assertEquals(2599L, atomicLong0.longValue());
      assertEquals(2599L, atomicLong0.get());
      assertEquals((byte)39, atomicLong0.byteValue());
      assertEquals(2599.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(2599, atomicLong0.intValue());
      assertEquals((short)2599, atomicLong0.shortValue());
      assertEquals(2599.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals("00:00:02", time0.toString());
      assertNotNull(time0);
      
      BitSet bitSet0 = new BitSet(11);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(bitSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Short> class0 = Short.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeSupport");
      assertEquals("fastjson.parser.autoTypeAccept", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: fastjson.parser.autoTypeAccept", sQLNonTransientConnectionException0.toString());
      assertEquals("fastjson.parser.autoTypeSupport", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      assertEquals(12, mapDeserializer0.getFastMatchToken());
      assertNotNull(mapDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mapDeserializer0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.parser.deserializer.MapDeserializer@96
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      Class<SQLDataException> class0 = SQLDataException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isProxy(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = TypeUtils.decapitalize("<");
      assertEquals("<", string0);
      assertNotNull(string0);
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      classLoader0.setPackageAssertionStatus(":", true);
      assertSame(classLoader0, classLoader1);
      
      classLoader0.setPackageAssertionStatus("HUVg", true);
      assertSame(classLoader0, classLoader1);
      
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory", classLoader0, false);
      assertEquals("class com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      assertSame(classLoader0, classLoader1);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertEquals("class com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      assertSame(classLoader0, classLoader1);
      assertNotSame(class0, class1);
      assertNotSame(class1, class0);
      
      Class<Double> class2 = Double.TYPE;
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertEquals("double", class2.toString());
      assertFalse(class2.isAnnotation());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      Class class3 = (Class)TypeUtils.unwrapOptional(class2);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertEquals("double", class2.toString());
      assertFalse(class2.isAnnotation());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("double", class3.toString());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1041, class3.getModifiers());
      assertNotNull(class3);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class2, map0, true);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertEquals("double", class2.toString());
      assertFalse(class2.isAnnotation());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<ChoiceFormat> class4 = ChoiceFormat.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class4);
      assertNull(stringArray0);
      
      String string0 = TypeUtils.decapitalize(":");
      assertEquals(":", string0);
      assertNotNull(string0);
      
      TypeUtils.clearClassMapping();
      Class<TimeUnit> class5 = TimeUnit.class;
      int int0 = TypeUtils.getParserFeatures(class5);
      assertEquals(0, int0);
      
      Class<?> class6 = TypeUtils.loadClass("fil", classLoader0);
      assertNull(class6);
      assertSame(classLoader0, classLoader1);
      
      Class<?> class7 = TypeUtils.getClass((Type) class2);
      assertTrue(class7.isPrimitive());
      assertFalse(class7.isArray());
      assertFalse(class7.isInterface());
      assertFalse(class7.isEnum());
      assertEquals("double", class7.toString());
      assertFalse(class7.isSynthetic());
      assertEquals(1041, class7.getModifiers());
      assertFalse(class7.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertEquals("double", class2.toString());
      assertFalse(class2.isAnnotation());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class7.equals((Object)class1));
      assertFalse(class7.equals((Object)class0));
      assertNotNull(class7);
      assertNotSame(class7, class1);
      assertNotSame(class7, class0);
      
      Class class8 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertFalse(class8.isInterface());
      assertFalse(class8.isArray());
      assertFalse(class8.isAnnotation());
      assertFalse(class8.isPrimitive());
      assertEquals("class java.lang.Object", class8.toString());
      assertEquals(1, class8.getModifiers());
      assertFalse(class8.isEnum());
      assertFalse(class8.isSynthetic());
      assertFalse(class8.equals((Object)class3));
      assertNotNull(class8);
      assertNotSame(class8, class3);
      
      Constructor<StringIndexOutOfBoundsException>[] constructorArray0 = (Constructor<StringIndexOutOfBoundsException>[]) Array.newInstance(Constructor.class, 6);
      constructorArray0[0] = (Constructor<StringIndexOutOfBoundsException>) constructorArray0;
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertNotNull(decimalFormatSymbols0);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(class1);
      
      TypeUtils.clearClassMapping();
      Class class2 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class2.isInterface());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals("int", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      assertSame(class2, class1);
      
      TypeUtils.clearClassMapping();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class int
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
      
      Class<BitSet> class0 = BitSet.class;
      boolean boolean1 = TypeUtils.isProxy(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Short> class0 = Short.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      long long0 = TypeUtils.fnv1a_64("");
      assertEquals((-3750763034362895579L), long0);
      
      TypeUtils.clearClassMapping();
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      long long1 = TypeUtils.fnv1a_64_lower("");
      assertTrue(long1 == long0);
      assertEquals((-3750763034362895579L), long1);
      
      LinkedHashMap<Character, SQLException> linkedHashMap0 = new LinkedHashMap<Character, SQLException>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      Integer integer0 = TypeUtils.castToInt("");
      assertNull(integer0);
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      MockGregorianCalendar mockGregorianCalendar0 = TypeUtils.castToJavaBean((Map<String, Object>) hashtable0, class1, parserConfig0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x3r6W)bu}Z uL.");
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized("x3r6W)bu}Z uL.");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(throwableDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) throwableDeserializer0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      String string0 = TypeUtils.decapitalize("pj,;U*A#Jb");
      assertEquals("pj,;U*A#Jb", string0);
      assertNotNull(string0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<Integer> class0 = Integer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertEquals("class java.lang.Integer", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "pj,;U*A#Jb", (Type) class1, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"pj;U*A#Jb\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNotNull(noSuchMethodError0);
      
      String string0 = TypeUtils.decapitalize("pj,;U*A#Jb");
      assertEquals("pj,;U*A#Jb", string0);
      assertNotNull(string0);
      
      Class<Short> class0 = Short.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":f$?g0>6|p");
      assertFalse(boolean0);
      
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isInterface());
      assertEquals(1537, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("interface java.time.chrono.ChronoLocalDate", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Class<SQLDataException> class3 = SQLDataException.class;
      Class<SQLFeatureNotSupportedException> class4 = SQLFeatureNotSupportedException.class;
      Type[] typeArray0 = new Type[6];
      typeArray0[3] = (Type) class2;
      Class<Byte> class5 = Byte.TYPE;
      assertFalse(class5.isAnnotation());
      assertFalse(class5.isInterface());
      assertEquals("byte", class5.toString());
      assertFalse(class5.isArray());
      assertTrue(class5.isPrimitive());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertEquals(1041, class5.getModifiers());
      assertNotNull(class5);
      
      typeArray0[2] = (Type) class5;
      Class<VerifyError> class6 = VerifyError.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class6, linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class7 = javaBeanSerializer0.getType();
      assertEquals("class java.lang.VerifyError", class7.toString());
      assertFalse(class7.isEnum());
      assertFalse(class7.isSynthetic());
      assertFalse(class7.isArray());
      assertFalse(class7.isInterface());
      assertFalse(class7.isPrimitive());
      assertEquals(1, class7.getModifiers());
      assertFalse(class7.isAnnotation());
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertFalse(class7.equals((Object)class2));
      assertNotNull(class7);
      assertNotSame(class7, class2);
      
      typeArray0[3] = (Type) class7;
      typeArray0[4] = (Type) class4;
      typeArray0[5] = (Type) class3;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4324), "LocalizedMessage");
      assertEquals("LocalizedMessage", simpleTimeZone0.getID());
      assertEquals((-4324), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=LocalizedMessage,offset=-4324,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) simpleTimeZone0, (Type) class5, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.util.SimpleTimeZone[id=LocalizedMessage,offset=-4324,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.autoTypeSupport", "67daV:R2=1+30.4c|M", 5);
      assertEquals(5, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeSupport", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: fastjson.parser.autoTypeSupport", sQLNonTransientConnectionException0.toString());
      assertEquals("67daV:R2=1+30.4c|M", sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Class<Float> class0 = Float.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockGregorianCalendar0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<SQLDataException> class0 = SQLDataException.class;
      boolean boolean1 = TypeUtils.isProxy(class0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<MockCalendar> class1 = MockCalendar.class;
      Class<MockHijrahDate> class2 = MockHijrahDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class3 = JavaBeanInfo.getBuilderClass(class2, jSONType0);
      assertNull(class3);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\uFFE5", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("CNY", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertNotNull(decimalFormatSymbols0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.sql.S");
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Class<SQLTransientException> class1 = SQLTransientException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(throwableDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "java.sql.S", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1014497654951707614L));
      assertEquals((byte)34, bigDecimal0.byteValue());
      assertEquals((short) (-990), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      java.util.Date date0 = TypeUtils.castToDate(bigDecimal0);
      assertEquals((byte)34, bigDecimal0.byteValue());
      assertEquals((short) (-990), bigDecimal0.shortValue());
      assertEquals("Fri Mar 10 14:44:52 GMT 32145522", date0.toString());
      assertNotNull(date0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      Class<?> class1 = TypeUtils.loadClass("3d<zW%nUZ", classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNull(class1);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertNotNull(decimalFormat0);
      
      String string0 = linkedHashMap0.getOrDefault(decimalFormat0, "9+$i/T");
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("9+$i/T", string0);
      assertNotNull(string0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      Class<Double> class0 = Double.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertEquals("class java.lang.Double", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "9+$i/T", (Type) class1, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertNotNull(decimalFormat0);
      
      String string0 = linkedHashMap0.getOrDefault(decimalFormat0, "9+$i/T");
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("9+$i/T", string0);
      assertNotNull(string0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<Float> class0 = Float.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Float", class1.toString());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "9+$i/T", (Type) class1, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      assertEquals(12, optionalCodec0.getFastMatchToken());
      assertNotNull(optionalCodec0);
      
      Class<MockJapaneseDate> class2 = MockJapaneseDate.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(serializeBeanInfo0);
      
      Class<PropertyNamingStrategy> class3 = PropertyNamingStrategy.class;
      boolean boolean0 = TypeUtils.isProxy(class3);
      assertFalse(boolean0);
      
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      Class<?> class5 = JavaBeanInfo.getBuilderClass(class4, (JSONType) null);
      assertNull(class5);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) bitSet0, (Type) class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      InstantiationError instantiationError0 = new InstantiationError();
      assertEquals("java.lang.InstantiationError", instantiationError0.toString());
      assertNull(instantiationError0.getMessage());
      assertNotNull(instantiationError0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Locale locale0 = TypeUtils.toLocale("`1DL._OZ`F]_^Q=];V9");
      assertEquals("^Q=];V9", locale0.getVariant());
      assertEquals("`1dl.", locale0.getLanguage());
      assertEquals("OZ`F]", locale0.getCountry());
      assertEquals("`1dl._OZ`F]_^Q=];V9", locale0.toString());
      assertNotNull(locale0);
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException(1);
      assertEquals("java.lang.StringIndexOutOfBoundsException: String index out of range: 1", stringIndexOutOfBoundsException0.toString());
      assertEquals("String index out of range: 1", stringIndexOutOfBoundsException0.getMessage());
      assertNotNull(stringIndexOutOfBoundsException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(stringIndexOutOfBoundsException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.StringIndexOutOfBoundsException: String index out of range: 1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("eW!>/", "Z<Z]LF\"MP");
      assertNull(string0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, true);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      MockThread mockThread0 = new MockThread();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("D6((b;HEQs");
      assertEquals("D6((b;HEQs", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      threadGroup0.setDaemon(true);
      assertEquals("D6((b;HEQs", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "eW!>/");
      assertEquals("D6((b;HEQs", threadGroup0.getName());
      assertEquals("eW!>/", threadGroup1.getName());
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNotNull(threadGroup1);
      
      ThreadGroup[] threadGroupArray0 = new ThreadGroup[3];
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup1, (String) null);
      assertEquals("D6((b;HEQs", threadGroup0.getName());
      assertEquals("eW!>/", threadGroup1.getName());
      assertNull(threadGroup2.getName());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertNotNull(threadGroup2);
      
      threadGroupArray0[0] = threadGroup2;
      threadGroupArray0[1] = threadGroup0;
      threadGroupArray0[2] = threadGroup0;
      int int0 = threadGroup1.enumerate(threadGroupArray0, true);
      assertEquals("D6((b;HEQs", threadGroup0.getName());
      assertEquals("eW!>/", threadGroup1.getName());
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertEquals(1, int0);
      assertNotSame(threadGroup0, threadGroup2);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(threadGroup1, threadGroup2);
      
      MockThread.setDefaultUncaughtExceptionHandler(threadGroup1);
      assertEquals("D6((b;HEQs", threadGroup0.getName());
      assertEquals("eW!>/", threadGroup1.getName());
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertNotSame(threadGroup0, threadGroup2);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(threadGroup1, threadGroup2);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader0);
      
      Class<?> class1 = TypeUtils.loadClass("Z<Z]LF\"MP", classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNull(class1);
      
      WeakHashMap<String, ClientInfoStatus> weakHashMap1 = new WeakHashMap<String, ClientInfoStatus>();
      assertNotNull(weakHashMap1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("java.");
      assertEquals("java.sql.SQLNonTransientConnectionException: java.", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(", class ", weakHashMap1, sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: java.", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(", class ", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: , class ", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertEquals("java.sql.SQLNonTransientConnectionException: java.", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(", class ", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: , class ", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Z<Z]LF\"MP", "D6((b;HEQs", 1, map0, sQLClientInfoException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: java.", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(", class ", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: , class ", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("java.sql.SQLClientInfoException: Z<Z]LF\"MP", sQLClientInfoException1.toString());
      assertEquals("Z<Z]LF\"MP", sQLClientInfoException1.getMessage());
      assertEquals("D6((b;HEQs", sQLClientInfoException1.getSQLState());
      assertEquals(1, sQLClientInfoException1.getErrorCode());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException1);
      
      Class<Long> class2 = Long.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLClientInfoException1, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.sql.SQLClientInfoException: Z<Z]LF\"MP
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
