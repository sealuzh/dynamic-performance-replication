/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:05:06 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import java.util.zip.Inflater;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.BufferedSource;
import okio.InflaterSource;
import okio.RealBufferedSource;
import okio.Sink;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      IOException iOException0 = AsyncTimeout.head.newTimeoutException((IOException) null);
      MockIOException mockIOException0 = new MockIOException(iOException0);
      AsyncTimeout.head.newTimeoutException(mockIOException0);
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime((-1399L));
      asyncTimeout0.timedOut();
      AsyncTimeout.head.timedOut();
      MockIOException mockIOException1 = new MockIOException(" mUkDmfF96J!T$O");
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout1.newTimeoutException(mockIOException1);
      assertEquals("java.io.InterruptedIOException: timeout", interruptedIOException0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime((-1399L));
      AsyncTimeout.head.sink((Sink) null);
      asyncTimeout1.enter();
      asyncTimeout1.timedOut();
      assertSame(asyncTimeout0, asyncTimeout1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      asyncTimeout0.source(buffer1);
      asyncTimeout0.exit(false);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.enter();
      assertEquals(0L, asyncTimeout0.timeoutNanos());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime((-1392409281321399L));
      asyncTimeout0.enter();
      AsyncTimeout asyncTimeout2 = AsyncTimeout.awaitTimeout();
      asyncTimeout0.exit();
      asyncTimeout0.enter();
      MockIOException mockIOException0 = new MockIOException("k-phJJU*]LA>gQaEgk:");
      MockIOException mockIOException1 = new MockIOException("k-phJJU*]LA>gQaEgk:", mockIOException0);
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout0.exit((IOException) mockIOException1);
      InterruptedIOException interruptedIOException1 = (InterruptedIOException)asyncTimeout2.newTimeoutException(interruptedIOException0);
      asyncTimeout2.newTimeoutException(interruptedIOException1);
      asyncTimeout1.exit(true);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.timeout(961L, timeUnit0);
      asyncTimeout1.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime((-1392409281321399L));
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime((-1392409281321399L));
      StackTraceElement stackTraceElement0 = new StackTraceElement(";_kqQw", "@.Q%U-h$8lZ8Nuc89a", ";_kqQw", (-230));
      asyncTimeout1.enter();
      MockIOException mockIOException0 = new MockIOException("");
      mockIOException0.fillInStackTrace();
      MockIOException mockIOException1 = new MockIOException((String) null, mockIOException0);
      mockIOException1.toString();
      asyncTimeout0.newTimeoutException(mockIOException0);
      asyncTimeout0.newTimeoutException(mockIOException0);
      asyncTimeout1.exit(false);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime((-1392409281321399L));
      asyncTimeout0.enter();
      AsyncTimeout asyncTimeout1 = AsyncTimeout.awaitTimeout();
      boolean boolean0 = true;
      try { 
        asyncTimeout1.exit(true);
        fail("Expecting exception: InterruptedIOException");
      
      } catch(InterruptedIOException e) {
         //
         // timeout
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime((-1392409281321399L));
      asyncTimeout0.enter();
      AsyncTimeout asyncTimeout2 = AsyncTimeout.awaitTimeout();
      asyncTimeout0.exit();
      asyncTimeout0.enter();
      MockIOException mockIOException0 = new MockIOException("k-phJJU*]LA>gQaEgk:");
      MockIOException mockIOException1 = new MockIOException("k-phJJU*]LA>gQaEgk:", mockIOException0);
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout0.exit((IOException) mockIOException1);
      InterruptedIOException interruptedIOException1 = (InterruptedIOException)asyncTimeout2.newTimeoutException(interruptedIOException0);
      asyncTimeout2.newTimeoutException(interruptedIOException1);
      asyncTimeout1.exit(true);
      asyncTimeout1.timedOut();
  }
}
