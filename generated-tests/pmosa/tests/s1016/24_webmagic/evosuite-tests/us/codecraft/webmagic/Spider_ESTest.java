/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 09:25:19 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.RegexSelector;
import us.codecraft.webmagic.selector.Selector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.setPipelines(linkedList0);
      RegexSelector regexSelector0 = null;
      try {
        regexSelector0 = new RegexSelector("_cycle_tried_times");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.selector.RegexSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.scheduler.PriorityScheduler";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.scheduler.PriorityScheduler");
      Spider spider0 = new Spider(simplePageProcessor0);
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("eeF0~w!VV`9'Zx\"");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cycleRetryTimes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("bhLM$*O");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "bhLM$*O";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "~uj|6[pbr`l]m^";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("~uj|6[pbr`l]m^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string1 = "Uz }8^GQvzHx+w-";
      FilePipeline filePipeline0 = new FilePipeline("Uz }8^GQvzHx+w-");
      Spider spider1 = spider0.addPipeline(filePipeline0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.scheduler(queueScheduler0);
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      int int0 = 810;
      Spider spider3 = spider2.thread((ExecutorService) forkJoinPool0, int0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = filePipeline0.PATH_SEPERATOR;
      stringArray0[4] = filePipeline0.PATH_SEPERATOR;
      stringArray0[5] = string1;
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setUUID("L$)d+'xGj");
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) null, (-2449));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      spider0.destroyWhenExit = true;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(95, threadFactory0);
      Spider spider1 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      Spider spider2 = spider1.setUUID("");
      int int0 = 2189;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) linkedList0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = 0;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardPolicy0);
      Spider spider1 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      Spider spider2 = spider1.clearPipeline();
      // Undeclared exception!
      try { 
        spider2.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("o");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = false;
      Spider spider1 = spider0.setExitWhenComplete(false);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      Request request1 = request0.putExtra("o", simplePageProcessor0);
      Request request2 = request1.setMethod("o");
      requestArray0[0] = request2;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=s<^x`5Te~PDd*`?4X");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.start();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = new Spider(simplePageProcessor0);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" error", "us.codecraft.webmagic.model.HttpRequestBody");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.getStatus();
      assertTrue(spider1.isExitWhenComplete());
      
      Selector[] selectorArray0 = new Selector[0];
      OrSelector orSelector0 = new OrSelector(selectorArray0);
      List<String> list0 = orSelector0.selectList("!ysAW,;\"/_Yi{");
      spider1.getAll((Collection<String>) list0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("$<,Qhp@[7!m1ro:", "/");
      spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("r");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.startRequest((List<Request>) null);
      Spider spider2 = spider1.setExitWhenComplete(false);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider2.scheduler(priorityScheduler0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider4 = spider3.pipeline(consolePipeline0);
      Spider spider5 = spider4.setUUID("X/F;kRPrLxj-cjqA");
      spider0.getSpiderListeners();
      spider5.setSpiderListeners((List<SpiderListener>) null);
      Spider.Status spider_Status0 = Spider.Status.fromValue((-668));
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7uOyF~~kGXy9`");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("7uOyF~~kGXy9`");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      spider0.clearPipeline();
      Request request0 = new Request();
      Request request1 = request0.setUrl("7uOyF~~kGXy9`");
      Request request2 = request1.setUrl("");
      request0.setExtras((Map<String, Object>) null);
      Request request3 = request2.setBinaryContent(false);
      Request request4 = new Request();
      request2.setPriority(0L);
      request3.setBinaryContent(false);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      Request[] requestArray0 = new Request[1];
      requestArray0[0] = null;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(22, threadPoolExecutor_DiscardPolicy0);
      Spider spider1 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      spider1.setUUID("");
      Spider spider2 = spider1.clearPipeline();
      Spider spider3 = spider2.thread(22);
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getStartTime();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H:%");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSite();
      spider0.getScheduler();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "aDe`^=OeV72a+P^";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("aDe`^=OeV72a+P^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Json json0 = new Json((List<String>) null);
      Class<String> class0 = String.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      json0.toList(class0);
      // Undeclared exception!
      try { 
        spider0.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("r");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.thread(5);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider0.sleep(40);
      Spider spider1 = spider0.downloader((Downloader) null);
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("@Ughl7a//!dv5w:j");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string0 = "jC;9";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(".cursor.txt", "jC;9");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(".cursor.txt");
      Spider spider2 = spider1.scheduler(fileCacheQueueScheduler0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<Request> list0 = spider0.getAll((Collection<String>) linkedBlockingDeque0);
      Spider spider3 = spider2.startRequest(list0);
      SynchronousQueue<Spider> synchronousQueue0 = new SynchronousQueue<Spider>();
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>(synchronousQueue0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider4 = spider3.pipeline(consolePipeline0);
      ConsolePipeline consolePipeline1 = new ConsolePipeline();
      Pipeline pipeline0 = null;
      spider3.pipeline((Pipeline) null);
      spider4.setUUID("@Ughl7a//!dv5w:j");
      spider3.isSpawnUrl();
      FileCacheQueueScheduler fileCacheQueueScheduler1 = null;
      try {
        fileCacheQueueScheduler1 = new FileCacheQueueScheduler((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("r");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      String string0 = spider1.getUUID();
      assertNull(string0);
      
      boolean boolean0 = spider0.isExitWhenComplete();
      assertTrue(boolean0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("/", "/");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.destroyWhenExit = false;
      assertTrue(spider1.isExitWhenComplete());
      
      spider1.run();
      Spider spider2 = spider0.clearPipeline();
      spider2.initComponent();
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      Spider spider2 = spider1.clearPipeline();
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      spider3.scheduler(duplicateRemovedScheduler0);
      linkedList0.add("");
      List<SpiderListener> list0 = spider3.getSpiderListeners();
      assertNull(list0);
      
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider0.run();
      spider1.close();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[7];
      QueueScheduler queueScheduler0 = new QueueScheduler();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("MtR+1h(hRSI&f? l5");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("G#$*g0]", (String) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<Request> list0 = spider2.getAll((Collection<String>) linkedHashSet0);
      spider2.startRequest(list0);
      List<Locale.LanguageRange> list1 = spider1.getAll((Collection<String>) linkedHashSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list2 = Locale.filterTags(list1, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      Json json0 = new Json(list2);
      // Undeclared exception!
      try { 
        json0.removePadding((String) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // us/codecraft/xsoup/XTokenQueue
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("b");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      spider0.getUUID();
      System.setCurrentTimeMillis(2L);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("8A<i}");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      // Undeclared exception!
      try { 
        spider0.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5d4y");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      MockThread.getDefaultUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, false);
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      spider2.setEmptySleepTime(1);
      spider1.setUUID("5d4y");
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader((Downloader) null);
      Request request0 = new Request();
      Page page0 = new Page();
      Page page1 = page0.setRawText("H\"/7b/f%");
      spider1.extractAndAddRequests(page1, false);
      // Undeclared exception!
      try { 
        spider1.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      page0.setRawText("f");
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "bhLM$*O";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("bhLM$*O");
      Downloader downloader0 = null;
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      FilePipeline filePipeline0 = new FilePipeline("bhLM$*O");
      Spider spider3 = spider2.addPipeline(filePipeline0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider4 = spider3.setPipelines(linkedList0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = filePipeline0.PATH_SEPERATOR;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      // Undeclared exception!
      try { 
        spider4.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread((ExecutorService) null, 1);
      Spider spider2 = spider1.startRequest((List<Request>) null);
      String[] stringArray0 = new String[0];
      Spider spider3 = spider2.addUrl(stringArray0);
      Spider spider4 = spider3.setSpawnUrl(true);
      Spider spider5 = spider4.scheduler(priorityScheduler0);
      spider5.start();
      Spider spider6 = spider0.addPipeline(consolePipeline0);
      // Undeclared exception!
      try { 
        spider6.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cycleRetryTimes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(", cycleRetryTimes=", "Vo ?G 2P^/SD}.+U'L");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.getSpiderListeners();
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider3 = spider1.downloader(phantomJSDownloader0);
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertNull(list0);
      
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      MultiPagePipeline multiPagePipeline1 = new MultiPagePipeline();
      Spider spider4 = new Spider(simplePageProcessor0);
      String string0 = spider3.getUUID();
      assertNull(string0);
      
      long long0 = spider2.getPageCount();
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "Site{domain='";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Site{domain='");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getStatus();
      int int0 = 5;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      Page page0 = new Page();
      Page page1 = page0.setSkip(false);
      String string1 = "TYgm8c:HuSi\"`}P";
      Page page2 = page1.setRawText("TYgm8c:HuSi\"`}P");
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" error", " error");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertNull(list0);
      
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider0.run();
      spider1.getThreadAlive();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" error", " error");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertNull(list0);
      
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider0.run();
      String[] stringArray0 = new String[0];
      spider0.test(stringArray0);
      Spider spider2 = spider1.clearPipeline();
      spider2.test(stringArray0);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }
}
