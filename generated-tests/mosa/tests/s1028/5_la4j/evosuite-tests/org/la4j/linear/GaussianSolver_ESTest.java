/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 18:50:58 GMT 2018
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.GaussianSolver;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GaussianSolver_ESTest extends GaussianSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(78);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      GaussianSolver gaussianSolver0 = null;
      try {
        gaussianSolver0 = new GaussianSolver(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(0, 0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix0);
      gaussianSolver0.solve(sparseVector0);
      DenseVector denseVector0 = DenseVector.unit(0);
      assertEquals(0, denseVector0.length());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(94, 94);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix0);
      // Undeclared exception!
      try { 
        gaussianSolver0.solve(sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system can't be solved.
         //
         verifyException("org.la4j.linear.GaussianSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      DenseVector denseVector0 = DenseVector.unit(1);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, denseVector0);
      GaussianSolver gaussianSolver0 = new GaussianSolver(rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        gaussianSolver0.solve(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system is singular.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(49, (-1.0));
      SparseVector sparseVector0 = SparseVector.zero(49, 49);
      sparseVector0.toRowMatrix();
      GaussianSolver gaussianSolver0 = new GaussianSolver(sparseMatrix0);
      // Undeclared exception!
      gaussianSolver0.solve(sparseVector0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2, 2);
      GaussianSolver gaussianSolver0 = new GaussianSolver(sparseMatrix0);
      gaussianSolver0.a = (Matrix) sparseMatrix0;
      DenseVector denseVector0 = DenseVector.unit(2);
      Vector vector0 = gaussianSolver0.solve(denseVector0);
      gaussianSolver0.applicableTo(sparseMatrix0);
      Vector vector1 = gaussianSolver0.solve(denseVector0);
      assertEquals(2, vector1.length());
      
      GaussianSolver gaussianSolver1 = new GaussianSolver(sparseMatrix0);
      Vector vector2 = gaussianSolver1.solve(vector0);
      assertTrue(vector0.equals((Object)vector1));
      assertFalse(vector2.equals((Object)vector1));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int int0 = 113;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(113, 113);
      SparseVector sparseVector0 = SparseVector.zero(113, 113);
      Matrix matrix0 = ((RowMajorSparseMatrix) sparseMatrix0).rotate();
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix0);
      // Undeclared exception!
      gaussianSolver0.solve(sparseVector0);
  }
}
