/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:18:46 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      int int0 = 0;
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "j q3vk6";
      stringArray0[1] = "StackMapTable";
      stringArray0[2] = "Deprecated";
      stringArray0[3] = "StackMapTable";
      stringArray0[4] = "wheel.asm.Frame";
      classWriter0.visitMethod(1, "D-Yy", "D-Yy", "@lqbse#.'SG,", stringArray0);
      classReader0.getInterfaces();
      char[] charArray0 = new char[21];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      charArray0[6] = '}';
      // Undeclared exception!
      try { 
        classReader0.readConst(5, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ClassReader classReader0 = new ClassReader("java/lang/String");
          ClassWriter classWriter0 = new ClassWriter(0);
          ClassWriter classWriter1 = new ClassWriter(8);
          classWriter1.addType("java/lang/String");
          classReader0.copyPool(classWriter1);
          ClassReader classReader1 = new ClassReader(classReader0.b);
          classReader0.getAccess();
          classReader1.getAccess();
          // Undeclared exception!
          try { 
            classReader0.readShort((-4813));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // -4813
             //
             verifyException("wheel.asm.ClassReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ClassReader classReader0 = new ClassReader("java/lang/String");
          ClassWriter classWriter0 = new ClassWriter(8);
          ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
          classReader0.getClassName();
          Attribute[] attributeArray0 = null;
          classReader0.getClassName();
          int int0 = 1582;
          classReader0.accept((ClassVisitor) classAdapter0, 1);
          char[] charArray0 = new char[3];
          charArray0[0] = '@';
          charArray0[1] = 'y';
          charArray0[2] = 'u';
          classReader0.readConst(2, charArray0);
          int int1 = (-665);
          ClassReader classReader1 = null;
          try {
            classReader1 = new ClassReader(classReader0.b, (-665), 1582);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // no message in exception (getMessage() returned null)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ClassReader classReader0 = new ClassReader("java/lang/String");
          ClassWriter classWriter0 = new ClassWriter(8);
          ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
          classReader0.getClassName();
          Attribute[] attributeArray0 = null;
          classReader0.getClassName();
          int int0 = 1582;
          classReader0.accept((ClassVisitor) classAdapter0, (-1025));
          char[] charArray0 = new char[3];
          charArray0[0] = '@';
          charArray0[1] = 'y';
          charArray0[2] = 'u';
          classReader0.readConst(2, charArray0);
          int int1 = (-665);
          ClassReader classReader1 = null;
          try {
            classReader1 = new ClassReader(classReader0.b, (-665), (-1025));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // no message in exception (getMessage() returned null)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(0);
      ClassWriter classWriter1 = new ClassWriter(8);
      classReader0.getClassName();
      classReader0.getClassName();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassReader classReader0 = new ClassReader("java/lang/String");
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newMethodItem("", "O0s*7uONjv", "", true);
      classReader0.getInterfaces();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        classReader0.readConst(0, (char[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "j q3vk6";
      stringArray0[1] = "StackMapTable";
      stringArray0[2] = "Deprecated";
      stringArray0[3] = "StackMapTable";
      stringArray0[4] = "java/lang/String";
      classWriter0.visitMethod(1, "D-Yy", "D-Yy", "@lqbse#.'SG,", stringArray0);
      classReader0.getInterfaces();
      char[] charArray0 = new char[21];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.readByte(2);
      classReader0.getClassName();
      classReader0.getAccess();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(8);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.getClassName();
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "";
      ClassReader classReader1 = new ClassReader("");
      classReader1.getSuperName();
      ClassWriter classWriter1 = new ClassWriter(classReader0.EXPAND_FRAMES);
      ClassWriter classWriter2 = new ClassWriter(classReader0.header);
      classReader0.copyPool(classWriter2);
      classReader0.getInterfaces();
      ClassReader classReader2 = new ClassReader(classReader0.b);
      classReader1.readByte(classWriter0.COMPUTE_FRAMES);
      classReader0.getClassName();
      int int0 = 1691;
      PipedInputStream pipedInputStream0 = new PipedInputStream(int0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader2.b);
      byteArrayInputStream0.reset();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, byteArrayInputStream0);
      sequenceInputStream0.reset();
      ClassReader classReader3 = new ClassReader(byteArrayInputStream0);
      classReader0.getAccess();
      ClassReader classReader4 = new ClassReader(string0);
      int int1 = 2;
      classReader4.readLong(int1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "j q3vk6";
      stringArray0[0] = "StackMapTable";
      classReader0.readLong(2);
      Label label0 = new Label();
      classReader0.accept((ClassVisitor) classWriter0, 4108);
      ClassReader classReader1 = new ClassReader("RuntimeVisibleAnnotations");
      InputStream inputStream0 = null;
      ClassReader classReader2 = new ClassReader(inputStream0);
      classReader1.copyPool(classWriter0);
      classReader0.readLong(classReader1.SKIP_CODE);
      classReader1.getAccess();
      classReader2.getClassName();
      classReader2.getSuperName();
      classReader2.getInterfaces();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassReader classReader0 = new ClassReader("java/lang/String");
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(0);
      ClassWriter classWriter1 = new ClassWriter(8);
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[3] = '@';
      charArray0[4] = 'u';
      // Undeclared exception!
      try { 
        classReader0.readConst(1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(8);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.getClassName();
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 46);
      classReader0.readLong(46);
      Label label0 = new Label();
      Label label1 = new Label();
      label1.toString();
      Edge edge0 = label0.successors;
      classAdapter0.visitOuterClass("", "", "L1054");
      classReader0.getItem(3684);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(0);
      ClassWriter classWriter1 = new ClassWriter(8);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java/lang/String";
      stringArray0[1] = "java/lang/String";
      stringArray0[2] = "java/lang/String";
      stringArray0[3] = "LocalVariableTable";
      stringArray0[4] = "java/lang/String";
      stringArray0[5] = "java/lang/String";
      classWriter1.visitMethod(0, "java/lang/String", "java/lang/String", "java/lang/String", stringArray0);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 1224, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46791
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }
}
