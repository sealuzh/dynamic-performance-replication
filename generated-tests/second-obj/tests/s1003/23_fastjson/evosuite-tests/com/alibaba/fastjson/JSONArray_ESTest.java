/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:48:29 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimpleDateFormatSerializer;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.ObjectStreamConstants;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.sql.Timestamp;
import java.time.Clock;
import java.time.Duration;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.concurrent.ConcurrentSkipListMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      JSONArray jSONArray4 = jSONArray3.fluentAdd((Object) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray4.fluentAdd(989, (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Object object0 = new Object();
      jSONArray0.fluentRemove(object0);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONString();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(8159);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8159, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(115);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(115);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 115, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, integer0);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.get(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(2690);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2690, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONArray0.set(989, "");
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      SerializeConfig serializeConfig0 = new SerializeConfig(1450);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[16];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONBytes((Object) serializerFeature0, serializeConfig0, serializeFilterArray0, 989, serializerFeatureArray0);
      jSONArray0.clone();
      assertEquals(990, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3013);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray2.setRelatedArray(jSONArray0);
      assertSame(jSONArray0, jSONArray2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, (Object) null);
      Object object0 = new Object();
      ZoneOffset.ofTotalSeconds(2690);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializeConfig serializeConfig0 = new SerializeConfig(989, true);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      ParserConfig parserConfig0 = ParserConfig.global;
      jSONArray1.getJSONObject(3059);
      jSONArray0.getDate(2690);
      jSONArray1.getComponentType();
      assertEquals(3060, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(6829, (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6829, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      jSONArray2.equals("[Eh'bHSY3,dU");
      // Undeclared exception!
      try { 
        jSONArray1.listIterator((-3036));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3036
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray0 = new JSONArray(2690);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      jSONArray0.fluentClear();
      jSONArray0.fluentRetainAll(jSONArray1);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      jSONArray0.remove((Object) zoneOffset0);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : [{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Object object0 = new Object();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3Kb");
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = jSONArray0.lastIndexOf(jSONReaderScanner0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) mockHijrahDate0);
      String[] stringArray0 = new String[19];
      jSONArray1.fluentClear();
      jSONArray0.getRelatedArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(2690);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2690, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "zp@(SF";
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-1707));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Object object0 = new Object();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3Kb");
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      JSON.toJSONString((Object) jSONArray1, true);
      jSONArray0.isEmpty();
      byte byte0 = ObjectStreamConstants.TC_STRING;
      jSONArray0.set((byte)116, (Object) null);
      assertEquals(117, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean0 = jSONArray0.removeAll(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.indexOf((Object) null);
      jSONArray0.set((-1), (Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-741));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString(1267);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1267, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSONArray0.sort(comparator0);
      // Undeclared exception!
      try { 
        jSONArray0.getLong(3057);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3057, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      String string0 = "n";
      jSONArray1.fluentAdd(0, (Object) mockHijrahDate0);
      String[] stringArray0 = new String[19];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@2a79da7c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, (Object) null);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray1.fluentAdd(3059, (Object) mockJapaneseDate0);
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      float float0 = new Integer(2690);
      chronoUnit0.getDuration();
      jSONArray0.getShort(2233);
      int int0 = jSONArray0.getIntValue(2233);
      assertEquals(3061, jSONArray0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONArray0.set(3059, "");
      JSONArray jSONArray1 = jSONArray0.fluentAdd(989, (Object) null);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      SerializeConfig serializeConfig0 = new SerializeConfig(1450);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      SerializeConfig serializeConfig1 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[16];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONBytes((Object) serializerFeature0, serializeConfig1, serializeFilterArray0, 989, serializerFeatureArray0);
      jSONArray1.getBoolean(989);
      jSONArray0.hashCode();
      assertEquals(3061, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, object0);
      jSONArray0.getByteValue(0);
      jSONArray0.set((byte)0, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.addAll((-2132), (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2132, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3062, (Object) null);
      jSONArray1.set(2690, "");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray2 = jSONArray1.fluentAdd(3062, (Object) null);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "3Kb";
      stringArray0[0] = "1.2.46";
      stringArray0[4] = "1.2.46";
      jSONArray2.getJSONArray(3034);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      jSONArray0.addAll(3034, (Collection<?>) jSONArray1);
      jSONArray0.listIterator();
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.getIntValue(2690);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[8] = serializerFeature8;
      JSON.toJSONBytes((Object) jSONArray0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(8198, (Object) null);
      jSONArray1.getJSONObject(2690);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) mockThaiBuddhistDate0);
      jSONArray1.getJSONArray(1219);
      JSONArray jSONArray3 = jSONArray2.fluentRemove(2690);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      jSONArray3.getInteger(712);
      // Undeclared exception!
      try { 
        jSONArray2.toArray((JSONPath.Operator[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.addAll((Collection<?>) jSONArray0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.addAll((Collection<?>) jSONArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd(0, (Object) mockHijrahDate0);
      String[] stringArray0 = new String[19];
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) null, serializeConfig0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray2.fluentRemoveAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray2.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2690, (Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      SerializeConfig serializeConfig0 = new SerializeConfig(2690);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      ParserConfig parserConfig0 = ParserConfig.global;
      jSONArray1.getJSONObject(2690);
      jSONArray0.remove(989);
      jSONArray0.getByte(118);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      EvoSuiteFile evoSuiteFile0 = null;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3062, (Object) null);
      jSONArray1.set(2690, "");
      Class<String> class0 = String.class;
      Class<MockThaiBuddhistDate> class1 = MockThaiBuddhistDate.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", hashMap0);
      hashMap0.put("", (Field) null);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class1, class0, (Field) null, 2690, 2690, 989);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray1.fluentAdd(3062, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(2690);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, (Object) null);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray2 = jSONArray1.fluentAdd(3059, (Object) mockJapaneseDate0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      SerializeConfig serializeConfig0 = new SerializeConfig(3034);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "3Kb";
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class0, stringArray0);
      jSONArray1.getBoolean(3042);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)84;
      jSONArray2.getLongValue(3009);
      jSONArray2.listIterator();
      jSONArray2.getComponentType();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      System.setCurrentTimeMillis((-768L));
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-2034));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONArray jSONArray2 = new JSONArray();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JSONObject jSONObject0 = new JSONObject(989);
      Class<Integer> class0 = Integer.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      jSONArray0.setComponentType(class0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_BETWEEN;
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      linkedHashSet0.add(jSONPath_Operator0);
      jSONArray2.setRelatedArray(jSONArray1);
      jSONArray2.clone();
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp(935);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 935, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, (Object) null);
      Object object0 = new Object();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray2 = jSONArray1.fluentAdd(3059, (Object) mockJapaneseDate0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      jSONArray0.getFloatValue(989);
      chronoUnit0.getDuration();
      jSONArray0.fluentAdd((Object) mockJapaneseDate0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONArray");
      JSONArray jSONArray3 = jSONArray2.fluentRemove(2677);
      Integer integer0 = new Integer(3059);
      JSONObject jSONObject0 = new JSONObject(989);
      JSONArray jSONArray4 = jSONArray0.fluentAdd((Object) integer0);
      jSONArray3.fluentAddAll((Collection<?>) jSONArray4);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray4.getShortValue(2073);
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate((-335));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, (Object) null);
      jSONArray1.set(2690, "");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray2 = jSONArray1.fluentAdd(3059, (Object) mockJapaneseDate0);
      SerializeConfig serializeConfig0 = new SerializeConfig(3034);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "3Kb";
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      JSONArray jSONArray3 = jSONArray0.fluentRemoveAll(jSONArray2);
      jSONArray2.isEmpty();
      JSONArray jSONArray4 = jSONArray2.fluentSet(2690, "3Kb");
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      SerializeConfig serializeConfig2 = SerializeConfig.globalInstance;
      SimpleDateFormatSerializer simpleDateFormatSerializer0 = new SimpleDateFormatSerializer("com.alibaba.fastjson.JSONArray");
      jSONArray1.listIterator();
      jSONArray3.listIterator();
      jSONArray2.fluentRetainAll(jSONArray0);
      MockJapaneseDate mockJapaneseDate1 = new MockJapaneseDate();
      JSONArray jSONArray5 = new JSONArray(jSONArray4);
      jSONArray5.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(2690);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      int int0 = 0;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SimpleDateFormatSerializer simpleDateFormatSerializer0 = new SimpleDateFormatSerializer("6qEPSBgMl(6y_oK");
      jSONArray0.listIterator();
      JSONArray jSONArray2 = new JSONArray();
      MockHijrahDate mockHijrahDate1 = new MockHijrahDate();
      JSONObject jSONObject0 = new JSONObject(true);
      JSONArray jSONArray3 = jSONArray1.fluentSet(8198, simpleDateFormatSerializer0);
      // Undeclared exception!
      try { 
        jSONArray3.getShortValue(8198);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.serializer.SimpleDateFormatSerializer@5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      SerializeConfig serializeConfig0 = new SerializeConfig(3038);
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      SimpleDateFormatSerializer simpleDateFormatSerializer0 = new SimpleDateFormatSerializer("3Kb");
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray1);
      MockHijrahDate mockHijrahDate1 = new MockHijrahDate();
      JSONObject jSONObject0 = new JSONObject(true);
      JSONArray jSONArray3 = jSONArray2.fluentSet(2690, jSONArray0);
      jSONArray2.fluentAdd((Object) listIterator0);
      SerializeConfig serializeConfig2 = new SerializeConfig(2690);
      ZoneOffset zoneOffset1 = ZoneOffset.MIN;
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.JSONArray", hashMap0);
      jSONArray1.fluentAdd((Object) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONArray");
      jSONArray1.fluentRemove(2690);
      // Undeclared exception!
      try { 
        jSONArray3.getLongValue(2690);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.util.ArrayList$ListItr@408069c5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONArray0.set(34, "aCw\">]|QiB");
      JSONArray jSONArray2 = jSONArray1.fluentAdd(0, (Object) mockHijrahDate0);
      MockClock.systemDefaultZone();
      Duration.ofSeconds((long) 2690);
      Clock clock0 = MockClock.systemUTC();
      MockHijrahDate.now(clock0);
      SimpleDateFormatSerializer simpleDateFormatSerializer0 = new SimpleDateFormatSerializer("3Kb");
      jSONArray2.listIterator();
      jSONArray1.listIterator();
      jSONArray2.fluentRetainAll(jSONArray0);
      MockHijrahDate mockHijrahDate1 = new MockHijrahDate();
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      jSONArray0.getObject(34, (Type) null);
      jSONArray2.retainAll(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2690, (Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      LinkedHashSet<MockJapaneseDate> linkedHashSet0 = new LinkedHashSet<MockJapaneseDate>();
      jSONArray1.containsAll(linkedHashSet0);
      Object object1 = new Object();
      jSONArray0.remove((Object) linkedHashSet0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      jSONArray1.getTimestamp(1954);
      jSONArray1.getInteger(0);
      jSONArray0.size();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SimpleDateFormatSerializer simpleDateFormatSerializer0 = new SimpleDateFormatSerializer("3Kb");
      JSONSerializer jSONSerializer0 = new JSONSerializer((SerializeConfig) null);
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class1, jSONType0);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("]rTwZ$A", concurrentSkipListMap0);
      FieldInfo fieldInfo0 = new FieldInfo(" is not a primitive type", class0, class0, (Type) null, (Field) null, 2690, 989, 989);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      simpleDateFormatSerializer0.write(jSONSerializer0, (Object) null, propertyNamingStrategy0, fieldInfo0.declaringClass, 989);
      jSONArray0.contains(simpleDateFormatSerializer0);
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, class2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockHijrahDate mockHijrahDate1 = new MockHijrahDate();
      JSONObject jSONObject0 = new JSONObject(true);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, mockHijrahDate1);
      SerializeConfig serializeConfig1 = new SerializeConfig(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OBOS\r<ln_uv1NJu5");
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@3d47e42d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      EvoSuiteFile evoSuiteFile0 = null;
      JSONArray jSONArray1 = jSONArray0.fluentSet(2690, (Object) null);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray1.fluentAdd(989, (Object) mockJapaneseDate0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@12a69729
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList((-804), 61);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -804
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
