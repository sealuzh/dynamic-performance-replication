/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:49:13 GMT 2018
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.LinkedHashTreeMap;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedHashTreeMap_ESTest extends LinkedHashTreeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      boolean boolean0 = linkedHashTreeMap_EntrySet0.contains(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      linkedHashTreeMap0.remove((Object) ")gIG5V");
      Set<String> set0 = linkedHashTreeMap0.keySet();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      linkedHashTreeMap0.size();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.clear();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      boolean boolean0 = linkedHashTreeMap_EntrySet0.contains(linkedHashTreeMap0);
      assertFalse(boolean0);
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = linkedHashTreeMap0.find("", true);
      linkedHashTreeMap_Node0.equals(linkedHashTreeMap0);
      assertEquals(1, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.find((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)linkedHashTreeMap0.entrySet();
      assertNotNull(set0);
      
      linkedHashTreeMap0.get((Object) null);
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>(comparator0);
      linkedHashTreeMap0.put("=", integer0);
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.put((String) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-877));
      LinkedHashTreeMap.Node<Integer, Object>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Integer, Object>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 1);
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>();
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node0;
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Integer, Object>[]) linkedHashTreeMap_NodeArray0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = linkedHashTreeMap0.find("", true);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_AvlBuilder0.root();
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, String>();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, String>();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      assertNotNull(linkedHashTreeMap_Node1);
      
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, String>(linkedHashTreeMap_Node1, linkedHashTreeMap_AvlBuilder0, (-3631), linkedHashTreeMap_Node1, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.first();
      assertNotNull(linkedHashTreeMap_Node3);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node3);
      assertNotSame(linkedHashTreeMap_Node3, linkedHashTreeMap_Node1);
      assertFalse(linkedHashTreeMap_Node3.equals((Object)linkedHashTreeMap_Node1));
      assertNotSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.replaceAll(biFunction0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      LinkedHashTreeMap.AvlBuilder<String, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Integer>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      boolean boolean0 = linkedHashTreeMap_KeySet0.contains("?Gf>zW@mz Qm(/,");
      assertFalse(boolean0);
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>((Comparator<? super Object>) null);
      linkedHashTreeMap0.keySet();
      Integer integer0 = new Integer(3);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("@*", integer0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "@*");
      Predicate<Object> predicate1 = predicate0.negate();
      linkedHashTreeMap_EntrySet0.removeIf(predicate1);
      linkedHashTreeMap_EntrySet0.remove(abstractMap_SimpleEntry0);
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      Object object0 = linkedHashTreeMap_Node1.setValue((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      linkedHashTreeMap_AvlBuilder0.reset((-1602));
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      linkedHashTreeMap0.findByObject(object0);
      linkedHashTreeMap0.threshold = (-1602);
      linkedHashTreeMap0.put("-&14{+", "66*4:ZC_&e5CS)8.k;");
      linkedHashTreeMap0.clear();
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      linkedHashTreeMap0.remove((Object) null);
      linkedHashTreeMap0.entrySet();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, String>();
      boolean boolean0 = linkedHashTreeMap_Node0.equals("=");
      linkedHashTreeMap_Node0.value = null;
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      boolean boolean1 = linkedHashTreeMap_EntrySet0.contains(linkedHashTreeMap_Node0);
      assertTrue(boolean1 == boolean0);
      
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)linkedHashTreeMap0.entrySet();
      assertNotNull(set0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      int int0 = (-1602);
      linkedHashTreeMap_AvlBuilder0.reset((-1602));
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.merge("com.google.gson.internal.LinkedHashTreeMap", "_/[", biFunction0);
      Object object0 = new Object();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.clear();
      // Undeclared exception!
      try { 
        LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>(comparator0);
      Integer integer0 = new Integer(2571);
      linkedHashTreeMap0.put("65;7i\"\"q2R+WP&", integer0);
      Integer integer1 = new Integer(1863);
      Integer integer2 = new Integer(1863);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_EntrySet0.retainAll(linkedHashTreeMap_KeySet0);
      linkedHashTreeMap_EntrySet0.size();
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, String>();
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      linkedHashTreeMap0.findByEntry(linkedHashTreeMap_Node1);
      Integer integer3 = new Integer(0);
      Integer.compare(2571, 0);
      Integer.remainderUnsigned(2808, 1863);
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.compute("65;7i\"\"q2R+WP&", (BiFunction<? super String, ? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashTreeMap<Integer, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Integer>();
      Integer integer0 = new Integer((-1190));
      Integer integer1 = new Integer((-1190));
      Integer.getInteger("0*iUwc@H2{f");
      Integer integer2 = linkedHashTreeMap0.put(integer0, integer1);
      assertNull(integer2);
      
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.parent;
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      LinkedHashTreeMap.AvlIterator<String, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, Object>();
      linkedHashTreeMap_AvlIterator0.next();
      linkedHashTreeMap_AvlIterator0.reset((LinkedHashTreeMap.Node<String, Object>) null);
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>((Comparator<? super String>) null);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      LinkedList<String> linkedList0 = new LinkedList<String>(linkedHashTreeMap_KeySet0);
      assertEquals(1, linkedHashTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-2);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>();
      String string0 = "[J|J9Y)\\qxA;{Ky1";
      Integer integer0 = new Integer((-2));
      Integer.remainderUnsigned(810, 810);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      linkedHashTreeMap0.compute("[J|J9Y)qxA;{Ky1", biFunction0);
      Integer integer1 = new Integer(810);
      Integer.compare((-2), 0);
      linkedHashTreeMap0.comparator = null;
      Integer.getInteger("[J|J9Y)qxA;{Ky1");
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.putAll(linkedHashTreeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedHashTreeMap<Integer, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Integer>();
      Integer integer0 = new Integer((-1190));
      Integer integer1 = new Integer((-1190));
      Integer.getInteger("0*iUwc@H2{f");
      linkedHashTreeMap0.put(integer0, integer1);
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.parent;
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      LinkedHashTreeMap.AvlIterator<String, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, Object>();
      linkedHashTreeMap0.removeInternalByKey(integer0);
      linkedHashTreeMap_AvlIterator0.next();
      linkedHashTreeMap_AvlIterator0.reset((LinkedHashTreeMap.Node<String, Object>) null);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      LinkedList<String> linkedList0 = new LinkedList<String>(linkedHashTreeMap_KeySet0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator0);
      linkedHashTreeMap1.clear();
      assertEquals(0, linkedHashTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>();
      linkedHashTreeMap0.removeInternalByKey(linkedHashTreeMap_AvlIterator0);
      linkedHashTreeMap_AvlIterator0.reset((LinkedHashTreeMap.Node<Object, String>) null);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.remove((Object) null);
      linkedHashTreeMap_KeySet0.remove(linkedHashTreeMap_AvlIterator0);
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 4);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node0;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_Node1.last();
      Map.Entry.comparingByKey();
      Object object0 = new Object();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap1 = new LinkedHashTreeMap<String, String>(comparator0);
      Integer integer0 = new Integer((-2984));
      linkedHashTreeMap1.findByObject(integer0);
      linkedHashTreeMap1.findByObject("-&14{+");
      linkedHashTreeMap1.put("", "");
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap1.new KeySet();
      boolean boolean0 = linkedHashTreeMap_KeySet1.remove("");
      assertEquals(1, linkedHashTreeMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<String, Integer> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, Integer>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      linkedHashTreeMap_AvlIterator0.reset(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node1 = linkedHashTreeMap_AvlIterator0.next();
      assertNotNull(linkedHashTreeMap_Node1);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Integer>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node2, "", 17, linkedHashTreeMap_Node2, linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.last();
      boolean boolean0 = linkedHashTreeMap_Node4.equals(linkedHashTreeMap_Node3);
      assertFalse(linkedHashTreeMap_Node3.equals((Object)linkedHashTreeMap_Node2));
      assertTrue(boolean0);
      
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.iterator();
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Function.identity();
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_Node0.height = 1;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node0, "", (-4623), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      linkedHashTreeMap0.findByObject("");
      linkedHashTreeMap_Node1.height = 1;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      linkedHashTreeMap0.modCount = 1;
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, String>();
      linkedHashTreeMap_Node1.equals(linkedHashTreeMap_Node3);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node2.last();
      linkedHashTreeMap_Node4.last();
      linkedHashTreeMap_Node2.equals("");
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<String, Object>();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = null;
      try {
        abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>((Map.Entry<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node0, (String) null, (-2940), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node2, true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      Integer integer0 = new Integer(0);
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, String>();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, String>(linkedHashTreeMap_Node2, integer0, 0, linkedHashTreeMap_Node2, linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.first();
      linkedHashTreeMap_Node4.toString();
      linkedHashTreeMap_Node0.equals(linkedHashTreeMap_Node3);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node6 = linkedHashTreeMap_Node5.first();
      assertNotNull(linkedHashTreeMap_Node6);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>((Comparator<? super String>) null);
      Set<String> set0 = linkedHashTreeMap0.keySet();
      Function.identity();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.replaceAll(biFunction0);
      linkedHashTreeMap0.containsKey((Object) null);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      Object[] objectArray0 = new Object[8];
      linkedHashTreeMap_KeySet0.removeAll(set0);
      linkedHashTreeMap_KeySet0.containsAll(set0);
      linkedHashTreeMap_KeySet0.toArray(objectArray0);
      linkedHashTreeMap_KeySet0.clear();
      LinkedHashTreeMap<String, String> linkedHashTreeMap1 = new LinkedHashTreeMap<String, String>((Comparator<? super String>) null);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = new Object();
      linkedHashTreeMap_EntrySet0.remove(object0);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      LinkedHashTreeMap<String, String> linkedHashTreeMap3 = new LinkedHashTreeMap<String, String>((Comparator<? super String>) null);
      linkedHashTreeMap0.keySet();
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap4 = new LinkedHashTreeMap<Integer, Object>();
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Integer, Object>();
      Integer integer0 = new Integer(0);
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Integer, Object>();
      linkedHashTreeMap4.removeInternal(linkedHashTreeMap_Node2, false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.prev;
      linkedHashTreeMap_Node0.right = linkedHashTreeMap_Node1;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      String string0 = "";
      linkedHashTreeMap_Node0.left = linkedHashTreeMap_Node1;
      int int0 = 0;
      linkedHashTreeMap_Node0.right = linkedHashTreeMap_Node1;
      // Undeclared exception!
      linkedHashTreeMap_Node1.last();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<String, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, Object>();
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      linkedHashTreeMap_AvlBuilder0.reset((-1613));
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_Node0.left = null;
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      Integer.compare(27, 5649);
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>();
      Integer integer0 = new Integer(27);
      Integer integer1 = new Integer(71);
      linkedHashTreeMap0.putIfAbsent("_<)cxkY$=#V5$Ut", integer1);
      Integer integer2 = new Integer(27);
      Integer integer3 = new Integer((-2222));
      linkedHashTreeMap0.putIfAbsent("_<)cxkY$=#V5$Ut", integer3);
      Integer integer4 = new Integer((-1));
      try { 
        Integer.parseUnsignedInt("_<)cxkY$=#V5$Ut");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"_<)cxkY$=#V5$Ut\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>(comparator0);
      int int0 = (-1917);
      Integer integer0 = new Integer((-1917));
      Integer.divideUnsigned(2262, 2262);
      Integer.getInteger("", integer0);
      Integer.toUnsignedLong((-871));
      linkedHashTreeMap0.putIfAbsent(integer0, "");
      Integer.toUnsignedLong(744);
      linkedHashTreeMap0.remove((Object) integer0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_EntrySet0.add(linkedHashTreeMap_Node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1863).when(comparator0).compare(anyString() , anyString());
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>(comparator0);
      String string0 = "65;7i\"\"q2R+WP&";
      int int0 = 1;
      Integer integer0 = new Integer(2571);
      linkedHashTreeMap0.put("65;7i\"\"q2R+WP&", integer0);
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer(1863);
      Integer integer3 = new Integer(2571);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer1).when(biFunction0).apply(any() , any());
      linkedHashTreeMap0.compute("65;7i\"\"q2R+WP&", biFunction0);
      Integer integer4 = new Integer(1);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.putAll(linkedHashTreeMap0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$LinkedTreeMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(1);
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>(comparator0);
      linkedHashTreeMap0.put("2cPd] ", integer3);
      linkedHashTreeMap0.put("2cPd] ", integer0);
      Integer integer4 = new Integer(1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedHashTreeMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Object object0 = new Object();
      predicate1.negate();
      predicate2.negate();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.removeIf(predicate1);
      Integer integer5 = new Integer(1);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Object, Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>(comparator0);
      Integer integer0 = new Integer(2571);
      linkedHashTreeMap0.put("65;7i\"\"q2R+WP&", integer0);
      Integer integer1 = new Integer(1863);
      Integer.compare(2808, 1863);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer1).when(biFunction0).apply(any() , any());
      linkedHashTreeMap0.compute("65;7i\"\"q2R+WP&", biFunction0);
      Integer integer2 = new Integer(810);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Integer>(comparator1);
      linkedHashTreeMap0.putAll(linkedHashTreeMap1);
      linkedHashTreeMap0.putIfAbsent("65;7i\"\"q2R+WP&", integer2);
      LinkedHashTreeMap.AvlIterator<String, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = linkedHashTreeMap_AvlIterator0.next();
      assertNull(linkedHashTreeMap_Node0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1863).when(comparator0).compare(anyString() , anyString());
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>(comparator0);
      Integer integer0 = new Integer((-2));
      Integer integer1 = new Integer(1863);
      Integer integer2 = new Integer(1863);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer1).when(biFunction0).apply(any() , any());
      linkedHashTreeMap0.compute("[J|J9Y)qbxA;{Ky1", biFunction0);
      Integer integer3 = new Integer(810);
      Integer.compare((-2), 0);
      Integer.compareUnsigned((-2), (-1));
      linkedHashTreeMap0.putAll(linkedHashTreeMap0);
      linkedHashTreeMap0.putIfAbsent("[J|J9Y)qbxA;{Ky1", integer3);
      LinkedHashTreeMap.AvlIterator<String, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, Object>();
      Integer integer4 = new Integer(810);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Object, Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer.valueOf(1);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(1);
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>(comparator0);
      linkedHashTreeMap0.put("2cPd] ", (Integer) null);
      linkedHashTreeMap0.put("2cPd] ", integer0);
      Integer integer4 = new Integer(1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedHashTreeMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Object object0 = new Object();
      predicate0.test(object0);
      predicate1.negate();
      predicate2.negate();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.removeIf(predicate1);
      Integer integer5 = new Integer(1);
      Object object1 = new Object();
      linkedHashTreeMap_EntrySet0.remove(object1);
      Integer.getInteger("2cPd] ");
      // Undeclared exception!
      try { 
        LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Object, Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<String, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Object>();
      linkedHashTreeMap_AvlIterator0.reset(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_AvlIterator0.next();
      linkedHashTreeMap_Node0.right = linkedHashTreeMap_Node1;
      linkedHashTreeMap_Node1.equals(linkedHashTreeMap_Node1);
      linkedHashTreeMap_AvlIterator0.reset(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Object>();
      linkedHashTreeMap_AvlIterator0.reset(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap_AvlIterator0);
      linkedHashTreeMap_AvlIterator0.next();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Object>();
      linkedHashTreeMap2.removeInternal(linkedHashTreeMap_Node1, true);
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator1 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      linkedHashTreeMap_AvlIterator1.reset((LinkedHashTreeMap.Node<Object, String>) null);
      LinkedHashTreeMap<Object, String> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, String>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap1.new KeySet();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap2.new KeySet();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_KeySet1.add("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      linkedHashTreeMap_AvlBuilder0.reset(6);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<String, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, Object>();
      linkedHashTreeMap_Node3.value = (Object) linkedHashTreeMap_AvlIterator0;
      boolean boolean0 = linkedHashTreeMap_Node3.equals(linkedHashTreeMap_Node2);
      assertFalse(boolean0);
      
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>(comparator0);
      linkedHashTreeMap0.get(linkedHashTreeMap_Node3.value);
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer.valueOf(1);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(1);
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>(comparator0);
      linkedHashTreeMap0.put("2cPe#C ", (Integer) null);
      linkedHashTreeMap0.put("2cPe#C ", (Integer) null);
      linkedHashTreeMap0.put("2cPe#C ", integer0);
      Integer integer4 = new Integer(1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedHashTreeMap0);
      predicate0.test("2cPe#C ");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Object object0 = new Object();
      predicate0.test(object0);
      predicate2.and(predicate1);
      predicate1.negate();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.removeIf(predicate1);
      Integer integer5 = new Integer(1);
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>((Comparator<? super Object>) null);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap1.new KeySet();
      Integer integer6 = new Integer(1);
      linkedHashTreeMap_KeySet0.contains(integer6);
      try { 
        Integer.decode("2cPe#C ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2cPe#C \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<String, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, Object>(linkedHashTreeMap_Node2, "NfZ0BJmmGCFt", (-2589), linkedHashTreeMap_Node1, linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node3.prev = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, Object>();
      linkedHashTreeMap_Node4.value = (Object) linkedHashTreeMap_AvlIterator0;
      linkedHashTreeMap_AvlIterator0.reset(linkedHashTreeMap_Node4);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<String, Object>();
      linkedHashTreeMap_Node5.equals(linkedHashTreeMap_Node4);
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>();
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      linkedHashTreeMap_AvlIterator0.next();
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<Integer, String>();
      Integer integer0 = linkedHashTreeMap_Node6.getKey();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<String, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, Object>(linkedHashTreeMap_Node2, "NfZ0BJmmGCFt", (-2589), linkedHashTreeMap_Node1, linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node3.prev = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, Object>();
      linkedHashTreeMap_Node4.value = (Object) linkedHashTreeMap_AvlIterator0;
      linkedHashTreeMap_AvlIterator0.reset(linkedHashTreeMap_Node4);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<String, Object>();
      linkedHashTreeMap_Node5.value = (Object) linkedHashTreeMap_AvlIterator0;
      linkedHashTreeMap_Node5.equals(linkedHashTreeMap_Node4);
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>();
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node6 = linkedHashTreeMap_AvlIterator0.next();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap1.new KeySet();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap1.new KeySet();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_KeySet1.add(linkedHashTreeMap_Node6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer(914);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3208), (-3208), 392).when(comparator0).compare(anyString() , anyString());
      Integer integer1 = new Integer(914);
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>(comparator0);
      linkedHashTreeMap0.put("H#A@oqRSfgtN4sHRn", integer0);
      linkedHashTreeMap0.put("H#A@oqRSfgtN4sHRn", integer0);
      linkedHashTreeMap0.put("H#A@oqRSfgtN4sHRn", integer0);
      Integer integer2 = new Integer(914);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Integer>(comparator1);
      linkedHashTreeMap1.putAll(linkedHashTreeMap0);
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, String>();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, String>();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Object>();
      linkedHashTreeMap1.find("H#A@oqRSfgtN4sHRn", true);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      linkedHashTreeMap_EntrySet0.remove("x;6gn]?z\"<k2Z*tJmp^");
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      linkedHashTreeMap0.putAll(linkedHashTreeMap1);
      assertEquals(4, linkedHashTreeMap1.size());
      
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, String>();
      linkedHashTreeMap_Node2.first();
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap3 = new LinkedHashTreeMap<String, Integer>();
      linkedHashTreeMap3.find("H#A@oqRSfgtN4sHRn", false);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap2.new EntrySet();
      assertEquals(0, linkedHashTreeMap_EntrySet1.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      Map.Entry.comparingByKey();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      Integer integer0 = new Integer((-1607));
      Integer.min((-4345), (-1607));
      LinkedHashTreeMap<Integer, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Integer>();
      linkedHashTreeMap0.put(integer0, integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)linkedHashTreeMap0.entrySet();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.retainAll(set0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      Integer integer1 = new Integer((-4345));
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyString() , anyString());
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Integer>(comparator1);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      linkedHashTreeMap1.putAll(hashMap0);
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, String>();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, String>();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node4 = linkedHashTreeMap1.find("", true);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap2.new EntrySet();
      linkedHashTreeMap_EntrySet1.remove(comparator0);
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      Integer integer2 = new Integer((-1607));
      LinkedHashTreeMap.AvlIterator<String, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, Object>();
      Integer integer3 = new Integer(2);
      linkedHashTreeMap2.putAll(hashMap0);
      Integer integer4 = new Integer((-1607));
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap3 = new LinkedHashTreeMap<Integer, String>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet2 = linkedHashTreeMap1.new EntrySet();
      boolean boolean0 = linkedHashTreeMap_EntrySet2.remove(linkedHashTreeMap_Node4);
      assertTrue(boolean0);
  }
}
