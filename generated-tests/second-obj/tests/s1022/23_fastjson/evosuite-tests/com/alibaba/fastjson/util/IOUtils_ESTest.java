/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:27:27 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectStreamConstants;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PushbackReader;
import java.io.StringReader;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CodingErrorAction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.getChars((long) 38, 2433, iOUtils0.ASCII_CHARS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2432
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      boolean boolean0 = IOUtils.firstIdentifier('S');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.encodeUTF8(iOUtils0.replaceChars, (byte)3, (byte)3, iOUtils0.specicalFlags_singleQuotes);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.replaceChars, 18, 18);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOUtils.decodeBase64("");
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64((char[]) null, 192, (-1779));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.isIdent('p');
      // Undeclared exception!
      try { 
        IOUtils.getChars((-984L), (int) 'p', (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("", (-179), (-179));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars(1641, 1641, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1640
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.getChars((-1779), (-1779), (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("]-*x");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("^!]iNh.\"+j#.])3scY{");
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOUtils.isValidJsonpQueryParam("$!U6::V");
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("", 2388, 2388);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      boolean boolean0 = IOUtils.isIdent('[');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      IOUtils.decode(uTF8Decoder0, byteBuffer1, charBuffer0);
      assertFalse(uTF8Decoder0.isAutoDetecting());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[6];
      byte[] byteArray0 = new byte[12];
      IOUtils.decodeUTF8(byteArray0, (byte) (-27), (byte)0, charArray0);
      IOUtils.loadPropertiesFromFile();
      StringReader stringReader0 = new StringReader("+)-fF^?Ve`#");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = IOUtils.stringSize(662);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte) (-16);
      char[] charArray0 = new char[9];
      IOUtils.decodeUTF8(byteArray0, 0, 133, charArray0);
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-2);
      char[] charArray0 = new char[9];
      int int0 = IOUtils.decodeUTF8(byteArray0, 0, 127, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      IOUtils.getStringProperty("^V\"");
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("^V\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      char[] charArray0 = new char[3];
      charArray0[1] = '\u00B5';
      byte[] byteArray0 = new byte[8];
      int int2 = IOUtils.encodeUTF8(charArray0, 1, 1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-75), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, int2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/ZQ1fcG{'}Dm\"#\"?2!Z");
      IOUtils.close(stringReader0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[3] = 'V';
      // Undeclared exception!
      try { 
        IOUtils.getChars(2147483647L, (int) 'V', charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 85
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("p{vYWAK!*w6Tp", 0, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("^Ut$h:r@<TrRn^.");
      uTF8Decoder0.charset();
      ByteBuffer byteBuffer1 = charset0.encode("");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Charset charset1 = IOUtils.UTF8;
      CharBuffer charBuffer0 = charset1.decode(byteBuffer1);
      // Undeclared exception!
      try { 
        IOUtils.decode(uTF8Decoder0, byteBuffer0, charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CoderResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IOUtils.stringSize((-4068));
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        IOUtils.getChars(63, 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IOUtils.stringSize(154L);
      char[] charArray0 = new char[9];
      IOUtils.getChars((byte)26, 3, charArray0);
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder", (int) (byte)3, (int) (byte)3);
      assertArrayEquals(new byte[] {(byte)106}, byteArray0);
      
      char[] charArray0 = new char[3];
      Charset.defaultCharset();
      IOUtils.getChars((byte)3, (int) (byte)3, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '3'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      IOUtils.stringSize(2147483655L);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars(2147483655L, (-1408), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1409
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[0];
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-87);
      IOUtils.decodeBase64(charArray0, 491, 0);
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)0, 0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam(".B/");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = IOUtils.stringSize(515L);
      assertEquals(3, int0);
      
      int int1 = IOUtils.stringSize(3);
      assertEquals(1, int1);
      
      boolean boolean1 = IOUtils.firstIdentifier(':');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IOUtils.close((Closeable) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOUtils.firstIdentifier('\u00C8');
      char[] charArray0 = new char[3];
      charArray0[0] = '\u00C8';
      charArray0[1] = '\u00C8';
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 1, '\u00C8', byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = ObjectStreamConstants.baseWireHandle;
      IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 38, 38);
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.encodeUTF8(iOUtils0.replaceChars, (-1287), (-234), iOUtils0.specicalFlags_singleQuotes);
      IOUtils.decodeBase64(iOUtils0.replaceChars, 38, 38);
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      assertEquals("REPLACE", codingErrorAction0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars(999999, 999999, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 999998
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IOUtils.stringSize((-1231));
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("Az'z?>k", 1, 2145218369);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("read string from reader error", 2146365166, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder", (int) (byte)6, (int) (byte)6);
      char[] charArray0 = new char[3];
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)6, (int) (byte)6, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IOUtils.stringSize(1790L);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      char[] charArray0 = new char[7];
      charArray0[4] = '5';
      charArray0[1] = '5';
      charArray0[5] = '5';
      IOUtils.decodeBase64(charArray0, 1, 4);
      IOUtils.stringSize(4);
      IOUtils.getChars(4, 4, charArray0);
      assertArrayEquals(new char[] {'\u0000', '5', '\u0000', '4', '5', '5', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      int int0 = IOUtils.stringSize(66L);
      assertEquals(2, int0);
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[8];
      IOUtils.getChars(66L, 2, charArray0);
      assertArrayEquals(new char[] {'6', '6', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 0, 144, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = IOUtils.stringSize(4252L);
      assertEquals(4, int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = '(';
      charArray0[2] = ' ';
      charArray0[3] = 'd';
      charArray0[4] = 'M';
      charArray0[5] = 'p';
      IOUtils.getChars((-323), 4, charArray0);
      assertArrayEquals(new char[] {'-', '3', '3', '3', 'M', 'p'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IOUtils.decodeBase64("t");
      IOUtils.getStringProperty("t");
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64((String) null, 340, 340);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IOUtils.stringSize(1917L);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      char[] charArray0 = new char[5];
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte) (-52);
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 4, 16, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-54);
      char[] charArray0 = new char[11];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = IOUtils.decodeUTF8(byteArray0, 0, 61, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IOUtils.stringSize(154L);
      char[] charArray0 = new char[13];
      IOUtils.getChars((byte) (-128), 7, charArray0);
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      char[] charArray0 = new char[6];
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)53;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)53;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-27);
      IOUtils.decodeUTF8(byteArray0, 1, (byte)53, charArray0);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      byte[] byteArray0 = IOUtils.decodeBase64("i6=[");
      assertArrayEquals(new byte[] {(byte) (-117)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IOUtils.stringSize((-1L));
      IOUtils.isIdent('M');
      char[] charArray0 = new char[9];
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = '.';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      charArray0[7] = 'M';
      charArray0[8] = 'M';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-1L), 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[3] = (byte) (-32);
      char[] charArray0 = new char[9];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = IOUtils.decodeUTF8(byteArray0, 0, 61, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IOUtils.stringSize(1928L);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = '?';
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)54;
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray0[8] = (byte) (-27);
      byteArray0[3] = (byte) (-27);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int1 = 23;
      IOUtils.decodeUTF8(byteArray0, 2, 2, charArray0);
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      charset0.encode(";O@3#/>yLv.mL");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      String string0 = "3 {";
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("3 {", (int) (byte) (-52), 6);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      IOUtils.stringSize((-4228L));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-13);
      byteArray0[2] = (byte) (-13);
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte)0;
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[5] = 'U';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      IOUtils.decodeUTF8(byteArray0, 1, 1, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-13), (-4129), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4130
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      char[] charArray0 = new char[6];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte) (-64);
      IOUtils.decodeUTF8(byteArray0, 1, (byte)54, charArray0);
      char char0 = 'g';
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      // Undeclared exception!
      try { 
        IOUtils.readAll(pushbackReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // read string from reader error
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(iOUtils0.specicalFlags_doubleQuotes, 2, 2);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      IOUtils.readAll(inputStreamReader0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 2, 59);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      IOUtils.decodeUTF8(byteArray0, 2, 2, iOUtils0.ASCII_CHARS);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        pipedReader0.ready();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 2;
      IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 2, (int) '<');
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      int int1 = 47;
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 46, 47, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 2, 89);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      int int2 = IOUtils.decodeUTF8(iOUtils0.specicalFlags_singleQuotes, 2, 89, iOUtils0.ASCII_CHARS);
      assertFalse(int2 == int0);
  }
}
