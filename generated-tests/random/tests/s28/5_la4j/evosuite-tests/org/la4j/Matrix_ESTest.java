/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 12:45:35 GMT 2019
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 379;
      Matrix matrix0 = Matrix.zero(379, 379);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(379, 2);
      sparseMatrix0.toRowVector();
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) sparseMatrix0, 2, 379);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 2 rows and 379 cols at 0, 0 from a 379x2 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 867;
      Matrix matrix0 = Matrix.diagonal(867, 0.7102916918785116);
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      // Undeclared exception!
      try { 
        denseMatrix0.insertColumn(5, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 7;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 756;
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) 7;
      doubleArray0[4] = (double) 756;
      doubleArray0[5] = (double) 756;
      doubleArray0[6] = (double) 756;
      doubleArray0[8] = 2988.388;
      Matrix matrix0 = Matrix.from1DArray(756, 7, doubleArray0);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(756, 1815);
      matrix0.equals((Matrix) sparseMatrix0, 3.9009404706419626);
      // Undeclared exception!
      try { 
        SparseMatrix.identity((-3250));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 4;
      Matrix matrix0 = Matrix.constant(84, 4, 0.0);
      matrix0.rotate();
      // Undeclared exception!
      try { 
        Matrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(1090);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      SparseMatrix sparseMatrix0 = SparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      // Undeclared exception!
      try { 
        sparseMatrix0.setRow(1090, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1090. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(3670, 5561.844496961988);
      denseVector0.toBinary();
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        matrix0.insertColumn((-2175), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 9;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(9, 9);
      denseMatrix0.removeFirstColumn();
      int int1 = 0;
      Vector vector0 = null;
      // Undeclared exception!
      try { 
        denseMatrix0.insertColumn(0, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 8;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(8, 8);
      Matrix matrix0 = rowMajorSparseMatrix0.copyOfColumns(8);
      Matrix matrix1 = matrix0.copyOfColumns(8);
      matrix0.columns();
      rowMajorSparseMatrix0.iterator();
      matrix1.equals(matrix0, (double) 8);
      int int1 = (-3753);
      int int2 = 3;
      int int3 = 526;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert(matrix0, 8, 8, (-3753), 32, 3, 526);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -3753, 32
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 7;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(7, 7, (double[]) null);
      DenseMatrix denseMatrix1 = DenseMatrix.identity(7);
      // Undeclared exception!
      try { 
        denseMatrix0.equals((Object) denseMatrix1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 0);
      Matrix matrix0 = Matrix.constant(7, 5, 7);
      assertEquals(5, matrix0.columns());
      assertEquals(7, matrix0.rows());
      
      Matrix matrix1 = Matrix.zero(390, 390);
      assertEquals(390, matrix1.columns());
      assertEquals(390, matrix1.rows());
      
      Matrix matrix2 = denseMatrix0.sliceBottomRight(0, 0);
      double[] doubleArray0 = matrix2.foldColumns((VectorAccumulator) null);
      assertEquals(0, matrix2.rows());
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        denseMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 921;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(921, 7, mockRandom0);
      // Undeclared exception!
      try { 
        denseMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1489.67182;
      doubleArray0[1] = 1.2769386341116205E-10;
      doubleArray0[2] = (-3048.45447447066);
      doubleArray0[3] = 1.4178351705536396;
      doubleArray0[4] = 1307.2685692;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      // Undeclared exception!
      try { 
        matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 0);
      rowMajorSparseMatrix0.rank();
      ooPlaceMatricesSubtraction0.ensureApplicableTo(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      ColumnMajorSparseMatrix.identity(0);
      int int1 = (-3742);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      HashMap<Integer, Integer> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Integer, Integer>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 100.0);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      matrix0.toDenseMatrix();
      Matrix matrix1 = matrix0.rotate();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix1.transformRow(0, vectorFunction0);
      matrix0.determinant();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2, 2);
      sparseMatrix0.toSparseMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = sparseMatrix0.transform(matrixFunction0);
      matrix0.multiplyByItsTranspose();
      // Undeclared exception!
      try { 
        sparseMatrix0.get(6, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 1018;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1018);
      // Undeclared exception!
      denseMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(11, 1941.72849100318);
      matrix0.hashCode();
      Matrix matrix1 = matrix0.blank();
      Matrix matrix2 = matrix1.blankOfColumns(11);
      Matrix matrix3 = matrix1.transpose();
      matrix2.transpose();
      matrix1.iteratorOfRow(11);
      // Undeclared exception!
      try { 
        matrix3.copyOfColumns(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 3;
      MockRandom mockRandom0 = new MockRandom(1000L);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(3, 0.0, (Random) mockRandom0);
      int int1 = 45;
      columnMajorSparseMatrix0.blankOfRows(45);
      ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      columnMajorSparseMatrix0.determinant();
      int int2 = 48;
      ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        Matrix.fromCSV(",OgO|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 2262;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(2262, 2262);
      Matrix.zero(2262, 2262);
      int int1 = 11;
      // Undeclared exception!
      rowMajorSparseMatrix0.swapColumns(11, 517);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 847;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(847);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.set(4, (-1908874352), 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1908874352' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1, 1);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, 16, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 16, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(9, 9);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(9);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, rowMajorSparseMatrix0);
      double double0 = matrix0.determinant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(2081, 2081);
      Matrix matrix0 = denseMatrix0.blank();
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, 288, 3, 3, 2532, 2081, 288);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 3, 2532
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1100.013040220934;
      doubleArray0[2] = (-1229.859);
      doubleArray0[3] = (-849.319372080749);
      doubleArray0[4] = (-2256.92470917436);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 397.8968;
      doubleArray0[7] = 1.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      double double0 = matrix0.min();
      assertEquals((-2256.92470917436), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1.0;
      doubleArray0[1] = doubleArray2;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      sparseMatrix0.infinityNorm();
      sparseMatrix0.equals((Object) doubleArray1);
      Matrix matrix0 = sparseMatrix0.removeFirstColumn();
      matrix0.toRowVector();
      int int0 = (-2028178999);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) sparseMatrix0, (-2028178999), (-2028178999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -2028178999x-2028178999
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(8);
      denseMatrix0.equals((Object) null);
      String string0 = "jdJq;~d2bzPi";
      int int0 = Integer.MAX_VALUE;
      MockRandom mockRandom0 = new MockRandom(4L);
      Matrix matrix0 = Matrix.random(0, Integer.MAX_VALUE, mockRandom0);
      matrix0.maxInRow(2671);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("jdJq;~d2bzPi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(1);
      MockRandom mockRandom0 = new MockRandom((-1039L));
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.random(1, 1, 0.0, (Random) mockRandom0);
      boolean boolean0 = sparseMatrix0.equals((Object) rowMajorSparseMatrix0);
      assertFalse(boolean0);
      assertFalse(rowMajorSparseMatrix0.equals((Object)sparseMatrix0));
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(8);
      sparseMatrix0.kroneckerProduct(columnMajorSparseMatrix0);
      sparseMatrix0.getColumn(32);
      assertFalse(sparseMatrix0.equals((Object)rowMajorSparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(9, 792);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(9, 9, (-378.392255));
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, denseMatrix0);
      matrix0.hashCode();
      assertEquals(9, rowMajorSparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "%%MatrixMarket vector array real\n";
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket vector array real\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected object: vector.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(1526, 1526, 1526);
      matrix0.setColumn(207, 3.897822535378921E-13);
      // Undeclared exception!
      matrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 207;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(207, 10, mockRandom0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-532.40085596826), 1524.47687, 1009.8061460421, (-3793.43233371635), (-3793.43233371635)).when(vectorAccumulator0).accumulate();
      matrix0.foldColumns(vectorAccumulator0);
      matrix0.toString();
      matrix0.non(matrixPredicate0);
      int int1 = 3514;
      // Undeclared exception!
      try { 
        mockRandom0.doubles((double) 3514, 1643.29509374874);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.1102230246251565E-13;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 665.12;
      doubleArray0[3] = 3654.61564218;
      doubleArray0[4] = (-822.8126269482573);
      doubleArray0[5] = 1.1102230246251565E-13;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = matrix0.columnMajorIterator();
      assertNotNull(columnMajorMatrixIterator0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 1261;
      int int1 = 6;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1261, 6, 1261);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      columnMajorSparseMatrix0.transformColumn(4, vectorFunction0);
      int int2 = (-1292);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.power((-1292));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1292.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 2641;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(2641, 3.9009404706419626);
      DenseVector denseVector0 = DenseVector.constant(2641, 3.9009404706419626);
      Vector.unit(1834);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertColumn(2641, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2640
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 1061;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1061;
      doubleArray0[1] = (double) 1061;
      doubleArray0[2] = (double) 1061;
      doubleArray0[3] = (double) 1061;
      doubleArray0[4] = (double) 1061;
      Matrix matrix0 = Matrix.from1DArray(1061, 1061, doubleArray0);
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 1061;
      doubleArray2[1] = (double) 1061;
      doubleArray2[2] = (double) 1061;
      doubleArray2[3] = (double) 1061;
      doubleArray2[4] = (double) 1061;
      doubleArray2[5] = (double) 1061;
      doubleArray2[6] = (double) 1061;
      doubleArray1[6] = doubleArray2;
      Matrix.from2DArray(doubleArray1);
      // Undeclared exception!
      try { 
        matrix0.max();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 3212;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(3212, 3212);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Vector vector0 = Vector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.multiply(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 0 does not equal to 3212.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV(" ");
      SparseMatrix sparseMatrix0 = denseMatrix0.toSparseMatrix();
      denseMatrix0.removeFirstRow();
      // Undeclared exception!
      try { 
        sparseMatrix0.sliceBottomRight(988, 988);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [988..1][988..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(553, mockRandom0);
      mockRandom0.nextInt();
      denseVector0.sum();
      mockRandom0.doubles((long) 553);
      Matrix matrix0 = denseVector0.toRowMatrix();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      ParsePosition parsePosition0 = new ParsePosition(2916);
      numberFormat0.parseObject("org.la4j.operation.MatrixVectorOperation$3", parsePosition0);
      matrix0.toCSV(numberFormat0);
      VectorAccumulator vectorAccumulator0 = null;
      // Undeclared exception!
      try { 
        matrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.zero(398);
      Matrix matrix0 = denseVector0.toRowMatrix();
      int[] intArray0 = new int[5];
      intArray0[0] = 398;
      intArray0[1] = 398;
      intArray0[2] = 398;
      intArray0[3] = 398;
      intArray0[4] = 398;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 5;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(4, 5);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      int int1 = (-4460);
      matrix0.trace();
      int int2 = (-438);
      // Undeclared exception!
      try { 
        matrix0.copyOfShape((-438), (-4460));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -438x-4460
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(6);
      MockRandom mockRandom0 = new MockRandom();
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer((-1486));
      Double double0 = new Double((-797.064509));
      hashMap0.put(integer0, double0);
      DenseVector denseVector0 = DenseVector.zero(4);
      ooPlaceOuterProduct0.partiallyApply(denseVector0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(6);
      linkedList0.offerFirst(integer1);
      DenseVector denseVector1 = DenseVector.fromCollection(linkedList0);
      Matrix matrix1 = ooPlaceOuterProduct0.apply(denseVector1, denseVector1);
      matrix0.equals(matrix1, (double) 6);
      Matrix.randomSymmetric(4, mockRandom0);
      // Undeclared exception!
      try { 
        matrix0.eachInRow(6, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 2661.2595;
      doubleArray2[1] = 1493.6659556;
      doubleArray2[2] = (-52.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-52.0);
      doubleArray3[1] = 1493.6659556;
      doubleArray3[2] = 1493.6659556;
      doubleArray3[3] = 1493.6659556;
      doubleArray3[4] = 1493.6659556;
      doubleArray3[5] = 2661.2595;
      doubleArray3[6] = (-52.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-52.0);
      doubleArray4[1] = 1493.6659556;
      doubleArray4[2] = (-52.0);
      doubleArray4[3] = (-52.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (-52.0);
      doubleArray5[1] = 2661.2595;
      doubleArray5[2] = 1.1102230246251565E-14;
      doubleArray5[3] = 2661.2595;
      doubleArray5[4] = 2661.2595;
      doubleArray5[5] = (-912.090581119454);
      doubleArray5[6] = 1493.6659556;
      doubleArray5[7] = 2661.2595;
      doubleArray5[8] = 2661.2595;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 1493.6659556;
      doubleArray6[1] = 1493.6659556;
      doubleArray6[2] = (-912.090581119454);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 1493.6659556;
      doubleArray0[6] = doubleArray7;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(0, denseMatrix0.columns());
      
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      DenseMatrix denseMatrix1 = matrix0.toDenseMatrix();
      assertEquals(7, denseMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(10, 10);
      Vector vector0 = Vector.zero(10);
      vector0.copy();
      vector0.spliterator();
      // Undeclared exception!
      try { 
        denseMatrix0.insertRow(10, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..9
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(9);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      sparseVector0.toCSV(numberFormat0);
      DenseVector denseVector0 = DenseVector.constant(2, 2320.170469051);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      Matrix matrix1 = matrix0.removeLastColumn();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix1.update(matrixFunction0);
      assertEquals(1, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(5, (-2798.9362));
      Matrix matrix0 = columnMajorSparseMatrix0.multiply((-2798.9362));
      assertEquals(5, matrix0.columns());
      assertEquals(5, matrix0.rows());
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)matrix0.power(5);
      assertEquals(2.950733525662381E34, cCSMatrix0.max(), 0.01);
      assertEquals(0.2, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(135, 135);
      // Undeclared exception!
      matrix0.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      matrix0.determinant();
      Matrix matrix1 = Matrix.block(matrix0, matrix0, matrix0, matrix0);
      int int0 = 5;
      // Undeclared exception!
      try { 
        matrix1.removeColumn(5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 462.833;
      doubleArray2[1] = (-385.140989);
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 857.99907603741;
      doubleArray2[5] = (-894.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 857.99907603741;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 2145.27937842;
      doubleArray3[3] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 462.833;
      doubleArray4[2] = 2145.27937842;
      doubleArray4[3] = (-385.140989);
      doubleArray4[4] = 1.0;
      doubleArray4[5] = 0.0;
      doubleArray0[3] = doubleArray4;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      rowMajorSparseMatrix0.swapColumns(4071, 4071);
      assertEquals(0, rowMajorSparseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1411;
      doubleArray0[1] = (double) 934;
      doubleArray0[2] = (double) 934;
      doubleArray0[3] = (double) 1411;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1411, 934, doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("3D");
      // Undeclared exception!
      try { 
        ooPlaceMatricesMultiplication0.apply(denseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 934
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(368);
      int int0 = 4;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) null, (-1186), 368, 4, (-1970), 2817, 368);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 4, -1970
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 2981;
      int int1 = 936;
      Matrix matrix0 = Matrix.zero(2981, 936);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2981;
      doubleArray0[1] = (double) 936;
      doubleArray0[2] = 1.1102230246251565E-13;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      denseVector0.iterator();
      // Undeclared exception!
      matrix0.insertRow(936, denseVector0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(1189, 1189);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(28, 28, (double[]) null);
      MockRandom mockRandom0 = new MockRandom(28);
      Matrix.randomSymmetric(37, mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(37, 1189, 5);
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, 5, (-1830), 1189, (-1743));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 1189x-1743
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = 104.5;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 513.520096848716;
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 2.0;
      doubleArray3[5] = 104.5;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 2.0;
      doubleArray4[2] = 104.5;
      doubleArray4[3] = 2.0;
      doubleArray4[4] = (-1.0);
      doubleArray4[5] = (-1.0);
      doubleArray4[6] = 104.5;
      doubleArray4[7] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 2.0;
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = 513.520096848716;
      doubleArray5[3] = 2.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 104.5;
      doubleArray5[6] = 2.0;
      doubleArray0[4] = doubleArray5;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)columnMajorSparseMatrix0.transpose();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateColumn(0, vectorFunction0);
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 324;
      Matrix matrix0 = Matrix.constant(324, 324, 0.0);
      // Undeclared exception!
      matrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0, 0);
      columnMajorSparseMatrix0.setRow(0, (double) 0);
      double double0 = columnMajorSparseMatrix0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(37, 670);
      // Undeclared exception!
      try { 
        denseMatrix0.updateColumn(1773, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 2;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(2, 2, (double[]) null);
      // Undeclared exception!
      try { 
        denseMatrix0.transpose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 20;
      long long0 = 253L;
      MockRandom mockRandom0 = new MockRandom(253L);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(20, mockRandom0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      matrix0.infinityNorm();
      int int1 = 31;
      double double0 = new Integer(20);
      // Undeclared exception!
      matrix0.power(3831);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(868, 868, 868);
      columnMajorSparseMatrix0.nonZeroColumnMajorIterator();
      columnMajorSparseMatrix0.iteratorOrNonZeroColumns();
      SparseMatrix.diagonal(203, 868);
      columnMajorSparseMatrix0.rows();
      Matrix matrix0 = columnMajorSparseMatrix0.blankOfRows(868);
      assertEquals(868, matrix0.rows());
      
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, columnMajorSparseMatrix0);
      matrix0.setColumn(7, vector0);
      assertEquals(868, matrix0.columns());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      columnMajorSparseMatrix0.updateRow(7, vectorFunction0);
      Matrix matrix1 = columnMajorSparseMatrix0.multiply((double) 868);
      assertEquals(868, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 9;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(9);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      matrix0.spliterator();
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        matrix0.setRow(9, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix.zero(9, 792);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(9, 9, (-378.392255));
      SparseVector sparseVector0 = SparseVector.zero(819, 10);
      // Undeclared exception!
      try { 
        denseMatrix0.setColumn(9, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 819. Should be: 9.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(921, 17);
      Matrix matrix0 = columnMajorSparseMatrix0.blankOfRows(17);
      assertEquals(17, matrix0.rows());
      assertEquals(17, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(10);
      columnMajorSparseMatrix0.rank();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(10, 17);
      // Undeclared exception!
      columnMajorSparseMatrix0.kroneckerProduct(denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 0, doubleArray0);
      CompressedVector compressedVector0 = (CompressedVector)sparseMatrix0.toColumnVector();
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 4889;
      doubleArray0[1] = (double) 4889;
      doubleArray0[2] = (double) 4889;
      doubleArray0[3] = (double) 4889;
      doubleArray0[4] = (double) 4889;
      doubleArray0[5] = (double) 4889;
      doubleArray0[6] = (double) 1370;
      doubleArray0[7] = (double) 4889;
      Matrix matrix0 = Matrix.from1DArray(1370, 4889, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.norm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.5586743449064907;
      doubleArray1[1] = 419.2191564;
      doubleArray1[2] = (-1.0);
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        Matrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      SparseMatrix sparseMatrix0 = SparseMatrix.random(17, 17, 0.0, (Random) mockRandom0);
      sparseMatrix0.iterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.transformRow(17, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-62.4);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-62.4);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-62.4);
      doubleArray2[6] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray0[2] = doubleArray3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.eachInRow((-2252), (VectorProcedure) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2252' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      MockRandom mockRandom0 = new MockRandom(1995L);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.randomSymmetric(Integer.MAX_VALUE, (double) Integer.MAX_VALUE, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(4510, 4510);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      // Undeclared exception!
      matrix0.add((Matrix) rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 419.2191564;
      doubleArray1[2] = (-1.0);
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.hadamardProduct((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(5, 5);
      denseMatrix0.subtract((double) 5);
      // Undeclared exception!
      try { 
        Matrix.diagonal((-1258), 5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(2875, 2875);
      rowMajorSparseMatrix0.swapRows((-148), (-148));
      assertEquals(3.4782608695652176E-4, rowMajorSparseMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-2103.0097);
      doubleArray1[1] = 4578.9060576;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-2103.0097);
      doubleArray2[1] = 4578.9060576;
      doubleArray2[2] = (-2103.0097);
      doubleArray2[3] = (-2103.0097);
      doubleArray2[4] = (-3751.878614);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-3751.878614);
      doubleArray3[1] = (-2103.0097);
      doubleArray3[2] = 4578.9060576;
      doubleArray3[3] = (-3751.878614);
      doubleArray3[4] = (-2103.0097);
      doubleArray3[5] = (-2103.0097);
      doubleArray3[6] = (-2103.0097);
      doubleArray0[2] = doubleArray3;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        sparseMatrix0.multiply(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 3 does not equal to 2.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(1056);
      denseVector0.toRowMatrix();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(4561, 867);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      // Undeclared exception!
      try { 
        matrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 1121;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1121);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      denseMatrix0.transform(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      numberFormat0.setGroupingUsed(false);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      MatrixVectorOperation<Matrix> matrixVectorOperation0 = (MatrixVectorOperation<Matrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      DenseVector.zero(2571);
      Vector.unit(6);
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (double) 1445;
      doubleArray1[2] = (double) 2571;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 1445;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 6;
      doubleArray2[1] = (double) 6;
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      Matrix matrix1 = Matrix.unit(6, 2571);
      assertEquals(6, matrix1.rows());
      assertEquals(2571, matrix1.columns());
      
      DenseMatrix denseMatrix0 = DenseMatrix.unit(0, 518);
      denseMatrix0.iterator();
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = matrix0.non(matrixPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 71.7199307532;
      doubleArray1[1] = 1362.441957;
      doubleArray1[2] = 3771.43858647478;
      doubleArray1[3] = 1890.6652981821328;
      doubleArray1[4] = 564.940415854;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 71.7199307532;
      doubleArray2[1] = 3771.43858647478;
      doubleArray2[2] = (-756.00489);
      doubleArray2[3] = 1890.6652981821328;
      doubleArray2[4] = 3771.43858647478;
      doubleArray2[5] = 71.7199307532;
      doubleArray2[6] = 71.7199307532;
      doubleArray2[7] = 564.940415854;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 3771.43858647478;
      doubleArray3[1] = 564.940415854;
      doubleArray3[2] = 71.7199307532;
      doubleArray3[3] = 3771.43858647478;
      doubleArray3[4] = 1890.6652981821328;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 71.7199307532;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 3771.43858647478;
      doubleArray5[1] = 3771.43858647478;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 3771.43858647478;
      doubleArray5[5] = 564.940415854;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 3771.43858647478;
      doubleArray5[8] = 71.7199307532;
      doubleArray0[4] = doubleArray5;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      // Undeclared exception!
      try { 
        denseMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(37);
      sparseMatrix0.get(17, 0);
      sparseMatrix0.minInRow(0);
      sparseMatrix0.shuffle();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      sparseMatrix0.copyOfRows(0);
      sparseMatrix0.minInColumn(17);
      double[][] doubleArray0 = new double[6][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 37;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 17;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 17;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (double) 37;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (double) 0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (-4273.694665431204);
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = (double) 37;
      doubleArray0[5] = doubleArray6;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(6, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 32;
      Matrix matrix0 = Matrix.identity(32);
      matrix0.toMatrixMarket();
      Matrix matrix1 = Matrix.zero(32, 32);
      int int1 = 900;
      // Undeclared exception!
      try { 
        matrix1.insert(matrix0, 32, 32, 900, 900);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 900 rows and 900 cols at 32, 32 in a 32x32 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.addAll((Collection<? extends Integer>) linkedList1);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector.fromMap(hashMap0, 79);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = matrix0.is(matrixPredicate0);
      assertFalse(boolean0);
      
      Matrix matrix1 = matrix0.add(1.0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix1.updateRow(79, vectorFunction0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_QR;
      matrix1.withDecompositor(linearAlgebra_DecompositorFactory0);
      assertEquals(0, matrix0.rows());
      assertEquals(1, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 6;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(6, 6, Double.POSITIVE_INFINITY);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      int int1 = 19;
      denseMatrix0.mkString("yDTXY1;HLh", "RAW_QR");
      MockRandom mockRandom0 = new MockRandom(3755L);
      Matrix matrix1 = Matrix.randomSymmetric(19, mockRandom0);
      MatrixFunction matrixFunction0 = null;
      matrix0.removeFirstRow();
      // Undeclared exception!
      try { 
        matrix1.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(10);
      rowMajorSparseMatrix0.removeFirstRow();
      rowMajorSparseMatrix0.product();
      // Undeclared exception!
      try { 
        Matrix.diagonal((-1059), 10);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 2262;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(2262, 2262);
      // Undeclared exception!
      rowMajorSparseMatrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2765;
      doubleArray0[1] = (double) 2765;
      doubleArray0[2] = 1412.943113367;
      doubleArray0[3] = 339.9047228339871;
      doubleArray0[4] = (double) 2765;
      doubleArray0[5] = (double) 2765;
      doubleArray0[6] = (double) 2765;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(2765, 4687, doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.trace();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4688
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3, 3);
      columnMajorSparseMatrix0.removeFirstColumn();
      columnMajorSparseMatrix0.mkString("veE.)ueW6H", "veE.)ueW6H");
      columnMajorSparseMatrix0.toString();
      columnMajorSparseMatrix0.rank();
      // Undeclared exception!
      try { 
        DenseMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      // Undeclared exception!
      try { 
        denseMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = (-691.3505104401182);
      Matrix matrix0 = Matrix.constant(1452, 1419, (-691.3505104401182));
      int int0 = 1435;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) null, (-885), 1435);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -885x1435
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      sparseVector0.transform(vectorFunction0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = matrix0.foldRows(vectorAccumulator0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(12);
      Matrix matrix0 = Matrix.random(716, 12, mockRandom0);
      matrix0.minInRow(9);
      // Undeclared exception!
      try { 
        matrix0.maxInRow(716);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = (-2524.46170043);
      doubleArray1[5] = 46.359354142;
      doubleArray1[6] = 500.821;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-2524.46170043);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 46.359354142;
      doubleArray4[1] = 976.639019974727;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 46.359354142;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 976.639019974727;
      doubleArray5[4] = 1.0;
      doubleArray5[5] = 976.639019974727;
      doubleArray5[6] = 1.0;
      doubleArray5[7] = 4.05906;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 500.821;
      doubleArray6[1] = 4.05906;
      doubleArray6[2] = 901.93597;
      doubleArray6[3] = 1.0;
      doubleArray6[4] = 500.821;
      doubleArray6[5] = 500.821;
      doubleArray6[6] = 46.359354142;
      doubleArray6[7] = Double.POSITIVE_INFINITY;
      doubleArray6[8] = 976.639019974727;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 901.93597;
      doubleArray7[1] = 46.359354142;
      doubleArray7[2] = 500.821;
      doubleArray7[3] = 46.359354142;
      doubleArray0[6] = doubleArray7;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.toRowVector();
      assertEquals(7, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(322, 0);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(sparseMatrix0, sparseMatrix0);
      Matrix matrix1 = matrix0.blankOfColumns(322);
      assertEquals(322, matrix1.columns());
      assertEquals(322, matrix1.rows());
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 20;
      long long0 = 253L;
      MockRandom mockRandom0 = new MockRandom(253L);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(20, mockRandom0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      matrix0.infinityNorm();
      int int1 = 31;
      // Undeclared exception!
      try { 
        denseMatrix0.foldRow(31, (VectorAccumulator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(70, mockRandom0);
      // Undeclared exception!
      matrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-3469.9);
      doubleArray1[5] = (-52.0);
      doubleArray1[6] = 1250.0;
      doubleArray1[7] = 1457.399;
      doubleArray1[8] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1457.399;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-52.0);
      doubleArray2[6] = 1250.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = denseMatrix0.divide(0.0);
      assertEquals(9, matrix0.columns());
      assertEquals(2, matrix0.rows());
      assertFalse(matrix0.equals((Object)denseMatrix0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 786.606461;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      double double0 = matrix0.product();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3, 3);
      int int1 = 1954;
      Matrix matrix0 = Matrix.unit(1954, 1954);
      columnMajorSparseMatrix0.sum();
      columnMajorSparseMatrix0.multiplyByItsTranspose();
      // Undeclared exception!
      matrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = (-2583);
      int int1 = 912;
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-2583), 912, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2583x912
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 115;
      int int1 = 2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(115, 2);
      columnMajorSparseMatrix0.toCSV();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      columnMajorSparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      int int2 = 964;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 115;
      doubleArray0[1] = (double) 115;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 115;
      doubleArray0[6] = (double) 115;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(2, 964, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(8, 8);
      Matrix matrix0 = rowMajorSparseMatrix0.copyOfColumns(8);
      Matrix matrix1 = matrix0.copyOfColumns(8);
      assertTrue(matrix1.equals((Object)rowMajorSparseMatrix0));
      assertEquals(8, rowMajorSparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Locale locale0 = Locale.UK;
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      DenseVector denseVector0 = DenseVector.unit(1578);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      sparseVector0.max();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      Matrix matrix1 = Matrix.unit(507, 1578);
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, 507, 507);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 507 rows and 507 cols at 0, 0 in a 1578x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 241;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(241, 241, 241);
      SparseMatrix.identity(241);
      int int1 = 3754;
      SparseMatrix.diagonal(241, 241);
      int int2 = 3;
      int int3 = (-1643);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.slice(3754, 3, 241, (-1643));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [3754..241][3..-1643].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(1578, 1578);
      Locale locale0 = Locale.CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      numberFormat0.setParseIntegerOnly(true);
      // Undeclared exception!
      matrix0.mkString(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 3;
      MockRandom mockRandom0 = new MockRandom(3);
      Matrix matrix0 = Matrix.randomSymmetric(3, mockRandom0);
      String string0 = "+U\"Z?GUQocufB";
      Matrix.randomSymmetric(3, mockRandom0);
      int int1 = 303;
      int int2 = 3234;
      SparseVector.zero(303, 3234);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      int int3 = 17;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3234;
      doubleArray0[1] = (double) 3234;
      doubleArray0[2] = (double) 303;
      // Undeclared exception!
      try { 
        matrix0.removeColumn(303);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 6;
      Matrix.identity(6);
      int int1 = 4;
      MockRandom mockRandom0 = new MockRandom();
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      int int2 = (-1486);
      Integer integer0 = new Integer((-1486));
      Double double0 = new Double((-797.064509));
      hashMap0.put(integer0, double0);
      // Undeclared exception!
      try { 
        DenseVector.fromMap(hashMap0, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("org.la4j.matrix.ColumnMajorSparseMatrix");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(5, (-949.0));
      CRSMatrix cRSMatrix0 = (CRSMatrix)matrix0.removeFirstColumn();
      assertEquals(0.2, cRSMatrix0.density(), 0.01);
      assertNotSame(cRSMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1825.016;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = (-52.0);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = Double.POSITIVE_INFINITY;
      doubleArray4[6] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = Double.POSITIVE_INFINITY;
      doubleArray5[1] = 1825.016;
      doubleArray5[2] = 725.21507;
      doubleArray5[3] = Double.POSITIVE_INFINITY;
      doubleArray5[4] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 725.21507;
      doubleArray6[1] = (-1.0);
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = Double.POSITIVE_INFINITY;
      doubleArray7[1] = (-1.0);
      doubleArray7[2] = 1825.016;
      doubleArray7[3] = (-514.683499644);
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 0.0;
      doubleArray7[7] = 725.21507;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = 725.21507;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 0.0;
      doubleArray8[3] = Double.POSITIVE_INFINITY;
      doubleArray8[4] = (-514.683499644);
      doubleArray8[5] = 725.21507;
      doubleArray8[6] = 1825.016;
      doubleArray8[7] = 0.0;
      doubleArray8[8] = (-1.0);
      doubleArray0[7] = doubleArray8;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.removeLastColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-966.0);
      doubleArray2[1] = (-559.1813891);
      doubleArray2[2] = 3.897822535378921E-13;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 3.897822535378921E-13;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-559.1813891);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (-559.1813891);
      doubleArray5[1] = 3.897822535378921E-13;
      doubleArray5[2] = 3.897822535378921E-13;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (-559.1813891);
      doubleArray6[1] = (-559.1813891);
      doubleArray6[2] = (-559.1813891);
      doubleArray6[3] = (-966.0);
      doubleArray6[4] = 3771.43858647478;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 3.897822535378921E-13;
      doubleArray7[1] = (-966.0);
      doubleArray7[2] = 3771.43858647478;
      doubleArray7[3] = 2814.0;
      doubleArray0[6] = doubleArray7;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(0, matrix0.columns());
      
      Matrix matrix1 = matrix0.transpose();
      assertNotSame(matrix1, matrix0);
      assertEquals(7, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(5, 5, mockRandom0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.subtract(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 5x5.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(171);
      SparseMatrix sparseMatrix1 = sparseMatrix0.toSparseMatrix();
      sparseMatrix0.iteratorOfColumn(171);
      // Undeclared exception!
      sparseMatrix1.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-306.31129868);
      doubleArray1[2] = 4.9E-324;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 2.0;
      doubleArray1[5] = 72.90891495;
      doubleArray1[6] = 1.1102230246251565E-13;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.maxInColumn(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = (-2075900858);
      // Undeclared exception!
      try { 
        Matrix.zero(3, (-2075900858));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromCSV("zg1%E2\"H}byF.G>QG0N");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(82, 0);
      // Undeclared exception!
      try { 
        sparseMatrix0.removeRow(82);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..81
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 10;
      int int1 = (-1120);
      // Undeclared exception!
      try { 
        SparseMatrix.zero(10, (-1120));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 10x-1120
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(330, 544);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.LU;
      // Undeclared exception!
      try { 
        matrix0.removeRow(544);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..329
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 37;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(37);
      int int1 = 0;
      int int2 = 17;
      sparseMatrix0.get(17, 0);
      sparseMatrix0.minInRow(0);
      Matrix matrix0 = sparseMatrix0.shuffle();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      denseMatrix0.divide(0.0);
      sparseMatrix0.copyOfRows(0);
      MatrixOperation<Matrix> matrixOperation0 = inPlaceCopyMatrixToMatrix0.partiallyApply(denseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.apply(matrixOperation0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      denseVector0.toRowMatrix();
      int int0 = (-895);
      NumberFormat.getIntegerInstance();
      long long0 = 1156L;
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 10;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(10, 10, 10);
      Matrix matrix0 = columnMajorSparseMatrix0.sliceTopLeft(10, 10);
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight(10, 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [10..10][11..10].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Matrix.unit(6, 4);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = (-843);
      // Undeclared exception!
      try { 
        DenseMatrix.identity((-843));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.7102916918785116;
      doubleArray0[2] = 366.56141352522;
      doubleArray0[3] = 86.0;
      doubleArray0[4] = (-2300.377);
      doubleArray0[5] = (-125.20717175442);
      doubleArray0[6] = 1.3225652650586588;
      doubleArray0[7] = 853.34499981677;
      doubleArray0[8] = 4538.2431;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Vector.fromMap(hashMap0, 8);
      Matrix matrix1 = matrix0.transformColumn(4, vectorFunction0);
      matrix1.insert(matrix0);
      // Undeclared exception!
      try { 
        matrix1.minInRow(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = (-5735);
      // Undeclared exception!
      try { 
        Matrix.zero((-5735), (-5735));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -5735x-5735
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 2;
      MockRandom mockRandom0 = new MockRandom(717L);
      Matrix matrix0 = Matrix.randomSymmetric(2, mockRandom0);
      int int1 = 1104;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      matrix0.mkString(numberFormat0, "   ", "         ");
      long long0 = (-1097L);
      // Undeclared exception!
      try { 
        mockRandom0.doubles((-1097L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(486, (-1565.05663));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.eachNonZeroInRow(107, vectorProcedure0);
      Matrix matrix0 = Matrix.diagonal(486, 486);
      // Undeclared exception!
      try { 
        matrix0.get(486, 486);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '486' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 4;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(4, (-2054));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 4x-2054
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(10);
      columnMajorSparseMatrix0.rank();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(10, 17);
      Matrix matrix0 = Matrix.unit(10, 10);
      columnMajorSparseMatrix0.columnMajorIterator();
      Vector.unit(10);
      denseMatrix0.toBinary();
      columnMajorSparseMatrix0.diagonalProduct();
      // Undeclared exception!
      try { 
        matrix0.maxInRow(534);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
