/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:28:40 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-755));
      String string0 = "Hi";
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 2, "Hi", "", (String) null, classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-145), "46FK-(A!", "46FK-(A!", "46FK-(A!", "46FK-(A!");
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("46FK-(A!");
      fieldWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-145), "46FK-(A!", "46FK-(A!", "46FK-(A!", "46FK-(A!");
      fieldWriter0.visitAnnotation("46FK-(A!", false);
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("46FK-(A!");
      assertFalse(attribute0.isCodeAttribute());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-145), "46FK-(A!", "46FK-(A!", "46FK-(A!", "46FK-(A!");
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("46FK-(A!");
      fieldWriter0.visitAnnotation("46FK-(A!", true);
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-9));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "46FK-(A!", "46FK-(A!", "46FK-(A!", "46FK-(A!");
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("46FK-(A!");
      assertFalse(attribute0.isCodeAttribute());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(33554432);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1190), "P}1d_4Awy\"", "g8X*.]18b", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
      fieldWriter0.visitAnnotation("", true);
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter1.getSize();
      System.setCurrentTimeMillis((-1190));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-145), "46FK-(A!", "46FK-(A!", "*q=vJ4", "46FK-(A!");
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("*q=vJ4");
      ByteVector byteVector0 = new ByteVector(0);
      ByteVector byteVector1 = byteVector0.putInt((-68));
      byteVector0.putByte(1);
      fieldWriter0.put(byteVector1);
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "46FK-(A!", "46FK-(A!", "*q=vJ4", "46FK-(A!");
      int int0 = Type.VOID;
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.put11(1, 1);
      fieldWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "P}1d_4Awy\"", "", "", "");
      fieldWriter0.visitAnnotation("RuntimeVisibleAnnotations", false);
      fieldWriter0.visitAnnotation("", true);
      fieldWriter0.getSize();
      FieldWriter fieldWriter1 = classWriter0.firstField;
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      fieldWriter1.visitEnd();
      assertSame(fieldWriter1, fieldWriter0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3040));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "v!BgKqhQ%\"", "[]", "P}1d_4Awy\"", "g8X*.]18b");
      fieldWriter0.visitAnnotation("v!BgKqhQ%\"", false);
      int int0 = Type.CHAR;
      FieldWriter fieldWriter1 = classWriter0.firstField;
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter1.put(byteVector0);
      fieldWriter1.visitEnd();
      assertSame(fieldWriter1, fieldWriter0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-148), "46F0-(A!", "46F0-(A!", "*q=vJ4", "46F0-(A!");
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("*q=vJ4");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putInt(2);
      byteVector1.putByte(10);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(33554432);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 33554432, "*q=vJ4", "g8X*.]18b", "*q=vJ4", (Object) null);
      fieldWriter0.getSize();
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.put11(2, 1);
      byteVector1.putInt(2);
      ByteVector byteVector2 = byteVector1.putByte(1);
      fieldWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-9));
      classWriter0.version = 1;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "46FK-(A!", "46FK-(A!", (String) null, (Object) null);
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("46FK-(A!");
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putUTF8("Deprecated");
      ByteVector byteVector2 = byteVector1.putLong(468L);
      fieldWriter0.put(byteVector1);
      assertSame(byteVector1, byteVector2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-39));
      classWriter0.version = (-39);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-145), "46FK-(A!", "46FK-(A!", "46FK-(A!", "46FK-(A!");
      fieldWriter0.getSize();
      int int0 = (-508);
      int int1 = 1978;
      ByteVector byteVector0 = null;
      try {
        byteVector0 = new ByteVector((-508));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = (-9);
      ClassWriter classWriter0 = new ClassWriter((-9));
      classWriter0.version = (-9);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-9), "ZEQu+|4=~x9", "d5eHp)]6G1%~$9", "Gb>msQSId2,YRA", "46FK-(A!");
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("Exceptions");
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putUTF8("");
      byteVector1.putLong(30);
      byteVector0.putUTF8("d5eHp)]6G1%~$9");
      ByteVector byteVector2 = byteVector1.putByte((-2430));
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter1.put(byteVector2);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      FieldWriter fieldWriter2 = null;
      try {
        fieldWriter2 = new FieldWriter(classWriter0, 30, "Gb>msQSId2,YRA", "d5eHp)]6G1%~$9", "ccH1Rj+INr+`=\"", mockThaiBuddhistDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@31a9b6c3
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }
}
