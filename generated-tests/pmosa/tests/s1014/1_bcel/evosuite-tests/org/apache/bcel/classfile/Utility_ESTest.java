/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 04:22:43 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.setBit(4752, 4752);
      // Undeclared exception!
      try { 
        Utility.signatureToString("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `boolean'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "(BtGA.@V~y-IK6z{";
      try { 
        Utility.methodSignatureArgumentTypes("(BtGA.@V~y-IK6z{", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `tGA.@V~y-IK6z{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_PROXYCLASSDESC;
      try { 
        Utility.methodSignatureArgumentTypes("(;TY7x8CV<<x@}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;TY7x8CV<<x@}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "<clinit>";
      Utility.searchOpcode("<clinit>");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("<clinit>", "Mz_!!Zf @Oo<bRgNw", "Ooops, what primitive type is ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <clinit>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("'-~UTMs00B=::Nv>+-", "'-~UTMs00B=::Nv>+-", "'-~UTMs00B=::Nv>+-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '-~UTMs00B=::Nv>+-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = (-2322);
      Utility.accessToString((-2322), false);
      Utility.accessToString((-2322));
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("private protected static synchronized volatile transient interface abstract synthetic annotation enum", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private protected static synchronized volatile transient interface abstract synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = Utility.compactClassName("NYu!oL6^&9OIp=:/ T");
      assertEquals("NYu!oL6^&9OIp=:. T", string0);
      
      int int0 = Utility.setBit(77, 77);
      assertEquals(8269, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = Utility.format((-576), (-576), false, '*');
      assertEquals("-576", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.format((-1498), 60, true, '#');
      Utility.format(102, (-1498), true, ';');
      Utility.format(0, 79, true, '/');
      Utility.compactClassName(";!D\"m35d/4[9Ti\"", true);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      Utility.getSignature("{java.lang.Object@119199eb, java.lang.Object@7c1480fa, java.lang.Object@41b6de78, java.lang.Object@7c8d3d3d, java.lang.Object@614ead86}");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)116;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-111);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-87);
      byteArray1[3] = (byte) (-111);
      byteArray1[4] = (byte) (-120);
      byteArray1[5] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.setBit(2, 52);
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A", string0);
      
      String string1 = Utility.compactClassName("byte", true);
      assertEquals("byte", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Utility.getSignature("\t<");
      assertEquals("L<;", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.clearBit(0, 0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `boolean'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.isSet(4543, 4543);
      try { 
        Utility.methodSignatureArgumentTypes(", low = ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , low = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.accessToString(95, true);
      Utility.convertString("");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "public private protected static final volatile";
      objectArray0[1] = (Object) "public private protected static final volatile";
      objectArray0[2] = (Object) "public private protected static final volatile";
      objectArray0[3] = (Object) "public private protected static final volatile";
      Utility.printArray(objectArray0, true, false);
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = Utility.accessToString(512, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = Utility.signatureToString("Clone Not Supported");
      assertEquals("char", string0);
      
      String string1 = Utility.compactClassName("Clone Not Supported", "Clone Not Supported", true);
      assertEquals("", string1);
      
      int int0 = Utility.clearBit(1263, 1263);
      assertEquals(1263, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.accessToString(2, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "private";
      objectArray0[1] = (Object) "private";
      objectArray0[2] = (Object) "private";
      Utility.printArray(objectArray0, true, true);
      Utility.compactClassName("{\"private\", \"private\", \"private\"}", "{\"private\", \"private\", \"private\"}", true);
      Utility.compactClassName("? super ", false);
      Utility.printArray(objectArray0, false, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("? super ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `? super '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.decode("", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utility.compactClassName(", handler_pc = ");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", handler_pc = ";
      stringArray0[1] = ", handler_pc = ";
      stringArray0[2] = ", handler_pc = ";
      stringArray0[3] = ", handler_pc = ";
      stringArray0[4] = ", handler_pc = ";
      Utility.methodTypeToSignature(", handler_pc = ", stringArray0);
      Utility.accessToString(0);
      Utility.compactClassName(", handler_pc = ");
      byte[] byteArray0 = Utility.decode("", false);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Utility.clearBit((-396), (-396));
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("if_icmpne", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("0", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0";
      String string1 = Utility.methodTypeToSignature("0", stringArray0);
      assertEquals("(L0;)L0;", string1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.classOrInterface(40);
      try { 
        Utility.methodSignatureReturnType("t~>--", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `t~>--'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfMethodSignature("new");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: new
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfMethodSignature("$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$3c", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.isJavaIdentifierPart('<');
      Utility.compactClassName("ret");
      try { 
        Utility.methodSignatureReturnType("ret", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ret'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Utility.signatureToString("SAME_EXTENDED");
      boolean boolean0 = Utility.isJavaIdentifierPart('n');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfMethodSignature("1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.replace("'Nd^3Y[\"Np", "'Nd^3Y[\"Np", "'Nd^3Y[\"Np");
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.Utility");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.Utility'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "(;TY7x8CV<<x@}";
      try { 
        Utility.typeOfMethodSignature("(;TY7x8CV<<x@}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (;TY7x8CV<<x@}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.compactClassName("z=aA2tT;Z|\"i5W,", true);
      Utility.setBit(1941, 0);
      try { 
        Utility.typeOfSignature("z=aA2tT;Z|\"i5W,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: z=aA2tT;Z|\"i5W,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.getSignature("'-~UTMs00B=::Nv>+-");
      Utility.convertString("'-~UTMs00B=::Nv>+-");
      Utility.setBit(103, 103);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("'-~UTMs00B=::Nv>+-", "CONSTANT_Methodref", " of class ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '-~UTMs00B=::Nv>+-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "byte";
      stringArray0[1] = "byte";
      stringArray0[2] = "byte";
      stringArray0[3] = "byte";
      stringArray0[4] = "byte";
      stringArray0[5] = "byte";
      Utility.methodTypeToSignature("byte", stringArray0);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "'-~UTMs00B=::Nv>+-";
      Utility.convertString("'-~UTMs00B=::Nv>+-");
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)108;
      Utility.encode(byteArray0, true);
      Object object0 = new Object();
      String string1 = "j}QEg=V>#4*CBPx.v'";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("j}QEg=V>#4*CBPx.v'", "'-~UTMs00B=::Nv>+-", "$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: j}QEg=V>#4*CBPx.v'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.replace("'Nd^3Y[\"Np", "'Nd^3Y[\"Np", "'Nd^3Y[\"Np");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'Nd^3Y[\"Np";
      Utility.replace("]OtT&X[)m:I<Ec", "'Nd^3Y[\"Np", "'Nd^3Y[\"Np");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("+~Otp\"pl}~kfWFqVM", "'Nd^3Y[\"Np", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: +~Otp\"pl}~kfWFqVM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("V?$-![=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.clearBit((-17), (-17));
      Utility.getSignature("fmJz~ |");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("LfmJz~;", "LfmJz~;", "byte", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LfmJz~;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-91);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.searchOpcode("Illegal type: ");
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("z=aA2tT;Z|\"i5W,", true);
      Utility.setBit(1941, 0);
      Utility.typeOfSignature("Invalid signature: `");
      try { 
        Utility.typeOfMethodSignature("ifeq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifeq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "'-~UTMs00B=::Nv>+-";
      Utility.getSignature("'-~UTMs00B=::Nv>+-");
      boolean boolean0 = false;
      Utility.compactClassName("L'-~UTMs00B=::Nv>+-;", "'-~UTMs00B=::Nv>+-", false);
      String string1 = "+";
      Utility.getSignature("+");
      Utility.typeOfSignature("L+;");
      // Undeclared exception!
      try { 
        Utility.signatureToString("7zMD", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `7zMD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      String string1 = Utility.convertString("y@my,**\"4qOK#y");
      assertEquals("y@my,**\\\"4qOK#y", string1);
      
      int int0 = Utility.setBit(1091, 27);
      assertEquals(134218819, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.isSet(77, (-1370));
      Utility.classOrInterface(203);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("long", "fload_2", "long", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)80;
      byteArray0[0] = (byte)80;
      byte byte1 = (byte) (-3);
      byteArray0[1] = (byte) (-3);
      byte byte2 = (byte)13;
      byteArray0[2] = (byte)13;
      byte byte3 = (byte)108;
      byteArray0[3] = (byte)108;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("isub", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `isub'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "v<6=s=";
      Utility.getSignature("\nException handler(;) = \n");
      try { 
        Utility.typeOfMethodSignature("LException;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LException;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.clearBit(90, 90);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "YIDA");
      // Undeclared exception!
      try { 
        Utility.signatureToString("YIDA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YIDA'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.setBit(1765, 190);
      // Undeclared exception!
      try { 
        Utility.signatureToString("XY,gvpu]W$b3y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XY,gvpu]W$b3y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-124);
      Utility.encode(byteArray0, false);
      String string0 = "byte";
      try { 
        Utility.typeOfMethodSignature("byte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 0;
      Utility.setBit((-2452), 76);
      // Undeclared exception!
      try { 
        Utility.signatureToString("HRErS=).+LgyngxqW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HRErS=).+LgyngxqW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.setBit(2099, 190);
      String string0 = Utility.signatureToString("Illegally nested brackets:");
      assertEquals("int", string0);
      
      String string1 = Utility.getSignature("boolean");
      assertEquals("Z", string1);
      
      int int0 = Utility.setBit(139, 2099);
      assertEquals(524427, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature("l2i");
      try { 
        Utility.typeOfSignature(",&*Z-Y0Kp~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,&*Z-Y0Kp~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.format(0, 20, false, 'P');
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("PPPPPPPPPPPPPPPPPPP0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PPPPPPPPPPPPPPPPPPP0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)72;
      Utility.isJavaIdentifierPart('8');
      Utility.accessToString(10);
      Utility.accessToString(122, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "q\"4[-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("7AB[3%@hFE>3`j]k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7AB[3%@hFE>3`j]k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dload\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1575, (-2624), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char char0 = 'n';
      Utility.isJavaIdentifierPart('n');
      Utility.clearBit((-2833), 41);
      String string0 = "E2v";
      try { 
        Utility.typeOfSignature("E2v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E2v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("[]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Wg}:;x", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wg}:;x'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte) (-48);
      byteArray0[8] = (byte)115;
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1311, (byte)66);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)76, (byte)76);
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)77, (int) (byte)86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = Utility.signatureToString("F /YNm");
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "EH|cQZL~da}\\b[#";
      Utility.convertString("EH|cQZL~da}\b[#");
      try { 
        Utility.methodSignatureReturnType("EH|cQZL~da}\b[#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EH|cQZL~da}\b[#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "EH|QZL~da}\\b[#";
      Pattern.quote("EH|QZL~da}\b[#");
      try { 
        Utility.typeOfSignature(">;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(;TY7x8CV<<;@}", "(;TY7x8CV<<;@}", "(;TY7x8CV<<;@}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;TY7x8CV<<;@}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%9;N199+zGW@f%]sQey");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %9;N199+zGW@f%]sQey
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("O68H^R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O68H^R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)20;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 744, (int) (byte)72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.signatureToString("CnrxaevH8o&g2e|VZ");
      String string0 = Utility.methodSignatureReturnType("CnrxaevH8o&g2e|VZ");
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "\"w)@S=";
      Pattern.quote("\"w)@S=");
      try { 
        Utility.typeOfSignature("Oa`pFa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Oa`pFa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Pattern.quote(":");
      Utility.typeOfSignature("B~T)2q&ma`");
      // Undeclared exception!
      try { 
        Utility.signatureToString(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("*+u'/9qr*NZm}(M>0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: u'/9qr*NZm}(M>0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Utility.typeOfSignature("Z\"?sN");
      // Undeclared exception!
      try { 
        Utility.signatureToString("pVCmjJX{3bkm;7Qd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `pVCmjJX{3bkm;7Qd'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "\"w)@S=";
      Pattern.quote("\"w)@S=");
      try { 
        Utility.typeOfSignature("\"w)@S=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"w)@S=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Pattern.quote(":");
      String string0 = Utility.methodSignatureReturnType("LAq;V", false);
      assertEquals("Aq", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("LlfW\"wI=0`Jzee");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LlfW\"wI=0`Jzee
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte) (-48);
      byteArray0[8] = (byte) (-123);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1311, (byte)66);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)76, (byte)76);
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)77, (int) (byte)86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.typeOfSignature("Z\"?sN");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte)4;
      String string0 = Utility.encode(byteArray0, true);
      String string1 = Utility.signatureToString("Z\"?sN");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.typeOfSignature("Clone Not Supported");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("]+u", "IH", "(;TY7x8CV<<;@}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]+u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utility.typeOfSignature("F /YNm");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("IH", "F /YNm", "CM>8$$;Lh`jSp;N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: IH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Utility.typeOfSignature("SAME_EXTENDED");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("s", "IH", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Pattern.quote("j~VHTwj8/w|mR2K>'");
      Utility.typeOfSignature("Total of ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("(;TY7x8CV<<x@}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `(;TY7x8CV<<x@}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Utility.signatureToString("VJ7idSPh5}cPf~TK<");
      try { 
        Utility.typeOfMethodSignature("dcmpl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dcmpl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "monitorexit";
      Utility.compactClassName("checkcast", "monitorexit", true);
      Utility.isJavaIdentifierPart('6');
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        Utility.typeOfSignature("X7R$Kig)gG,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X7R$Kig)gG,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("RuntmeVis");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntmeVis'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("GQ\"XqT`>M`$-s=7]]{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GQ\"XqT`>M`$-s=7]]{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "X7RKig)gG,";
      byte byte0 = Constants.T_REFERENCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)14, (-1378), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = Utility.setBit(80, 80);
      assertEquals(65616, int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "CQQ_ktq!2";
      stringArray0[1] = "Xy!gIQ{sd27c|_9M";
      stringArray0[2] = "CQQ_ktq!2";
      stringArray0[3] = "6D4Irg";
      stringArray0[4] = "CQQ_ktq!2";
      stringArray0[5] = "CQQ_ktq!2";
      stringArray0[6] = "CQQ_ktq!2";
      stringArray0[7] = "CQQ_ktq!2";
      String string0 = Utility.methodTypeToSignature("CQQ_ktq!2", stringArray0);
      assertEquals("(LCQQ_ktq!2;LXy!gIQ{sd27c|_9M;LCQQ_ktq!2;L6D4Irg;LCQQ_ktq!2;LCQQ_ktq!2;LCQQ_ktq!2;LCQQ_ktq!2;)LCQQ_ktq!2;", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "CQQ_ktq!2";
      objectArray0[1] = (Object) "CQQ_ktq!2";
      objectArray0[2] = (Object) "CQQ_ktq!2";
      objectArray0[3] = (Object) "CQQ_ktq!2";
      objectArray0[4] = (Object) "CQQ_ktq!2";
      objectArray0[5] = (Object) "CQQ_ktq!2";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "CQQ_ktq!2";
      Utility.printArray(objectArray0, false);
      String string1 = Utility.compactClassName("b];>Uqhi)a", "(LCQQ_ktq!2;LXy!gIQ{sd27c|_9M;LCQQ_ktq!2;L6D4Irg;LCQQ_ktq!2;LCQQ_ktq!2;LCQQ_ktq!2;LCQQ_ktq!2;)LCQQ_ktq!2;", false);
      assertEquals("b];>Uqhi)a", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "QM0";
      try { 
        Utility.typeOfSignature("QM0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QM0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "@fFV$NhFDM";
      try { 
        Utility.typeOfSignature("@fFV$NhFDM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @fFV$NhFDM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("'-~UTMs00B=::Nv>+-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '-~UTMs00B=::Nv>+-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('D');
      assertTrue(boolean0);
      
      String string0 = Utility.methodTypeToSignature("iload_2", (String[]) null);
      assertEquals("()Liload_2;", string0);
      
      Utility.getSignature("#JsaL@6c");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.typeOfSignature("Z\"?sN");
      try { 
        Utility.typeOfSignature("4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Utility.getSignature("'-~UTM00B=:Nv>+-");
      boolean boolean0 = false;
      Utility.compactClassName("L'-~UTM00B=:Nv>+-;", "L'-~UTM00B=:Nv>+-;", false);
      String string0 = Constants.ILLEGAL_TYPE;
      try { 
        Utility.typeOfSignature("<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal type>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)19;
      byteArray0[8] = (byte)111;
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byteArray0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "33 5e 75 b1 64 68 5d 13 6f";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) byteArray0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "33 5e 75 b1 64 68 5d 13 6f";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-3634ttttttttttttttttttttttttttttttttttttttttttttt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -3634ttttttttttttttttttttttttttttttttttttttttttttt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)75;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-503), 1061, false);
      try { 
        Utility.decode("]dt0L", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1283), (-1283), true);
      assertEquals("0:    nop\n", string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$A", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("N5rX!oj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N5rX!oj'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "O68H^R";
      Utility.getSignature("O68H^R");
      try { 
        Utility.typeOfSignature("M8_eo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M8_eo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("VJfzidSPh5}cPf~dK<");
      assertEquals((byte)12, byte0);
      
      String string0 = Utility.compactClassName("VJfzidSPh5}cPf~dK<");
      assertEquals("VJfzidSPh5}cPf~dK<", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "PfF7${FD";
      try { 
        Utility.typeOfSignature("PfF7${FD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PfF7${FD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)115;
      byte byte0 = (byte)46;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)71;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 102, (-3637), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)74;
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)103, (byte)95);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 6, (int) (byte)95, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      try { 
        Utility.methodSignatureReturnType("K\"LZw]FS~j{X\"5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K\"LZw]FS~j{X\"5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "){D,'0'=*]Rik[P9p{";
      try { 
        Utility.typeOfSignature("){D,'0'=*]Rik[P9p{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ){D,'0'=*]Rik[P9p{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("*J;UdANQ");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Utility.classOrInterface(77);
      Utility.setBit((-1269), 187);
      try { 
        Utility.typeOfSignature(";(Gz%6F5N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;(Gz%6F5N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)22;
      String string0 = "?>...";
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-3051), (-1110));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-25);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 790, 174, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        Utility.typeOfSignature("R}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte byte0 = (byte)46;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)71;
      Constant[] constantArray0 = new Constant[4];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)46, (-3637));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantInteger constantInteger0 = new ConstantInteger(123);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[2] = (Constant) constantDouble0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)46);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[3] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)71, 52, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(43, 43);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte) (-127);
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1920, 76, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "=.0E6OYM";
      try { 
        Utility.typeOfSignature("=.0E6OYM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =.0E6OYM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Utility.typeOfSignature("SAME_EXTENED");
      try { 
        Utility.methodSignatureReturnType("Q VbZ9l\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q VbZ9l\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      try { 
        Utility.typeOfSignature("ADO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ADO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Utility.typeOfSignature("Z\"?sN");
      // Undeclared exception!
      try { 
        Utility.signatureToString("T486#t<ptKGxa*@|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T486#t<ptKGxa*@|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Utility.typeOfSignature("Z\"?sN");
      String string0 = "T486#t<ptKGxa*@|";
      // Undeclared exception!
      try { 
        Utility.signatureToString("T486#t<ptKGxa*@|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T486#t<ptKGxa*@|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = Utility.compactClassName("GJG'X+~lV8tjAP", "IV", true);
      assertEquals("GJG'X+~lV8tjAP", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte)89;
      byteArray0[8] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)37, (-2591));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantInteger constantInteger0 = new ConstantInteger(24);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("idiv", string1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "H.vfn";
      try { 
        Utility.typeOfSignature("H.vfn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H.vfn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "4";
      try { 
        Utility.typeOfSignature("5o-rK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5o-rK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      try { 
        Utility.typeOfSignature("GJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1LT53)lntiRt'Oh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1LT53)lntiRt'Oh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":B_P0cIT*w&XgQ}-cJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :B_P0cIT*w&XgQ}-cJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.;!D\"m35d.4[9Ti\"", "", true);
      assertEquals("java.lang.;!D\"m35d.4[9Ti\"", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = "*C";
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(85, 85);
      constantInterfaceMethodref0.copy();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInterfaceMethodref0.setClassIndex(60);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 44, 187, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)103;
      byteArray0[0] = (byte)72;
      byteArray0[4] = (byte)23;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 744, (int) (byte)72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "VJfzidSh5}cPfdK<";
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ClassPath classPath0 = new ClassPath("T9E`]9C0CGYf(tV");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      constantFloat1.accept(descendingVisitor0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(156, (byte)1);
      Constant[] constantArray0 = new Constant[4];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3526, 3526, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-3051), (-1110));
      Constant[] constantArray0 = new Constant[1];
      constantInterfaceMethodref0.copy();
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      constantInterfaceMethodref0.setClassIndex((-3051));
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-94);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-94), (int) (byte) (-25), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fneg
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      try { 
        Utility.typeOfSignature("NT'S(s-$Ax]lQ^RH?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NT'S(s-$Ax]lQ^RH?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)20;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2088, 2088);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(2088);
      constantArray0[0] = (Constant) constantInteger0;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-67);
      byteArray1[1] = (byte)20;
      byteArray1[2] = (byte)104;
      byteArray1[3] = (byte)20;
      byteArray1[4] = (byte)104;
      byteArray1[5] = (byte) (-59);
      byteArray1[6] = (byte) (-65);
      byteArray1[7] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 5224. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)103;
      byteArray0[4] = (byte)23;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)72;
      byteArray1[1] = (byte)109;
      byteArray1[2] = (byte)103;
      byteArray1[3] = (byte)23;
      byteArray1[4] = (byte)23;
      byteArray1[5] = (byte) (-80);
      byteArray1[6] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 3244, (int) (byte)74, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = Utility.getSignature("\nException handler(;) = \n");
      assertEquals("LException;", string0);
      
      ConstantInteger constantInteger0 = new ConstantInteger(25);
      ConstantInteger constantInteger1 = new ConstantInteger(25);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantInteger1;
      constantArray0[1] = (Constant) constantInteger1;
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantInteger0;
      constantArray0[4] = (Constant) constantInteger0;
      constantArray0[5] = (Constant) constantInteger1;
      constantArray0[6] = (Constant) constantInteger0;
      constantArray0[7] = (Constant) constantInteger1;
      constantArray0[8] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)71;
      String string1 = Utility.convertString("\nException handler(;) = \n");
      assertEquals("\\nException handler(;) = \\n", string1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)74;
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 87, (int) (byte) (-56), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.getSignature("\nException handler(;) = \n");
      ConstantInteger constantInteger0 = new ConstantInteger(25);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantInteger1;
      constantArray0[1] = (Constant) constantInteger1;
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantInteger0;
      constantArray0[4] = (Constant) constantInteger0;
      constantArray0[5] = (Constant) constantInteger1;
      constantArray0[6] = (Constant) constantInteger0;
      constantInteger0.copy();
      constantArray0[7] = (Constant) constantInteger1;
      constantArray0[8] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-18);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-18);
      byteArray1[1] = (byte) (-117);
      byteArray1[2] = (byte) (-59);
      byteArray1[3] = (byte) (-82);
      byteArray1[4] = (byte) (-117);
      byteArray1[5] = (byte) (-59);
      byteArray1[6] = (byte) (-117);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 25, 2416, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 44683. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantClass constantClass0 = new ConstantClass(18);
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(18);
      constantArray0[1] = (Constant) constantMethodType0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*C");
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(18, 18);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(18, 106);
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-113);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)59;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[3] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("czkeHP(g", "*C", "czkeHP(g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: czkeHP(g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)27, (int) (byte)27, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6id");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6id
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[7] = (byte) (-85);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), 199, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(95, 95);
      constantInterfaceMethodref0.copy();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantInterfaceMethodref0.setClassIndex((byte)118);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)118;
      Utility.codeToString(byteArray0, constantPool0, 0, 35, false);
      String string0 = Constants.CONSTRUCTOR_NAME;
      String string1 = Utility.printArray((Object[]) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 726, 182, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 87, (int) (byte) (-56), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)127;
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)127, (byte)127);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 55, 1106, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = Utility.accessToString((-2034), true);
      assertEquals("private protected static strictfp synthetic annotation enum", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "private protected static strictfp synthetic annotation enum";
      stringArray0[1] = "^PZ(pg:!jqSWJbXm";
      Utility.methodTypeToSignature("private protected static strictfp synthetic annotation enum", stringArray0);
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(Lprivate;L^PZ(pg:!jqSWJbXm;)Lprivate;", false);
      Utility.methodTypeToSignature("Warning: Padding byte != 0 in ", stringArray1);
      String string1 = Utility.methodTypeToSignature("private protected static strictfp synthetic annotation enum", stringArray1);
      assertEquals("(Lprivate;L^PZ(pg:!jqSWJbXm;)Lprivate;", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)10;
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$f8$W$ed$ff$de$E$K", string2);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "1LT53)lntiRt'Oh";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)4;
      byte byte0 = (byte)74;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte) (-76);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1155, 1042, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)0;
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(19, (byte)8);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-122), (byte)122);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-120), (-608), true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("K-J1cs6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K-J1cs6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = Utility.getSignature("CONSTANT_Utf8");
      assertEquals("LCONSTANT_Utf8;", string0);
      
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "CONSTANT_Utf8";
      stringArray0[1] = "LCONSTANT_Utf8;";
      stringArray0[2] = "CONSTANT_Utf8";
      stringArray0[3] = "b[G!2]$F=5~MYV~kVQ.";
      stringArray0[4] = "CONSTANT_Utf8";
      stringArray0[5] = "LCONSTANT_Utf8;";
      String string1 = Utility.methodTypeToSignature("LCONSTANT_Utf8;", stringArray0);
      assertEquals("(LCONSTANT_Utf8;LLCONSTANT_Utf8;;LCONSTANT_Utf8;[Lb;LCONSTANT_Utf8;LLCONSTANT_Utf8;;)LLCONSTANT_Utf8;;", string1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = Utility.getSignature("?q[]z~2");
      assertEquals("[L?q;", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-85);
      byteArray0[3] = (byte) (-28);
      byteArray0[8] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 14, 1903, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(95, 95);
      Constant constant0 = constantInterfaceMethodref0.copy();
      byte byte0 = (byte)99;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-87);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = constant0;
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-3), 194, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dadd
         // 1:    dadd
         // 2:    aastore
         // 3:    dadd
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)31;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 75, (int) (byte)43, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Utility.getSignature("\nException handler(;) = \n");
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-414), (-331));
      ConstantDouble constantDouble0 = new ConstantDouble((-331));
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)123;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteArray0, constantPool0, (-82), (int) (byte) (-51), false);
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.printArray((Object[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        DataInputStream.readUTF((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(73, 73);
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-108);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-916), (-3340), false);
      assertEquals("0:    <illegal opcode>\n1:    lcmp\n", string0);
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      String string2 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{}", string2);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)41;
      byteArray0[0] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (int) (byte)41, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)98;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1791798309), (int) (byte) (-26), true);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.typeOfSignature("*C");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, (int) (byte)5, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(95, 95);
      constantInterfaceMethodref0.copy();
      constantInterfaceMethodref0.clone();
      constantInterfaceMethodref0.copy();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      try { 
        Utility.typeOfSignature("8_s|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8_s|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)20;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2088, 2088);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(2088);
      constantArray0[0] = (Constant) constantInteger0;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-67);
      byteArray1[1] = (byte)20;
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence1, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("lload_1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lload_1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)46;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)46, 1248);
      Constant constant0 = constantInterfaceMethodref0.copy();
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = constant0;
      constantArray0[1] = constant0;
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      constantArray0[4] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInterfaceMethodref0.setClassIndex((-563));
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1592, 238, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Utility.getSignature("\nException handler(;) = \n");
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1121, (-1105));
      ConstantDouble constantDouble0 = new ConstantDouble(1539.7);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 233, 1461, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[17] = (byte)98;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)0;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1791798309), (int) (byte) (-26), false);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(95, 95);
      Utility.getSignature("<illegal opcode>");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(95, (-331));
      ConstantDouble constantDouble0 = new ConstantDouble((-512.531677));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.typeOfSignature("/PKm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /PKm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(194, 1843);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      Constant constant0 = constantInterfaceMethodref1.copy();
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      constantArray0[2] = constant0;
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      constantArray0[4] = constant0;
      constantArray0[5] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)99;
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-87), (int) (byte)99, false);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      int int0 = 42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 42, 165, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(95, 95);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantInteger constantInteger0 = new ConstantInteger(4);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-63), (int) (byte) (-63));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Utility.compactClassName("GJG'X+~lV8tjAP", "IV", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.findClass("'-~UTMs00B=::Nv>+-");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantPool0.accept(descendingVisitor0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.printArray((Object[]) constantArray0);
      Utility.getSignature("8 vT3NW*h");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)59, (int) (byte)59, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      String string1 = Constants.CONSTRUCTOR_NAME;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "<init>";
      objectArray0[1] = (Object) "<init>";
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)88;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2387), 562);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-126), (int) (byte) (-15), true);
      String string2 = "boolean";
      String string3 = "\\\"";
      boolean boolean0 = true;
      MockFile mockFile0 = new MockFile("impdep1", "<init>");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "k-RToc!;+FXdimz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"k-RToc!;+FXdimz\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.printArray((Object[]) null, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(2833);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-67), (byte) (-59));
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantInteger0;
      constantArray0[4] = (Constant) constantInteger0;
      try { 
        Utility.decode("l<_$jqv1@dv.*d,", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, false);
      Utility.decode("$A", false);
      try { 
        Utility.typeOfSignature("$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2698), (-2698));
      try { 
        Utility.decode("l<_$jqv1@dv.*d,", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantInterfaceMethodref0.copy();
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 196, 200, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)113;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      int int0 = 171;
      Utility.codeToString(byteArray0, constantPool0, (-878), 171, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)113, 20, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Utility.format(624, (-2467), false, 'w');
      Utility.convertString("arraylength");
      Utility.getSignature("9Un<G!> qEh'4g");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)97;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)3, 59, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)104;
      byteArray1[1] = (byte)104;
      byteArray1[2] = (byte)79;
      byteArray1[3] = (byte)104;
      byteArray1[4] = (byte)104;
      byteArray1[5] = (byte)104;
      byteArray1[6] = (byte)104;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)104, 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-87);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(Unknown attribute ", "A#", "*v4w,L4&W*6O$ciS.", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unknown attribute '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 105, 7, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)20;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 744, (int) (byte)72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(73, 73);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantString1;
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)116, 46, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48072. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)103;
      String string0 = Utility.signatureToString("DG 1?WL{q)nvcS%");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.getSignature("\nException handler(;) = \n");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)46;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-232), (int) (byte)46, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 60, (int) (byte)64, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = Utility.getSignature("\nException handler(;) = \n");
      assertEquals("LException;", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1539, (byte)45);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantArray0[4] = (Constant) constantMethodHandle0;
      constantArray0[5] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aload_3", string1);
      
      String string2 = Utility.accessToString((int) (byte) (-67));
      assertEquals("public protected static final synchronized transient native interface abstract strictfp synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = Utility.getSignature("\nException handler(;) = \n");
      assertEquals("LException;", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)53;
      Utility.codeToString(byteArray0, constantPool0, (-6295), (int) (byte)53, true);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-3023), (-1741), false);
      assertEquals("0:    dload\t\t%119\n2:    saload\n", string1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 70, (int) (byte)10, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "1LT53)lntiRt'Oh";
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2387), (byte) (-15));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte) (-15);
      byteArray0[8] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 177, 512, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.format(624, 624, false, 'w');
      Utility.convertString("arraylength");
      Utility.getSignature("9Un<G!> qEh'4g");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-94);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(175, (byte)4);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)4, (-269), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)95, 139, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.isJavaIdentifierPart('z');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-125), (int) (byte)28);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 32387. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = "9oc--g^JpMPMD";
      try { 
        Utility.typeOfSignature("9oc--g^JpMPMD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9oc--g^JpMPMD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-100), (int) (byte)127, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("fsub");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fsub'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)103;
      byteArray0[4] = (byte)23;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)72;
      byteArray1[1] = (byte)109;
      byteArray1[2] = (byte)34;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 75, 1617);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-56);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("K;\">hlh |~iZ!uEV!@&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K;\">hlh |~iZ!uEV!@&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iand", string0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      boolean boolean0 = Utility.isJavaIdentifierPart('&');
      assertFalse(boolean0);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1253), 131);
      assertEquals("0:    lxor\n1:    iand\n", string1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readUnsignedShort();
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      try { 
        Utility.methodSignatureReturnType("M`%Ps8~", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M`%Ps8~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)71, (-331));
      ConstantDouble constantDouble0 = new ConstantDouble((-414));
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)50;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)50;
      byteArray1[1] = (byte)50;
      byteArray1[2] = (byte)71;
      byteArray1[3] = (byte)0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 1344, (int) (byte) (-63), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteArray0, constantPool0, (-5050), (int) (byte)34, true);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)34;
      byteArray1[1] = (byte)34;
      byteArray1[2] = (byte) (-82);
      byteArray1[3] = (byte)34;
      byteArray1[4] = (byte)34;
      byteArray1[5] = (byte)34;
      byteArray1[6] = (byte)34;
      byteArray1[7] = (byte)59;
      byteArray1[8] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)34, 46, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.getSignature("\nException handler(;) = \n");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Constant[] constantArray0 = null;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.printArray((Object[]) null, true);
      MockFile mockFile0 = new MockFile("dneg", "LException;");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "return");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // return
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "-HhNe\\2g='B%v1mn";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)73;
      byteArray0[4] = (byte)117;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)117, (int) (byte)73, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte) (-112);
      byteArray0[7] = (byte) (-112);
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-26), (int) (byte) (-112), true);
      try { 
        Utility.typeOfSignature("0:    d2f\n1:    d2f\n2:    d2f\n3:    <illegal opcode>\n4:    aload_0\n5:    <illegal opcode>\n6:    d2f\n7:    d2f\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    d2f
         // 1:    d2f
         // 2:    d2f
         // 3:    <illegal opcode>
         // 4:    aload_0
         // 5:    <illegal opcode>
         // 6:    d2f
         // 7:    d2f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte)59;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-56), (-271), true);
      assertEquals("0:    goto_w\t\t#-282409169\n5:    iconst_4\n6:    fstore_3\n7:    dup2_x1\n8:    istore_0\n", string0);
      
      String string1 = Utility.classOrInterface(46);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte) (-96);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 38, (int) (byte) (-96), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)33;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte) (-34);
      byteArray0[8] = (byte) (-13);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantString1;
      constantArray0[1] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)6, 11, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("6:    iconst_3\n7:    <illegal opcode>\n8:    <illegal opcode>\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `6:    iconst_3
         // 7:    <illegal opcode>
         // 8:    <illegal opcode>
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte) (-56);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte)59;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-56), (-271), true);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    aload_0\n3:    ifnonnull\t\t#12042\n6:    fstore_3\n7:    dup2_x1\n8:    istore_0\n", string0);
      
      String string1 = Utility.classOrInterface(46);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Utility.convertString("arraylength");
      Utility.getSignature("9Un<G!> qEh'4g");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-94);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(175, (byte)4);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte) (-76);
      byteArray1[2] = (byte) (-76);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, (int) (byte) (-86), (int) (byte) (-76), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-81);
      byteArray0[0] = (byte) (-81);
      byte byte1 = (byte) (-10);
      byteArray0[1] = (byte) (-10);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 171, 171, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(73, 73);
      byte[] byteArray0 = new byte[7];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-117), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      String string1 = Utility.methodSignatureReturnType("C%j5:,GjNmQ&d");
      assertEquals("char", string1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-26), (int) (byte) (-73), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "(;TY7x8CV<<;@}";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-5);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 85, (int) (byte) (-111), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      try { 
        Utility.typeOfSignature("37oOKPy`$z)B.`Cph<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 37oOKPy`$z)B.`Cph<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)95;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)95, (int) (byte) (-109), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)89;
      String string0 = "Invalid signature: ";
      try { 
        Utility.typeOfSignature("2w/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2w/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-687), (int) (byte) (-95), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fload_0
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Utility.isSet(16384, (-2590));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byteSequence0;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) byteArray0;
      objectArray0[4] = (Object) byteSequence0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) byteSequence0;
      objectArray0[7] = (Object) byteSequence0;
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "(;TY7x8CV<<;@}";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 76, (int) (byte)104, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = Utility.getSignature("\nException handler(;) = \n");
      assertEquals("LException;", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-17);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, 5, (-2316), false);
      assertEquals("", string1);
      
      byte byte0 = Utility.typeOfSignature("I");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)122;
      byteArray0[0] = (byte)122;
      constantPool0.setConstantPool((Constant[]) null);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-2);
      constantPool0.constantToString((Constant) constantDouble0);
      byteArray0[3] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)122, 1407, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.isSet(16384, (-2590));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 123, (int) (byte)56, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)52;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-83), (int) (byte) (-83), true);
      assertEquals("0:    lreturn\n1:    lreturn\n2:    caload\n", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)109;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 185, (int) (byte)120, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantInterfaceMethodref0.copy();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3644, (int) (byte)76, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 52044. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = "(;TY7x8CV<<;@}";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-71);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-114);
      byteArray1[1] = (byte)104;
      byteArray1[2] = (byte)104;
      byteArray1[3] = (byte) (-5);
      byteArray1[4] = (byte)104;
      byteArray1[5] = (byte)104;
      byteArray1[6] = (byte) (-71);
      byteArray1[7] = (byte) (-71);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-71), (int) (byte) (-71), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    d2i
         // 1:    imul
         // 2:    imul
         // 3:    <illegal opcode>
         // 4:    imul
         // 5:    imul
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[2] = (byte)122;
      byteArray0[4] = (byte)121;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-13), 76, true);
      assertEquals("0:    lstore_2\n1:    nop\n2:    ishr\n3:    nop\n4:    lshl\n", string0);
      
      String string1 = Utility.classOrInterface((byte)65);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2758, 1614);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantInterfaceMethodref0.copy();
      Constant[] constantArray0 = new Constant[3];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)43;
      byteArray0[4] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[6] = (byte)43;
      byteArray1[1] = (byte) (-91);
      byteArray1[2] = (byte)43;
      byteArray1[3] = (byte)92;
      byteArray1[4] = (byte)21;
      byteArray1[5] = (byte)5;
      byteArray1[6] = (byte)43;
      byteArray1[7] = (byte)92;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray1, constantPool0, (-725), (-659), false);
      try { 
        Utility.typeOfSignature("0:    nop\n1:    if_acmpeq\t\t#11101\n4:    iload\t\t%5\n6:    aload_1\n7:    dup2\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    if_acmpeq\t\t#11101
         // 4:    iload\t\t%5
         // 6:    aload_1
         // 7:    dup2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte) (-116);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-28), 91, false);
      try { 
        Utility.typeOfSignature("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    lshl\n3:    if_icmple\t\t#-7938\n6:    f2l\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    <illegal opcode>
         // 1:    <illegal opcode>
         // 2:    lshl
         // 3:    if_icmple\t\t#-7938
         // 6:    f2l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = "dcmpl";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dcmpl");
      int int0 = 312;
      Utility.isSet((-1780), 312);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)41;
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-1);
      ConstantPool constantPool0 = null;
      int int1 = 55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 55, (int) (byte)41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Utility.replace("\"", "\"", "\"");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"");
      int int0 = (-425);
      Utility.isSet(45, (-425));
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "\"";
      objectArray0[1] = (Object) "\"";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "\"";
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.decode("$$$8i_'", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8i\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-99);
      constantPool0.copy();
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)3;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-58), (int) (byte)111, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ifnull\t\t#-25172
         // 3:    ddiv
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(37, (byte)70);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 77, (-4052), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte) (-91);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-91), (int) (byte) (-62), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    ddiv
         // 2:    monitorenter
         // 3:    lstore_0
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-3266), 1052);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 89, 9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)43;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-7), (int) (byte)54, false);
      assertEquals("0:    <illegal opcode>\n1:    pop\n2:    isub\n3:    frem\n4:    istore\t\t%43\n", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "Z\"#l?s";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      Constant constant0 = constantInterfaceMethodref0.copy();
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)4, (-2343));
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = constant0;
      constantArray0[3] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)67, (int) (byte)67, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)102;
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-107);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)102, 699, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte)116;
      byteArray0[7] = (byte) (-85);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(37, (byte)70);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 77, (-4052), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 89, (int) (byte) (-85), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(91);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.accept(emptyVisitor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)94;
      byteArray0[7] = (byte) (-82);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-46), 777);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 30107. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte byte0 = (byte)123;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 11, 4, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)93;
      byte byte0 = (byte) (-58);
      byteArray0[4] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)59, (int) (byte) (-58), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-96);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-368), (-368), false);
      assertEquals("0:    dup2_x2\n1:    if_icmpne\t\t#1\n4:    nop\n", string0);
      
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(TY7x8CmCW\";}", "(TY7x8CmCW\";}", "(TY7x8CmCW\";}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-61);
      byteArray1[1] = (byte)124;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)69, (int) (byte)69, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 102, (int) (byte) (-39), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2435, (int) (byte)32, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte) (-89);
      byteArray0[8] = (byte) (-30);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-3211), (int) (byte) (-17), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aload_0
         // 1:    <illegal opcode>
         // 2:    istore_1
         // 3:    <illegal opcode>
         // 4:    aload_1
         // 5:    <illegal opcode>
         // 6:    <illegal opcode>
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte)61;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-932), 64, true);
      assertEquals("0:    ifle\t\t#11284\n3:    baload\n4:    impdep2\n5:    dneg\n6:    lshl\n7:    aload_0\n8:    istore_2\n", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('w');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)93, (int) (byte) (-52), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-94);
      try { 
        Utility.typeOfSignature("#=dH<|Wt#~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #=dH<|Wt#~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.typeOfSignature("Y47e1y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y47e1y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)91, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("D");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte)20;
      byteArray0[8] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-26), (int) (byte)20, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lload_2
         // 1:    iload\t\t%230
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte)125;
      byteArray0[8] = (byte) (-61);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-835), 160, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 43690. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-115);
      Utility.codeToString(byteArray0, constantPool0, (-4857), 199, false);
      boolean boolean0 = false;
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(876, 76);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-61);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(407, (-1235));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)106, 407, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte)39;
      byteArray1[2] = (byte)16;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = "ZKMdO*d <Sq7";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ZKMdO*d <Sq7");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte) (-120);
      byteArray0[8] = (byte) (-66);
      ConstantPool constantPool0 = null;
      int int0 = 1024;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2866, 1024, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte) (-82);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-27), 80, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-107);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 70, (int) (byte)70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)17, (int) (byte)17, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte)70;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-772), 1998, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = "ireturn";
      String string1 = "L*+\\<FMgdh%gBBv9";
      try { 
        Utility.methodSignatureReturnType("L*+<FMgdh%gBBv9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L*+<FMgdh%gBBv9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.signatureToString("J2Kp?6sOTt /(Jx7", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-68);
      Utility.encode(byteArray0, true);
      Utility.encode(byteArray0, true);
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$l$8b$I$A$A$A$A$A$A$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-60);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 6, (int) (byte) (-60), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[7] = (byte) (-75);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte) (-75), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte) (-107);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-107), (int) (byte)31, true);
      assertEquals("0:    fstore_2\n1:    fstore_2\n2:    fcmpl\n3:    lload_1\n4:    fcmpl\n5:    fcmpl\n", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-2);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("-HhNe\u0002g}'q%v1mF{n");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString((byte) (-97));
      constantArray0[1] = (Constant) constantString0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("-HhNe\u0002g}'q%v1mF{n");
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = constantPool1.toString();
      assertEquals("1)CONSTANT_String[8](string_index = -97)\n2)CONSTANT_Utf8[1](\"-HhNe\u0002g}'q%v1mF{n\")\n", string0);
      
      String string1 = Utility.codeToString(byteSequence2, constantPool1);
      assertEquals("if_icmpeq\t\t#28903", string1);
      
      String string2 = Utility.compactClassName("-HhNe\u0002g}'q%v1mF{n", true);
      assertEquals("-HhNe\u0002g}'q%v1mF{n", string2);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 26, (int) (byte) (-86), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      boolean boolean0 = Utility.isSet(18, (-2317));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-68), 93, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[7] = (byte) (-85);
      String string0 = ".=;b51zdcR\\/{G{n@";
      try { 
        Utility.typeOfSignature(".=;b51zdcR/{G{n@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .=;b51zdcR/{G{n@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 146, (int) (byte)46, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-34);
      byteArray0[7] = (byte) (-30);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-3696), (int) (byte) (-8), true);
      assertEquals("0:    athrow\n1:    lshr\n2:    <illegal opcode>\n3:    impdep2\n4:    fsub\n5:    dcmpl\n6:    <illegal opcode>\n7:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("iflt\t\t#-17991", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      Utility.compactClassName("l=([hYW;|", true);
      String string0 = Utility.methodSignatureReturnType("Lz2|L;V", true);
      assertEquals("z2|L", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-98);
      byteArray0[7] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("aload\t\t%196", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-426), 60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    ifnonnull\t\t#23647
         // 4:    fstore_1
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Utility.isSet(689, 689);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.printArray((Object[]) null);
      Utility.clearBit(1, 39);
      Utility.isSet(39, 1);
      try { 
        Utility.methodSignatureArgumentTypes("iload_3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.typeOfSignature("!JU4YF");
      try { 
        Utility.methodSignatureReturnType("ldc2_w", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ldc2_w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.compactClassName(">kb^{fj)9AZ", "aload_2", true);
      assertEquals(">kb^{fj)9AZ", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("invokespecial\t0 (0)", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte)95;
      byteArray0[8] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fcmpg", string0);
  }
}
