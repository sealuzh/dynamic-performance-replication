/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 19:33:18 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      String string1 = charClass0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("[]", string1);
      assertNotNull(string1);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int int0 = (-1016);
      CharClass charClass2 = charClass0.appendFoldedRange((-1016), (-94));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      String string2 = charClass2.toString();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("[0xfffffc08-0xffffffa2]", string2);
      assertNotNull(string2);
      
      int[] intArray0 = new int[8];
      int[][] intArray1 = new int[4][2];
      intArray1[0] = intArray0;
      intArray1[0] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      charClass2.appendTableWithSign(intArray1, (-2775));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 9;
      intArray0[1] = (-2842);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1715;
      intArray0[5] = (-810);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {9, (-2842), 0, 0, 1715, (-810)}, intArray0);
      
      String string0 = charClass0.toString();
      assertEquals(6, intArray0.length);
      assertEquals("[0x9-0xfffff4e6 0x0 0x6b3-0xfffffcd6]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {9, (-2842), 0, 0, 1715, (-810)}, intArray0);
      
      int[][] intArray1 = new int[6][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendFoldedRange(32, (-810));
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {9, (-2842), 0, 0, 1715, (-810)}, intArray0);
      
      CharClass charClass2 = charClass0.appendFoldedRange((-1207), (-484));
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {9, (-2842), 0, 0, 1715, (-810)}, intArray0);
      
      CharClass charClass3 = charClass0.appendFoldedRange((-1207), 348);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {9, (-2842), 0, 0, 1715, (-810)}, intArray0);
      
      String string1 = CharClass.charClassToString(intArray0, 0);
      assertEquals(6, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[]", string1);
      assertNotNull(string1);
      assertArrayEquals(new int[] {9, (-2842), 0, 0, 1715, (-810)}, intArray0);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {9, (-2842), 0, 0, 1715, (-810)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 93;
      intArray0[3] = 378;
      intArray0[4] = 32;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 93, 378, 32}, intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral(2662, 1172);
      assertEquals(5, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 0, 93, 378, 32}, intArray0);
      
      int[][] intArray1 = new int[7][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray1.length);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 0, 93, 378, 32}, intArray0);
      
      CharClass charClass3 = charClass1.appendRange(32, 66640);
      assertEquals(5, intArray0.length);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 0, 93, 378, 32}, intArray0);
      
      CharClass charClass4 = charClass3.appendRange(0, 32);
      assertEquals(5, intArray0.length);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0, 0, 93, 378, 32}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = 2540;
      int int1 = (-3035);
      CharClass charClass1 = charClass0.appendFoldedRange(2540, (-3035));
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[1][0];
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      int int2 = 0;
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2540, (-3035));
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedRange(4348, (-3035));
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass1.appendClassWithSign(intArray0, 4348);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass2.appendFoldedRange((-516), 349);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass2.appendFoldedRange(4348, 9);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2540, (-3035));
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2540;
      intArray1[1] = 4;
      intArray1[2] = (-327);
      CharClass charClass2 = charClass1.appendFoldedRange(3410, 3410);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      charClass2.appendFoldedRange(2181, 3410);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 93;
      intArray0[0] = 93;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {93}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(93, 93);
      assertEquals(1, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {93}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-3854);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 66640);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = null;
      try {
        charClass0 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 4;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {4}, intArray0);
      
      int[][] intArray1 = new int[8][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 0;
      intArray0[1] = 0;
      int int2 = 60;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.cleanClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = 93;
      intArray0[3] = 378;
      intArray0[4] = 32;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 93, 378, 32}, intArray0);
      
      int int1 = 1172;
      int[][] intArray1 = new int[6][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 0, 93, 378, 32}, intArray0);
      
      int[] intArray2 = null;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2540, (-3035));
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = new CharClass();
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass2.appendLiteral((-819), (-819));
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass0);
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass0));
      assertNotNull(charClass4);
      
      CharClass charClass5 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass4));
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, 378);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[5][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass2 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass3 = charClass0.appendClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2564;
      intArray0[1] = 0;
      intArray0[2] = 120545;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {2564, 0, 120545}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1873);
      intArray0[2] = (-371);
      intArray0[3] = 1538;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, (-1873), (-371), 1538}, intArray0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-1873));
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, (-1873), (-1872), 1114111}, intArray0);
      
      int[] intArray1 = charClass0.toArray();
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-1873), (-1872), 1114111}, intArray0);
      assertArrayEquals(new int[] {0, (-1873), (-1872), 1114111}, intArray1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertEquals(4, intArray0.length);
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, (-1873), (-1872), 1114111}, intArray0);
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertEquals(4, intArray0.length);
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {(-1872), 1114111, (-1872), 1114111}, intArray0);
      
      int[] intArray2 = charClass1.toArray();
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray2.length);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {(-1872), 1114111, (-1872), 1114111}, intArray0);
      assertArrayEquals(new int[] {(-1872), 1114111}, intArray2);
      
      CharClass charClass4 = charClass0.cleanClass();
      assertEquals(4, intArray0.length);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {(-1872), 1114111, (-1872), 1114111}, intArray0);
      
      CharClass charClass5 = charClass1.appendRange((-371), 1105);
      assertEquals(4, intArray0.length);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {(-1872), 1114111, (-1872), 1114111}, intArray0);
      
      CharClass charClass6 = charClass3.appendLiteral((-1872), (-4305));
      assertEquals(4, intArray0.length);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {(-1872), 1114111, (-1872), 1114111}, intArray0);
      
      CharClass charClass7 = charClass4.appendFoldedRange(0, 0);
      assertEquals(4, intArray0.length);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {(-1872), 1114111, (-1872), 1114111}, intArray0);
      
      int[][] intArray3 = new int[6][4];
      intArray3[0] = intArray2;
      intArray3[1] = intArray0;
      intArray3[2] = intArray1;
      intArray3[3] = intArray1;
      intArray3[4] = intArray2;
      intArray3[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      String string1 = charClass0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("[]", string1);
      assertNotNull(string1);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendFoldedRange((-1016), (-94));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      String string2 = charClass2.toString();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("[0xfffffc08-0xffffffa2]", string2);
      assertNotNull(string2);
      
      int[] intArray0 = new int[8];
      int[][] intArray1 = new int[4][2];
      intArray1[0] = intArray0;
      CharClass charClass3 = charClass0.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass3.appendLiteral((-1016), (-2));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass2.appendLiteral(93, (-2));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass6.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass7);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass3.appendRange(65373, 44402);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass7);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass5);
      assertNotNull(charClass8);
      
      CharClass charClass9 = charClass1.appendFoldedRange((-94), (-2));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass0);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass8);
      assertNotNull(charClass9);
      
      CharClass charClass10 = charClass9.appendNegatedClass(intArray0);
      assertEquals(8, intArray0.length);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass0);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass8);
      assertNotNull(charClass10);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass11 = charClass9.appendClass(intArray0);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass0);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass11);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass8);
      assertNotNull(charClass11);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = (-2051);
      intArray0[3] = 1233;
      intArray0[4] = 0;
      int int1 = (-2021);
      intArray0[5] = (-2021);
      intArray0[6] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, (-2051), 1233, 0, (-2021), 0}, intArray0);
      
      int int2 = (-516);
      CharClass charClass1 = charClass0.appendFoldedRange(42921, (-516));
      assertEquals(7, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 0, (-2051), 1233, 0, (-2021), 0}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertEquals(7, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 0, (-2051), 1233, 0, (-2021), 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass2.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2540, 2540);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray1, 754);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = (-3035);
      CharClass charClass1 = charClass0.appendFoldedRange(2540, (-3035));
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[1][0];
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2540;
      intArray2[1] = 4;
      CharClass charClass2 = charClass0.appendFoldedClass(intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(8, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {2540, 4, 0, 0, 0, 0, 0, 0}, intArray2);
      
      // Undeclared exception!
      try { 
        charClass2.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = (-1987);
      intArray0[0] = (-1987);
      intArray0[1] = (-1);
      int int1 = 0;
      intArray0[2] = 0;
      int int2 = 0;
      intArray0[3] = 0;
      int int3 = 0;
      intArray0[4] = 0;
      intArray0[5] = 1380;
      intArray0[6] = 1070;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-1987), (-1), 0, 0, 0, 1380, 1070}, intArray0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2540, (-3035));
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[1][0];
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2540;
      intArray2[1] = 4;
      intArray2[2] = (-327);
      intArray2[3] = 4;
      intArray2[4] = 4;
      intArray2[5] = 2540;
      intArray2[6] = 4;
      intArray2[7] = 4;
      intArray1[0] = intArray2;
      CharClass charClass2 = charClass0.appendTable(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass1.appendFoldedRange(2540, 4);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray3 = charClass0.toArray();
      assertEquals(4, intArray3.length);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {2540, (-3035), 2540, 4}, intArray3);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      charClass3.appendFoldedRange(1152, 66640);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2564;
      int int0 = 1715;
      int int1 = (-810);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {2564, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3492);
      intArray0[1] = 1574;
      intArray0[2] = 1607;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 964);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2892;
      int int0 = 64296;
      intArray0[1] = 64296;
      intArray0[2] = 4151;
      intArray0[3] = 0;
      intArray0[4] = 1291;
      intArray0[5] = (-1352);
      int int1 = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-2842);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1715;
      intArray0[5] = (-810);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, (-2842), 0, 0, 1715, (-810)}, intArray0);
      
      String string0 = charClass0.toString();
      assertEquals(6, intArray0.length);
      assertEquals("[0x0-0xfffff4e6 0x0 0x6b3-0xfffffcd6]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {0, (-2842), 0, 0, 1715, (-810)}, intArray0);
      
      int[][] intArray1 = new int[6][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, (-2842), 0, 0, 1715, (-810)}, intArray0);
      
      CharClass charClass2 = charClass0.appendFoldedRange(0, 1715);
      assertEquals(6, intArray0.length);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, (-2842), 0, 65, 1715, (-810)}, intArray0);
      
      CharClass charClass3 = charClass1.negateClass();
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, (-2842), 0, 65, 1715, (-810)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2540, (-3035));
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2540;
      intArray1[1] = 2540;
      intArray1[2] = (-3035);
      intArray1[3] = (-3035);
      intArray1[4] = (-3035);
      intArray1[5] = 2540;
      intArray1[6] = (-3035);
      intArray1[7] = 4;
      intArray1[8] = (-3035);
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[5][4];
      CharClass charClass1 = new CharClass(intArray0[0]);
      assertEquals(5, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2336);
      intArray0[1] = (-2336);
      intArray0[2] = 2801;
      intArray0[3] = 5999;
      intArray0[4] = 0;
      intArray0[5] = (-2681);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-2336), (-2336), 2801, 5999, 0, (-2681)}, intArray0);
      
      int[][] intArray1 = new int[4][2];
      intArray1[2] = intArray0;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-2681);
      intArray2[1] = (-2336);
      intArray2[2] = (-2336);
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      int[] intArray3 = new int[2];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-2681);
      intArray1[3] = intArray3;
      CharClass charClass1 = charClass0.appendClass(intArray3);
      assertEquals(2, intArray3.length);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-2681), 0}, intArray3);
      assertArrayEquals(new int[] {(-2336), (-2336), 2801, 5999, (-2681), 0}, intArray0);
      
      CharClass charClass2 = charClass0.appendFoldedRange(5999, 0);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-2336), (-2336), 2801, 5999, (-2681), 0}, intArray0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertEquals(6, intArray0.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {(-2336), (-2336), 2801, 5999, (-2681), 0}, intArray0);
      
      CharClass charClass4 = charClass2.appendLiteral((-2336), 0);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {(-2336), (-2336), 2801, 5999, (-2681), 0}, intArray0);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray3, 192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2336);
      intArray0[1] = (-2336);
      intArray0[2] = 2801;
      intArray0[3] = 5999;
      intArray0[4] = 0;
      intArray0[5] = (-2681);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-2336), (-2336), 2801, 5999, 0, (-2681)}, intArray0);
      
      int[][] intArray1 = new int[4][2];
      intArray1[2] = intArray0;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 3526;
      intArray2[1] = (-2336);
      intArray2[2] = (-2336);
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      int[] intArray3 = new int[2];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = (-2681);
      intArray3[1] = 2801;
      intArray1[3] = intArray3;
      CharClass charClass1 = charClass0.appendClass(intArray3);
      assertEquals(2, intArray3.length);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-2681), 2801}, intArray3);
      assertArrayEquals(new int[] {(-2336), (-2336), 2801, 5999, (-2681), 2801}, intArray0);
      
      CharClass charClass2 = charClass0.appendFoldedRange(5999, 2801);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-2336), (-2336), 2801, 5999, (-2681), 2801}, intArray0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertEquals(6, intArray0.length);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {(-2681), 5999, (-2336), (-2336), 2801, 5999}, intArray0);
      
      CharClass charClass4 = charClass2.cleanClass();
      assertEquals(6, intArray0.length);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {(-2681), 5999, (-2336), (-2336), 2801, 5999}, intArray0);
      
      CharClass charClass5 = charClass2.appendLiteral((-2681), 5999);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {(-2681), 5999, (-2336), (-2336), 2801, 5999}, intArray0);
      
      CharClass charClass6 = charClass3.appendFoldedClass(intArray3);
      assertEquals(2, intArray3.length);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {(-2681), 2801}, intArray3);
      assertArrayEquals(new int[] {(-2681), 5999, 8490, 8491, 7838, 7838}, intArray0);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray3, 192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 256;
      int int0 = 4347;
      intArray0[1] = 4347;
      intArray0[2] = 2801;
      intArray0[3] = 5999;
      intArray0[4] = 0;
      intArray0[5] = (-2681);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {256, 4347, 2801, 5999, 0, (-2681)}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, (-2681), 256, 5999, 2801, 5999}, intArray0);
      
      int[][] intArray1 = new int[4][2];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      
      int int1 = 3526;
      intArray2[0] = 3526;
      intArray2[1] = 4347;
      intArray2[2] = 2801;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      int[] intArray3 = new int[2];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-2681);
      intArray3[1] = 2801;
      intArray1[3] = intArray3;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      String string1 = charClass0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("[]", string1);
      assertNotNull(string1);
      
      int int0 = (-1016);
      int int1 = (-94);
      CharClass charClass1 = charClass0.appendFoldedRange((-1016), (-94));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      String string2 = charClass1.toString();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("[0xfffffc08-0xffffffa2]", string2);
      assertNotNull(string2);
      
      int[] intArray0 = new int[8];
      int[][] intArray1 = new int[4][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      charClass1.appendTableWithSign(intArray1, (-2775));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 1127;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-1), 1127}, intArray0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 1127);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-1), 1127}, intArray0);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, (-3802));
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-1), 1114111}, intArray0);
      
      int[][] intArray1 = new int[4][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2336);
      intArray0[1] = 4347;
      intArray0[2] = 2801;
      intArray0[3] = 5999;
      intArray0[4] = 0;
      intArray0[5] = (-2681);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-2336), 4347, 2801, 5999, 0, (-2681)}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-2336), 5999, 0, (-2681), 2801, 5999}, intArray0);
      
      int[][] intArray1 = new int[4][2];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 3526;
      intArray2[1] = 4347;
      intArray2[2] = 2801;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      int[] intArray3 = new int[2];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-2681);
      intArray3[1] = 2801;
      CharClass charClass2 = charClass0.appendLiteral(1212, 3526);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-2336), 5999, 0, (-2681), 2801, 5999}, intArray0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertEquals(6, intArray0.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {6000, 1114111, 0, (-2681), 2801, 5999}, intArray0);
      
      CharClass charClass4 = charClass2.appendRange(986, 3526);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {6000, 1114111, 986, 3526, 2801, 5999}, intArray0);
      
      CharClass charClass5 = charClass2.appendFoldedRange(7401, 4);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {6000, 1114111, 986, 3526, 7401, 4}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass2.appendNegatedClass(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2540, (-3035));
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2540;
      CharClass charClass2 = charClass0.appendFoldedRange(2540, (-327));
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass1.appendFoldedRange(2540, 2540);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2540, (-3035));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      String string0 = charClass0.toString();
      assertSame(charClass0, charClass1);
      assertEquals("[0x9ec-0xfffff425]", string0);
      assertNotNull(string0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      String string1 = charClass2.toString();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[0x0-0x9eb 0xfffff426-0x10ffff]", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1841;
      intArray0[1] = (-3860);
      intArray0[2] = 616;
      intArray0[3] = 2649;
      intArray0[4] = 1853;
      intArray0[5] = (-2529);
      intArray0[6] = 32;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[5];
      int int0 = 1;
      intArray0[0] = 1;
      intArray0[1] = 1560;
      intArray0[2] = 68119;
      int int1 = (-188);
      intArray0[3] = (-188);
      intArray0[4] = 3173;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2540, 2540);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[1][0];
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1399;
      intArray0[1] = 4185;
      intArray0[2] = 2313;
      intArray0[3] = 3426;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 9985;
      String string0 = CharClass.charClassToString(intArray0, (-1164));
      assertEquals(7, intArray0.length);
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {1399, 4185, 2313, 3426, 0, 0, 9985}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      charClass2.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 0;
      intArray0[1] = 0;
      intArray0[2] = 2445;
      int int2 = 0;
      intArray0[3] = 0;
      CharClass charClass3 = charClass0.appendFoldedClass(intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 0, 2445, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass3.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 536);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass1.appendClassWithSign(intArray0, (-150));
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass3.appendRange(31, 32);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass6 = charClass5.appendFoldedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass7 = charClass0.appendClassWithSign(intArray0, 536);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string0 = CharClass.charClassToString(intArray0, (-253));
      assertEquals(0, intArray0.length);
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass8 = charClass7.appendLiteral(283, (-427));
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass7);
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 4263);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2540, (-3035));
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2540;
      intArray1[1] = 4;
      int[][] intArray2 = new int[4][3];
      intArray2[0] = intArray1;
      intArray2[1] = intArray0;
      intArray2[2] = intArray0;
      intArray2[3] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 9;
      intArray0[1] = (-2842);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {9, (-2842), 0, 0, 0, 0}, intArray0);
      
      int[][] intArray1 = new int[5][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, (-728));
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {9, (-2842), 0, 0, 0, 1114111}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {9, (-2842), 0, 0, 0, 1114111}, intArray0);
      
      CharClass charClass3 = charClass0.appendTable(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {9, (-2842), 0, 0, 0, 1114111}, intArray0);
      
      CharClass charClass4 = charClass0.appendFoldedRange(60, 9);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {9, (-2842), 0, 0, 0, 1114111}, intArray0);
      
      int[] intArray2 = charClass2.toArray();
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertEquals(8, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {9, (-2842), 0, 0, 0, 1114111}, intArray0);
      assertArrayEquals(new int[] {9, (-2842), 0, 0, 0, 1114111, 9, (-2842)}, intArray2);
      
      CharClass charClass5 = charClass0.appendFoldedRange(6, (-2842));
      assertEquals(6, intArray0.length);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {9, (-2842), 0, 0, 0, 1114111}, intArray0);
      
      CharClass charClass6 = charClass0.appendTable(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {9, (-2842), 0, 0, 0, 1114111}, intArray0);
      
      CharClass charClass7 = charClass1.appendNegatedTable(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {9, (-2842), 0, 0, 0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 901;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = 436;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1002;
      intArray0[7] = 852;
      intArray0[8] = 1114111;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 3238);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2336);
      intArray0[1] = (-2336);
      intArray0[2] = 2801;
      intArray0[3] = 2801;
      intArray0[4] = 0;
      intArray0[5] = (-2681);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-2336), (-2336), 2801, 2801, 0, (-2681)}, intArray0);
      
      int[][] intArray1 = new int[4][2];
      intArray1[2] = intArray0;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 3526;
      intArray2[1] = (-2336);
      intArray2[2] = (-2336);
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      int[] intArray3 = new int[2];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-2681);
      intArray3[1] = 2801;
      CharClass charClass1 = charClass0.appendFoldedRange((-985), 620);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-2336), (-2336), 2801, 2801, 0, (-2681)}, intArray0);
      
      // Undeclared exception!
      charClass1.toString();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[6][2];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-678);
      intArray2[1] = 8474;
      intArray2[2] = 771;
      intArray2[3] = 706;
      intArray2[4] = 1;
      intArray2[5] = (-2133);
      intArray2[6] = 99;
      intArray2[7] = (-190);
      intArray2[8] = 0;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = (-2133);
      intArray3[1] = 706;
      intArray3[2] = (-972);
      intArray3[3] = 99;
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, (-678));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1390);
      intArray0[1] = 780;
      intArray0[2] = 482;
      intArray0[3] = 673;
      CharClass charClass0 = new CharClass();
      int[][] intArray1 = new int[8][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      charClass1.cleanClass();
      CharClass charClass2 = charClass0.appendNegatedTable(intArray1);
      assertSame(charClass2, charClass0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1390);
      intArray0[1] = 780;
      intArray0[2] = 482;
      intArray0[3] = 673;
      intArray0[4] = 569;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[5][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[6];
      intArray2[0] = (-1390);
      intArray2[1] = 780;
      intArray2[2] = 569;
      intArray2[3] = 2;
      intArray2[4] = (-1390);
      intArray2[5] = (-1390);
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      charClass0.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {(-1390), 780, 482, 673, 569}, intArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2564;
      intArray0[1] = 0;
      intArray0[2] = 120545;
      CharClass charClass0 = new CharClass(intArray0);
      CharGroup charGroup0 = null;
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendFoldedRange(2540, (-3035));
      int[] intArray1 = new int[8];
      intArray1[0] = 2540;
      intArray1[1] = 2540;
      int[][] intArray2 = new int[22][3];
      intArray2[0] = intArray1;
      intArray2[1] = intArray0;
      intArray2[2] = intArray0;
      intArray2[3] = intArray0;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.toString();
      charClass0.toString();
      charClass0.cleanClass();
      CharClass charClass1 = new CharClass();
      int[][] intArrayArray0 = null;
      charClass1.appendFoldedRange(3059, 65);
      // Undeclared exception!
      try { 
        charClass1.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.toString();
      charClass0.toString();
      charClass0.cleanClass();
      CharClass charClass1 = charClass0.appendFoldedRange((-1016), (-94));
      CharClass charClass2 = charClass1.appendFoldedRange((-1016), (-2749));
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass2.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 60;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[1][5];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 0);
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 9;
      intArray0[1] = (-2842);
      intArray0[2] = 0;
      int int0 = 0;
      intArray0[3] = 0;
      intArray0[4] = 1715;
      intArray0[5] = (-810);
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.toString();
      int[][] intArray1 = new int[6][7];
      CharClass charClass1 = charClass0.appendClass(intArray0);
      charClass1.appendFoldedRange(0, 1114111);
      charClass1.cleanClass();
      charClass0.appendLiteral(615, (-149));
      int int1 = 671;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 671);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.toString();
      charClass0.toString();
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass0.appendFoldedRange((-1016), (-94));
      charClass2.toString();
      int[] intArray0 = new int[0];
      charClass1.appendNegatedClass(intArray0);
      CharClass charClass3 = charClass2.cleanClass();
      int[][] intArray1 = new int[4][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int int0 = 65373;
      // Undeclared exception!
      try { 
        charClass3.appendTableWithSign(intArray1, 65373);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      charClass1.cleanClass();
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2445;
      CharClass charClass2 = new CharClass(intArray0);
      CharClass charClass3 = charClass1.appendClassWithSign(intArray0, (-2521));
      charClass3.appendLiteral(0, 2445);
      int[][] intArray1 = new int[4][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      charClass0.appendRange(1230, 0);
      intArray1[3] = intArray0;
      CharClass charClass4 = charClass1.appendTable(intArray1);
      assertSame(charClass4, charClass0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[3];
      intArray0[0] = (-188);
      intArray0[1] = 6071;
      int int0 = 65;
      intArray0[2] = 65;
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = (-1390);
      intArray0[0] = (-1390);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendRange((-3508), 1020);
      // Undeclared exception!
      try { 
        charClass1.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2311;
      intArray0[1] = 0;
      intArray0[2] = (-782);
      intArray0[3] = 1298;
      intArray0[4] = (-4920);
      intArray0[5] = 4;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[2][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      charClass0.appendClass(intArray0);
      charClass1.negateClass();
      assertArrayEquals(new int[] {2311, 0, (-782), 1298, (-4920), 4}, intArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2336);
      intArray0[1] = 4347;
      intArray0[2] = 2801;
      int int0 = 5999;
      intArray0[3] = 5999;
      int int1 = 0;
      intArray0[4] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 904);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedRange(2540, (-3035));
      int[][] intArray1 = new int[1][0];
      int[] intArray2 = new int[8];
      intArray2[0] = 2540;
      intArray2[1] = 4;
      intArray2[2] = (-327);
      intArray2[3] = 4;
      intArray2[4] = 4;
      intArray2[5] = 2540;
      intArray2[6] = 4;
      intArray2[7] = 4;
      intArray1[0] = intArray2;
      charClass0.appendTable(intArray1);
      CharClass charClass2 = charClass1.appendFoldedRange(2540, 4);
      int[] intArray3 = charClass0.toArray();
      CharClass charClass3 = charClass0.appendNegatedTable(intArray1);
      charClass1.appendNegatedClass(intArray3);
      charClass3.appendFoldedClass(intArray3);
      CharClass charClass4 = charClass1.appendLiteral((-191), 4);
      assertSame(charClass4, charClass2);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(0, (-893));
      int[] intArray0 = new int[6];
      intArray0[0] = (-893);
      intArray0[1] = (-893);
      intArray0[2] = 0;
      intArray0[3] = (-893);
      intArray0[4] = 0;
      intArray0[5] = (-893);
      charClass1.appendClassWithSign(intArray0, (-893));
      int[] intArray1 = charClass0.toArray();
      int[] intArray2 = charClass0.toArray();
      String string0 = CharClass.charClassToString(intArray2, (-316));
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {(-892), 1114111}, intArray2);
      assertSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedRange(2540, (-3035));
      int[][] intArray1 = new int[1][0];
      int[] intArray2 = new int[8];
      intArray2[0] = 2540;
      intArray2[1] = 4;
      intArray2[2] = (-327);
      intArray2[3] = 4;
      intArray2[4] = 4;
      intArray2[5] = 2540;
      intArray2[6] = 4;
      intArray2[7] = 4;
      intArray1[0] = intArray2;
      charClass0.appendTable(intArray1);
      CharClass charClass2 = charClass1.appendFoldedRange(2540, 4);
      charClass2.negateClass();
      int[] intArray3 = charClass0.toArray();
      CharClass charClass3 = charClass0.appendNegatedTable(intArray1);
      charClass1.appendNegatedClass(intArray3);
      // Undeclared exception!
      charClass3.appendFoldedClass(intArray3);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = (-893);
      intArray0[1] = (-893);
      intArray0[2] = 0;
      intArray0[3] = (-893);
      intArray0[4] = 0;
      intArray0[5] = (-893);
      charClass1.appendClassWithSign(intArray0, (-893));
      int[] intArray1 = charClass0.toArray();
      int[] intArray2 = charClass0.toArray();
      String string0 = CharClass.charClassToString(intArray2, (-316));
      assertSame(intArray2, intArray1);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-667);
      intArray0[0] = (-667);
      int int1 = 0;
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArrayArray0 = null;
      int int2 = 139;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 139);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-2842);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1715;
      intArray0[5] = (-810);
      CharClass charClass0 = new CharClass(intArray0);
      String string0 = charClass0.toString();
      assertEquals("[0x0-0xfffff4e6 0x0 0x6b3-0xfffffcd6]", string0);
      
      int[][] intArray1 = new int[6][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      charClass0.appendTableWithSign(intArray1, 0);
      String string1 = CharClass.charClassToString(intArray0, (-1607));
      assertArrayEquals(new int[] {0, (-2842), 0, 0, 1715, (-810)}, intArray0);
      assertEquals("[]", string1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1390);
      int int0 = 780;
      intArray0[1] = 780;
      intArray0[2] = 482;
      intArray0[3] = 673;
      CharClass charClass0 = new CharClass();
      int[][] intArray1 = new int[8][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      CharClass charClass2 = charClass1.cleanClass();
      CharClass charClass3 = charClass2.appendLiteral((-327), (-1390));
      CharClass charClass4 = charClass3.appendFoldedRange((-1390), 780);
      // Undeclared exception!
      try { 
        charClass4.appendClassWithSign(intArray0, (-94));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
