/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:43:38 GMT 2018
 */

package wheel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.ObjectStreamConstants;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.junit.runner.RunWith;
import wheel.components.Component;
import wheel.components.ElExpression;
import wheel.components.StandaloneComponent;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DynamicSelectModel_ESTest extends DynamicSelectModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value("");
      dynamicSelectModel0.reset();
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        dynamicSelectModel0.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("");
      // Undeclared exception!
      try { 
        dynamicSelectModel1.getOptionCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression  evaluated to null. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.reset();
      Component component0 = dynamicSelectModel0.getComponent();
      assertNull(component0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ElExpression elExpression0 = new ElExpression("");
      DynamicSelectModel dynamicSelectModel0 = null;
      try {
        dynamicSelectModel0 = new DynamicSelectModel(elExpression0, elExpression0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.getComponent();
      dynamicSelectModel0.setComponent((Component) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.getTopLevelComponent();
      dynamicSelectModel0.setTopLevelComponent((StandaloneComponent) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("K~x?ivH3Y?t*|8r3:");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.label("K~x?ivH3Y?t*|8r3:");
      // Undeclared exception!
      try { 
        dynamicSelectModel2.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Value attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      String string0 = File.pathSeparator;
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration(":");
      // Undeclared exception!
      try { 
        dynamicSelectModel1.getLabel(5594);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression :.values() evaluated to an object that is not an instance of Collection or Object[]. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.collection("BQ?qS`bz");
      // Undeclared exception!
      try { 
        dynamicSelectModel0.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Label attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = File.pathSeparator;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("<aA5>oM!,");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.collection("[]");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      int int1 = dynamicSelectModel2.getOptionCount();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = File.pathSeparator;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      String string1 = " evaluted to null. Can't build a dynamic ISelectModel";
      Object object0 = new Object();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("[]");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.label(" evaluted to null. Can't build a dynamic ISelectModel");
      Object object1 = new Object();
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.empty(object1);
      dynamicSelectModel3.getOptionCount();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("*f`|=");
      dynamicSelectModel2.setComponent(xmlEntityRef0);
      // Undeclared exception!
      try { 
        dynamicSelectModel2.translateValue("Expression ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("<aAL5>oM!,");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.collection("[]");
      Object object0 = new Object();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("*f`|=");
      dynamicSelectModel1.translateValue("");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      dynamicSelectModel1.validate();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      dynamicSelectModel2.getObjects();
      MockHijrahDate mockHijrahDate1 = new MockHijrahDate();
      MockHijrahDate.now();
      MockHijrahDate mockHijrahDate2 = new MockHijrahDate();
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel0.label("_}m;O^ (S3Mw^F=");
      assertSame(dynamicSelectModel3, dynamicSelectModel2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = File.pathSeparator;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("<aAL5>oM!,");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.collection("[]");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.value(":");
      Object object0 = new Object();
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel3.empty(object0);
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("*f`|=");
      Object object1 = new Object();
      dynamicSelectModel4.getTopLevelComponent();
      dynamicSelectModel2.setComponent((Component) null);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockHijrahDate mockHijrahDate1 = new MockHijrahDate();
      dynamicSelectModel3.empty(mockHijrahDate1);
      dynamicSelectModel1.validate();
      DynamicSelectModel dynamicSelectModel5 = dynamicSelectModel4.translator("*f`|=");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      MockHijrahDate mockHijrahDate2 = new MockHijrahDate();
      MockHijrahDate.now();
      String string1 = "java.lang.Integer@0000000027";
      // Undeclared exception!
      try { 
        dynamicSelectModel5.translateValue("java.lang.Integer@0000000027");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression *f`|= to translate value ' java.lang.Integer@0000000027'
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = File.pathSeparator;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration(":");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.collection("[]");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.value(":");
      Object object0 = new Object();
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel3.empty(object0);
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("*f`|=");
      Object object1 = new Object();
      dynamicSelectModel0.getOptionCount();
      dynamicSelectModel4.getTopLevelComponent();
      dynamicSelectModel2.setComponent((Component) null);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockHijrahDate mockHijrahDate1 = new MockHijrahDate();
      DynamicSelectModel dynamicSelectModel5 = dynamicSelectModel3.empty(mockHijrahDate1);
      dynamicSelectModel4.getObjects();
      dynamicSelectModel1.validate();
      DynamicSelectModel dynamicSelectModel6 = dynamicSelectModel3.collection("or");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      MockHijrahDate mockHijrahDate2 = new MockHijrahDate();
      MockHijrahDate.now();
      dynamicSelectModel3.empty(mockHijrahDate2);
      dynamicSelectModel6.translateValue("java.lang.Integer@0000000027");
      dynamicSelectModel2.validate();
      dynamicSelectModel5.validate();
      dynamicSelectModel2.translateValue("java.lang.Integer@0000000027");
      dynamicSelectModel3.translateValue("*f`|=");
      StandaloneComponent standaloneComponent0 = dynamicSelectModel5.getTopLevelComponent();
      assertNull(standaloneComponent0);
  }
}
