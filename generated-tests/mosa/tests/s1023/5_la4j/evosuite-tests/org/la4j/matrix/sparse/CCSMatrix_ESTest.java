/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:14:55 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(15, 15);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      // Undeclared exception!
      try { 
        CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("Can not decode Basic1DMatrix from theUgiven byte array.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      CRSMatrix cRSMatrix0 = (CRSMatrix)cCSMatrix0.multiplyByItsTranspose();
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getRow(3);
      assertEquals(3, compressedVector0.length());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(3, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      assertEquals(3, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      
      double[][] doubleArray0 = new double[1][2];
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      assertEquals(2, cCSMatrix1.columns());
      assertEquals(1, cCSMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, cCSMatrix0.max(), 0.01);
      assertEquals(0.25, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.fold((MatrixAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      cCSMatrix0.setAll((-435.62));
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(3, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3, cCSMatrix0.cardinality());
      assertEquals(0.3333333333333333, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      
      cCSMatrix0.setAll((-1642.6795237934));
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(9, cCSMatrix0.cardinality());
      assertEquals((-1642.6795237934), cCSMatrix0.min(), 0.01);
      assertEquals(3, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      double double0 = cCSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random(3, 3, (-1356.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random(0, 0, (double) 0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix.diagonal(155, (-1648.27976583157));
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.random(155, 3489, (double) 155, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(2, 2, doubleArray0);
      assertNotNull(cCSMatrix0);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertEquals(2.0, cCSMatrix0.max(), 0.01);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(4, cCSMatrix0.cardinality());
      assertEquals(2, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.getOrElse(748, 2, 748);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '748' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      
      VectorIterator vectorIterator0 = cCSMatrix0.nonZeroIteratorOfColumn(0);
      assertNotNull(vectorIterator0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      
      // Undeclared exception!
      try { 
        CCSMatrix.identity((-977));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      
      double double0 = cCSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      
      VectorIterator vectorIterator0 = cCSMatrix0.iteratorOfColumn(0);
      assertNotNull(vectorIterator0);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.update(matrixFunction0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      
      cCSMatrix0.swapRows(1404, (-194));
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (-46.0);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 2416;
      doubleArray0[3] = (double) 2416;
      doubleArray0[4] = (double) 1;
      doubleArray0[2] = (double) 2416;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1, 2416, doubleArray0);
      double[][] doubleArrayArray0 = null;
      SparseMatrix.from2DArray(doubleArrayArray0);
      int int1 = 0;
      cCSMatrix0.blankOfShape(int1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      assertNotNull(cCSMatrix0);
      assertEquals(1, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(1, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.3333333333333333, cCSMatrix0.density(), 0.01);
      assertEquals(3, cCSMatrix0.cardinality());
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getRow(2);
      assertNotNull(compressedVector0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.3333333333333333, cCSMatrix0.density(), 0.01);
      assertEquals(3, cCSMatrix0.cardinality());
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.3333333333333333, cCSMatrix0.density(), 0.01);
      assertEquals(3, cCSMatrix0.cardinality());
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1);
      assertNotNull(denseMatrix0);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      assertNotNull(cCSMatrix0);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(4, cCSMatrix0.cardinality());
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(1, 1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotNull(cCSMatrix1);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(4, cCSMatrix0.cardinality());
      assertEquals(1, cCSMatrix1.rows());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertEquals(1, cCSMatrix1.cardinality());
      assertEquals(1.0, cCSMatrix1.density(), 0.01);
      assertEquals(1, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getRow((-976));
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotNull(compressedVector0);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(4, cCSMatrix0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)48;
      CCSMatrix cCSMatrix0 = CCSMatrix.fromBinary(byteArray0);
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 35;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(306);
      cCSMatrix0.euclideanNorm();
      cCSMatrix0.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix(50, 50, 50);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(50, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(50, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      double double0 = cCSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(50, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(50, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      assertNotNull(cCSMatrix0);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(3, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(0.3333333333333333, cCSMatrix0.density(), 0.01);
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)cCSMatrix0.multiplyByItsTranspose();
      assertNotNull(cRSMatrix0);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(3, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(0.3333333333333333, cCSMatrix0.density(), 0.01);
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      double double0 = new Integer(3);
      assertEquals(3, double0, 0.01);
      
      double double1 = cCSMatrix0.max();
      assertEquals(1.0, double1, 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(3, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(0.3333333333333333, cCSMatrix0.density(), 0.01);
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(155, 155);
      cCSMatrix0.minInColumn(14);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(14, 155);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      CCSMatrix.block(cCSMatrix0, denseMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      Matrix matrix0 = cCSMatrix0.removeLastRow();
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(155, 155);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInRow(3, vectorProcedure0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(denseMatrix0, matrix0, matrix0, matrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZero((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(267, 267);
      cCSMatrix0.maxInColumn(0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      Matrix matrix0 = cCSMatrix0.blankOfColumns(0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(denseMatrix0, denseMatrix0, matrix0, denseMatrix0);
      cCSMatrix0.copyOfShape(0, 0);
      cCSMatrix1.eachNonZeroInRow(0, (VectorProcedure) null);
      cCSMatrix0.spliterator();
      cCSMatrix1.blankOfShape(0, 0);
      cCSMatrix1.setAll(0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(155, 155);
      int[] intArray0 = new int[4];
      intArray0[1] = 1;
      intArray0[3] = 155;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(788);
      cCSMatrix0.getRow(2);
      Matrix matrix0 = Matrix.identity(4927);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, matrix0, cCSMatrix0);
      int int0 = 2;
      cCSMatrix1.getRow(int0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2392L);
      CCSMatrix cCSMatrix0 = CCSMatrix.random((int) (byte)48, (int) (byte)48, 1.0, (Random) mockRandom0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2716, 2716, 2716);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInRow(2716, vectorProcedure0);
      cCSMatrix0.minInColumn(2716);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(denseMatrix0, matrix0, matrix0, matrix0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(1, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.shuffle();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      matrix0.withSolver(linearAlgebra_SolverFactory0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(306);
      cCSMatrix0.power(30);
      cCSMatrix0.multiplyByItsTranspose();
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 33;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(155, 155);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      cCSMatrix0.minInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      cCSMatrix0.toDenseMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, (-1.0), (-1.0), (double)3, (-1.0)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(33);
      cCSMatrix0.maxInColumn(9);
      int[] intArray0 = new int[1];
      intArray0[0] = 9;
      cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2597, 2597, 1);
      int[] intArray0 = new int[1];
      cCSMatrix0.sliceTopLeft(1, 1);
      intArray0[0] = 2456;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        SparseMatrix.block((Matrix) null, columnMajorSparseMatrix0, columnMajorSparseMatrix0, cCSMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(15.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 3, 3);
      // Undeclared exception!
      try { 
        cCSMatrix0.transformColumn(1, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4266);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformColumn(4266, vectorFunction0);
      MockRandom mockRandom0 = new MockRandom();
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 788;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(788);
      cCSMatrix0.getRow(2);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(788, 788);
      int int1 = 7;
      int int2 = 310;
      Matrix matrix0 = cCSMatrix0.copyOfShape(7, 310);
      double double0 = cCSMatrix0.min();
      double double1 = Double.POSITIVE_INFINITY;
      MockRandom mockRandom0 = new MockRandom(2);
      CCSMatrix.randomSymmetric(2, Double.POSITIVE_INFINITY, (Random) mockRandom0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = double1;
      doubleArray1[1] = (double) int0;
      doubleArray1[2] = double0;
      double double2 = (-1279.68303191);
      doubleArray1[3] = double2;
      doubleArray1[4] = (double) int2;
      double double3 = 3475.756583019;
      doubleArray1[5] = double3;
      doubleArray1[6] = double0;
      doubleArray0[0] = doubleArray1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      Matrix matrix1 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) cCSMatrix1, sparseMatrix0);
      CCSMatrix cCSMatrix2 = CCSMatrix.block(cCSMatrix1, matrix0, matrix0, matrix1);
      int int3 = 290;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.eachNonZeroInColumn(int3, vectorProcedure0);
      double double4 = (-1642.6795237934);
      CCSMatrix.diagonal(int1, double4);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(155, 155);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(7, 7, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 155;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(155, 155);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateRow(33, vectorFunction0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      cCSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      double double0 = new Integer(int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      MockRandom mockRandom0 = new MockRandom((byte)48);
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1669, 4.9E-324, (Random) mockRandom0);
      cCSMatrix0.copyOfShape((byte)48, (byte)48);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(10, (-1.0));
      CCSMatrix.identity(4265);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(267, 267);
      int int1 = (-341);
      Matrix matrix0 = cCSMatrix0.copyOfColumns(0);
      int int2 = 300;
      Matrix matrix1 = cCSMatrix0.insert(matrix0, 267, 277, 2, 1260, (-2487), 300);
      int int3 = 1917;
      cCSMatrix0.insert(matrix1, int2, int3, int2, int2);
      int int4 = 278;
      int int5 = 8;
      double double0 = (-2568.330622159796);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(int5, double0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix2 = cCSMatrix1.transformColumn(int5, vectorFunction0);
      int int6 = (-1);
      int int7 = 671;
      int int8 = (-2200);
      int int9 = 273;
      Matrix.diagonal(int9, int5);
      int int10 = 1670;
      cCSMatrix0.insert(matrix2, int6, int5, int7, int7, int8, int10);
      Matrix.zero(int1, int4);
      cCSMatrix0.columnMajorIterator();
      cCSMatrix0.maxInColumn(int0);
      cCSMatrix1.maxInColumn(int4);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      cCSMatrix0.setColumn(0, (double) 1);
      cCSMatrix0.min();
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3769, (-1.0));
      cCSMatrix0.minInColumn(244);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(147);
      Vector vector0 = cCSMatrix0.getRow(1);
      cCSMatrix0.multiply(vector0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      int int0 = 1981;
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[0];
      CCSMatrix cCSMatrix0 = new CCSMatrix(1981, 224, 1973, doubleArray0, intArray0, intArray0);
      int[] intArray1 = new int[3];
      intArray1[0] = 224;
      intArray1[1] = 1;
      intArray1[2] = 224;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(155, 155);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn(1, vectorFunction0);
      int int0 = (-1958);
      CCSMatrix.diagonal((-1958), 1);
      cCSMatrix0.minInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(155, 155);
      int int0 = 1;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1, (double)1, (double)155, (double)1, (-1124.51041)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn(1, vectorFunction0);
      int int1 = (-1958);
      CCSMatrix.diagonal(int1, int0);
      cCSMatrix0.minInColumn(int1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CCSMatrix.identity(3);
      MockRandom mockRandom0 = new MockRandom(1588L);
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric(3, 1.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }
}
