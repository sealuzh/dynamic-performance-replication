/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:51:34 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.zip.Deflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.GzipSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray1);
      byteString0.indexOf(byteArray0, (int) (byte)0);
      byteString0.rangeEquals(54, byteArray0, 97, 97);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)0, (-543));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString1.base64();
      byteString0.indexOf(byteArray0);
      byteString1.startsWith(byteString0);
      ByteString byteString2 = byteString0.md5();
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[0] = (byte)50;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      byteString0.size();
      Pipe pipe0 = new Pipe((byte)50);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("T+");
      assertEquals(1, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex(":2(xC:ub1zh(u|Xc", 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      GzipSink gzipSink0 = new GzipSink(hashingSink0);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink hashingSink1 = HashingSink.hmacSha256(gzipSink0, byteString0);
      ByteString byteString1 = hashingSink1.hash();
      String string0 = byteString1.toString();
      assertEquals("[hex=bfe4507092e7092c5b9a9059c579a97000ba0a7d969994f80a560db7bad4025c]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)50;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      int int0 = byteString0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = null;
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)80;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0, (int) (byte)80);
      byteString0.rangeEquals(109, byteArray0, (-1), (-1));
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.EMPTY.lastIndexOf(byteString1);
      // Undeclared exception!
      try { 
        byteString0.substring(15, (int) (byte)80);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(4)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString1 = hashingSource0.hash();
      byteString0.endsWith(byteString1);
      String string0 = byteString0.base64Url();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0, (int) (byte)0);
      byteString0.rangeEquals(109, byteArray0, 0, 0);
      // Undeclared exception!
      try { 
        byteString0.substring(15, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("l,5_LgSG]wAlAN#%Q");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-109);
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
      
      int int1 = ByteString.codePointIndexToCharIndex("l,5_LgSG]wAlAN#%Q", (byte)72);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[2] = (byte)51;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toAsciiLowercase();
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0, 7);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("pR.", true);
      String string0 = byteString0.utf8;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      mockFileOutputStream0.close();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 3);
      try { 
        byteString0.write(bufferedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-97);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)72;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)72);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 12);
      // Undeclared exception!
      try { 
        ByteString.read(pushbackInputStream0, (byte) (-97));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -97
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      Buffer buffer0 = new Buffer();
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSource0.buffer);
      hashingSource0.hash();
      String string1 = byteString0.base64Url();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.base64();
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.EMPTY.hashCode();
      ByteString byteString2 = byteString1.sha1();
      String string1 = byteString2.base64Url();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toAsciiUppercase();
      Charset charset0 = Charset.defaultCharset();
      String string0 = byteString0.string(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.asByteBuffer();
      byteString0.base64Url();
      ByteString byteString1 = byteString0.sha256();
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0, (int) (byte)0);
      // Undeclared exception!
      try { 
        byteString0.substring((-1380));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("l,5_LgSG]wAlAN#%Q");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-109);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      int int0 = byteString1.indexOf(byteArray0);
      assertEquals(0, int0);
      
      byteString1.hmacSha256(byteString0);
      byteString0.asByteBuffer();
      int int1 = ByteString.codePointIndexToCharIndex("[6|Q}", (byte)72);
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)14;
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      HashingSink hashingSink0 = HashingSink.sha512(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("yoW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: yoW
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)106;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      byteString0.indexOf(byteArray0, 1086);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte)13;
      ByteString byteString2 = new ByteString(byteArray1);
      byteString1.rangeEquals((int) (byte)13, byteArray1, (int) (byte)13, (-1));
      // Undeclared exception!
      try { 
        byteString1.substring((int) (byte)106, 756);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(64)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.base64Url();
      byteString0.indexOf(byteArray0, (int) (byte)15);
      byteString0.substring((int) (byte)0);
      byteString0.rangeEquals((int) (byte)15, byteArray0, (int) (byte)15, 54);
      // Undeclared exception!
      try { 
        byteString0.substring((-543), (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0, (int) (byte)0);
      byteString0.rangeEquals((-1039), byteArray0, 0, (int) (byte)0);
      // Undeclared exception!
      try { 
        byteString0.substring(248, 22);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(1)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)15;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0, 75);
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null, (int) (byte)15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte)13;
      Charset.defaultCharset();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("4a<U; ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: <
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byte byte0 = (byte)106;
      byteArray0[0] = (byte)106;
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = 1086;
      byteString0.indexOf(byteArray0, 1086);
      byteString0.toString();
      Charset.defaultCharset();
      byteString0.toAsciiUppercase();
      // Undeclared exception!
      try { 
        Options.of((ByteString[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("HmacSHA256");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)13;
      byteString0.lastIndexOf(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)62, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(10)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.base64Url();
      byteString0.lastIndexOf(byteArray0, (int) (byte)0);
      // Undeclared exception!
      try { 
        byteString0.rangeEquals(2, (ByteString) null, 1133, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      ByteString byteString0 = new ByteString(byteArray0);
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("HmacSHM&A1", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString2 = byteString0.sha1();
      ByteString byteString3 = realBufferedSource0.readByteString();
      Charset.defaultCharset();
      realBufferedSource0.readByteString(0L);
      ByteString byteString4 = byteString1.toAsciiLowercase();
      byteString3.startsWith(byteString1);
      byteString2.hmacSha256(byteString4);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("+hdd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: +
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: 
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString1.hmacSha1(byteString0);
      byteString0.EMPTY.utf8 = "HmacSHA256";
      // Undeclared exception!
      try { 
        byteString0.substring(8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("l,5_LgSG]wAlAN#%Q");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      byteString0.equals(byteBuffer0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-50);
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)13;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte byte0 = (byte)0;
      ByteString byteString0 = ByteString.read(pipedInputStream0, (byte)0);
      byteString0.toAsciiLowercase();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      try { 
        pipedInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      byteString0.startsWith(byteString0);
      byteString0.internalArray();
      byteString0.toString();
      int int0 = byteString0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      byteArray0[6] = (byte)15;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0, 94);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      ByteString byteString2 = byteString0.toAsciiUppercase();
      byteString1.rangeEquals((-1390), byteArray0, 54, (int) (byte)15);
      int int0 = byteString0.indexOf(byteString1, 51);
      assertEquals((-1), int0);
      
      byteString1.EMPTY.hmacSha512(byteString0);
      String string0 = byteString0.toString();
      assertEquals("[hex=bbbbbbbbbbbbbbbb]", string0);
      
      int int1 = byteString1.size();
      assertSame(byteString1, byteString2);
      assertEquals(8, int1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("l,5_LgSG]wAlAN#%Q");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      byteString0.equals(byteBuffer0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-18);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.hashCode();
      ByteString byteString2 = byteString0.md5();
      byteString2.EMPTY.sha256();
      byteString0.toAsciiUppercase();
      Buffer buffer0 = new Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, (byte) (-18));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l,5_LgSG]wAlAN#%Q");
      charset0.encode("l,5_LgSG]wAlAN#%Q");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)72;
      byteArray0[5] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString1.indexOf(byteArray0);
      byteString1.startsWith(byteString0);
      ByteString byteString2 = byteString1.md5();
      byteString2.substring((int) (byte)6);
      byte[] byteArray1 = byteString1.toByteArray();
      // Undeclared exception!
      try { 
        ByteString.of(byteArray1, (-4162), 629);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=6 offset=-4162 byteCount=629
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink.hmacSha512(buffer0, byteString0);
      byteString0.hashCode();
      ByteString byteString1 = byteString0.md5();
      ByteString byteString2 = byteString0.toAsciiUppercase();
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong((byte)0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      Charset.defaultCharset();
      ByteString byteString3 = new ByteString(byteArray0);
      boolean boolean0 = byteString3.equals(byteString2);
      assertTrue(boolean0);
      
      byteString0.size();
      String string0 = byteString3.hex();
      assertEquals("bbbbbb", string0);
      assertFalse(byteString3.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString1.compareTo(byteString0);
      // Undeclared exception!
      try { 
        byteString0.getByte(48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("l,5_LgSG]wAlAN#%Q");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)72;
      byteArray0[5] = (byte)72;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString1.indexOf(byteArray0);
      byteString1.startsWith(byteString0);
      byteString0.EMPTY.string(charset0);
      byteString0.size();
      byteString1.compareTo(byteString0);
      // Undeclared exception!
      try { 
        byteString1.getByte((byte)72);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      ByteString byteString1 = byteString0.sha256();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-123);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-45);
      byteString1.size();
      byteString1.compareTo(byteString0);
      byteString1.indexOf(byteString0);
      byteString1.rangeEquals(32, byteString1, (-285), (int) (byte)0);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 1560, 97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=1560 byteCount=97
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-3);
      byteArray0[0] = (byte) (-3);
      byteArray0[2] = (byte) (-3);
      byteArray0[0] = (byte) (-3);
      byteArray0[5] = (byte) (-3);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha1();
      MockFile mockFile0 = new MockFile("|#*NPo");
      MockFile mockFile1 = new MockFile("|#*NPo");
      Charset.defaultCharset();
      byteString0.rangeEquals((int) (byte) (-3), byteArray0, 653, (-451));
      byteString0.equals(byteString0);
      Charset charset0 = Charset.defaultCharset();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      ByteString byteString1 = ByteString.encodeUtf8("|#*NPo");
      String string0 = byteString1.string(charset0);
      assertEquals("|#*NPo", string0);
      
      int int0 = byteString1.indexOf(byteArray0, 653);
      boolean boolean0 = byteString0.rangeEquals((-451), byteString1, 698, 61);
      assertFalse(boolean0);
      
      int int1 = byteString1.compareTo(byteString0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-3);
      byteArray0[0] = (byte) (-3);
      byteArray0[2] = (byte) (-3);
      byteArray0[0] = (byte) (-3);
      byteArray0[5] = (byte) (-3);
      ByteString byteString0 = new ByteString(byteArray0);
      MockFile mockFile0 = new MockFile("|#*NPo");
      MockFile mockFile1 = new MockFile(mockFile0, "|#*NPo");
      Charset.defaultCharset();
      byteString0.EMPTY.startsWith(byteArray0);
      byteString0.sha512();
      byteString0.equals(byteString0);
      Charset.defaultCharset();
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream((byte) (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        ByteString.encodeString("eKK`Qq4t2&#c", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      ByteString byteString1 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      byteString1.startsWith(byteArray0);
      ByteString byteString2 = byteString0.sha1();
      realBufferedSource0.readByteString();
      byteString2.equals(byteString1);
      Charset.defaultCharset();
      realBufferedSource0.readUtf8Line();
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      ByteString byteString0 = ByteString.encodeUtf8("fromIndex=%s toIndex=3s");
      byteString0.toString();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("2xrQ&&1H3 jU[R.Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: x
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      ByteString byteString1 = byteString0.sha256();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-6);
      byteString0.indexOf(byteString1, 23);
      int int0 = byteString1.lastIndexOf(byteArray0);
      assertEquals((-1), int0);
      
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
      
      byteString1.size();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString1);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      Buffer buffer1 = realBufferedSource0.buffer;
      byteString1.write(buffer1);
      ByteString byteString2 = hashingSource0.hash();
      int int1 = byteString1.compareTo(byteString2);
      assertEquals(1, int1);
      
      int int2 = byteString1.indexOf(byteString2);
      ByteString byteString3 = new ByteString(byteArray0);
      boolean boolean0 = byteString3.rangeEquals(32, byteString1, (-362), 1162);
      assertFalse(boolean0);
      
      byteString3.size();
      byteString0.hex();
      int int3 = byteString0.compareTo(byteString1);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      byteString0.lastIndexOf(byteArray0);
      byteString1.toString();
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, (int) (byte)0, (-108));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.toString();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString2 = ByteString.encodeString("[hex=000000]", charset0);
      ByteString byteString3 = byteString1.hmacSha1(byteString0);
      byteString3.lastIndexOf(byteArray0);
      String string0 = byteString1.toString();
      assertEquals("[hex=bbbbbb]", string0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      ByteString byteString4 = new ByteString(byteArray0);
      ByteString byteString5 = byteString0.sha512();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString6 = realBufferedSource0.readByteString(0L);
      byteString6.md5();
      byteString2.base64Url();
      int int1 = byteString6.lastIndexOf(byteString5, (-1881));
      ByteString byteString7 = byteString5.substring(0, (int) (byte)0);
      int int2 = byteString4.hashCode();
      assertFalse(int2 == int1);
      
      int int3 = byteString7.lastIndexOf(byteString3, 0);
      int int4 = byteString7.compareTo(byteString1);
      assertTrue(int4 == int3);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      byteString0.indexOf(byteArray0, (int) (byte)13);
      ByteString byteString2 = new ByteString(byteArray0);
      byteString1.toString();
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString3 = ByteString.encodeString("[hex=76a1c7a0dd3ee06be0af80914874c18e1891f250cc25a2c335b299b1fcf171572d372d7c6003a73082814520ad49e2a06c54ae51f230443726310f67378911e1]", charset0);
      ByteString byteString4 = byteString2.hmacSha1(byteString1);
      byteString1.lastIndexOf(byteArray0);
      byteString4.md5();
      byteString3.toString();
      int int0 = ObjectStreamConstants.baseWireHandle;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        ByteString.read(pipedInputStream0, 61);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      byteString0.indexOf(byteArray0, (int) (byte)10);
      ByteString byteString2 = new ByteString(byteArray0);
      byteString1.toString();
      Charset.defaultCharset();
      ByteString byteString3 = new ByteString(byteArray0);
      byteString3.toString();
      int int0 = ObjectStreamConstants.baseWireHandle;
      byteString3.sha512();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byteString2.base64();
      byteString1.lastIndexOf(byteArray0, 15);
      // Undeclared exception!
      try { 
        byteString2.lastIndexOf((byte[]) null, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)38;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.of(byteArray0);
      byteString0.utf8();
      byteString0.hex();
      byteString0.sha512();
      byte[] byteArray1 = new byte[7];
      byteArray1[1] = (byte) (-113);
      byteArray1[2] = (byte)75;
      byteArray1[3] = (byte)75;
      byteString0.EMPTY.indexOf(byteString1);
      byteArray1[4] = (byte)75;
      byteString0.EMPTY.hmacSha1(byteString1);
      byteArray1[5] = (byte) (-82);
      byteArray1[6] = (byte) (-82);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      try { 
        ByteString.read(byteArrayInputStream0, (byte)75);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString1.EMPTY.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ByteString[] byteStringArray0 = new ByteString[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Source source0 = null;
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Bv(=4r4,qC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: v
         //
         verifyException("okio.ByteString", e);
      }
  }
}
