/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 17:03:45 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONReaderScanner_ESTest extends JSONReaderScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      boolean boolean1 = jSONReaderScanner0.isEOF();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = '<';
      charArray0[2] = 'u';
      charArray0[3] = 'W';
      charArray0[4] = 'v';
      charArray0[5] = '\\';
      charArray0[6] = '0';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1744);
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(inputStreamReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("MAD7P@/V0'");
      char char0 = jSONReaderScanner0.charAt(74);
      assertEquals('\u0000', char0);
      
      jSONReaderScanner0.subString(4, 1779);
      assertEquals('M', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("K");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.indexOf('e', 1325);
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertTrue(boolean0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$VALUES", (-1055));
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      boolean boolean0 = jSONReaderScanner0.charArrayCompare(charArray0);
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!)?g", 16376);
      jSONReaderScanner0.bp = 16376;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanType("!)?g");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("wv6]!{fSFq)2]nmCkG]");
      jSONReaderScanner0.close();
      jSONReaderScanner0.bytesValue();
      assertEquals('w', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = 'A';
      charArray0[2] = '~';
      charArray0[3] = 'Q';
      charArray0[4] = 'g';
      charArray0[5] = '<';
      charArray0[6] = '-';
      charArray0[7] = 'b';
      charArray0[8] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16384);
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals('G', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 99;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]w^4", 99);
      int int1 = 0;
      jSONReaderScanner0.indexOf('n', 0);
      int int2 = 799;
      char[] charArray0 = new char[2];
      charArray0[0] = '_';
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.toZoneId();
      TimeZone.setDefault(timeZone0);
      jSONReaderScanner0.timeZone = timeZone0;
      charArray0[1] = '7';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(799, charArray0, 799, 799);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.subString(0, 1779);
      jSONReaderScanner0.close();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = '\'';
      charArray0[2] = 'p';
      charArray0[3] = 'q';
      charArray0[4] = 'z';
      charArray0[5] = 'P';
      charArray0[6] = 'j';
      charArray0[7] = 'v';
      int int0 = 66;
      int int1 = 6;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66, 6);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.close();
      int int2 = 39;
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      Locale locale0 = Locale.KOREA;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      jSONReaderScanner0.calendar = calendar0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldString(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[1] = 'k';
      charArray0[2] = 'C';
      charArray0[3] = 'r';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(68, 325, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("MAD7P@/V0'");
      jSONReaderScanner0.close();
      System.setCurrentTimeMillis((-1921L));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("k[mvr{61b:NmP1*", (-2998));
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-2998), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("DisableCircularReferenceDetect");
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(0, (-661));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -661
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$VALUES");
      jSONReaderScanner0.bp = 529;
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-661), (-661));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -661
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46");
      int int0 = 11;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONReaderScanner0.scanInt('n');
      jSONReaderScanner0.bp = 11;
      int int1 = 747;
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloatArray2(charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$VALUES");
      Locale locale0 = Locale.CANADA_FRENCH;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.bp = 529;
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-<i^iL]C_F=7^HZ;O");
      jSONReaderScanner0.nextToken(76);
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = 'C';
      charArray0[3] = '<';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 527, 527);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 22);
      jSONReaderScanner1.scanFieldDecimal(charArray0);
      jSONReaderScanner0.close();
      jSONReaderScanner1.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$VALUES");
      jSONReaderScanner0.nextToken(76);
      char char0 = jSONReaderScanner0.charAt(117);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!)g", 16384);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.nextToken(0);
      jSONReaderScanner0.token = 16384;
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.charAt(16384);
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = 'N';
      charArray0[3] = ')';
      charArray0[4] = '\u001A';
      charArray0[5] = ')';
      jSONReaderScanner0.charArrayCompare(charArray0);
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("d");
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.nextToken((-541));
      jSONReaderScanner0.isEOF();
      assertEquals(1, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("J@EyBbE,n-FB@VVFs'");
      jSONReaderScanner1.charAt(76);
      char[] charArray0 = new char[4];
      charArray0[0] = '\u0000';
      charArray0[1] = '\u0000';
      charArray0[2] = '\u0000';
      charArray0[3] = '\u0000';
      jSONReaderScanner1.charArrayCompare(charArray0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 76, 1685);
      boolean boolean0 = jSONReaderScanner2.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("DisableCircularReferenceDetect");
      jSONReaderScanner0.scanIdent();
      String string0 = jSONReaderScanner0.numberString();
      assertEquals("DisableCircularReferenceDetect", string0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-<i^iL]C_F=7^HtZ;O");
      jSONReaderScanner0.nextToken(76);
      assertEquals(2, jSONReaderScanner0.token());
      
      String string0 = jSONReaderScanner0.numberString();
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "illegal state, textLength is zero");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!)g", 16384);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.nextToken(0);
      System.setCurrentTimeMillis((-1921L));
      int int0 = 37;
      jSONReaderScanner0.charAt(37);
      SymbolTable symbolTable0 = new SymbolTable(16384);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol(16384, 37, (-76), symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$VALUES");
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$VALUES");
      Calendar calendar0 = MockCalendar.getInstance();
      jSONReaderScanner0.calendar = calendar0;
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.numberString();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-661), 3104);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" 6kA");
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'B';
      charArray0[1] = '\u0081';
      charArray0[2] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1474, (-539));
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.nextToken(20);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.isBlankInput();
      char char0 = jSONReaderScanner0.charAt(20);
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.numberString();
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("aK\"");
      jSONReaderScanner0.scanIdent();
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.scanIdent();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = 'b';
      charArray0[2] = '[';
      charArray0[3] = 'v';
      charArray0[4] = 'F';
      charArray0[5] = '7';
      charArray0[6] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'b');
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.isBlankInput();
      assertEquals('[', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.numberString();
      boolean boolean0 = jSONReaderScanner0.charArrayCompare(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'F';
      charArray0[1] = '\\';
      charArray0[2] = '9';
      charArray0[3] = '}';
      charArray0[4] = ',';
      charArray0[5] = '}';
      charArray0[6] = 'B';
      charArray0[7] = '?';
      charArray0[8] = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 76);
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!)?g");
      char[] charArray0 = new char[9];
      charArray0[0] = 'v';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'C';
      jSONReaderScanner0.indexOf('v', 2424);
      charArray0[4] = 'C';
      charArray0[5] = '$';
      charArray0[6] = 'P';
      charArray0[7] = 'C';
      charArray0[8] = 'k';
      jSONReaderScanner0.charAt(2424);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("XseVAL?ES");
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
