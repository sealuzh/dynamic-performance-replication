/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:43:55 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.RegexSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "*cLl&'b26sJy:";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("*cLl&'b26sJy:");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.scheduler(queueScheduler0);
      RegexSelector regexSelector0 = null;
      try {
        regexSelector0 = new RegexSelector("*cLl&'b26sJy:", (-1230));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.selector.RegexSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Thread interrupted when sleep";
      stringArray0[1] = "Thread interrupted when sleep";
      stringArray0[2] = "Thread interrupted when sleep";
      stringArray0[3] = "Thread interrupted when sleep";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("LmJ5|T<x':^H");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      spider0.clearPipeline();
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Z");
      Spider spider0 = new Spider(simplePageProcessor0);
      Downloader downloader0 = null;
      spider0.setDownloader((Downloader) null);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("LmJ5|T<x':^H");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      spider0.setUUID("LmJ5|T<x':^H");
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      spider0.setSpawnUrl(true);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider2 = spider1.pipeline(jsonFilePipeline0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop success!");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      Spider spider2 = spider1.setSpawnUrl(true);
      Request[] requestArray0 = new Request[2];
      QueueScheduler queueScheduler0 = new QueueScheduler();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider3 = spider0.setPipelines(linkedList0);
      queueScheduler0.poll(spider3);
      requestArray0[0] = null;
      // Undeclared exception!
      try { 
        spider2.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Z");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader((Downloader) null);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      spider1.downloader((Downloader) null);
      spider0.getSite();
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Spider {} closed! {} pages downloaded.", "");
      Request request0 = new Request("Spider {} closed! {} pages downloaded.");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-2207));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("LmJ5|T<x':^H");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      Json json0 = page0.getJson();
      Class<Pipeline> class0 = Pipeline.class;
      json0.toList(class0);
      Spider spider1 = spider0.setPipelines((List<Pipeline>) null);
      Spider spider2 = spider1.startRequest((List<Request>) null);
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.sleep(0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider0.setSpiderListeners(linkedList0);
      long long0 = spider0.getPageCount();
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider {} closed! {} pages downloaded.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.pipeline(resultItemsCollectorPipeline0);
      Spider spider2 = spider1.clearPipeline();
      Spider spider3 = spider2.thread(5);
      spider3.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider3.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Request[] requestArray0 = new Request[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Page page0 = new Page();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("wrong proto type map ");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7n7eeb-F^#-xyo C!#4");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.setExitWhenComplete(false);
      List<Request> list0 = page0.getTargetRequests();
      Spider spider3 = spider2.startRequest(list0);
      spider3.clearPipeline();
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("}$!@/22g\"(");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(6);
      Spider spider2 = spider1.thread((ExecutorService) forkJoinPool0, 6);
      spider2.setEmptySleepTime(1);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("LmJ5|T<x':^H");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      spider0.clearPipeline();
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      spider0.setSpawnUrl(true);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider1.stop();
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Request request0 = new Request();
      Request request1 = request0.setUrl("LmJ5|T<x':^H");
      Request request2 = request1.setBinaryContent(true);
      Request request3 = request0.setCharset("");
      Request request4 = request3.setMethod(".Yq?pQO\"'U];S1H");
      spider1.pipeline(jsonFilePipeline0);
      spider1.getSite();
      request2.setUrl("_cycle_tried_times");
      // Undeclared exception!
      try { 
        spider0.onError(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.clearPipeline();
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      List<SpiderListener> list0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(list0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider2 = spider0.pipeline(multiPagePipeline0);
      spider1.setScheduler((Scheduler) null);
      spider0.startRequest((List<Request>) null);
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UYQ.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider1 = spider0.startUrls(list0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider2 = spider1.addPipeline(filePipeline0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "UYQ.";
      stringArray0[1] = "/";
      stringArray0[2] = "UYQ.";
      stringArray0[3] = "UYQ.";
      stringArray0[4] = "UYQ.";
      stringArray0[5] = "UYQ.";
      stringArray0[6] = "/";
      stringArray0[7] = "/";
      stringArray0[8] = "UYQ.";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QueueScheduler queueScheduler0 = new QueueScheduler();
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.JAPANESE;
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getScheduler();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("l <3@!y1{o3@:#N.fh&");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider1 = spider0.setUUID("omit-xml-declaration");
      Spider spider2 = spider1.setSpawnUrl(true);
      spider1.clearPipeline();
      Spider spider3 = spider1.setSpawnUrl(false);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2068);
      spider2.thread((ExecutorService) scheduledThreadPoolExecutor0, 125);
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      Request request0 = new Request();
      request0.setBinaryContent(false);
      request0.setMethod("");
      spider3.setScheduler(priorityScheduler0);
      spider3.checkIfRunning();
      spider3.runAsync();
      assertFalse(spider1.isSpawnUrl());
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.getUnicodeLocaleAttributes();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("h.|\"}^|;D23QY'h%`da");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      HashSetDuplicateRemover hashSetDuplicateRemover1 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider2 = spider1.addPipeline(jsonFilePipeline0);
      spider2.setScheduler(fileCacheQueueScheduler0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("LmJ5|T<x':^H");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      Spider spider1 = spider0.setUUID("LmJ5|T<x':^H");
      String[] stringArray0 = new String[0];
      Spider spider2 = spider0.addUrl(stringArray0);
      Spider spider3 = spider0.setSpawnUrl(true);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider2.setEmptySleepTime((-1497));
      spider1.getSite();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(30000);
      // Undeclared exception!
      try { 
        spider3.thread((ExecutorService) scheduledThreadPoolExecutor0, (-1497));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("LmJ5|T<x':^H");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      spider0.setUUID("LmJ5|T<x':^H");
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      spider0.setSpawnUrl(true);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider1.stop();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1000);
      Spider spider2 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      Spider spider3 = spider2.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider3.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("LmJ5|T<x':^H");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      Spider spider1 = spider0.clearPipeline();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      spider0.getScheduler();
      Locale locale0 = Locale.JAPAN;
      locale0.getUnicodeLocaleKeys();
      spider0.getSpiderListeners();
      int int0 = 454;
      Spider.Status.fromValue(454);
      spider1.getCollectorPipeline();
      String string0 = "";
      spider0.stop();
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(1000, 454, 0L, timeUnit0, linkedTransferQueue0, threadFactory0, threadPoolExecutor_AbortPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("l <3@!y1{o3@:#N.fh&");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider1 = spider0.setUUID("omit-xml-declaration");
      Spider spider2 = spider1.setSpawnUrl(true);
      Spider spider3 = spider1.clearPipeline();
      spider1.setSpawnUrl(false);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2068);
      spider2.thread((ExecutorService) scheduledThreadPoolExecutor0, 125);
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      Request request0 = new Request();
      Request request1 = request0.setUrl("_cycle_tried_times");
      Request request2 = request1.setBinaryContent(false);
      Spider spider4 = spider3.setScheduler(priorityScheduler0);
      Spider spider5 = spider4.setUUID("omit-xml-declaration");
      spider4.thread((ExecutorService) null, 5);
      FilePipeline filePipeline0 = new FilePipeline("/");
      spider1.addPipeline(jsonFilePipeline0);
      spider5.getStatus();
      // Undeclared exception!
      try { 
        spider1.onError(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("LmJ5|T<x':^H");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      Spider spider1 = spider0.clearPipeline();
      Site site0 = spider0.getSite();
      Site site1 = site0.setDisableCookieManagement(true);
      Site site2 = site1.setDomain("/c*[bix");
      Site site3 = site2.setUseGzip(true);
      Site site4 = site3.setRetrySleepTime(2102);
      spider1.site = site4;
      String[] stringArray0 = new String[0];
      Spider spider2 = spider0.addUrl(stringArray0);
      spider0.setSpawnUrl(true);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider2.stop();
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1000);
      Spider spider3 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      Spider spider4 = spider3.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider4.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&.{2,5};|&#.{2,5};");
      Spider spider0 = Spider.create(simplePageProcessor0);
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }
}
