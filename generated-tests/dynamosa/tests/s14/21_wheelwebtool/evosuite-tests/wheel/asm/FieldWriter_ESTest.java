/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 00:26:36 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      classWriter0.index = (-2118);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2118), "B", "B", "org.apache.commons.io.filefilter.HiddenFileFilter", "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2221);
      classWriter0.index = (-2118);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "pnVL ~", "pnVL ~", "pnVL ~", "pnVL ~");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1407);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "KSNB;hQ8\"nhobP.L", "KSNB;hQ8\"nhobP.L", "KSNB;hQ8\"nhobP.L", "KSNB;hQ8\"nhobP.L");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3131));
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-3131), "V=.!2\"]iuLM^:1J4", "", "mORcJDnq[6G2{M", "V=.!2\"]iuLM^:1J4");
      // Undeclared exception!
      try { 
        fieldVisitor0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1732));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 955, "P$TL ~", "1tgW[*JApX", "*", "1tgW[*JApX");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3131));
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField((-128), "", "mORcJDnq[6G2{M", "", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      Attribute attribute0 = new Attribute("JSR/RET are not supported with computeFrames option");
      fieldWriter0.visitAttribute(attribute0);
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2213);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "U", "U", "U", "U");
      ByteVector byteVector0 = new ByteVector(2);
      byteVector0.length = 2213;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1656));
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 2818, (String) null, (String) null, (String) null, classWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3605));
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, (-3605), " RH c]?", " RH c]?", " RH c]?", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3131));
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField((-128), "", "mORcJDnq[6G2{M", "", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      Attribute attribute0 = new Attribute("JSR/RET are not supported with computeFrames option");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3131));
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField((-128), "", "mORcJDnq[6G2{M", "", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAnnotation("org.apache.commons.io.filefilter.NameFileFilter", true);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2036);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 16777218, "wheel.asm.FieldWriter", "<{V|{&b4", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1724));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1724), "", "", "", "");
      classWriter0.version = (-1724);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1767));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1767), "f4?Lb@-!4osjdO=/E+?", "f4?Lb@-!4osjdO=/E+?", "f4?Lb@-!4osjdO=/E+?", "f4?Lb@-!4osjdO=/E+?");
      Attribute attribute0 = new Attribute("f4?Lb@-!4osjdO=/E+?");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1732));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "char", "char", "char", "char");
      fieldWriter0.visitAnnotation("char", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2195);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "", "");
      fieldWriter0.visitAnnotation("", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1724));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1724), "", "", "", "");
      classWriter0.version = (-1724);
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3131));
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField((-128), "", "mORcJDnq[6G2{M", "", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1656));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "P$TL ~", "P$TL ~", "P$TL ~", "P$TL ~");
      fieldWriter0.visitAnnotation("P$TL ~", false);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2036);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 16777218, "wheel.asm.FieldWriter", "<{V|{&b4", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1724));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1724), "", "", "", "");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-889275713), "", "Xc*5WymyX).0Cl~ckH", "r=", (Object) null);
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1656));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "RuntimeVisibleAnnotations", "The array of prefixes must not be null", "wk=rDWovlMp>z", "RuntimeVisibleAnnotations");
      fieldWriter0.visitEnd();
  }
}
