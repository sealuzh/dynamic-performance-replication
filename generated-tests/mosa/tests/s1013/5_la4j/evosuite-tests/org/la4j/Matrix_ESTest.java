/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:23:49 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(469);
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero(1858, (-3452));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1858x-3452
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(10);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '11' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = basic2DMatrix0.toRowMajorSparseMatrix();
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      
      basic2DMatrix0.min();
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.columns());
      
      basic2DMatrix0.maxInRow(27);
      basic2DMatrix0.min();
      assertEquals(0, basic2DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.iteratorOfColumn(1236);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CRSMatrix cRSMatrix0 = new CRSMatrix();
          Matrix matrix0 = cRSMatrix0.insert((Matrix) cRSMatrix0);
          Matrix.identity(38);
          double double0 = matrix0.minInColumn(38);
          assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6, 6);
      cRSMatrix0.columnMajorIterator();
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("%6 6 6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CRSMatrix cRSMatrix0 = CRSMatrix.identity(10);
          cRSMatrix0.toCSV();
          cRSMatrix0.removeFirstColumn();
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6, 6);
      cRSMatrix0.removeLastColumn();
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 1477);
      rowMajorSparseMatrix0.columnMajorIterator();
      rowMajorSparseMatrix0.setColumn(1477, (double) 0);
      rowMajorSparseMatrix0.blankOfRows(1220);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CRSMatrix.zero(6, 6, 6);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(6);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertRow(3163, (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6, 6);
      cRSMatrix0.determinant();
      Matrix matrix0 = Matrix.zero(6, 9);
      matrix0.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.insert((Matrix) cRSMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.randomSymmetric(Integer.MAX_VALUE, (double) Integer.MAX_VALUE, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2, 2);
      cCSMatrix0.rank();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toDenseMatrix();
      cRSMatrix0.insert((Matrix) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 6;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(6);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) basic2DMatrix0, 6, 6, 6, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 6 rows and 6 cols at 6, 6 in a 6x6 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toMatrixMarket();
      CCSMatrix cCSMatrix0 = CCSMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n0 0\n");
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) basic2DMatrix0, Integer.MAX_VALUE, (-1), (-1), 10, (-1), 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1x17
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("5@Nv}m5gygr,Y.L:K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.sliceTopLeft(1365, 1365);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.norm();
      cRSMatrix0.insert((Matrix) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      SparseMatrix sparseMatrix0 = cRSMatrix0.toSparseMatrix();
      cRSMatrix0.insert((Matrix) sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) null, 4, 4, 4, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 4, 4
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.insert((Matrix) cRSMatrix0);
      matrix0.hadamardProduct(cRSMatrix0);
      cRSMatrix0.minInColumn(2756);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cRSMatrix0.transform(matrixFunction0);
      // Undeclared exception!
      try { 
        matrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Object object0 = new Object();
      Matrix matrix0 = cRSMatrix0.insert((Matrix) cRSMatrix0);
      matrix0.toCSV();
      // Undeclared exception!
      try { 
        matrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CRSMatrix.zero(6, 6, 6);
      MockRandom mockRandom0 = new MockRandom(6);
      Matrix.random(13, 6, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Object object0 = new Object();
      cRSMatrix0.insert((Matrix) cRSMatrix0);
      cRSMatrix0.product();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = null;
      Matrix matrix0 = Matrix.from1DArray(37, 37, (double[]) null);
      // Undeclared exception!
      try { 
        matrix0.product();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Matrix.diagonal(7, (-1952.20663578));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Matrix.constant(3, 1630, 1630);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1751, 1751, 1751);
      int int0 = Double.BYTES;
      rowMajorSparseMatrix0.removeRow(8);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 2);
      Integer integer0 = new Integer(2);
      DenseMatrix.diagonal(2, 2);
      cRSMatrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toMatrixMarket();
      CCSMatrix cCSMatrix0 = CCSMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n0 0\n");
      cCSMatrix0.toMatrixMarket();
      basic2DMatrix0.min();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix0.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2, 2);
      cCSMatrix0.rank();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2, 2);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.foldRow(2, vectorAccumulator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(36);
      cRSMatrix0.toCSV();
      Integer integer0 = new Integer(6);
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(36, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(24, 24, 24);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      cCSMatrix0.rank();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.insert((Matrix) cRSMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert(matrix0, (-1290), (-1290), 32, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1290, -1290
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.insert((Matrix) cRSMatrix0);
      cRSMatrix0.kroneckerProduct(matrix0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Object object0 = new Object();
          MockRandom mockRandom0 = new MockRandom(23);
          Matrix matrix0 = Matrix.randomSymmetric(23, mockRandom0);
          matrix0.blankOfRows(23);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2492);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Object object0 = new Object();
      cRSMatrix0.insert((Matrix) cRSMatrix0);
      cRSMatrix0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.toCSV();
      cRSMatrix0.sum();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(4);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.setColumn((-2268), (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-2268' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6, 6);
      cRSMatrix0.determinant();
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInColumn((-361));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-361' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6, 6);
      RowMajorSparseMatrix.identity(6);
      cRSMatrix0.determinant();
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(6, mockRandom0);
      cRSMatrix0.subtract((Matrix) basic2DMatrix0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 3264.26429652);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = columnMajorSparseMatrix0.transform(matrixFunction0);
      Matrix matrix1 = matrix0.rotate();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix1.non(matrixPredicate0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(3264.26429652).when(vectorAccumulator0).accumulate();
      matrix0.foldRow((-703), vectorAccumulator0);
      // Undeclared exception!
      try { 
        Matrix.unit((-703), (-703));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.nonZeroRowMajorIterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateColumn((-984), vectorFunction0);
      cRSMatrix0.insert((Matrix) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object object0 = new Object();
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 2, 2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transform(matrixFunction0);
      matrix0.toDenseMatrix();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(9);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(9, 1.7231144594117647);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) columnMajorSparseMatrix0, 10, 680, 9, (-1569));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 9x-1569
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.get((-2045222520), (-50));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2045222520' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toMatrixMarket();
      CCSMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 2);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cRSMatrix0.swapRows(2, 2);
      cCSMatrix0.toMatrixMarket();
      CCSMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general column-major\n0 0 0\n");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 6;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(6);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      rowMajorSparseMatrix0.iterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.transformRow(6, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(14, 1.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      matrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        matrix0.foldRow((-714), (VectorAccumulator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -714
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.insert((Matrix) cRSMatrix0);
      // Undeclared exception!
      try { 
        Matrix.zero((-2743), (-2743));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2743x-2743
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom((-1L));
      CRSMatrix cRSMatrix0 = new CRSMatrix(37, 14, 14);
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      denseMatrix0.setRow(14, (-1537.33081398));
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-48);
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.insert((Matrix) cRSMatrix0);
      matrix0.divide((-1223.874));
      matrix0.subtract((Matrix) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6, 6);
      cRSMatrix0.sliceTopLeft(6, 6);
      cRSMatrix0.determinant();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom((-1L));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(225, 0.0, (Random) mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      columnMajorSparseMatrix0.foldRow(0, vectorAccumulator0);
      Object object0 = new Object();
      rowMajorSparseMatrix0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6, 6);
      cRSMatrix0.copyOfRows(6);
      cRSMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.max();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(17, 0, mockRandom0);
      denseMatrix0.transformRow(1700, (VectorFunction) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6, 6);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(6);
      rowMajorSparseMatrix0.determinant();
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) rowMajorSparseMatrix0, 6, 9, 1000, 1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 6, 9
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(9);
      cRSMatrix0.toMatrixMarket();
      CCSMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n9 9 9\n1 1 1.000\n2 2 1.000\n3 3 1.000\n4 4 1.000\n5 5 1.000\n6 6 1.000\n7 7 1.000\n8 8 1.000\n9 9 1.000\n");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2, 2);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateColumn(2, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldColumns(vectorAccumulator0);
      cRSMatrix0.insert((Matrix) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toMatrixMarket();
      cRSMatrix0.equals((Object) "%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix0.equals((Object) cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2, 2);
      cCSMatrix0.rank();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      columnMajorSparseMatrix0.subtract((Matrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      DenseMatrix.identity(1024);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      basic2DMatrix0.non(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 9;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(9);
      cRSMatrix0.trace();
      double double0 = 1.7231144594117647;
      Matrix matrix0 = cRSMatrix0.rotate();
      // Undeclared exception!
      try { 
        cRSMatrix0.insert(matrix0, (-365), 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -365x9
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      SparseVector sparseVector0 = SparseVector.zero(0);
      columnMajorSparseMatrix0.multiply((Vector) sparseVector0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(9);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix1.insert((Matrix) cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 9 rows and 9 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom((-1L));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(225, 0.0, (Random) mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.update((MatrixFunction) null);
      rowMajorSparseMatrix0.norm();
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) columnMajorSparseMatrix0, 648, (-1251), 13, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 648, -1251
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2, 2);
      cCSMatrix0.rank();
      cCSMatrix0.trace();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 1210);
      // Undeclared exception!
      try { 
        cRSMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6, 6);
      cRSMatrix0.determinant();
      cRSMatrix0.swapColumns(6, 6);
      int int0 = 5;
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-2091), 5, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2091x5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(9);
      cRSMatrix0.transpose();
      cRSMatrix0.copyOfColumns(9);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1751, 1751, 1751);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1231, 702.252);
      rowMajorSparseMatrix0.equals((Object) columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[0];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 2, 1);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertColumn(14, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6, 6);
      cRSMatrix0.nonZeroIterator();
      cRSMatrix0.determinant();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      cRSMatrix0.power(17);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1, 1);
      denseMatrix0.multiplyByItsTranspose();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      cRSMatrix0.toCSV();
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      decimalFormat0.setParseIntegerOnly(false);
      cRSMatrix0.nonZeroRowMajorIterator();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      Matrix matrix0 = cCSMatrix0.kroneckerProduct(cRSMatrix0);
      cRSMatrix0.determinant();
      org.evosuite.runtime.Random.setNextRandom(1);
      matrix0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 37);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        matrix0.swapColumns(37, (-1262));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '37' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toMatrixMarket();
      CCSMatrix cCSMatrix0 = CCSMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n0 0\n");
      cCSMatrix0.add((Matrix) basic2DMatrix0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(6, 6);
      cRSMatrix0.equals((Object) columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6, 6);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(6);
      double double0 = new Integer(6);
      cRSMatrix0.equals((Matrix) rowMajorSparseMatrix0, 6);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CRSMatrix.zero(6, 6, 6);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(6);
      Vector vector0 = Vector.zero(6);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertColumn((-106), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[0];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(14, 898, 3124);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertColumn(0, denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 14.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1751, 1751, 0);
      CCSMatrix cCSMatrix0 = new CCSMatrix(1751, 1751);
      rowMajorSparseMatrix0.columns();
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, (-1586.694742));
      double[] doubleArray0 = new double[0];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      rowMajorSparseMatrix0.insertColumn(1151, denseVector0);
      int int0 = 667;
      Matrix matrix0 = cRSMatrix0.removeRow(int0);
      matrix0.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6, 6);
      RowMajorSparseMatrix.identity(6);
      cRSMatrix0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(6);
      // Undeclared exception!
      try { 
        cCSMatrix0.swapRows(3, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6, 6);
      cRSMatrix0.toColumnVector();
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Object object0 = new Object();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(11);
      cRSMatrix1.shuffle();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 6;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(6);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.toCSV();
      // Undeclared exception!
      try { 
        matrix0.minInRow((-711));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-711' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2034, 2034, 51);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Vector vector0 = cCSMatrix0.getRow(65);
      Matrix matrix0 = cRSMatrix0.insertRow(51, vector0);
      int int0 = 3540;
      matrix0.blankOfColumns(int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 6;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6, 6);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow((-1275), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom(14L);
      int int1 = 32;
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(32, 0.0, (Random) mockRandom0);
      Matrix matrix0 = cRSMatrix0.subtract(4.9E-324);
      CRSMatrix.zero(32, 1);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      DenseVector denseVector0 = DenseVector.unit(32);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, denseVector0);
      matrix0.insertColumn(1, vector0);
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      int int2 = 635;
      matrix0.minInRow(635);
      double double0 = 0.0;
      ColumnMajorSparseMatrix.randomSymmetric(int1, double0, (Random) mockRandom0);
      DenseVector.constant(int0, int2);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      cRSMatrix0.toMatrixMarket(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int int0 = 1084;
      // Undeclared exception!
      try { 
        basic2DMatrix0.sliceBottomRight(1084, 1084);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [1084..0][1084..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6, 6);
      cRSMatrix0.determinant();
      cRSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6, 6);
      Integer integer0 = new Integer(6);
      cRSMatrix0.insert((Matrix) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.zero(43, Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ColumnMajorSparseMatrix.diagonal(1751, 1751);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2, 2);
      cCSMatrix0.rank();
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceTopLeft(0, (-22583480));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..0][0..-22583480].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(9);
      cRSMatrix0.transpose();
      cRSMatrix0.sliceBottomRight(9, 9);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(6);
      rowMajorSparseMatrix0.toColumnMajorSparseMatrix();
      int int0 = Double.BYTES;
      Object object0 = new Object();
      rowMajorSparseMatrix0.toRowVector();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.transpose();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      RowMajorSparseMatrix.zero(0, 0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.zero(7, 7);
      int[] intArray0 = new int[7];
      basic2DMatrix1.transpose();
      intArray0[0] = 1477;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 7;
      intArray0[4] = 7;
      intArray0[5] = 0;
      intArray0[6] = 1477;
      // Undeclared exception!
      try { 
        basic2DMatrix1.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(6);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      matrix0.removeFirstColumn();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1173.5300633343463).when(matrixAccumulator0).accumulate();
      matrix0.fold(matrixAccumulator0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      rowMajorSparseMatrix0.non(advancedMatrixPredicate0);
      matrix0.rows();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      rowMajorSparseMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix0.insert((Matrix) cRSMatrix0);
      cRSMatrix0.toString();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 1751;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1751, 1751, 1751);
      int int1 = 2;
      // Undeclared exception!
      rowMajorSparseMatrix0.setColumn(2, (double) 1751);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      cRSMatrix0.toMatrixMarket();
      Matrix matrix0 = cRSMatrix0.transpose();
      cRSMatrix0.swapRows(6, 6);
      cRSMatrix0.toBinary();
      matrix0.rank();
      cRSMatrix0.determinant();
      // Undeclared exception!
      try { 
        cRSMatrix0.power((-1744));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1744.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(1341, 1341);
      // Undeclared exception!
      try { 
        Matrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1342
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(6, 6);
      double double0 = new Integer(6);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.add(1.0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.transformColumn(6, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 10);
      rowMajorSparseMatrix0.columnMajorIterator();
      rowMajorSparseMatrix0.transpose();
      Matrix matrix0 = rowMajorSparseMatrix0.blank();
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(7, 0, mockRandom0);
      denseMatrix0.product();
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, 0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 0 rows and 10 cols at 0, 0 from a 7x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(1, (double) 1, (Random) null);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 2);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1 rows and 2 cols at 0, 0 in a 1x1 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.insert((Matrix) cRSMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cRSMatrix0.transformColumn(1616, vectorFunction0);
      // Undeclared exception!
      try { 
        matrix0.set(1616, Integer.MAX_VALUE, 1616);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1616' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Object object0 = new Object();
      cRSMatrix0.insert((Matrix) cRSMatrix0);
      cRSMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(6);
      rowMajorSparseMatrix0.transpose();
      rowMajorSparseMatrix0.swapRows(6, 6);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(6, 0.0);
      rowMajorSparseMatrix0.toBinary();
      columnMajorSparseMatrix0.rank();
      rowMajorSparseMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      RowMajorSparseMatrix.identity(4);
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("\n");
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      CCSMatrix cCSMatrix0 = CCSMatrix.block(basic2DMatrix0, basic2DMatrix0, basic2DMatrix0, basic2DMatrix0);
      cCSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.toCSV();
      cRSMatrix0.mkString("1.000, 0.000\n0.000, 1.000\n", "?#WS$[guNYUI'he.gW");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      cRSMatrix0.transpose();
      cRSMatrix0.swapRows(6, 6);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(6, 0.0);
      cRSMatrix0.toBinary();
      columnMajorSparseMatrix0.rank();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseVector denseVector0 = DenseVector.zero(10);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, denseVector0);
      cRSMatrix0.insertRow(0, vector0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      basic2DMatrix0.mkString(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1751, 1751, 1751);
      Matrix matrix0 = rowMajorSparseMatrix0.blankOfColumns(1229);
      rowMajorSparseMatrix0.insert(matrix0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.subtract((-3018.62));
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6, 6);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(6);
      rowMajorSparseMatrix0.determinant();
      Vector vector0 = Vector.zero(83);
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(6, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 83. Should be: 6.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      String string0 = cRSMatrix0.toCSV();
      CRSMatrix cRSMatrix1 = new CRSMatrix(13, 13);
      Integer integer0 = new Integer(13);
      Matrix matrix0 = cRSMatrix1.multiply((Matrix) cRSMatrix0);
      Matrix.fromCSV(string0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldColumns(vectorAccumulator0);
      cRSMatrix1.toString();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CRSMatrix.zero(6, 6, 6);
      RowMajorSparseMatrix.identity(1);
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("        ");
      // Undeclared exception!
      try { 
        cRSMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "1";
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV("1");
      int[] intArray0 = new int[1];
      intArray0[0] = 6;
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 2, 2);
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(10);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(2, vectorFunction0);
      cRSMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 4387;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(4387, 4387);
      int int1 = 717;
      // Undeclared exception!
      denseMatrix0.add(38.0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int[] intArray0 = new int[1];
      DenseMatrix denseMatrix0 = DenseMatrix.identity(247);
      denseMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(13, 13, 13);
      String string0 = denseMatrix0.toMatrixMarket();
      CCSMatrix cCSMatrix0 = CCSMatrix.fromMatrixMarket(string0);
      cCSMatrix0.toMatrixMarket();
      // Undeclared exception!
      try { 
        Basic2DMatrix.block(cCSMatrix0, denseMatrix0, cCSMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      cRSMatrix0.toCSV();
      ColumnMajorSparseMatrix.diagonal(13, 13);
      Matrix matrix0 = cRSMatrix0.copyOfShape(13, 48);
      cRSMatrix0.equals((Object) matrix0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = 3536.5923212237;
      doubleArray1[3] = 353.3;
      doubleArray1[4] = 2.0;
      doubleArray1[5] = 3280.83075;
      doubleArray1[6] = (-1918.9821343552865);
      doubleArray1[7] = 5.0;
      doubleArray1[8] = 1.1102230246251565E-14;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 5.0;
      doubleArray2[1] = 2.0;
      doubleArray2[2] = (-757.10528);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = (-757.10528);
      doubleArray3[2] = 5.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray0[2] = doubleArray3;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.rotate();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[][] doubleArray0 = new double[0][2];
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      basic2DMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(9);
      CCSMatrix cCSMatrix0 = new CCSMatrix(9, 9);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      cRSMatrix0.mkString(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 1818;
      int int1 = 1841;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.subtract((double) 1841);
      int[] intArray0 = new int[9];
      intArray0[1] = 1841;
      intArray0[2] = 1818;
      intArray0[2] = 1841;
      intArray0[4] = 1818;
      intArray0[5] = 1841;
      intArray0[6] = 1841;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.updateAt(1841, 235, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1841
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }
}
