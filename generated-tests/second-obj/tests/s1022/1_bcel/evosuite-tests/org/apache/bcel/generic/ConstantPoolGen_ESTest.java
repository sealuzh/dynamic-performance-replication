/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:22:57 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PrintStream;
import java.lang.reflect.Member;
import java.util.Locale;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      int int0 = 1034;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1034);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantString constantString0 = new ConstantString(1034);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantString0.toString();
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1034
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstant(47);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-455), (-1256));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("X5");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addUtf8("X5");
      constantPoolGen0.addLong(280L);
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant(256, constantArray0[1]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 256
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = Short.BYTES;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupDouble(2);
      constantPoolGen0.addFieldref("DBf3&U-:H", "DBf3&U-:H", "DBf3&U-:H");
      int int1 = Long.SIZE;
      assertFalse(int1 == int2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-1444);
      int int0 = Character.MAX_RADIX;
      ObjectType objectType0 = Type.CLASS;
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass(objectType0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRINGBUFFER;
      constantPoolGen0.addClass(objectType0);
      int int0 = constantPoolGen0.lookupFieldref("#", "#", "#");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(1L);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = null;
      constantPoolGen0.lookupInterfaceMethodref((String) null, (String) null, (String) null);
      String string1 = "";
      // Undeclared exception!
      try { 
        constantPoolGen0.addString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = Short.BYTES;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupDouble(2);
      int int1 = constantPoolGen0.addString("The 'index' is not of type int but of type ");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(0.0);
      int int0 = constantPoolGen0.lookupNameAndType("nop", (String) null);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = 1;
      constantPoolGen0.toString();
      int int0 = constantPoolGen0.addLong(1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger(1004);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantClass constantClass0 = new ConstantClass((-1777));
      constantArray0[2] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((-896));
      constantArray0[2] = (Constant) constantLong0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupInterfaceMethodref("E]", "E]", "E]");
      assertEquals((-1), int0);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      int int0 = 253;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(253, 253);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2475);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic(0, 2475);
      constantArray0[2] = (Constant) constantInvokeDynamic2;
      ConstantInteger constantInteger0 = new ConstantInteger(2475);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[3] = (Constant) constantInteger1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Character.BYTES;
      constantPoolGen0.addUtf8("' is not assignment compatible with '");
      constantPoolGen0.toString();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(37, 3);
      constantNameAndType0.copy();
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant((-1114), constantNameAndType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1114
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.lookupInteger(3914);
      assertEquals((-1), int0);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      constantPoolGen0.addFloat((-414.504F));
      int int0 = constantPoolGen0.lookupInteger(2);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(31, 92);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantDouble constantDouble0 = new ConstantDouble(11.527879813180169);
      ConstantDouble constantDouble1 = new ConstantDouble(31);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantDouble constantDouble2 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble2;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = Pattern.LITERAL;
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupFieldref("", "", "");
      int int0 = constantPoolGen0.addFloat((-45.99484F));
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(1.0);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addDouble(1.0);
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-3895), 256);
      constantMethodHandle0.copy();
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantPool0.copy();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-896), (-896));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[2] = (Constant) constantFieldref1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-896), 48);
      ConstantFieldref constantFieldref2 = new ConstantFieldref(constantFieldref0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble((-3061.0425));
      constantPoolGen0.lookupDouble((-896));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(0.0);
      constantPoolGen0.addInteger(46);
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPoolGen0.getFinalConstantPool();
      int int0 = constantPoolGen0.addInteger(46);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong((-4572279521687896064L));
      constantPoolGen0.getFinalConstantPool();
      assertEquals(5, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantLong constantLong0 = new ConstantLong((-896));
      constantArray0[2] = (Constant) constantLong0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantArray0[2], constantPoolGen1);
      assertEquals(1, constantPoolGen1.getSize());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-1L));
      int int0 = 252;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(252, 252);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType1, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass(2146846630);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2146846630, 2146846630);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantFieldref constantFieldref2 = new ConstantFieldref((-1722), 2146846630);
      ConstantFieldref constantFieldref3 = new ConstantFieldref(2146846630, (-1496));
      ConstantFieldref constantFieldref4 = new ConstantFieldref(constantFieldref2);
      ConstantFieldref constantFieldref5 = new ConstantFieldref(16384, 1157545984);
      ConstantFieldref constantFieldref6 = new ConstantFieldref(constantFieldref3);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupDouble(0.0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2683), (-2683));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantNameAndType1.setSignatureIndex(30);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2146846630
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(210);
      constantArray0[0] = (Constant) constantString0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(223, 210);
      Constant constant0 = constantNameAndType0.copy();
      constantArray0[1] = constant0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Oy;6-A2");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "'. Otherwise, you couldn't invoke a method since an array has no methods (not to speak of a return address).";
      constantPoolGen0.lookupInterfaceMethodref("The stack top type '", "The stack top type '", "'. Otherwise, you couldn't invoke a method since an array has no methods (not to speak of a return address).");
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Pattern.MULTILINE;
      MethodGen methodGen0 = null;
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2629, 2629);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupInterfaceMethodref("Unknown constant type ", "{6K=|*6/(2", "Z,\"E.Sa\"sd^eV;rLZP;");
      assertEquals((-1), int0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DCMPL dCMPL0 = new DCMPL();
      ConstantString constantString0 = new ConstantString(0);
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      Constant.setComparator((BCELComparator) null);
      Constant[] constantArray0 = new Constant[16];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      constantPoolGen0.addClass("(h^C.`4KRzWkRrq|&");
      constantPoolGen0.lookupClass("(h^C.`4KRzWkRrq|&");
      constantPoolGen0.getFinalConstantPool();
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(614);
      constantPoolGen0.lookupFieldref("\"", "\"", "\"");
      constantPoolGen0.addClass("\"");
      constantPoolGen0.lookupInteger((-1475));
      constantPoolGen0.lookupUtf8("\"");
      int int0 = constantPoolGen0.lookupDouble((-1));
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constant[] constantArray0 = new Constant[22];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(48, 222);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("nyJVG3D&O8,OQWq");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("nyJVG3D&O8,OQWq");
      String string0 = "iadd";
      String string1 = "bijauj";
      MockPrintStream mockPrintStream0 = new MockPrintStream("bijauj");
      mockPrintStream0.append('\"');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addConstant(constantUtf8_0, constantPoolGen0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(228, 256);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInvokeDynamic0, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = 228, name_and_type_index = 256)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      D2F d2F0 = new D2F();
      Type type0 = d2F0.getType(constantPoolGen0);
      ArrayType arrayType0 = new ArrayType(type0, 246);
      constantPoolGen0.addArrayClass(arrayType0);
      assertEquals(3, constantPoolGen0.getSize());
      
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Byte.SIZE;
      constantPoolGen0.size = 8;
      constantPoolGen0.addFloat(3804.446F);
      int int1 = constantPoolGen0.lookupFloat(8);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-896), 19);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantLong constantLong0 = new ConstantLong((-896));
      constantArray0[2] = (Constant) constantLong0;
      constantLong0.setBytes(307L);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupInterfaceMethodref("E]", "E]", "E]");
      int int0 = constantPoolGen0.addLong(23L);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantLong constantLong0 = new ConstantLong(2028L);
      ConstantString constantString0 = new ConstantString((-1343));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[2] = (Constant) constantString1;
      JavaClass.getComparator();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[2], constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1343
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      int int0 = Character.MIN_RADIX;
      Integer integer0 = new Integer(2);
      int int1 = Float.BYTES;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J]$NN\"");
      int int2 = Short.SIZE;
      ConstantInteger constantInteger0 = new ConstantInteger((-774));
      constantInteger0.clone();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2, 256);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      int int3 = constantPoolGen0.lookupDouble(1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-455), (-1256));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-UT");
      mockFile0.mkdir();
      mockFile0.getAbsoluteFile();
      Object object0 = new Object();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addClass("-UT");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      constantPoolGen0.getFinalConstantPool();
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addFloat((-1975.21F));
      constantPoolGen0.addNameAndType("Yx", ")L#,b>(\"&bs");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      constantPoolGen0.lookupInterfaceMethodref("Yx", "`,ZJ", (String) null);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1), (-1292));
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-30));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("wQUT");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wQUT");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(141, 141);
      MockFile mockFile0 = new MockFile("wQUT");
      mockFile0.mkdir();
      mockFile0.getAbsoluteFile();
      Object object0 = new Object();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("wQUT", "wQUT", "wQUT");
      constantPoolGen0.addClass("wQUT");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantFieldref0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      constantPoolGen0.addInteger((-1));
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-896), 48);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantLong constantLong0 = new ConstantLong((-896));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Character.SIZE;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addString("Unexpected constant type: ");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-896), 48);
      constantNameAndType0.setNameIndex(1581);
      int int1 = constantPoolGen1.addString("Unexpected constant type: ");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.CLASS;
      constantPoolGen0.addClass(objectType0);
      constantPoolGen0.addClass(objectType0);
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) objectType0;
      typeArray0[1] = (Type) objectType0;
      typeArray0[2] = (Type) objectType0;
      typeArray0[3] = (Type) objectType0;
      typeArray0[4] = (Type) objectType0;
      typeArray0[5] = (Type) objectType0;
      String[] stringArray0 = new String[1];
      InstructionList instructionList0 = new InstructionList();
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(2, objectType0, typeArray0, stringArray0, "0O @\"5ec", stringArray0[0], instructionList0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Mismatch in argument array lengths: 6 vs. 1
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-896), 48);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantMethodHandle1.setReferenceKind((-627));
      ConstantLong constantLong0 = new ConstantLong((-896));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Unexpected constant type: ");
      int int0 = Double.MAX_EXPONENT;
      BCELComparator bCELComparator0 = MethodGen.getComparator();
      Constant.setComparator(bCELComparator0);
      constantMethodHandle1.copy();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      int int1 = Double.SIZE;
      ConstantInteger constantInteger0 = new ConstantInteger(1023);
      ConstantInteger constantInteger1 = new ConstantInteger((-896));
      constantPoolGen0.getSize();
      constantPoolGen0.addClass("FM^6BRd@AK4");
      constantPoolGen0.addInterfaceMethodref("Unexpected constant type: ", "FM^6BRd@AK4", "Unexpected constant type: ");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(7, constantPoolGen0.getSize());
      
      int int2 = Long.BYTES;
      assertFalse(int2 == int3);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((-1159.0));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      String string0 = "-y/cC7UbuLrRa";
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantDouble0, constantPoolGen1);
      String string1 = "";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byteArrayOutputStream0.write(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      Locale locale0 = Locale.JAPANESE;
      String string2 = null;
      byte[] byteArray0 = new byte[0];
      byteArrayOutputStream0.write(byteArray0);
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Constant[] constantArray0 = new Constant[22];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1626), 48);
      ConstantLong constantLong0 = new ConstantLong((-1626));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      MethodGen.getComparator();
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle((-1626), (-1626));
      int int0 = Character.MIN_CODE_POINT;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      int int1 = Short.SIZE;
      int int2 = Byte.SIZE;
      constantPoolGen0.addMethodref("}0x8Fy[>4G/%Xo6%", "}0x8Fy[>4G/%Xo6%", "}0x8Fy[>4G/%Xo6%");
      constantMethodHandle1.setReferenceIndex((-795));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.addFloat(25);
      assertEquals(26, constantPoolGen0.getSize());
      
      int int3 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen2.getSize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Constant[] constantArray0 = new Constant[22];
      int int0 = (-898);
      ConstantLong constantLong0 = new ConstantLong((-898));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int1 = Float.MAX_EXPONENT;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.lookupClass("}UL6RMLOyJ4%~i%?0ana-+");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1879), (-1));
      constantPoolGen1.constants = constantArray0;
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1879
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Constant[] constantArray0 = new Constant[38];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Unexpected constant type: ");
      int int0 = Double.BYTES;
      MethodGen.getComparator();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.lookupInterfaceMethodref("Unexpected constant type: ", "ma[He", "dw]Yu_SAFo>Pg");
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      ConstantFloat constantFloat0 = new ConstantFloat(8);
      constantPoolGen2.addConstant(constantFloat0, constantPoolGen0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(256, (-1));
      constantNameAndType0.setNameIndex((-1742));
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("K=B-j6");
      MockFile mockFile0 = new MockFile("K=B-j6");
      Object object0 = new Object();
      mockFile0.getCanonicalPath();
      MethodGen.getComparator();
      mockFile0.delete();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[1] = (Constant) constantUtf8_0;
      mockFile0.setReadOnly();
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = Long.BYTES;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int1 = constantPoolGen0.getSize();
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      int int0 = Character.MIN_RADIX;
      Integer integer0 = new Integer(2);
      int int1 = Float.BYTES;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("The 'index' is not o type int but of type ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The 'index' is not o type int but of type ");
      int int2 = Short.SIZE;
      ConstantInteger constantInteger0 = new ConstantInteger(4);
      constantInteger0.clone();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(129, (-796));
      constantMethodref0.setClassIndex(2);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantMethodref0, constantPoolGen0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantString cannot be cast to org.apache.bcel.classfile.ConstantClass
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addFieldref("M\tL:0e*CPJiUu$P", "M\tL:0e*CPJiUu$P", "M\tL:0e*CPJiUu$P");
      constantPoolGen0.lookupFieldref("M\tL:0e*CPJiUu$P", "M\tL:0e*CPJiUu$P", "M\tL:0e*CPJiUu$P");
      String string0 = "N0!,BuIk";
      int int0 = Byte.SIZE;
      String string1 = "w@BbGx#%}+ <3^N8";
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref((String) null, "M\tL:0e*CPJiUu$P", "w@BbGx#%}+ <3^N8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("v,f1Ev", "v,f1Ev", "v,f1Ev");
      ConstantString constantString0 = new ConstantString(245);
      ConstantString constantString1 = new ConstantString(constantString0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&");
      constantPoolGen0.setConstant(245, constantString1);
      int int0 = constantPoolGen0.addNameAndType("v,f1Ev", "v,f1Ev");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }
}
