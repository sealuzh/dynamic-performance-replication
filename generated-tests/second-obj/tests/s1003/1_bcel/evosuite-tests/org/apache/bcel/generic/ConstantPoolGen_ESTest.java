/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:33:11 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.DataOutputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(178);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = constantPoolGen0.toString();
      assertEquals("", string0);
      
      constantPoolGen0.getConstant(113);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-2551L));
      constantPoolGen0.lookupClass("7D}IG@P0");
      constantPoolGen0.getFinalConstantPool();
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref(":", ":", ":");
      int int0 = constantPoolGen0.lookupDouble(4);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(14);
      int int0 = constantPoolGen0.addLong(1);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 0);
      constantMethodHandle0.copy();
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantLong constantLong0 = new ConstantLong(0);
      constantArray0[3] = (Constant) constantLong0;
      constantMethodHandle0.setReferenceKind(0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(242, (-3866));
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle((-3866), 0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupClass(":");
      int int0 = constantPoolGen0.addLong((-3866));
      assertEquals(10, constantPoolGen0.getSize());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addMethodref("!wd(Pra", ":", ":");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(223);
      constantArray0[0] = (Constant) constantString0;
      ConstantInteger constantInteger0 = new ConstantInteger(223);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(223, 223);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(96);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[1] = (Constant) constantInteger0;
      constantInteger0.setBytes(96);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(5, constantPoolGen0.getSize());
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString((-1076));
      constantArray0[0] = (Constant) constantString0;
      ConstantDouble constantDouble0 = new ConstantDouble((-1076));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("q\"[/yfyX-");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(1);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantMethodType1.toString();
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupClass("!wd(Pra");
      int int0 = constantPoolGen0.addFloat((-2173.497F));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(47);
      constantArray0[0] = (Constant) constantClass0;
      ConstantClass constantClass1 = new ConstantClass(2);
      constantArray0[1] = (Constant) constantClass1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-2939));
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(212, (-2939));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(256, 256);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantFloat constantFloat0 = new ConstantFloat(1168.195F);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-272), 2);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(105);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      constantMethodType1.toString();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(105, 105);
      constantNameAndType0.toString();
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantInteger constantInteger0 = new ConstantInteger(105);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      constantInteger1.setBytes(3934);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRINGBUFFER;
      constantPoolGen0.addClass(objectType0);
      int int0 = constantPoolGen0.lookupFloat(2);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(0.75F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantFloat constantFloat2 = new ConstantFloat(988.3983F);
      constantArray0[1] = (Constant) constantFloat2;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-969));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.lookupFloat(0.0F);
      assertEquals((-1), int0);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[11];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.adjustSize();
      constantPoolGen0.toString();
      int int0 = Short.BYTES;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-5359), (-5359));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantInvokeDynamic0.clone();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-80);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-94);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addClass("caload");
      constantPoolGen0.addDouble(2);
      constantPoolGen0.lookupClass("caload");
      int int0 = constantPoolGen0.lookupInterfaceMethodref("caload", "G7]S", "G7]S");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "";
      constantPoolGen0.lookupMethodref("", "", "");
      int int0 = Pattern.UNIX_LINES;
      int int1 = Double.SIZE;
      constantPoolGen0.addLong((-1));
      int int2 = Pattern.COMMENTS;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(64, (-1822));
      String string1 = "Deprecated";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Deprecated");
      constantPoolGen0.addClass("");
      constantPoolGen0.addClass("");
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(4, 64);
      // Undeclared exception!
      try { 
        constantPoolGen0.getConstant((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 585;
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble((-3106.335354626253));
      int int0 = constantPoolGen0.addDouble((-3106.335354626253));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "#US5CnH8XTc7<41";
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      constantPoolGen0.adjustSize();
      int int0 = Pattern.LITERAL;
      constantPoolGen0.addFloat(1.0F);
      constantPoolGen0.lookupInteger(585);
      // Undeclared exception!
      try { 
        constantPoolGen0.getConstant(585);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 585
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("qs[/yNyX-");
      Constant[] constantArray0 = new Constant[9];
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      constantArray0[8] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupInterfaceMethodref("aw$`zvNfXJMJ", "qs[/yNyX-", "8w!MR6S-x!A%wt_");
      constantPoolGen0.addDouble((-1));
      int int0 = Float.MIN_EXPONENT;
      constantPoolGen0.lookupInterfaceMethodref("", "bq#Vmzf?", "aw$`zvNfXJMJ");
      constantPoolGen0.lookupClass("bq#Vmzf?");
      assertEquals(11, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      constantPoolGen0.addInteger(478);
      constantPoolGen0.addInteger(478);
      assertEquals(2, constantPoolGen0.getSize());
      
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      constantPoolGen0.addInteger(489);
      constantPoolGen0.addInteger(1);
      assertEquals(3, constantPoolGen0.getSize());
      
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("%3o'*?h6", "%3o'*?h6", "%3o'*?h6");
      constantPoolGen0.lookupNameAndType("%3o'*?h6", "%3o'*?h6");
      int int0 = Character.BYTES;
      int int1 = constantPoolGen0.addNameAndType("%3o'*?h6", "%3o'*?h6");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFieldref("6 ?", (String) null, (String) null);
      constantPoolGen0.lookupString("*Mq{]:(");
      String string0 = "_;";
      constantPoolGen0.lookupInterfaceMethodref((String) null, "_;", "The FileFilter must not be null");
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 0);
      constantMethodHandle0.copy();
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantLong constantLong0 = new ConstantLong(0);
      constantArray0[3] = (Constant) constantLong0;
      constantMethodHandle0.setReferenceKind(0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1982292586));
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1982292586), (-3866));
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(3857, (-3866));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupClass(":");
      assertEquals((-1), int0);
      
      int int1 = constantPoolGen0.addLong(0);
      assertEquals(3, int1);
      assertEquals(8, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantFloat constantFloat0 = new ConstantFloat(1553.67F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addConstant(constantFloat1, constantPoolGen1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(70, (-1));
      constantPoolGen0.lookupInterfaceMethodref((String) null, "Hs4UIfD|>", (String) null);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[15];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      constantArray0[1] = (Constant) constantMethodType0;
      constantMethodType0.toString();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = Short.SIZE;
      constantPoolGen0.addFloat((-2173.497F));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodType0, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodType[16](descriptor_index = 1)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = ObjectStreamConstants.baseWireHandle;
      int int1 = Pattern.LITERAL;
      ConstantInteger constantInteger0 = new ConstantInteger((-1994091957));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantInteger0.setBytes(16);
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(8257536, 8257536);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantNameAndType1.copy();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("`");
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen0);
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant(8257536, constantNameAndType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8257536
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(12, (-623));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantString constantString0 = new ConstantString((-4356));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(29, 29);
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType(201, 201);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4356
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[7];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(12, (-1994091957));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType((-43), 489);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantNameAndType0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1994091957
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.getSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      ConstantInteger constantInteger0 = new ConstantInteger(96);
      Constant[] constantArray0 = new Constant[10];
      constantInteger0.setBytes(96);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1879048196), 96);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(96, (-1879048196));
      constantNameAndType1.copy();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantNameAndType0.toString();
      int int0 = Long.SIZE;
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(2.0F);
      int int0 = Long.SIZE;
      constantPoolGen0.lookupFloat(1);
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong((-1));
      constantArray0[0] = (Constant) constantLong0;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantString constantString0 = new ConstantString((-850));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupFieldref("CONSTANT_Integer[3](bytes = -1)", "CONSTANT_Integer[3](bytes = -1)", "v~");
      constantPoolGen1.addConstant(constantLong0, constantPoolGen2);
      constantPoolGen1.getConstantPool();
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant(2737, constantArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2737
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Exception handler target is null instruction");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantLong constantLong0 = new ConstantLong(3080L);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1), 1200);
      byte byte0 = Character.DIRECTIONALITY_OTHER_NEUTRALS;
      Constant[] constantArray0 = new Constant[9];
      ConstantUtf8.getInstance("Exception handler target is null instruction");
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_1;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantFloat0;
      constantArray0[7] = (Constant) constantUtf8_1;
      constantArray0[8] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addFloat(0.0F);
      int int0 = constantPoolGen0.addDouble(6);
      assertEquals(11, constantPoolGen0.getSize());
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      constantPoolGen0.lookupDouble(3573.091);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addLong((byte) (-128));
      constantPoolGen0.adjustSize();
      String string0 = ":jqgBR0";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constantPoolGen0.addInteger(3);
      String string1 = "B;z";
      constantPoolGen0.addClass("B;z");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      MULTIANEWARRAY mULTIANEWARRAY0 = null;
      try {
        mULTIANEWARRAY0 = new MULTIANEWARRAY(1, (byte) (-128));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid dimensions value: -128
         //
         verifyException("org.apache.bcel.generic.MULTIANEWARRAY", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      constantPoolGen0.addDouble((-3106.335354626253));
      constantPoolGen0.lookupDouble(0.0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      int int0 = ObjectStreamConstants.baseWireHandle;
      constantPoolGen0.adjustSize();
      constantPoolGen0.addNameAndType("!wd(Pra%0y_fUTCsi[p\"X", "!wd(Pra%0y_fUTCsi[p\"X");
      constantPoolGen0.addInteger(4);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.getConstantPool();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("!wd(Pra%0y_fUTCsi[p\"X", "!wd(Pra%0y_fUTCsi[p\"X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"!wd(Pra%0y_fUTCsi[p\"X\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      Constant[] constantArray0 = new Constant[10];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      String string0 = "P>+/Fe@v99J%kgS[";
      constantPoolGen0.addMethodref("P>+/Fe@v99J%kgS[", "P>+/Fe@v99J%kgS[", "P>+/Fe@v99J%kgS[");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = Character.MIN_RADIX;
      ObjectType objectType1 = Type.OBJECT;
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      InstructionList instructionList0 = new InstructionList();
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(93, 93);
      ConstantInteger constantInteger0 = new ConstantInteger(93);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addInterfaceMethodref("68kh>1pf", "68kh>1pf", "68kh>1pf");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(4, 1395);
      constantPoolGen0.lookupInterfaceMethodref("%n{Sczg-Uz", (String) null, (String) null);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantMethodHandle0, (ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.size;
      int int1 = 1035;
      String string0 = "2~o!";
      ConstantClass constantClass0 = new ConstantClass(256);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 256
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupUtf8("");
      constantPoolGen0.size = (-1);
      constantPoolGen0.lookupInterfaceMethodref("", "$", "");
      constantPoolGen0.lookupFieldref("", "", "");
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref("land", "", (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("M~P8QEuM%[+0P(");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.lookupNameAndType(" I\"-~shi x", "4KCm5flcd8sU!");
      int int0 = Byte.SIZE;
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.getConstantPool();
      constantPoolGen1.lookupInteger(2);
      constantPoolGen0.getConstant(238);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-2600.93));
      Constant.setComparator((BCELComparator) null);
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, visitor0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupNameAndType("wmJHXV98lH'HYLEY", "2oca]Varwable do n6t mowrabGut '");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantDouble0, constantPoolGen2);
      Method method0 = new Method();
      Method method1 = new Method(method0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantArray0);
      constantPoolGen3.setConstant(1, constantArray0[0]);
      // Undeclared exception!
      try { 
        constantPoolGen1.addClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "@JP;*'*";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@JP;*'*");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string1 = "jC[e` ;DJg(";
      constantPoolGen0.addFieldref("jC[e` ;DJg(", "jC[e` ;DJg(", "jC[e` ;DJg(");
      LNEG lNEG0 = (LNEG)InstructionConstants.LNEG;
      constantPoolGen0.addString("jC[e` ;DJg(");
      Constant[] constantArray0 = new Constant[7];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(4, 4);
      constantArray0[0] = (Constant) constantFieldref0;
      int int0 = Pattern.CASE_INSENSITIVE;
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantDouble constantDouble0 = new ConstantDouble(2);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("&", "org.apache.bcel.generic.ConstantPoolGen");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"org.apache.bcel.generic.ConstantPoolGen\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addUtf8("4SREWBjc5m?\u0002Nyw");
      String string0 = "%G";
      constantPoolGen0.lookupMethodref("%G", "%G", "T/9@");
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1), (-1));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantMethodref1.setNameAndTypeIndex(1);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodref1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1246, (-1994091957));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)83);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      constantNameAndType0.dump(dataOutputStream0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1994091957), (byte)83);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1994091957
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)37;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addInteger(236);
      constantPoolGen0.addString("");
      constantPoolGen0.addString("");
      int int0 = constantPoolGen0.lookupDouble((-1563.1291865595));
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "2oca]Varwable do n6t mowrabGut '";
      constantPoolGen0.lookupFieldref("2oca]Varwable do n6t mowrabGut '", "2oca]Varwable do n6t mowrabGut '", "2oca]Varwable do n6t mowrabGut '");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constantPoolGen0.toString();
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      constantPoolGen0.addInterfaceMethodref("2oca]Varwable do n6t mowrabGut '", "", "2oca]Varwable do n6t mowrabGut '");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      constantPoolGen0.addDouble(0.0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, (-1));
      ConstantDouble constantDouble0 = new ConstantDouble((-1));
      ConstantDouble constantDouble1 = new ConstantDouble(0.0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      org.apache.bcel.classfile.Visitor visitor1 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantString constantString0 = new ConstantString(2);
      int int1 = Float.SIZE;
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen();
      int int2 = Character.MIN_CODE_POINT;
      int int3 = Pattern.DOTALL;
      constantPoolGen2.addInterfaceMethodref("2oca]Varwable do n6t mowrabGut '", "", "2oca]Varwable do n6t mowrabGut '");
      ConstantPoolGen constantPoolGen4 = new ConstantPoolGen(constantPool0);
      constantPoolGen4.addLong(2);
      ConstantPoolGen constantPoolGen5 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref("", (String) null, "2oca]Varwable do n6t mowrabGut '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }
}
