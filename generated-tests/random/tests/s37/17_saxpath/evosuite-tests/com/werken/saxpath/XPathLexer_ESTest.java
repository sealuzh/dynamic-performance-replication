/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 22:29:02 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.not();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V[DJ=Bx(#9a");
      xPathLexer0.dots();
      xPathLexer0.dots();
      xPathLexer0.colon();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("ms]j%cG&uQv7VE5Fgw");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&s1pDHd~i+ZQ1gFf@P");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      String string0 = xPathLexer0.getXPath();
      assertEquals("com.werken.saxpath.XPathLexer", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("");
      String string0 = xPathLexer0.getXPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-Q%Pj5TJT=+$*'!");
      Token token0 = xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals("-", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_pXFJqL~yI");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("_pXFJqL", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals("~yI", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      int int0 = xPathLexer0.endPosition();
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals("o", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("m", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(13, token3.getTokenType());
      assertEquals(".", token3.getTokenText());
      
      Token token4 = xPathLexer0.equals();
      assertEquals("w", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals("e", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals("r", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
      
      char char0 = xPathLexer0.LA((-2));
      assertEquals('w', char0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.setPreviousToken((Token) null);
      assertEquals("[ (", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":?R}");
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.setPreviousToken(token0);
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#3bQ~k%");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('!');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-Q%Pj5TJT=+$*'!");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('7');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".a!aec");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      boolean boolean0 = xPathLexer0.isIdentifierChar(' ');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fe$2V");
      boolean boolean0 = xPathLexer0.isIdentifierChar('a');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      // Undeclared exception!
      try { 
        xPathLexer0.LA(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      char char0 = xPathLexer0.LA(228);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.consume((-2980));
      // Undeclared exception!
      try { 
        xPathLexer0.whitespace();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bfn.F&B>9:eT~&G2");
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.consume((-433));
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6,#HrP6$GF7)t+(v\"3");
      xPathLexer0.consume((-2403));
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("*9RUj]u8n93h$UbQ.Oj");
      xPathLexer0.consume((-1048));
      // Undeclared exception!
      try { 
        xPathLexer0.dots();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-1715));
      // Undeclared exception!
      try { 
        xPathLexer0.dots();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Hk^d?TpAmZ&Ky/?1%5");
      xPathLexer0.consume((-677));
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = null;
      try {
        xPathLexer0 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = xPathLexer0.getXPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("D/p^j");
      Token token0 = xPathLexer0.slashes();
      assertEquals("D/", token0.getTokenText());
      assertEquals(12, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.leftParen();
      assertEquals("o", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(14, token1.getTokenType());
      assertEquals("m.", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("b>=tM](");
      Token token0 = xPathLexer0.not();
      assertEquals("b", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.relationalOperator();
      assertEquals(10, token1.getTokenType());
      assertEquals(">=", token1.getTokenText());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":ZF,a$]8(W<^Z");
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("[ (32) (t)");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1$Aw}^3");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.dots();
      assertEquals("$", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals("A", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals("w", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals("}", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("^", token4.getTokenText());
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"8[?K0ZaV&|pmA&\"");
      xPathLexer0.setXPath("..BRhHo9u");
      Token token0 = xPathLexer0.number();
      assertEquals(31, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":ZF,a$]8(W<^Z");
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5%+F=({$(-i@2iw]WTN");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5%+F=({$(-i@2iw]WTN");
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Tz`mob|");
      xPathLexer0.pipe();
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5%+F=({$(-i@2iw]WTN");
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("om.werken.saxpath.XPathLexer", token2.getTokenText());
      assertEquals((-1), token2.getTokenType());
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.consume();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Hk^d?TpAmZ&Ky/?1%5");
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#3bQ~k%");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".a!aec");
      Token token0 = xPathLexer0.number();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&s1pDHd~i+ZQ1gFf@P");
      Token token0 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.star();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("c", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("om.werken.saxpath.Token", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#3bQ~k%");
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("#3", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("bQ", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6,#HrP6$GF7)t+(v\"3");
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(17, token0.getTokenType());
      assertEquals("6", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.at();
      xPathLexer0.colon();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^4|?");
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("^", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("4", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(5, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("om.werken.saxpath.XPathLexer", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fe$2V");
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".0ae7rM");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(".0", token0.getTokenText());
      assertEquals(31, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("pMw:};qz|:'qJh5/c");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("M", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals("w", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(18, token3.getTokenType());
      assertEquals(":", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      assertEquals("", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("t|ntIL^g)a\"nq$aKk\"");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("t", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(17, token1.getTokenType());
      assertEquals("|", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`+{YK@;Em7");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("`", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("+", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("{YK@;Em7", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zz%P\"*Tv+`\"4.4`5");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("zz", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("KAy");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("K", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("A", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("y", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V[DJ=Bx(#9a");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("V", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("[", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("DJ", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("=", token3.getTokenText());
      
      Token token4 = xPathLexer0.equals();
      assertEquals("B", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("x", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("v_lLLgX-Yi>;");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("v_lLLgX-Yi", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("E ?u,BJ`L6yt\"rVf");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("E", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(" ", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("u", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{}_< tbGANkK{{@I");
      Token token0 = xPathLexer0.comma();
      assertEquals("{", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("}_", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("<", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("tbGANkK", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("s:)9L%^w<7,;");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("s", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^:3hjJfqX&:7mM>Z");
      xPathLexer0.setXPath("qA&rej}X6E=F|\"\"( Y");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("qA", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("rej", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1`HtX2/qWi%L^l<c");
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.at();
      assertEquals("`", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("H", token1.getTokenText());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("t", token2.getTokenText());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.number();
      assertEquals("2", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("/", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("qWi", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5pO8av}%3E V5'");
      Token token0 = xPathLexer0.plus();
      assertEquals("5", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("pO8av", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("@:>nBwu705");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("@", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals(":", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals(">", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("nBwu705", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("o", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("m.werken.saxpath.XPathLexer", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k_g:PP.t%sJHt</");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("k_g", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("eijI}'xE:EaJ");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("e", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("i", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("jI", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5%+F=({$(-i@2iw]WTN");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("+", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("F", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("=", token3.getTokenText());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals("{", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      assertEquals("$", token6.getTokenText());
      
      xPathLexer0.nextToken();
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      assertEquals("-", token7.getTokenText());
      
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer0.leftParen();
      assertEquals("@", token9.getTokenText());
      
      Token token10 = xPathLexer0.plus();
      assertEquals("2", token10.getTokenText());
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals(15, token11.getTokenType());
      assertEquals("iw", token11.getTokenText());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("LhxSP4-)");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("L", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("hxSP4-", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b0{/");
      xPathLexer0.setXPath("xg;");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("g", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bfn.F&B>9:eT~&G2");
      Token token0 = xPathLexer0.comma();
      assertEquals("b", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("fn.F", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("Q2;ud'");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("2", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals(";u", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("d", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("com.werken.saxpath.Token", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(",!b!/q");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(",!", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("b", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("co", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("m.", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("w", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.literal();
      assertEquals("rk", token3.getTokenText());
      assertEquals(27, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("n", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(".s", token5.getTokenText());
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("axpath.XPathLexer", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("UuV`'RE");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertEquals("UuV", token0.getTokenText());
      assertNotNull(token0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("`'RE", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("l,dFZ-}6moszIq");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("l", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("[", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":ZF,a$]8(W<^Z");
      Token token0 = xPathLexer0.plus();
      assertEquals(":", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("Z", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.star();
      assertEquals(",", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.not();
      assertEquals("]", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      assertEquals("(", token5.getTokenText());
      
      xPathLexer0.identifier();
      Token token6 = xPathLexer0.relationalOperator();
      assertEquals("<", token6.getTokenText());
      assertEquals(7, token6.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals("^", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("Z", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("YAj#ZJy");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("YAj", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C%p??a##I0PA%?XZ`6");
      xPathLexer0.at();
      Token token0 = xPathLexer0.notEquals();
      assertEquals("%p", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.consume(3);
      Token token1 = xPathLexer0.rightParen();
      assertEquals("#", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.colon();
      Token token2 = xPathLexer0.at();
      assertEquals("I", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("PA", token4.getTokenText());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("%", token5.getTokenText());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("?", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("XZ", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("WtBh-gaY[h&me");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("WtBh-gaY", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|8['6O.a=Ry*V<");
      Token token0 = xPathLexer0.dollar();
      assertEquals("|", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("8", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("[", token2.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.equals();
      xPathLexer0.consume((-1));
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("6", token3.getTokenText());
      
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      assertEquals("O", token4.getTokenText());
      
      xPathLexer0.notEquals();
      Token token5 = xPathLexer0.rightParen();
      assertEquals("=", token5.getTokenText());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("R", token6.getTokenText());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals("y*", token7.getTokenText());
      assertEquals(22, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("V", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("UuV`'RE");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("UuV", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("S7");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("S7", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("*9RUj]u8n93h$UbQ.Oj");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("*9", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("RUj", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?Q4|;b=N5\"=;V;");
      Token token0 = xPathLexer0.at();
      assertEquals("?", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("Q4", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C%p??a##I0PA%?XZ`6");
      xPathLexer0.at();
      xPathLexer0.consume(1);
      Token token0 = xPathLexer0.rightParen();
      assertEquals("p", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.colon();
      Token token1 = xPathLexer0.at();
      assertEquals("?", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("a", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("##", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals("I", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals("0", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("PA", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~XH'/O>Ub`Kq");
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.plus();
      assertEquals("X", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("'", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("/", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("O", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("NWQR,nNgcS");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("NWQR", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Mew.}$`YT)");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Mew.", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("(K0gAB");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("(", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("K0gAB", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("OI!JxuV kR$hQv9+B");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("O", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("I", token1.getTokenText());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("!", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("JxuV", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_pXFJqL~yI");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("_pXFJqL", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("y", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("I", token2.getTokenText());
      assertEquals((-1), token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Hk^d?TpAmZ&Ky/?1%5");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Hk", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("^d?TpAmZ&Ky/?1%5", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bG0bx|;'CWj");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("b", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("G0bx", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":ZF,a$]8(W<^Z");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("F", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("};E8");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("}", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals(";", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("E8", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D9u_a;");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("D9u_a", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("F;_C}.");
      Token token0 = xPathLexer0.dollar();
      assertEquals("F", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(";_", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("C", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bx~yA$G&y]9,HYwOw");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("x", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("~", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("y", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("A", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("wbgUz.&@");
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.comma();
      assertEquals("b", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("g", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("U", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals("z", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals(".", token4.getTokenText());
      
      xPathLexer0.at();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("@", token5.getTokenText());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      assertEquals("", token6.getTokenText());
      assertNotNull(token6);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":?R}");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("?R}", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">O*]>7tH");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(9, token0.getTokenType());
      assertEquals(">", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("=0Wy2>5\"E");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(21, token0.getTokenType());
      assertEquals("=", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("0Wy2", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|8['6O.a=Ry*V<");
      Token token0 = xPathLexer0.dollar();
      assertEquals("|", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals("8", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("[", token2.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.equals();
      xPathLexer0.consume((-1));
      Token token3 = xPathLexer0.equals();
      assertEquals("6", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals("O", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      xPathLexer0.notEquals();
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      assertEquals("=", token5.getTokenText());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("R", token6.getTokenText());
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals("y", token7.getTokenText());
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals("*V", token8.getTokenText());
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals(7, token9.getTokenType());
      assertEquals("<", token9.getTokenText());
      
      Token token10 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("rmrSl6};Y*ht| '>B");
      Token token0 = xPathLexer0.at();
      assertEquals("r", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("l", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("6", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals("}", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(";Y*ht| '>B", token5.getTokenText());
      assertEquals((-1), token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("e)2::#DyX");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("e", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals(")", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("2", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("::", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";9X");
      Token token0 = xPathLexer0.comma();
      assertEquals(";", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("9", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?Gg~kC8y7HZhri=k");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("?", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("Gg", token1.getTokenText());
      
      xPathLexer0.notEquals();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("y", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("7", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6+^5.)eSsrzKQ!J\"!");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("6", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?Q4|;b=N5\"=;V;");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("?", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("Q", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("4", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1$Aw}^3");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.dots();
      assertEquals("$", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals("A", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("w", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("}", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("^", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(30, token5.getTokenType());
      assertEquals("3", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5%+F=({$(-i@2iw]WTN");
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("+", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals("F", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("=", token2.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals("(", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      assertEquals("{", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("-", token6.getTokenText());
      
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      Token token8 = xPathLexer0.leftParen();
      assertEquals("@", token8.getTokenText());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals(30, token9.getTokenType());
      assertEquals("2", token9.getTokenText());
      
      Token token10 = xPathLexer0.plus();
      assertEquals("i", token10.getTokenText());
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals("w]WTN", token11.getTokenText());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.setXPath("[ (21) ())");
      Token token0 = xPathLexer0.at();
      assertEquals("[", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(" ", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals("2", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(30, token4.getTokenType());
      assertEquals("1", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~~SJ}0g7 Wbn#");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("SJ", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      assertNotNull(token1);
      
      Token token2 = xPathLexer0.minus();
      assertEquals("}", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("0", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1`HtX2/qWi%L^l<c");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertNotNull(token0);
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("`", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals("H", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals("t", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("2", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(11, token5.getTokenType());
      assertEquals("/", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".-%at");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(".", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(6, token1.getTokenType());
      assertEquals("-", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L\", i?");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("L", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.comma();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(",", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q55i{}q5X`~");
      xPathLexer0.setXPath("&+UZO4E9?.J!rx*LQ");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("&", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(5, token1.getTokenType());
      assertEquals("+", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C#**9SFh7lY^(");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("C", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("#", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(20, token2.getTokenType());
      assertEquals("*", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath(") (");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-T'3yjzXTs&)J.");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("-", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("T", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("", token2.getTokenText());
      assertEquals((-1), token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("wbgUz.&@");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("w", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals("b", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("g", token2.getTokenText());
      
      Token token3 = xPathLexer0.plus();
      assertEquals("U", token3.getTokenText());
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals("z", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("&@", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C%p??a##I0PA%?XZ`6");
      Token token0 = xPathLexer0.at();
      assertEquals("C", token0.getTokenText());
      
      xPathLexer0.consume(1);
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("p", token1.getTokenText());
      
      xPathLexer0.colon();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.literal();
      assertNotNull(token4);
      assertEquals(27, token4.getTokenType());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals("I0", token5.getTokenText());
      
      Token token6 = xPathLexer0.colon();
      assertEquals("P", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("A", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("%?XZ`6", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("l$'D0?");
      Token token0 = xPathLexer0.identifier();
      assertEquals("l", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("$", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals("", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"8[?K0ZaV&|pmA&\"");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(27, token0.getTokenType());
      assertEquals("8[?K0ZaV&|pmA&", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.setXPath("g8wxg!3");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("g", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("8", token1.getTokenText());
      
      xPathLexer0.whitespace();
      xPathLexer0.not();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(23, token3.getTokenType());
      assertEquals("!", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.not();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("e)2::#DyX");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("e", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Tz`mob|");
      Token token0 = xPathLexer0.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Tg4n}D]!UW(/_I");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("Tg", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("4", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("n", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("}", token3.getTokenText());
      
      Token token4 = xPathLexer0.comma();
      assertEquals("D", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(4, token5.getTokenType());
      assertEquals("]", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }
}
